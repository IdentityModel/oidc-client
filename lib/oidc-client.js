(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("electron"));
	else if(typeof define === 'function' && define.amd)
		define(["electron"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("electron")) : factory(root["electron"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_43__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var Log = exports.Log = __webpack_require__(1);
	var OidcClient = exports.OidcClient = __webpack_require__(2);
	var OidcClientSettings = exports.OidcClientSettings = __webpack_require__(3);
	var WebStorageStateStore = exports.WebStorageStateStore = __webpack_require__(4);
	var InMemoryWebStorage = exports.InMemoryWebStorage = __webpack_require__(21);
	var UserManager = exports.UserManager = __webpack_require__(22);
	var AccessTokenEvents = exports.AccessTokenEvents = __webpack_require__(31);
	var MetadataService = exports.MetadataService = __webpack_require__(7);
	var CordovaPopupNavigator = exports.CordovaPopupNavigator = __webpack_require__(38);
	var CordovaIFrameNavigator = exports.CordovaIFrameNavigator = __webpack_require__(40);
	var ElectronPopupNavigator = exports.ElectronPopupNavigator = __webpack_require__(41);
	var ElectronIFrameNavigator = exports.ElectronIFrameNavigator = __webpack_require__(44);
	var CheckSessionIFrame = exports.CheckSessionIFrame = __webpack_require__(36);
	var TokenRevocationClient = exports.TokenRevocationClient = __webpack_require__(37);
	
	exports.default = {
	    Log: Log,
	    OidcClient: OidcClient,
	    OidcClientSettings: OidcClientSettings,
	    WebStorageStateStore: WebStorageStateStore,
	    InMemoryWebStorage: InMemoryWebStorage,
	    UserManager: UserManager,
	    AccessTokenEvents: AccessTokenEvents,
	    MetadataService: MetadataService,
	    CordovaPopupNavigator: CordovaPopupNavigator,
	    CordovaIFrameNavigator: CordovaIFrameNavigator,
	    ElectronPopupNavigator: ElectronPopupNavigator,
	    ElectronIFrameNavigator: ElectronIFrameNavigator,
	    CheckSessionIFrame: CheckSessionIFrame,
	    TokenRevocationClient: TokenRevocationClient
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var nopLogger = {
	    info: function info() {},
	    warn: function warn() {},
	    error: function error() {}
	};
	
	var NONE = 0;
	var ERROR = 1;
	var WARN = 2;
	var INFO = 3;
	
	var logger = void 0;
	var level = void 0;
	
	var Log = function () {
	    function Log() {
	        _classCallCheck(this, Log);
	    }
	
	    Log.reset = function reset() {
	        level = INFO;
	        logger = nopLogger;
	    };
	
	    Log.info = function info() {
	        if (level >= INFO) {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            logger.info.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.warn = function warn() {
	        if (level >= WARN) {
	            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                args[_key2] = arguments[_key2];
	            }
	
	            logger.warn.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.error = function error() {
	        if (level >= ERROR) {
	            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                args[_key3] = arguments[_key3];
	            }
	
	            logger.error.apply(logger, Array.from(args));
	        }
	    };
	
	    _createClass(Log, null, [{
	        key: "NONE",
	        get: function get() {
	            return NONE;
	        }
	    }, {
	        key: "ERROR",
	        get: function get() {
	            return ERROR;
	        }
	    }, {
	        key: "WARN",
	        get: function get() {
	            return WARN;
	        }
	    }, {
	        key: "INFO",
	        get: function get() {
	            return INFO;
	        }
	    }, {
	        key: "level",
	        get: function get() {
	            return level;
	        },
	        set: function set(value) {
	            if (NONE <= value && value <= INFO) {
	                level = value;
	            } else {
	                throw new Error("Invalid log level");
	            }
	        }
	    }, {
	        key: "logger",
	        get: function get() {
	            return logger;
	        },
	        set: function set(value) {
	            if (value.info && value.warn && value.error) {
	                logger = value;
	            } else {
	                throw new Error("Invalid logger");
	            }
	        }
	    }]);
	
	    return Log;
	}();
	
	exports.default = Log;
	
	
	Log.reset();
	module.exports = exports['default'];

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _OidcClientSettings = __webpack_require__(3);
	
	var _OidcClientSettings2 = _interopRequireDefault(_OidcClientSettings);
	
	var _ErrorResponse = __webpack_require__(10);
	
	var _ErrorResponse2 = _interopRequireDefault(_ErrorResponse);
	
	var _SigninRequest = __webpack_require__(13);
	
	var _SigninRequest2 = _interopRequireDefault(_SigninRequest);
	
	var _SigninResponse = __webpack_require__(18);
	
	var _SigninResponse2 = _interopRequireDefault(_SigninResponse);
	
	var _SignoutRequest = __webpack_require__(19);
	
	var _SignoutRequest2 = _interopRequireDefault(_SignoutRequest);
	
	var _SignoutResponse = __webpack_require__(20);
	
	var _SignoutResponse2 = _interopRequireDefault(_SignoutResponse);
	
	var _SigninState = __webpack_require__(15);
	
	var _SigninState2 = _interopRequireDefault(_SigninState);
	
	var _State = __webpack_require__(16);
	
	var _State2 = _interopRequireDefault(_State);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcClient = function () {
	    function OidcClient() {
	        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _classCallCheck(this, OidcClient);
	
	        if (settings instanceof _OidcClientSettings2.default) {
	            this._settings = settings;
	        } else {
	            this._settings = new _OidcClientSettings2.default(settings);
	        }
	    }
	
	    OidcClient.prototype.createSigninRequest = function createSigninRequest() {
	        var _this = this;
	
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var response_type = _ref.response_type;
	        var scope = _ref.scope;
	        var redirect_uri = _ref.redirect_uri;
	        var data = _ref.data;
	        var state = _ref.state;
	        var prompt = _ref.prompt;
	        var display = _ref.display;
	        var max_age = _ref.max_age;
	        var ui_locales = _ref.ui_locales;
	        var id_token_hint = _ref.id_token_hint;
	        var login_hint = _ref.login_hint;
	        var acr_values = _ref.acr_values;
	        var resource = _ref.resource;
	        var stateStore = arguments[1];
	
	        _Log2.default.info("OidcClient.createSigninRequest");
	
	        var client_id = this._settings.client_id;
	        response_type = response_type || this._settings.response_type;
	        scope = scope || this._settings.scope;
	        redirect_uri = redirect_uri || this._settings.redirect_uri;
	
	        // id_token_hint, login_hint aren't allowed on _settings
	        prompt = prompt || this._settings.prompt;
	        display = display || this._settings.display;
	        max_age = max_age || this._settings.max_age;
	        ui_locales = ui_locales || this._settings.ui_locales;
	        acr_values = acr_values || this._settings.acr_values;
	        resource = resource || this._settings.resource;
	
	        var authority = this._settings.authority;
	
	        return this._metadataService.getAuthorizationEndpoint().then(function (url) {
	            _Log2.default.info("Received authorization endpoint", url);
	
	            var request = new _SigninRequest2.default({
	                url: url,
	                client_id: client_id,
	                redirect_uri: redirect_uri,
	                response_type: response_type,
	                scope: scope,
	                data: data || state,
	                authority: authority,
	                prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values, resource: resource
	            });
	
	            var signinState = request.state;
	            stateStore = stateStore || _this._stateStore;
	
	            return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
	                return request;
	            });
	        });
	    };
	
	    OidcClient.prototype.processSigninResponse = function processSigninResponse(url, stateStore) {
	        var _this2 = this;
	
	        _Log2.default.info("OidcClient.processSigninResponse");
	
	        var response = new _SigninResponse2.default(url);
	
	        if (!response.state) {
	            _Log2.default.error("No state in response");
	            return Promise.reject(new Error("No state in response"));
	        }
	
	        stateStore = stateStore || this._stateStore;
	
	        return stateStore.remove(response.state).then(function (storedStateString) {
	            if (!storedStateString) {
	                _Log2.default.error("No matching state found in storage");
	                throw new Error("No matching state found in storage");
	            }
	
	            var state = _SigninState2.default.fromStorageString(storedStateString);
	
	            _Log2.default.info("Received state from storage; validating response");
	            return _this2._validator.validateSigninResponse(state, response);
	        });
	    };
	
	    OidcClient.prototype.createSignoutRequest = function createSignoutRequest() {
	        var _this3 = this;
	
	        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var id_token_hint = _ref2.id_token_hint;
	        var data = _ref2.data;
	        var state = _ref2.state;
	        var post_logout_redirect_uri = _ref2.post_logout_redirect_uri;
	        var stateStore = arguments[1];
	
	        _Log2.default.info("OidcClient.createSignoutRequest");
	
	        post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;
	
	        return this._metadataService.getEndSessionEndpoint().then(function (url) {
	            if (!url) {
	                _Log2.default.error("No end session endpoint url returned");
	                throw new Error("no end session endpoint");
	            }
	
	            _Log2.default.info("Received end session endpoint", url);
	
	            var request = new _SignoutRequest2.default({
	                url: url,
	                id_token_hint: id_token_hint,
	                post_logout_redirect_uri: post_logout_redirect_uri,
	                data: data || state
	            });
	
	            var signoutState = request.state;
	            if (signoutState) {
	                _Log2.default.info("Signout request has state to persist");
	
	                stateStore = stateStore || _this3._stateStore;
	                stateStore.set(signoutState.id, signoutState.toStorageString());
	            }
	
	            return request;
	        });
	    };
	
	    OidcClient.prototype.processSignoutResponse = function processSignoutResponse(url, stateStore) {
	        var _this4 = this;
	
	        _Log2.default.info("OidcClient.processSignoutResponse");
	
	        var response = new _SignoutResponse2.default(url);
	        if (!response.state) {
	            _Log2.default.info("No state in response");
	
	            if (response.error) {
	                _Log2.default.warn("Response was error", response.error);
	                return Promise.reject(new _ErrorResponse2.default(response));
	            }
	
	            return Promise.resolve(response);
	        }
	
	        var stateKey = response.state;
	
	        stateStore = stateStore || this._stateStore;
	
	        return stateStore.remove(stateKey).then(function (storedStateString) {
	            if (!storedStateString) {
	                _Log2.default.error("No matching state found in storage");
	                throw new Error("No matching state found in storage");
	            }
	
	            var state = _State2.default.fromStorageString(storedStateString);
	
	            _Log2.default.info("Received state from storage; validating response");
	            return _this4._validator.validateSignoutResponse(state, response);
	        });
	    };
	
	    OidcClient.prototype.clearStaleState = function clearStaleState(stateStore) {
	        _Log2.default.info("OidcClient.clearStaleState");
	
	        stateStore = stateStore || this._stateStore;
	
	        return _State2.default.clearStaleState(stateStore, this.settings.staleStateAge);
	    };
	
	    _createClass(OidcClient, [{
	        key: '_stateStore',
	        get: function get() {
	            return this.settings.stateStore;
	        }
	    }, {
	        key: '_validator',
	        get: function get() {
	            return this.settings.validator;
	        }
	    }, {
	        key: '_metadataService',
	        get: function get() {
	            return this.settings.metadataService;
	        }
	    }, {
	        key: 'settings',
	        get: function get() {
	            return this._settings;
	        }
	    }, {
	        key: 'metadataService',
	        get: function get() {
	            return this._metadataService;
	        }
	    }]);
	
	    return OidcClient;
	}();
	
	exports.default = OidcClient;
	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _WebStorageStateStore = __webpack_require__(4);
	
	var _WebStorageStateStore2 = _interopRequireDefault(_WebStorageStateStore);
	
	var _ResponseValidator = __webpack_require__(6);
	
	var _ResponseValidator2 = _interopRequireDefault(_ResponseValidator);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcMetadataUrlPath = '.well-known/openid-configuration';
	
	var DefaultResponseType = "id_token";
	var DefaultScope = "openid";
	var DefaultStaleStateAge = 60; // seconds
	var DefaultClockSkewInSeconds = 60 * 5;
	
	var OidcClientSettings = function () {
	    function OidcClientSettings() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var authority = _ref.authority;
	        var metadataUrl = _ref.metadataUrl;
	        var metadata = _ref.metadata;
	        var signingKeys = _ref.signingKeys;
	        var client_id = _ref.client_id;
	        var _ref$response_type = _ref.response_type;
	        var response_type = _ref$response_type === undefined ? DefaultResponseType : _ref$response_type;
	        var _ref$scope = _ref.scope;
	        var scope = _ref$scope === undefined ? DefaultScope : _ref$scope;
	        var redirect_uri = _ref.redirect_uri;
	        var post_logout_redirect_uri = _ref.post_logout_redirect_uri;
	        var prompt = _ref.prompt;
	        var display = _ref.display;
	        var max_age = _ref.max_age;
	        var ui_locales = _ref.ui_locales;
	        var acr_values = _ref.acr_values;
	        var resource = _ref.resource;
	        var _ref$filterProtocolCl = _ref.filterProtocolClaims;
	        var filterProtocolClaims = _ref$filterProtocolCl === undefined ? true : _ref$filterProtocolCl;
	        var _ref$loadUserInfo = _ref.loadUserInfo;
	        var loadUserInfo = _ref$loadUserInfo === undefined ? true : _ref$loadUserInfo;
	        var _ref$staleStateAge = _ref.staleStateAge;
	        var staleStateAge = _ref$staleStateAge === undefined ? DefaultStaleStateAge : _ref$staleStateAge;
	        var _ref$clockSkew = _ref.clockSkew;
	        var clockSkew = _ref$clockSkew === undefined ? DefaultClockSkewInSeconds : _ref$clockSkew;
	        var _ref$stateStore = _ref.stateStore;
	        var stateStore = _ref$stateStore === undefined ? new _WebStorageStateStore2.default() : _ref$stateStore;
	        var _ref$ResponseValidato = _ref.ResponseValidatorCtor;
	        var ResponseValidatorCtor = _ref$ResponseValidato === undefined ? _ResponseValidator2.default : _ref$ResponseValidato;
	        var _ref$MetadataServiceC = _ref.MetadataServiceCtor;
	        var MetadataServiceCtor = _ref$MetadataServiceC === undefined ? _MetadataService2.default : _ref$MetadataServiceC;
	
	        _classCallCheck(this, OidcClientSettings);
	
	        this._authority = authority;
	        this._metadataUrl = metadataUrl;
	        this._metadata = metadata;
	        this._signingKeys = signingKeys;
	
	        this._client_id = client_id;
	        this._response_type = response_type;
	        this._scope = scope;
	        this._redirect_uri = redirect_uri;
	        this._post_logout_redirect_uri = post_logout_redirect_uri;
	
	        this._prompt = prompt;
	        this._display = display;
	        this._max_age = max_age;
	        this._ui_locales = ui_locales;
	        this._acr_values = acr_values;
	        this._resource = resource;
	
	        this._filterProtocolClaims = !!filterProtocolClaims;
	        this._loadUserInfo = !!loadUserInfo;
	        this._staleStateAge = staleStateAge;
	        this._clockSkew = clockSkew;
	
	        this._stateStore = stateStore;
	        this._validator = new ResponseValidatorCtor(this);
	        this._metadataService = new MetadataServiceCtor(this);
	    }
	
	    // client config
	
	
	    _createClass(OidcClientSettings, [{
	        key: 'client_id',
	        get: function get() {
	            return this._client_id;
	        },
	        set: function set(value) {
	            if (!this._client_id) {
	                // one-time set only
	                this._client_id = value;
	            } else {
	                _Log2.default.error("client_id has already been assigned.");
	                throw new Error("client_id has already been assigned.");
	            }
	        }
	    }, {
	        key: 'response_type',
	        get: function get() {
	            return this._response_type;
	        }
	    }, {
	        key: 'scope',
	        get: function get() {
	            return this._scope;
	        }
	    }, {
	        key: 'redirect_uri',
	        get: function get() {
	            return this._redirect_uri;
	        }
	    }, {
	        key: 'post_logout_redirect_uri',
	        get: function get() {
	            return this._post_logout_redirect_uri;
	        }
	
	        // optional protocol params
	
	    }, {
	        key: 'prompt',
	        get: function get() {
	            return this._prompt;
	        }
	    }, {
	        key: 'display',
	        get: function get() {
	            return this._display;
	        }
	    }, {
	        key: 'max_age',
	        get: function get() {
	            return this._max_age;
	        }
	    }, {
	        key: 'ui_locales',
	        get: function get() {
	            return this._ui_locales;
	        }
	    }, {
	        key: 'acr_values',
	        get: function get() {
	            return this._acr_values;
	        }
	    }, {
	        key: 'resource',
	        get: function get() {
	            return this._resource;
	        }
	
	        // metadata
	
	    }, {
	        key: 'authority',
	        get: function get() {
	            return this._authority;
	        },
	        set: function set(value) {
	            if (!this._authority) {
	                // one-time set only
	                this._authority = value;
	            } else {
	                _Log2.default.error("authority has already been assigned.");
	                throw new Error("authority has already been assigned.");
	            }
	        }
	    }, {
	        key: 'metadataUrl',
	        get: function get() {
	            if (!this._metadataUrl) {
	                this._metadataUrl = this.authority;
	
	                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
	                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
	                        this._metadataUrl += '/';
	                    }
	                    this._metadataUrl += OidcMetadataUrlPath;
	                }
	            }
	
	            return this._metadataUrl;
	        }
	
	        // settable/cachable metadata values
	
	    }, {
	        key: 'metadata',
	        get: function get() {
	            return this._metadata;
	        },
	        set: function set(value) {
	            this._metadata = value;
	        }
	    }, {
	        key: 'signingKeys',
	        get: function get() {
	            return this._signingKeys;
	        },
	        set: function set(value) {
	            this._signingKeys = value;
	        }
	
	        // behavior flags
	
	    }, {
	        key: 'filterProtocolClaims',
	        get: function get() {
	            return this._filterProtocolClaims;
	        }
	    }, {
	        key: 'loadUserInfo',
	        get: function get() {
	            return this._loadUserInfo;
	        }
	    }, {
	        key: 'staleStateAge',
	        get: function get() {
	            return this._staleStateAge;
	        }
	    }, {
	        key: 'clockSkew',
	        get: function get() {
	            return this._clockSkew;
	        }
	    }, {
	        key: 'stateStore',
	        get: function get() {
	            return this._stateStore;
	        }
	    }, {
	        key: 'validator',
	        get: function get() {
	            return this._validator;
	        }
	    }, {
	        key: 'metadataService',
	        get: function get() {
	            return this._metadataService;
	        }
	    }]);
	
	    return OidcClientSettings;
	}();
	
	exports.default = OidcClientSettings;
	module.exports = exports['default'];

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var WebStorageStateStore = function () {
	    function WebStorageStateStore() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var _ref$prefix = _ref.prefix;
	        var prefix = _ref$prefix === undefined ? "oidc." : _ref$prefix;
	        var _ref$store = _ref.store;
	        var store = _ref$store === undefined ? _Global2.default.localStorage : _ref$store;
	
	        _classCallCheck(this, WebStorageStateStore);
	
	        this._store = store;
	        this._prefix = prefix;
	    }
	
	    WebStorageStateStore.prototype.set = function set(key, value) {
	        _Log2.default.info("WebStorageStateStore.set", key);
	
	        key = this._prefix + key;
	
	        this._store.setItem(key, value);
	
	        return Promise.resolve();
	    };
	
	    WebStorageStateStore.prototype.get = function get(key) {
	        _Log2.default.info("WebStorageStateStore.get", key);
	
	        key = this._prefix + key;
	
	        var item = this._store.getItem(key);
	
	        return Promise.resolve(item);
	    };
	
	    WebStorageStateStore.prototype.remove = function remove(key) {
	        _Log2.default.info("WebStorageStateStore.remove", key);
	
	        key = this._prefix + key;
	
	        var item = this._store.getItem(key);
	        this._store.removeItem(key);
	
	        return Promise.resolve(item);
	    };
	
	    WebStorageStateStore.prototype.getAllKeys = function getAllKeys() {
	        _Log2.default.info("WebStorageStateStore.getAllKeys");
	
	        var keys = [];
	
	        for (var index = 0; index < this._store.length; index++) {
	            var key = this._store.key(index);
	
	            if (key.indexOf(this._prefix) === 0) {
	                keys.push(key.substr(this._prefix.length));
	            }
	        }
	
	        return Promise.resolve(keys);
	    };
	
	    return WebStorageStateStore;
	}();
	
	exports.default = WebStorageStateStore;
	module.exports = exports['default'];

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var timer = {
	    setTimeout: function (_setTimeout) {
	        function setTimeout(_x, _x2) {
	            return _setTimeout.apply(this, arguments);
	        }
	
	        setTimeout.toString = function () {
	            return _setTimeout.toString();
	        };
	
	        return setTimeout;
	    }(function (cb, duration) {
	        return setTimeout(cb, duration);
	    }),
	    clearTimeout: function (_clearTimeout) {
	        function clearTimeout(_x3) {
	            return _clearTimeout.apply(this, arguments);
	        }
	
	        clearTimeout.toString = function () {
	            return _clearTimeout.toString();
	        };
	
	        return clearTimeout;
	    }(function (handle) {
	        return clearTimeout(handle);
	    })
	};
	
	var testing = false;
	
	var Global = function () {
	    function Global() {
	        _classCallCheck(this, Global);
	    }
	
	    Global._testing = function _testing() {
	        testing = true;
	    };
	
	    _createClass(Global, null, [{
	        key: "location",
	        get: function get() {
	            if (!testing) {
	                return location;
	            }
	        }
	    }, {
	        key: "localStorage",
	        get: function get() {
	            if (!testing) {
	                return localStorage;
	            }
	        }
	    }, {
	        key: "sessionStorage",
	        get: function get() {
	            if (!testing) {
	                return sessionStorage;
	            }
	        }
	    }, {
	        key: "XMLHttpRequest",
	        get: function get() {
	            if (!testing) {
	                return XMLHttpRequest;
	            }
	        }
	    }, {
	        key: "timer",
	        get: function get() {
	            if (!testing) {
	                return timer;
	            }
	        }
	    }]);
	
	    return Global;
	}();
	
	exports.default = Global;
	;
	module.exports = exports['default'];

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	var _UserInfoService = __webpack_require__(9);
	
	var _UserInfoService2 = _interopRequireDefault(_UserInfoService);
	
	var _ErrorResponse = __webpack_require__(10);
	
	var _ErrorResponse2 = _interopRequireDefault(_ErrorResponse);
	
	var _JoseUtil = __webpack_require__(11);
	
	var _JoseUtil2 = _interopRequireDefault(_JoseUtil);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ProtocolClaims = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];
	
	var ResponseValidator = function () {
	    function ResponseValidator(settings) {
	        var MetadataServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _MetadataService2.default;
	        var UserInfoServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _UserInfoService2.default;
	        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil2.default;
	
	        _classCallCheck(this, ResponseValidator);
	
	        if (!settings) {
	            _Log2.default.error("No settings passed to ResponseValidator");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._metadataService = new MetadataServiceCtor(this._settings);
	        this._userInfoService = new UserInfoServiceCtor(this._settings);
	        this._joseUtil = joseUtil;
	    }
	
	    ResponseValidator.prototype.validateSigninResponse = function validateSigninResponse(state, response) {
	        var _this = this;
	
	        _Log2.default.info("ResponseValidator.validateSigninResponse");
	
	        return this._processSigninParams(state, response).then(function (response) {
	            _Log2.default.info("state processed");
	            return _this._validateTokens(state, response).then(function (response) {
	                _Log2.default.info("tokens validated");
	                return _this._processClaims(response).then(function (response) {
	                    _Log2.default.info("claims processed");
	                    return response;
	                });
	            });
	        });
	    };
	
	    ResponseValidator.prototype.validateSignoutResponse = function validateSignoutResponse(state, response) {
	        _Log2.default.info("ResponseValidator.validateSignoutResponse");
	
	        if (state.id !== response.state) {
	            _Log2.default.error("State does not match");
	            return Promise.reject(new Error("State does not match"));
	        }
	
	        // now that we know the state matches, take the stored data
	        // and set it into the response so callers can get their state
	        // this is important for both success & error outcomes
	        _Log2.default.info("state validated");
	        response.state = state.data;
	
	        if (response.error) {
	            _Log2.default.warn("Response was error", response.error);
	            return Promise.reject(new _ErrorResponse2.default(response));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._processSigninParams = function _processSigninParams(state, response) {
	        _Log2.default.info("ResponseValidator._processSigninParams");
	
	        if (state.id !== response.state) {
	            _Log2.default.error("State does not match");
	            return Promise.reject(new Error("State does not match"));
	        }
	
	        if (!state.client_id) {
	            _Log2.default.error("No client_id on state");
	            return Promise.reject(new Error("No client_id on state"));
	        }
	
	        if (!state.authority) {
	            _Log2.default.error("No authority on state");
	            return Promise.reject(new Error("No authority on state"));
	        }
	
	        // this allows the authority to be loaded from the signin state
	        if (!this._settings.authority) {
	            this._settings.authority = state.authority;
	        }
	        // ensure we're using the correct authority if the authority is not loaded from signin state
	        else if (this._settings.authority && this._settings.authority !== state.authority) {
	                _Log2.default.error("authority mismatch on settings vs. signin state");
	                return Promise.reject(new Error("authority mismatch on settings vs. signin state"));
	            }
	        // this allows the client_id to be loaded from the signin state
	        if (!this._settings.client_id) {
	            this._settings.client_id = state.client_id;
	        }
	        // ensure we're using the correct client_id if the client_id is not loaded from signin state
	        else if (this._settings.client_id && this._settings.client_id !== state.client_id) {
	                _Log2.default.error("client_id mismatch on settings vs. signin state");
	                return Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
	            }
	
	        // now that we know the state matches, take the stored data
	        // and set it into the response so callers can get their state
	        // this is important for both success & error outcomes
	        _Log2.default.info("state validated");
	        response.state = state.data;
	
	        if (response.error) {
	            _Log2.default.warn("Response was error", response.error);
	            return Promise.reject(new _ErrorResponse2.default(response));
	        }
	
	        if (state.nonce && !response.id_token) {
	            _Log2.default.error("Expecting id_token in response");
	            return Promise.reject(new Error("No id_token in response"));
	        }
	
	        if (!state.nonce && response.id_token) {
	            _Log2.default.error("Not expecting id_token in response");
	            return Promise.reject(new Error("Unexpected id_token in response"));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._processClaims = function _processClaims(response) {
	        var _this2 = this;
	
	        _Log2.default.info("ResponseValidator._processClaims");
	
	        if (response.isOpenIdConnect) {
	            _Log2.default.info("response is OIDC, processing claims");
	
	            response.profile = this._filterProtocolClaims(response.profile);
	
	            if (this._settings.loadUserInfo && response.access_token) {
	                _Log2.default.info("loading user info");
	
	                return this._userInfoService.getClaims(response.access_token).then(function (claims) {
	
	                    response.profile = _this2._mergeClaims(response.profile, claims);
	                    _Log2.default.info("user info claims received, updated profile:", response.profile);
	
	                    return response;
	                });
	            } else {
	                _Log2.default.info("not loading user info");
	            }
	        } else {
	            _Log2.default.info("response is not OIDC, not processing claims");
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._mergeClaims = function _mergeClaims(claims1, claims2) {
	        var result = Object.assign({}, claims1);
	
	        for (var name in claims2) {
	            var values = claims2[name];
	            if (!Array.isArray(values)) {
	                values = [values];
	            }
	
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var value = _step.value;
	
	                    if (!result[name]) {
	                        result[name] = value;
	                    } else if (Array.isArray(result[name])) {
	                        if (result[name].indexOf(value) < 0) {
	                            result[name].push(value);
	                        }
	                    } else if (result[name] !== value) {
	                        result[name] = [result[name], value];
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	
	        return result;
	    };
	
	    ResponseValidator.prototype._filterProtocolClaims = function _filterProtocolClaims(claims) {
	        _Log2.default.info("ResponseValidator._filterProtocolClaims, incoming claims:", claims);
	
	        var result = Object.assign({}, claims);
	
	        if (this._settings._filterProtocolClaims) {
	            ProtocolClaims.forEach(function (type) {
	                delete result[type];
	            });
	
	            _Log2.default.info("protocol claims filtered", result);
	        } else {
	            _Log2.default.info("protocol claims not filtered");
	        }
	
	        return result;
	    };
	
	    ResponseValidator.prototype._validateTokens = function _validateTokens(state, response) {
	        _Log2.default.info("ResponseValidator._validateTokens");
	
	        if (response.id_token) {
	
	            if (response.access_token) {
	                _Log2.default.info("Validating id_token and access_token");
	                return this._validateIdTokenAndAccessToken(state, response);
	            }
	
	            _Log2.default.info("Validating id_token");
	            return this._validateIdToken(state, response);
	        }
	
	        _Log2.default.info("No id_token to validate");
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._validateIdTokenAndAccessToken = function _validateIdTokenAndAccessToken(state, response) {
	        var _this3 = this;
	
	        _Log2.default.info("ResponseValidator._validateIdTokenAndAccessToken");
	
	        return this._validateIdToken(state, response).then(function (response) {
	            return _this3._validateAccessToken(response);
	        });
	    };
	
	    ResponseValidator.prototype._validateIdToken = function _validateIdToken(state, response) {
	        var _this4 = this;
	
	        _Log2.default.info("ResponseValidator._validateIdToken");
	
	        if (!state.nonce) {
	            _Log2.default.error("No nonce on state");
	            return Promise.reject(new Error("No nonce on state"));
	        }
	
	        var jwt = this._joseUtil.parseJwt(response.id_token);
	        if (!jwt || !jwt.header || !jwt.payload) {
	            _Log2.default.error("Failed to parse id_token", jwt);
	            return Promise.reject(new Error("Failed to parse id_token"));
	        }
	
	        if (state.nonce !== jwt.payload.nonce) {
	            _Log2.default.error("Invalid nonce in id_token");
	            return Promise.reject(new Error("Invalid nonce in id_token"));
	        }
	
	        var kid = jwt.header.kid;
	
	        return this._metadataService.getIssuer().then(function (issuer) {
	            _Log2.default.info("Received issuer");
	
	            return _this4._metadataService.getSigningKeys().then(function (keys) {
	                if (!keys) {
	                    _Log2.default.error("No signing keys from metadata");
	                    return Promise.reject(new Error("No signing keys from metadata"));
	                }
	
	                _Log2.default.info("Received signing keys");
	                if (!kid) {
	                    if (keys.length > 1) {
	                        _Log2.default.error("No kid found in id_token");
	                        return Promise.reject(new Error("No kid found in id_token"));
	                    } else {
	                        // kid is mandatory only when there are multiple keys in the referenced JWK Set document
	                        // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
	                        kid = keys[0].kid;
	                    }
	                }
	
	                var key = keys.filter(function (key) {
	                    return key.kid === kid;
	                })[0];
	
	                if (!key) {
	                    _Log2.default.error("No key matching kid found in signing keys");
	                    return Promise.reject(new Error("No key matching kid found in signing keys"));
	                }
	
	                var audience = state.client_id;
	
	                var clockSkewInSeconds = _this4._settings.clockSkew;
	                _Log2.default.info("Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);
	
	                return _this4._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {
	                    _Log2.default.info("JWT validation successful");
	
	                    response.profile = jwt.payload;
	
	                    return response;
	                });
	            });
	        });
	    };
	
	    ResponseValidator.prototype._validateAccessToken = function _validateAccessToken(response) {
	        _Log2.default.info("ResponseValidator._validateAccessToken");
	
	        if (!response.profile) {
	            _Log2.default.error("No profile loaded from id_token");
	            return Promise.reject(new Error("No profile loaded from id_token"));
	        }
	
	        if (!response.profile.at_hash) {
	            _Log2.default.error("No at_hash in id_token");
	            return Promise.reject(new Error("No at_hash in id_token"));
	        }
	
	        if (!response.id_token) {
	            _Log2.default.error("No id_token");
	            return Promise.reject(new Error("No id_token"));
	        }
	
	        var jwt = this._joseUtil.parseJwt(response.id_token);
	        if (!jwt || !jwt.header) {
	            _Log2.default.error("Failed to parse id_token", jwt);
	            return Promise.reject(new Error("Failed to parse id_token"));
	        }
	
	        var hashAlg = jwt.header.alg;
	        if (!hashAlg || hashAlg.length !== 5) {
	            _Log2.default.error("Unsupported alg:", hashAlg);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        var hashBits = hashAlg.substr(2, 3);
	        if (!hashBits) {
	            _Log2.default.error("Unsupported alg:", hashAlg, hashBits);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        hashBits = parseInt(hashBits);
	        if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {
	            _Log2.default.error("Unsupported alg:", hashAlg, hashBits);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        var sha = "sha" + hashBits;
	        var hash = this._joseUtil.hashString(response.access_token, sha);
	        if (!hash) {
	            _Log2.default.error("access_token hash failed:", sha);
	            return Promise.reject(new Error("Failed to validate at_hash"));
	        }
	
	        var left = hash.substr(0, hash.length / 2);
	        var left_b64u = this._joseUtil.hexToBase64Url(left);
	        if (left_b64u !== response.profile.at_hash) {
	            _Log2.default.error("Failed to validate at_hash", left_b64u, response.profile.at_hash);
	            return Promise.reject(new Error("Failed to validate at_hash"));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    return ResponseValidator;
	}();
	
	exports.default = ResponseValidator;
	module.exports = exports['default'];

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _JsonService = __webpack_require__(8);
	
	var _JsonService2 = _interopRequireDefault(_JsonService);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var MetadataService = function () {
	    function MetadataService(settings) {
	        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService2.default;
	
	        _classCallCheck(this, MetadataService);
	
	        if (!settings) {
	            _Log2.default.error("No settings passed to MetadataService");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._jsonService = new JsonServiceCtor();
	    }
	
	    MetadataService.prototype.getMetadata = function getMetadata() {
	        var _this = this;
	
	        _Log2.default.info("MetadataService.getMetadata");
	
	        if (this._settings.metadata) {
	            _Log2.default.info("Returning metadata from settings");
	            return Promise.resolve(this._settings.metadata);
	        }
	
	        if (!this._settings.metadataUrl) {
	            _Log2.default.error("No metadataUrl configured on settings");
	            return Promise.reject(new Error("No metadataUrl configured on settings"));
	        }
	
	        _Log2.default.info("getting metadata from", this._settings.metadataUrl);
	
	        return this._jsonService.getJson(this._settings.metadataUrl).then(function (metadata) {
	            _Log2.default.info("json received");
	            _this._settings.metadata = metadata;
	            return metadata;
	        });
	    };
	
	    MetadataService.prototype.getIssuer = function getIssuer() {
	        _Log2.default.info("MetadataService.getIssuer");
	        return this._getMetadataProperty("issuer");
	    };
	
	    MetadataService.prototype.getAuthorizationEndpoint = function getAuthorizationEndpoint() {
	        _Log2.default.info("MetadataService.getAuthorizationEndpoint");
	        return this._getMetadataProperty("authorization_endpoint");
	    };
	
	    MetadataService.prototype.getUserInfoEndpoint = function getUserInfoEndpoint() {
	        _Log2.default.info("MetadataService.getUserInfoEndpoint");
	        return this._getMetadataProperty("userinfo_endpoint");
	    };
	
	    MetadataService.prototype.getCheckSessionIframe = function getCheckSessionIframe() {
	        _Log2.default.info("MetadataService.getCheckSessionIframe");
	        return this._getMetadataProperty("check_session_iframe", true);
	    };
	
	    MetadataService.prototype.getEndSessionEndpoint = function getEndSessionEndpoint() {
	        _Log2.default.info("MetadataService.getEndSessionEndpoint");
	        return this._getMetadataProperty("end_session_endpoint", true);
	    };
	
	    MetadataService.prototype.getRevocationEndpoint = function getRevocationEndpoint() {
	        _Log2.default.info("MetadataService.getRevocationEndpoint");
	        return this._getMetadataProperty("revocation_endpoint", true);
	    };
	
	    MetadataService.prototype._getMetadataProperty = function _getMetadataProperty(name) {
	        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	        _Log2.default.info("MetadataService._getMetadataProperty", name);
	
	        return this.getMetadata().then(function (metadata) {
	            _Log2.default.info("metadata recieved");
	
	            if (metadata[name] === undefined) {
	
	                if (optional === true) {
	                    _Log2.default.warn("Metadata does not contain optional property " + name);
	                    return undefined;
	                } else {
	                    _Log2.default.error("Metadata does not contain property " + name);
	                    throw new Error("Metadata does not contain property " + name);
	                }
	            }
	
	            return metadata[name];
	        });
	    };
	
	    MetadataService.prototype.getSigningKeys = function getSigningKeys() {
	        var _this2 = this;
	
	        _Log2.default.info("MetadataService.getSigningKeys");
	
	        if (this._settings.signingKeys) {
	            _Log2.default.info("Returning signingKeys from settings");
	            return Promise.resolve(this._settings.signingKeys);
	        }
	
	        return this._getMetadataProperty("jwks_uri").then(function (jwks_uri) {
	            _Log2.default.info("jwks_uri received", jwks_uri);
	
	            return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {
	                _Log2.default.info("key set received", keySet);
	
	                if (!keySet.keys) {
	                    _Log2.default.error("Missing keys on keyset");
	                    throw new Error("Missing keys on keyset");
	                }
	
	                var filteredKeys = _this2._filterSigningKeys(keySet.keys);
	                _Log2.default.info("filtered keys", filteredKeys);
	
	                _this2._settings.signingKeys = filteredKeys;
	                return _this2._settings.signingKeys;
	            });
	        });
	    };
	
	    MetadataService.prototype._filterSigningKeys = function _filterSigningKeys(keys) {
	        _Log2.default.info("MetadataService._filterSigningKeys", keys);
	
	        return keys.filter(function (item) {
	            return item.use === "sig";
	        });
	    };
	
	    return MetadataService;
	}();
	
	exports.default = MetadataService;
	module.exports = exports['default'];

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var JsonService = function () {
	    function JsonService() {
	        var XMLHttpRequestCtor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Global2.default.XMLHttpRequest;
	
	        _classCallCheck(this, JsonService);
	
	        this._XMLHttpRequest = XMLHttpRequestCtor;
	    }
	
	    JsonService.prototype.getJson = function getJson(url, token) {
	        var _this = this;
	
	        _Log2.default.info("JsonService.getJson", url);
	
	        if (!url) {
	            _Log2.default.error("No url passed");
	            throw new Error("url");
	        }
	
	        return new Promise(function (resolve, reject) {
	
	            var req = new _this._XMLHttpRequest();
	            req.open('GET', url);
	
	            req.onload = function () {
	                _Log2.default.info("HTTP response received, status", req.status);
	
	                if (req.status === 200) {
	                    resolve(JSON.parse(req.responseText));
	                } else {
	                    reject(Error(req.statusText + " (" + req.status + ")"));
	                }
	            };
	
	            req.onerror = function () {
	                _Log2.default.error("network error");
	                reject(Error("Network Error"));
	            };
	
	            if (token) {
	                _Log2.default.info("token passed, setting Authorization header");
	                req.setRequestHeader("Authorization", "Bearer " + token);
	            }
	
	            req.send();
	        });
	    };
	
	    return JsonService;
	}();
	
	exports.default = JsonService;
	module.exports = exports['default'];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _JsonService = __webpack_require__(8);
	
	var _JsonService2 = _interopRequireDefault(_JsonService);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserInfoService = function () {
	    function UserInfoService(settings) {
	        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService2.default;
	        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService2.default;
	
	        _classCallCheck(this, UserInfoService);
	
	        if (!settings) {
	            _Log2.default.error("No settings passed to UserInfoService");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._jsonService = new JsonServiceCtor();
	        this._metadataService = new MetadataServiceCtor(this._settings);
	    }
	
	    UserInfoService.prototype.getClaims = function getClaims(token) {
	        var _this = this;
	
	        _Log2.default.info("UserInfoService.getClaims");
	
	        if (!token) {
	            _Log2.default.error("No token passed");
	            return Promise.reject(new Error("A token is required"));
	        }
	
	        return this._metadataService.getUserInfoEndpoint().then(function (url) {
	            _Log2.default.info("received userinfo url", url);
	
	            return _this._jsonService.getJson(url, token).then(function (claims) {
	                _Log2.default.info("claims received", claims);
	                return claims;
	            });
	        });
	    };
	
	    return UserInfoService;
	}();
	
	exports.default = UserInfoService;
	module.exports = exports['default'];

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ErrorResponse = function (_Error) {
	    _inherits(ErrorResponse, _Error);
	
	    function ErrorResponse() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var error = _ref.error;
	        var error_description = _ref.error_description;
	        var error_uri = _ref.error_uri;
	        var state = _ref.state;
	
	        _classCallCheck(this, ErrorResponse);
	
	        if (!error) {
	            _Log2.default.error("No error passed to ErrorResponse");
	            throw new Error("error");
	        }
	
	        var _this = _possibleConstructorReturn(this, _Error.call(this, error_description || error));
	
	        _this.name = "ErrorResponse";
	
	        _this.error = error;
	        _this.error_description = error_description;
	        _this.error_uri = error_uri;
	
	        _this.state = state;
	        return _this;
	    }
	
	    return ErrorResponse;
	}(Error);
	
	exports.default = ErrorResponse;
	module.exports = exports['default'];

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _jsrsasign = __webpack_require__(12);
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];
	
	var JoseUtil = function () {
	    function JoseUtil() {
	        _classCallCheck(this, JoseUtil);
	    }
	
	    JoseUtil.parseJwt = function parseJwt(jwt) {
	        _Log2.default.info("JoseUtil.parseJwt");
	        try {
	            var token = _jsrsasign.jws.JWS.parse(jwt);
	            return {
	                header: token.headerObj,
	                payload: token.payloadObj
	            };
	        } catch (e) {
	            _Log2.default.error(e);
	        }
	    };
	
	    JoseUtil.validateJwt = function validateJwt(jwt, key, issuer, audience, clockSkew, now) {
	        _Log2.default.info("JoseUtil.validateJwt");
	
	        try {
	            if (key.kty === "RSA") {
	                if (key.e && key.n) {
	                    key = _jsrsasign.KEYUTIL.getKey(key);
	                } else if (key.x5c && key.x5c.length) {
	                    key = _jsrsasign.KEYUTIL.getKey(_jsrsasign.X509.getPublicKeyFromCertPEM(key.x5c[0]));
	                } else {
	                    _Log2.default.error("RSA key missing key material", key);
	                    return Promise.reject(new Error("RSA key missing key material"));
	                }
	            } else if (key.kty === "EC") {
	                if (key.crv && key.x && key.y) {
	                    key = _jsrsasign.KEYUTIL.getKey(key);
	                } else {
	                    _Log2.default.error("EC key missing key material", key);
	                    return Promise.reject(new Error("EC key missing key material"));
	                }
	            } else {
	                _Log2.default.error("Unsupported key type", key && key.kty);
	                return Promise.reject(new Error("Unsupported key type: " + key && key.kty));
	            }
	
	            return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now);
	        } catch (e) {
	            _Log2.default.error(e && e.message || e);
	            return Promise.reject("JWT validation failed");
	        }
	    };
	
	    JoseUtil._validateJwt = function _validateJwt(jwt, key, issuer, audience, clockSkew, now) {
	        _Log2.default.info("JoseUtil._validateJwt");
	
	        if (!clockSkew) {
	            clockSkew = 0;
	        }
	
	        if (!now) {
	            now = parseInt(Date.now() / 1000);
	        }
	
	        var payload = JoseUtil.parseJwt(jwt).payload;
	
	        if (payload.iss !== issuer) {
	            _Log2.default.error("Invalid issuer in token", payload.iss);
	            return Promise.reject(new Error("Invalid issuer in token: " + payload.iss));
	        }
	
	        if (payload.aud !== audience) {
	            _Log2.default.error("Invalid audience in token", payload.aud);
	            return Promise.reject(new Error("Invalid audience in token: " + payload.aud));
	        }
	
	        var lowerNow = now + clockSkew;
	        var upperNow = now - clockSkew;
	
	        if (lowerNow < payload.iat) {
	            _Log2.default.error("iat is in the future", payload.iat);
	            return Promise.reject(new Error("iat is in the future: " + payload.iat));
	        }
	
	        if (lowerNow < payload.nbf) {
	            _Log2.default.error("nbf is in the future", payload.nbf);
	            return Promise.reject(new Error("nbf is in the future: " + payload.nbf));
	        }
	
	        if (payload.exp < upperNow) {
	            _Log2.default.error("exp is in the past", payload.exp);
	            return Promise.reject(new Error("exp is in the past:" + payload.exp));
	        }
	
	        try {
	            if (!_jsrsasign.jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {
	                _Log2.default.error("signature validation failed");
	                return Promise.reject(new Error("signature validation failed"));
	            }
	        } catch (e) {
	            _Log2.default.error(e && e.message || e);
	            return Promise.reject(new Error("signature validation failed"));
	        }
	
	        return Promise.resolve();
	    };
	
	    JoseUtil.hashString = function hashString(value, alg) {
	        _Log2.default.info("JoseUtil.hashString", value, alg);
	        try {
	            return _jsrsasign.crypto.Util.hashString(value, alg);
	        } catch (e) {
	            _Log2.default.error(e);
	        }
	    };
	
	    JoseUtil.hexToBase64Url = function hexToBase64Url(value) {
	        _Log2.default.info("JoseUtil.hexToBase64Url", value);
	        try {
	            return (0, _jsrsasign.hextob64u)(value);
	        } catch (e) {
	            _Log2.default.error(e);
	        }
	    };
	
	    return JoseUtil;
	}();
	
	exports.default = JoseUtil;
	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports) {

	
	var navigator = {};
	navigator.userAgent = false;
	
	var window = {};
	/*
	 * jsrsasign 6.1.2 (2016-10-08) (c) 2010-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	
	/*
	yahoo-min.js
	Copyright (c) 2011, Yahoo! Inc. All rights reserved.
	Code licensed under the BSD License:
	http://developer.yahoo.com/yui/license.html
	version: 2.9.0
	*/
	if(typeof YAHOO=="undefined"||!YAHOO){var YAHOO={};}YAHOO.namespace=function(){var b=arguments,g=null,e,c,f;for(e=0;e<b.length;e=e+1){f=(""+b[e]).split(".");g=YAHOO;for(c=(f[0]=="YAHOO")?1:0;c<f.length;c=c+1){g[f[c]]=g[f[c]]||{};g=g[f[c]];}}return g;};YAHOO.log=function(d,a,c){var b=YAHOO.widget.Logger;if(b&&b.log){return b.log(d,a,c);}else{return false;}};YAHOO.register=function(a,f,e){var k=YAHOO.env.modules,c,j,h,g,d;if(!k[a]){k[a]={versions:[],builds:[]};}c=k[a];j=e.version;h=e.build;g=YAHOO.env.listeners;c.name=a;c.version=j;c.build=h;c.versions.push(j);c.builds.push(h);c.mainClass=f;for(d=0;d<g.length;d=d+1){g[d](c);}if(f){f.VERSION=j;f.BUILD=h;}else{YAHOO.log("mainClass is undefined for module "+a,"warn");}};YAHOO.env=YAHOO.env||{modules:[],listeners:[]};YAHOO.env.getVersion=function(a){return YAHOO.env.modules[a]||null;};YAHOO.env.parseUA=function(d){var e=function(i){var j=0;return parseFloat(i.replace(/\./g,function(){return(j++==1)?"":".";}));},h=navigator,g={ie:0,opera:0,gecko:0,webkit:0,chrome:0,mobile:null,air:0,ipad:0,iphone:0,ipod:0,ios:null,android:0,webos:0,caja:h&&h.cajaVersion,secure:false,os:null},c=d||(navigator&&navigator.userAgent),f=window&&window.location,b=f&&f.href,a;g.secure=b&&(b.toLowerCase().indexOf("https")===0);if(c){if((/windows|win32/i).test(c)){g.os="windows";}else{if((/macintosh/i).test(c)){g.os="macintosh";}else{if((/rhino/i).test(c)){g.os="rhino";}}}if((/KHTML/).test(c)){g.webkit=1;}a=c.match(/AppleWebKit\/([^\s]*)/);if(a&&a[1]){g.webkit=e(a[1]);if(/ Mobile\//.test(c)){g.mobile="Apple";a=c.match(/OS ([^\s]*)/);if(a&&a[1]){a=e(a[1].replace("_","."));}g.ios=a;g.ipad=g.ipod=g.iphone=0;a=c.match(/iPad|iPod|iPhone/);if(a&&a[0]){g[a[0].toLowerCase()]=g.ios;}}else{a=c.match(/NokiaN[^\/]*|Android \d\.\d|webOS\/\d\.\d/);if(a){g.mobile=a[0];}if(/webOS/.test(c)){g.mobile="WebOS";a=c.match(/webOS\/([^\s]*);/);if(a&&a[1]){g.webos=e(a[1]);}}if(/ Android/.test(c)){g.mobile="Android";a=c.match(/Android ([^\s]*);/);if(a&&a[1]){g.android=e(a[1]);}}}a=c.match(/Chrome\/([^\s]*)/);if(a&&a[1]){g.chrome=e(a[1]);}else{a=c.match(/AdobeAIR\/([^\s]*)/);if(a){g.air=a[0];}}}if(!g.webkit){a=c.match(/Opera[\s\/]([^\s]*)/);if(a&&a[1]){g.opera=e(a[1]);a=c.match(/Version\/([^\s]*)/);if(a&&a[1]){g.opera=e(a[1]);}a=c.match(/Opera Mini[^;]*/);if(a){g.mobile=a[0];}}else{a=c.match(/MSIE\s([^;]*)/);if(a&&a[1]){g.ie=e(a[1]);}else{a=c.match(/Gecko\/([^\s]*)/);if(a){g.gecko=1;a=c.match(/rv:([^\s\)]*)/);if(a&&a[1]){g.gecko=e(a[1]);}}}}}}return g;};YAHOO.env.ua=YAHOO.env.parseUA();(function(){YAHOO.namespace("util","widget","example");if("undefined"!==typeof YAHOO_config){var b=YAHOO_config.listener,a=YAHOO.env.listeners,d=true,c;if(b){for(c=0;c<a.length;c++){if(a[c]==b){d=false;break;}}if(d){a.push(b);}}}})();YAHOO.lang=YAHOO.lang||{};(function(){var f=YAHOO.lang,a=Object.prototype,c="[object Array]",h="[object Function]",i="[object Object]",b=[],g={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;","`":"&#x60;"},d=["toString","valueOf"],e={isArray:function(j){return a.toString.apply(j)===c;},isBoolean:function(j){return typeof j==="boolean";},isFunction:function(j){return(typeof j==="function")||a.toString.apply(j)===h;},isNull:function(j){return j===null;},isNumber:function(j){return typeof j==="number"&&isFinite(j);},isObject:function(j){return(j&&(typeof j==="object"||f.isFunction(j)))||false;},isString:function(j){return typeof j==="string";},isUndefined:function(j){return typeof j==="undefined";},_IEEnumFix:(YAHOO.env.ua.ie)?function(l,k){var j,n,m;for(j=0;j<d.length;j=j+1){n=d[j];m=k[n];if(f.isFunction(m)&&m!=a[n]){l[n]=m;}}}:function(){},escapeHTML:function(j){return j.replace(/[&<>"'\/`]/g,function(k){return g[k];});},extend:function(m,n,l){if(!n||!m){throw new Error("extend failed, please check that "+"all dependencies are included.");}var k=function(){},j;k.prototype=n.prototype;m.prototype=new k();m.prototype.constructor=m;m.superclass=n.prototype;if(n.prototype.constructor==a.constructor){n.prototype.constructor=n;}if(l){for(j in l){if(f.hasOwnProperty(l,j)){m.prototype[j]=l[j];}}f._IEEnumFix(m.prototype,l);}},augmentObject:function(n,m){if(!m||!n){throw new Error("Absorb failed, verify dependencies.");}var j=arguments,l,o,k=j[2];if(k&&k!==true){for(l=2;l<j.length;l=l+1){n[j[l]]=m[j[l]];}}else{for(o in m){if(k||!(o in n)){n[o]=m[o];}}f._IEEnumFix(n,m);}return n;},augmentProto:function(m,l){if(!l||!m){throw new Error("Augment failed, verify dependencies.");}var j=[m.prototype,l.prototype],k;for(k=2;k<arguments.length;k=k+1){j.push(arguments[k]);}f.augmentObject.apply(this,j);return m;},dump:function(j,p){var l,n,r=[],t="{...}",k="f(){...}",q=", ",m=" => ";if(!f.isObject(j)){return j+"";}else{if(j instanceof Date||("nodeType" in j&&"tagName" in j)){return j;}else{if(f.isFunction(j)){return k;}}}p=(f.isNumber(p))?p:3;if(f.isArray(j)){r.push("[");for(l=0,n=j.length;l<n;l=l+1){if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}if(r.length>1){r.pop();}r.push("]");}else{r.push("{");for(l in j){if(f.hasOwnProperty(j,l)){r.push(l+m);if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}}if(r.length>1){r.pop();}r.push("}");}return r.join("");},substitute:function(x,y,E,l){var D,C,B,G,t,u,F=[],p,z=x.length,A="dump",r=" ",q="{",m="}",n,w;for(;;){D=x.lastIndexOf(q,z);if(D<0){break;}C=x.indexOf(m,D);if(D+1>C){break;}p=x.substring(D+1,C);G=p;u=null;B=G.indexOf(r);if(B>-1){u=G.substring(B+1);G=G.substring(0,B);}t=y[G];if(E){t=E(G,t,u);}if(f.isObject(t)){if(f.isArray(t)){t=f.dump(t,parseInt(u,10));}else{u=u||"";n=u.indexOf(A);if(n>-1){u=u.substring(4);}w=t.toString();if(w===i||n>-1){t=f.dump(t,parseInt(u,10));}else{t=w;}}}else{if(!f.isString(t)&&!f.isNumber(t)){t="~-"+F.length+"-~";F[F.length]=p;}}x=x.substring(0,D)+t+x.substring(C+1);if(l===false){z=D-1;}}for(D=F.length-1;D>=0;D=D-1){x=x.replace(new RegExp("~-"+D+"-~"),"{"+F[D]+"}","g");}return x;},trim:function(j){try{return j.replace(/^\s+|\s+$/g,"");}catch(k){return j;
	}},merge:function(){var n={},k=arguments,j=k.length,m;for(m=0;m<j;m=m+1){f.augmentObject(n,k[m],true);}return n;},later:function(t,k,u,n,p){t=t||0;k=k||{};var l=u,s=n,q,j;if(f.isString(u)){l=k[u];}if(!l){throw new TypeError("method undefined");}if(!f.isUndefined(n)&&!f.isArray(s)){s=[n];}q=function(){l.apply(k,s||b);};j=(p)?setInterval(q,t):setTimeout(q,t);return{interval:p,cancel:function(){if(this.interval){clearInterval(j);}else{clearTimeout(j);}}};},isValue:function(j){return(f.isObject(j)||f.isString(j)||f.isNumber(j)||f.isBoolean(j));}};f.hasOwnProperty=(a.hasOwnProperty)?function(j,k){return j&&j.hasOwnProperty&&j.hasOwnProperty(k);}:function(j,k){return !f.isUndefined(j[k])&&j.constructor.prototype[k]!==j[k];};e.augmentObject(f,e,true);YAHOO.util.Lang=f;f.augment=f.augmentProto;YAHOO.augment=f.augmentProto;YAHOO.extend=f.extend;})();YAHOO.register("yahoo",YAHOO,{version:"2.9.0",build:"2800"});
	
	/*! CryptoJS v3.1.2 core-fix.js
	 * code.google.com/p/crypto-js
	 * (c) 2009-2013 by Jeff Mott. All rights reserved.
	 * code.google.com/p/crypto-js/wiki/License
	 * THIS IS FIX of 'core.js' to fix Hmac issue.
	 * https://code.google.com/p/crypto-js/issues/detail?id=84
	 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
	 */
	var CryptoJS=CryptoJS||(function(e,g){var a={};var b=a.lib={};var j=b.Base=(function(){function n(){}return{extend:function(p){n.prototype=this;var o=new n();if(p){o.mixIn(p)}if(!o.hasOwnProperty("init")){o.init=function(){o.$super.init.apply(this,arguments)}}o.init.prototype=o;o.$super=this;return o},create:function(){var o=this.extend();o.init.apply(o,arguments);return o},init:function(){},mixIn:function(p){for(var o in p){if(p.hasOwnProperty(o)){this[o]=p[o]}}if(p.hasOwnProperty("toString")){this.toString=p.toString}},clone:function(){return this.init.prototype.extend(this)}}}());var l=b.WordArray=j.extend({init:function(o,n){o=this.words=o||[];if(n!=g){this.sigBytes=n}else{this.sigBytes=o.length*4}},toString:function(n){return(n||h).stringify(this)},concat:function(t){var q=this.words;var p=t.words;var n=this.sigBytes;var s=t.sigBytes;this.clamp();if(n%4){for(var r=0;r<s;r++){var o=(p[r>>>2]>>>(24-(r%4)*8))&255;q[(n+r)>>>2]|=o<<(24-((n+r)%4)*8)}}else{for(var r=0;r<s;r+=4){q[(n+r)>>>2]=p[r>>>2]}}this.sigBytes+=s;return this},clamp:function(){var o=this.words;var n=this.sigBytes;o[n>>>2]&=4294967295<<(32-(n%4)*8);o.length=e.ceil(n/4)},clone:function(){var n=j.clone.call(this);n.words=this.words.slice(0);return n},random:function(p){var o=[];for(var n=0;n<p;n+=4){o.push((e.random()*4294967296)|0)}return new l.init(o,p)}});var m=a.enc={};var h=m.Hex={stringify:function(p){var r=p.words;var o=p.sigBytes;var q=[];for(var n=0;n<o;n++){var s=(r[n>>>2]>>>(24-(n%4)*8))&255;q.push((s>>>4).toString(16));q.push((s&15).toString(16))}return q.join("")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o+=2){q[o>>>3]|=parseInt(p.substr(o,2),16)<<(24-(o%8)*4)}return new l.init(q,n/2)}};var d=m.Latin1={stringify:function(q){var r=q.words;var p=q.sigBytes;var n=[];for(var o=0;o<p;o++){var s=(r[o>>>2]>>>(24-(o%4)*8))&255;n.push(String.fromCharCode(s))}return n.join("")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o++){q[o>>>2]|=(p.charCodeAt(o)&255)<<(24-(o%4)*8)}return new l.init(q,n)}};var c=m.Utf8={stringify:function(n){try{return decodeURIComponent(escape(d.stringify(n)))}catch(o){throw new Error("Malformed UTF-8 data")}},parse:function(n){return d.parse(unescape(encodeURIComponent(n)))}};var i=b.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new l.init();this._nDataBytes=0},_append:function(n){if(typeof n=="string"){n=c.parse(n)}this._data.concat(n);this._nDataBytes+=n.sigBytes},_process:function(w){var q=this._data;var x=q.words;var n=q.sigBytes;var t=this.blockSize;var v=t*4;var u=n/v;if(w){u=e.ceil(u)}else{u=e.max((u|0)-this._minBufferSize,0)}var s=u*t;var r=e.min(s*4,n);if(s){for(var p=0;p<s;p+=t){this._doProcessBlock(x,p)}var o=x.splice(0,s);q.sigBytes-=r}return new l.init(o,r)},clone:function(){var n=j.clone.call(this);n._data=this._data.clone();return n},_minBufferSize:0});var f=b.Hasher=i.extend({cfg:j.extend(),init:function(n){this.cfg=this.cfg.extend(n);this.reset()},reset:function(){i.reset.call(this);this._doReset()},update:function(n){this._append(n);this._process();return this},finalize:function(n){if(n){this._append(n)}var o=this._doFinalize();return o},blockSize:512/32,_createHelper:function(n){return function(p,o){return new n.init(o).finalize(p)}},_createHmacHelper:function(n){return function(p,o){return new k.HMAC.init(n,o).finalize(p)}}});var k=a.algo={};return a}(Math));
	/*
	CryptoJS v3.1.2 x64-core-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(g){var a=CryptoJS,f=a.lib,e=f.Base,h=f.WordArray,a=a.x64={};a.Word=e.extend({init:function(b,c){this.high=b;this.low=c}});a.WordArray=e.extend({init:function(b,c){b=this.words=b||[];this.sigBytes=c!=g?c:8*b.length},toX32:function(){for(var b=this.words,c=b.length,a=[],d=0;d<c;d++){var e=b[d];a.push(e.high);a.push(e.low)}return h.create(a,this.sigBytes)},clone:function(){for(var b=e.clone.call(this),c=b.words=this.words.slice(0),a=c.length,d=0;d<a;d++)c[d]=c[d].clone();return b}})})();
	
	/*
	CryptoJS v3.1.2 cipher-core.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	CryptoJS.lib.Cipher||function(u){var g=CryptoJS,f=g.lib,k=f.Base,l=f.WordArray,q=f.BufferedBlockAlgorithm,r=g.enc.Base64,v=g.algo.EvpKDF,n=f.Cipher=q.extend({cfg:k.extend(),createEncryptor:function(a,b){return this.create(this._ENC_XFORM_MODE,a,b)},createDecryptor:function(a,b){return this.create(this._DEC_XFORM_MODE,a,b)},init:function(a,b,c){this.cfg=this.cfg.extend(c);this._xformMode=a;this._key=b;this.reset()},reset:function(){q.reset.call(this);this._doReset()},process:function(a){this._append(a);
	return this._process()},finalize:function(a){a&&this._append(a);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(a){return{encrypt:function(b,c,d){return("string"==typeof c?s:j).encrypt(a,b,c,d)},decrypt:function(b,c,d){return("string"==typeof c?s:j).decrypt(a,b,c,d)}}}});f.StreamCipher=n.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var m=g.mode={},t=function(a,b,c){var d=this._iv;d?this._iv=u:d=this._prevBlock;for(var e=
	0;e<c;e++)a[b+e]^=d[e]},h=(f.BlockCipherMode=k.extend({createEncryptor:function(a,b){return this.Encryptor.create(a,b)},createDecryptor:function(a,b){return this.Decryptor.create(a,b)},init:function(a,b){this._cipher=a;this._iv=b}})).extend();h.Encryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize;t.call(this,a,b,d);c.encryptBlock(a,b);this._prevBlock=a.slice(b,b+d)}});h.Decryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize,e=a.slice(b,b+d);c.decryptBlock(a,
	b);t.call(this,a,b,d);this._prevBlock=e}});m=m.CBC=h;h=(g.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,e=[],f=0;f<c;f+=4)e.push(d);c=l.create(e,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};f.BlockCipher=n.extend({cfg:n.cfg.extend({mode:m,padding:h}),reset:function(){n.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;
	this._mode=c.call(a,this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var p=f.CipherParams=k.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),m=(g.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;
	return(a?l.create([1398893684,1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=l.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return p.create({ciphertext:a,salt:c})}},j=f.SerializableCipher=k.extend({cfg:k.extend({format:m}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var e=a.createEncryptor(c,d);b=e.finalize(b);e=e.cfg;return p.create({ciphertext:b,key:c,iv:e.iv,algorithm:a,mode:e.mode,padding:e.padding,
	blockSize:a.blockSize,formatter:d.format})},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return"string"==typeof a?b.parse(a,this):a}}),g=(g.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=l.random(8));a=v.create({keySize:b+c}).compute(a,d);c=l.create(a.words.slice(b),4*c);a.sigBytes=4*b;return p.create({key:a,iv:c,salt:d})}},s=f.PasswordBasedCipher=j.extend({cfg:j.cfg.extend({kdf:g}),encrypt:function(a,
	b,c,d){d=this.cfg.extend(d);c=d.kdf.execute(c,a.keySize,a.ivSize);d.iv=c.iv;a=j.encrypt.call(this,a,b,c.key,d);a.mixIn(c);return a},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);c=d.kdf.execute(c,a.keySize,a.ivSize,b.salt);d.iv=c.iv;return j.decrypt.call(this,a,b,c.key,d)}})}();
	
	/*
	CryptoJS v3.1.2 aes.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){for(var q=CryptoJS,x=q.lib.BlockCipher,r=q.algo,j=[],y=[],z=[],A=[],B=[],C=[],s=[],u=[],v=[],w=[],g=[],k=0;256>k;k++)g[k]=128>k?k<<1:k<<1^283;for(var n=0,l=0,k=0;256>k;k++){var f=l^l<<1^l<<2^l<<3^l<<4,f=f>>>8^f&255^99;j[n]=f;y[f]=n;var t=g[n],D=g[t],E=g[D],b=257*g[f]^16843008*f;z[n]=b<<24|b>>>8;A[n]=b<<16|b>>>16;B[n]=b<<8|b>>>24;C[n]=b;b=16843009*E^65537*D^257*t^16843008*n;s[f]=b<<24|b>>>8;u[f]=b<<16|b>>>16;v[f]=b<<8|b>>>24;w[f]=b;n?(n=t^g[g[g[E^t]]],l^=g[g[l]]):n=l=1}var F=[0,1,2,4,8,
	16,32,64,128,27,54],r=r.AES=x.extend({_doReset:function(){for(var c=this._key,e=c.words,a=c.sigBytes/4,c=4*((this._nRounds=a+6)+1),b=this._keySchedule=[],h=0;h<c;h++)if(h<a)b[h]=e[h];else{var d=b[h-1];h%a?6<a&&4==h%a&&(d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255]):(d=d<<8|d>>>24,d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255],d^=F[h/a|0]<<24);b[h]=b[h-a]^d}e=this._invKeySchedule=[];for(a=0;a<c;a++)h=c-a,d=a%4?b[h]:b[h-4],e[a]=4>a||4>=h?d:s[j[d>>>24]]^u[j[d>>>16&255]]^v[j[d>>>
	8&255]]^w[j[d&255]]},encryptBlock:function(c,e){this._doCryptBlock(c,e,this._keySchedule,z,A,B,C,j)},decryptBlock:function(c,e){var a=c[e+1];c[e+1]=c[e+3];c[e+3]=a;this._doCryptBlock(c,e,this._invKeySchedule,s,u,v,w,y);a=c[e+1];c[e+1]=c[e+3];c[e+3]=a},_doCryptBlock:function(c,e,a,b,h,d,j,m){for(var n=this._nRounds,f=c[e]^a[0],g=c[e+1]^a[1],k=c[e+2]^a[2],p=c[e+3]^a[3],l=4,t=1;t<n;t++)var q=b[f>>>24]^h[g>>>16&255]^d[k>>>8&255]^j[p&255]^a[l++],r=b[g>>>24]^h[k>>>16&255]^d[p>>>8&255]^j[f&255]^a[l++],s=
	b[k>>>24]^h[p>>>16&255]^d[f>>>8&255]^j[g&255]^a[l++],p=b[p>>>24]^h[f>>>16&255]^d[g>>>8&255]^j[k&255]^a[l++],f=q,g=r,k=s;q=(m[f>>>24]<<24|m[g>>>16&255]<<16|m[k>>>8&255]<<8|m[p&255])^a[l++];r=(m[g>>>24]<<24|m[k>>>16&255]<<16|m[p>>>8&255]<<8|m[f&255])^a[l++];s=(m[k>>>24]<<24|m[p>>>16&255]<<16|m[f>>>8&255]<<8|m[g&255])^a[l++];p=(m[p>>>24]<<24|m[f>>>16&255]<<16|m[g>>>8&255]<<8|m[k&255])^a[l++];c[e]=q;c[e+1]=r;c[e+2]=s;c[e+3]=p},keySize:8});q.AES=x._createHelper(r)})();
	
	/*
	CryptoJS v3.1.2 tripledes-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){function j(b,c){var a=(this._lBlock>>>b^this._rBlock)&c;this._rBlock^=a;this._lBlock^=a<<b}function l(b,c){var a=(this._rBlock>>>b^this._lBlock)&c;this._lBlock^=a;this._rBlock^=a<<b}var h=CryptoJS,e=h.lib,n=e.WordArray,e=e.BlockCipher,g=h.algo,q=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],p=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,
	55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],r=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],s=[{"0":8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,
	2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,
	1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{"0":1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,
	75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,
	276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{"0":260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,
	14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,
	17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{"0":2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,
	98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,
	1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{"0":128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,
	10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,
	83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{"0":268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,
	2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{"0":1048576,
	16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,
	496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{"0":134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,
	2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,
	2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],t=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],m=g.DES=e.extend({_doReset:function(){for(var b=this._key.words,c=[],a=0;56>a;a++){var f=q[a]-1;c[a]=b[f>>>5]>>>31-f%32&1}b=this._subKeys=[];for(f=0;16>f;f++){for(var d=b[f]=[],e=r[f],a=0;24>a;a++)d[a/6|0]|=c[(p[a]-1+e)%28]<<31-a%6,d[4+(a/6|0)]|=c[28+(p[a+24]-1+e)%28]<<31-a%6;d[0]=d[0]<<1|d[0]>>>31;for(a=1;7>a;a++)d[a]>>>=
	4*(a-1)+3;d[7]=d[7]<<5|d[7]>>>27}c=this._invSubKeys=[];for(a=0;16>a;a++)c[a]=b[15-a]},encryptBlock:function(b,c){this._doCryptBlock(b,c,this._subKeys)},decryptBlock:function(b,c){this._doCryptBlock(b,c,this._invSubKeys)},_doCryptBlock:function(b,c,a){this._lBlock=b[c];this._rBlock=b[c+1];j.call(this,4,252645135);j.call(this,16,65535);l.call(this,2,858993459);l.call(this,8,16711935);j.call(this,1,1431655765);for(var f=0;16>f;f++){for(var d=a[f],e=this._lBlock,h=this._rBlock,g=0,k=0;8>k;k++)g|=s[k][((h^
	d[k])&t[k])>>>0];this._lBlock=h;this._rBlock=e^g}a=this._lBlock;this._lBlock=this._rBlock;this._rBlock=a;j.call(this,1,1431655765);l.call(this,8,16711935);l.call(this,2,858993459);j.call(this,16,65535);j.call(this,4,252645135);b[c]=this._lBlock;b[c+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});h.DES=e._createHelper(m);g=g.TripleDES=e.extend({_doReset:function(){var b=this._key.words;this._des1=m.createEncryptor(n.create(b.slice(0,2)));this._des2=m.createEncryptor(n.create(b.slice(2,4)));this._des3=
	m.createEncryptor(n.create(b.slice(4,6)))},encryptBlock:function(b,c){this._des1.encryptBlock(b,c);this._des2.decryptBlock(b,c);this._des3.encryptBlock(b,c)},decryptBlock:function(b,c){this._des3.decryptBlock(b,c);this._des2.encryptBlock(b,c);this._des1.decryptBlock(b,c)},keySize:6,ivSize:2,blockSize:2});h.TripleDES=e._createHelper(g)})();
	
	/*
	CryptoJS v3.1.2 enc-base64.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){var h=CryptoJS,j=h.lib.WordArray;h.enc.Base64={stringify:function(b){var e=b.words,f=b.sigBytes,c=this._map;b.clamp();b=[];for(var a=0;a<f;a+=3)for(var d=(e[a>>>2]>>>24-8*(a%4)&255)<<16|(e[a+1>>>2]>>>24-8*((a+1)%4)&255)<<8|e[a+2>>>2]>>>24-8*((a+2)%4)&255,g=0;4>g&&a+0.75*g<f;g++)b.push(c.charAt(d>>>6*(3-g)&63));if(e=c.charAt(64))for(;b.length%4;)b.push(e);return b.join("")},parse:function(b){var e=b.length,f=this._map,c=f.charAt(64);c&&(c=b.indexOf(c),-1!=c&&(e=c));for(var c=[],a=0,d=0;d<
	e;d++)if(d%4){var g=f.indexOf(b.charAt(d-1))<<2*(d%4),h=f.indexOf(b.charAt(d))>>>6-2*(d%4);c[a>>>2]|=(g|h)<<24-8*(a%4);a++}return j.create(c,a)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
	
	/*
	CryptoJS v3.1.2 md5.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(E){function h(a,f,g,j,p,h,k){a=a+(f&g|~f&j)+p+k;return(a<<h|a>>>32-h)+f}function k(a,f,g,j,p,h,k){a=a+(f&j|g&~j)+p+k;return(a<<h|a>>>32-h)+f}function l(a,f,g,j,h,k,l){a=a+(f^g^j)+h+l;return(a<<k|a>>>32-k)+f}function n(a,f,g,j,h,k,l){a=a+(g^(f|~j))+h+l;return(a<<k|a>>>32-k)+f}for(var r=CryptoJS,q=r.lib,F=q.WordArray,s=q.Hasher,q=r.algo,a=[],t=0;64>t;t++)a[t]=4294967296*E.abs(E.sin(t+1))|0;q=q.MD5=s.extend({_doReset:function(){this._hash=new F.init([1732584193,4023233417,2562383102,271733878])},
	_doProcessBlock:function(m,f){for(var g=0;16>g;g++){var j=f+g,p=m[j];m[j]=(p<<8|p>>>24)&16711935|(p<<24|p>>>8)&4278255360}var g=this._hash.words,j=m[f+0],p=m[f+1],q=m[f+2],r=m[f+3],s=m[f+4],t=m[f+5],u=m[f+6],v=m[f+7],w=m[f+8],x=m[f+9],y=m[f+10],z=m[f+11],A=m[f+12],B=m[f+13],C=m[f+14],D=m[f+15],b=g[0],c=g[1],d=g[2],e=g[3],b=h(b,c,d,e,j,7,a[0]),e=h(e,b,c,d,p,12,a[1]),d=h(d,e,b,c,q,17,a[2]),c=h(c,d,e,b,r,22,a[3]),b=h(b,c,d,e,s,7,a[4]),e=h(e,b,c,d,t,12,a[5]),d=h(d,e,b,c,u,17,a[6]),c=h(c,d,e,b,v,22,a[7]),
	b=h(b,c,d,e,w,7,a[8]),e=h(e,b,c,d,x,12,a[9]),d=h(d,e,b,c,y,17,a[10]),c=h(c,d,e,b,z,22,a[11]),b=h(b,c,d,e,A,7,a[12]),e=h(e,b,c,d,B,12,a[13]),d=h(d,e,b,c,C,17,a[14]),c=h(c,d,e,b,D,22,a[15]),b=k(b,c,d,e,p,5,a[16]),e=k(e,b,c,d,u,9,a[17]),d=k(d,e,b,c,z,14,a[18]),c=k(c,d,e,b,j,20,a[19]),b=k(b,c,d,e,t,5,a[20]),e=k(e,b,c,d,y,9,a[21]),d=k(d,e,b,c,D,14,a[22]),c=k(c,d,e,b,s,20,a[23]),b=k(b,c,d,e,x,5,a[24]),e=k(e,b,c,d,C,9,a[25]),d=k(d,e,b,c,r,14,a[26]),c=k(c,d,e,b,w,20,a[27]),b=k(b,c,d,e,B,5,a[28]),e=k(e,b,
	c,d,q,9,a[29]),d=k(d,e,b,c,v,14,a[30]),c=k(c,d,e,b,A,20,a[31]),b=l(b,c,d,e,t,4,a[32]),e=l(e,b,c,d,w,11,a[33]),d=l(d,e,b,c,z,16,a[34]),c=l(c,d,e,b,C,23,a[35]),b=l(b,c,d,e,p,4,a[36]),e=l(e,b,c,d,s,11,a[37]),d=l(d,e,b,c,v,16,a[38]),c=l(c,d,e,b,y,23,a[39]),b=l(b,c,d,e,B,4,a[40]),e=l(e,b,c,d,j,11,a[41]),d=l(d,e,b,c,r,16,a[42]),c=l(c,d,e,b,u,23,a[43]),b=l(b,c,d,e,x,4,a[44]),e=l(e,b,c,d,A,11,a[45]),d=l(d,e,b,c,D,16,a[46]),c=l(c,d,e,b,q,23,a[47]),b=n(b,c,d,e,j,6,a[48]),e=n(e,b,c,d,v,10,a[49]),d=n(d,e,b,c,
	C,15,a[50]),c=n(c,d,e,b,t,21,a[51]),b=n(b,c,d,e,A,6,a[52]),e=n(e,b,c,d,r,10,a[53]),d=n(d,e,b,c,y,15,a[54]),c=n(c,d,e,b,p,21,a[55]),b=n(b,c,d,e,w,6,a[56]),e=n(e,b,c,d,D,10,a[57]),d=n(d,e,b,c,u,15,a[58]),c=n(c,d,e,b,B,21,a[59]),b=n(b,c,d,e,s,6,a[60]),e=n(e,b,c,d,z,10,a[61]),d=n(d,e,b,c,q,15,a[62]),c=n(c,d,e,b,x,21,a[63]);g[0]=g[0]+b|0;g[1]=g[1]+c|0;g[2]=g[2]+d|0;g[3]=g[3]+e|0},_doFinalize:function(){var a=this._data,f=a.words,g=8*this._nDataBytes,j=8*a.sigBytes;f[j>>>5]|=128<<24-j%32;var h=E.floor(g/
	4294967296);f[(j+64>>>9<<4)+15]=(h<<8|h>>>24)&16711935|(h<<24|h>>>8)&4278255360;f[(j+64>>>9<<4)+14]=(g<<8|g>>>24)&16711935|(g<<24|g>>>8)&4278255360;a.sigBytes=4*(f.length+1);this._process();a=this._hash;f=a.words;for(g=0;4>g;g++)j=f[g],f[g]=(j<<8|j>>>24)&16711935|(j<<24|j>>>8)&4278255360;return a},clone:function(){var a=s.clone.call(this);a._hash=this._hash.clone();return a}});r.MD5=s._createHelper(q);r.HmacMD5=s._createHmacHelper(q)})(Math);
	
	/*
	CryptoJS v3.1.2 sha1-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){var k=CryptoJS,b=k.lib,m=b.WordArray,l=b.Hasher,d=[],b=k.algo.SHA1=l.extend({_doReset:function(){this._hash=new m.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(n,p){for(var a=this._hash.words,e=a[0],f=a[1],h=a[2],j=a[3],b=a[4],c=0;80>c;c++){if(16>c)d[c]=n[p+c]|0;else{var g=d[c-3]^d[c-8]^d[c-14]^d[c-16];d[c]=g<<1|g>>>31}g=(e<<5|e>>>27)+b+d[c];g=20>c?g+((f&h|~f&j)+1518500249):40>c?g+((f^h^j)+1859775393):60>c?g+((f&h|f&j|h&j)-1894007588):g+((f^h^
	j)-899497514);b=j;j=h;h=f<<30|f>>>2;f=e;e=g}a[0]=a[0]+e|0;a[1]=a[1]+f|0;a[2]=a[2]+h|0;a[3]=a[3]+j|0;a[4]=a[4]+b|0},_doFinalize:function(){var b=this._data,d=b.words,a=8*this._nDataBytes,e=8*b.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=Math.floor(a/4294967296);d[(e+64>>>9<<4)+15]=a;b.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var b=l.clone.call(this);b._hash=this._hash.clone();return b}});k.SHA1=l._createHelper(b);k.HmacSHA1=l._createHmacHelper(b)})();
	
	/*
	CryptoJS v3.1.2 sha256-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(k){for(var g=CryptoJS,h=g.lib,v=h.WordArray,j=h.Hasher,h=g.algo,s=[],t=[],u=function(q){return 4294967296*(q-(q|0))|0},l=2,b=0;64>b;){var d;a:{d=l;for(var w=k.sqrt(d),r=2;r<=w;r++)if(!(d%r)){d=!1;break a}d=!0}d&&(8>b&&(s[b]=u(k.pow(l,0.5))),t[b]=u(k.pow(l,1/3)),b++);l++}var n=[],h=h.SHA256=j.extend({_doReset:function(){this._hash=new v.init(s.slice(0))},_doProcessBlock:function(q,h){for(var a=this._hash.words,c=a[0],d=a[1],b=a[2],k=a[3],f=a[4],g=a[5],j=a[6],l=a[7],e=0;64>e;e++){if(16>e)n[e]=
	q[h+e]|0;else{var m=n[e-15],p=n[e-2];n[e]=((m<<25|m>>>7)^(m<<14|m>>>18)^m>>>3)+n[e-7]+((p<<15|p>>>17)^(p<<13|p>>>19)^p>>>10)+n[e-16]}m=l+((f<<26|f>>>6)^(f<<21|f>>>11)^(f<<7|f>>>25))+(f&g^~f&j)+t[e]+n[e];p=((c<<30|c>>>2)^(c<<19|c>>>13)^(c<<10|c>>>22))+(c&d^c&b^d&b);l=j;j=g;g=f;f=k+m|0;k=b;b=d;d=c;c=m+p|0}a[0]=a[0]+c|0;a[1]=a[1]+d|0;a[2]=a[2]+b|0;a[3]=a[3]+k|0;a[4]=a[4]+f|0;a[5]=a[5]+g|0;a[6]=a[6]+j|0;a[7]=a[7]+l|0},_doFinalize:function(){var d=this._data,b=d.words,a=8*this._nDataBytes,c=8*d.sigBytes;
	b[c>>>5]|=128<<24-c%32;b[(c+64>>>9<<4)+14]=k.floor(a/4294967296);b[(c+64>>>9<<4)+15]=a;d.sigBytes=4*b.length;this._process();return this._hash},clone:function(){var b=j.clone.call(this);b._hash=this._hash.clone();return b}});g.SHA256=j._createHelper(h);g.HmacSHA256=j._createHmacHelper(h)})(Math);
	
	/*
	CryptoJS v3.1.2 sha224-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){var b=CryptoJS,d=b.lib.WordArray,a=b.algo,c=a.SHA256,a=a.SHA224=c.extend({_doReset:function(){this._hash=new d.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var a=c._doFinalize.call(this);a.sigBytes-=4;return a}});b.SHA224=c._createHelper(a);b.HmacSHA224=c._createHmacHelper(a)})();
	
	/*
	CryptoJS v3.1.2 sha512-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){function a(){return d.create.apply(d,arguments)}for(var n=CryptoJS,r=n.lib.Hasher,e=n.x64,d=e.Word,T=e.WordArray,e=n.algo,ea=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),
	a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,
	2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),
	a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,
	3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],v=[],w=0;80>w;w++)v[w]=a();e=e.SHA512=r.extend({_doReset:function(){this._hash=new T.init([new d.init(1779033703,4089235720),new d.init(3144134277,2227873595),new d.init(1013904242,4271175723),new d.init(2773480762,1595750129),new d.init(1359893119,2917565137),new d.init(2600822924,725511199),new d.init(528734635,4215389547),new d.init(1541459225,327033209)])},_doProcessBlock:function(a,d){for(var f=this._hash.words,
	F=f[0],e=f[1],n=f[2],r=f[3],G=f[4],H=f[5],I=f[6],f=f[7],w=F.high,J=F.low,X=e.high,K=e.low,Y=n.high,L=n.low,Z=r.high,M=r.low,$=G.high,N=G.low,aa=H.high,O=H.low,ba=I.high,P=I.low,ca=f.high,Q=f.low,k=w,g=J,z=X,x=K,A=Y,y=L,U=Z,B=M,l=$,h=N,R=aa,C=O,S=ba,D=P,V=ca,E=Q,m=0;80>m;m++){var s=v[m];if(16>m)var j=s.high=a[d+2*m]|0,b=s.low=a[d+2*m+1]|0;else{var j=v[m-15],b=j.high,p=j.low,j=(b>>>1|p<<31)^(b>>>8|p<<24)^b>>>7,p=(p>>>1|b<<31)^(p>>>8|b<<24)^(p>>>7|b<<25),u=v[m-2],b=u.high,c=u.low,u=(b>>>19|c<<13)^(b<<
	3|c>>>29)^b>>>6,c=(c>>>19|b<<13)^(c<<3|b>>>29)^(c>>>6|b<<26),b=v[m-7],W=b.high,t=v[m-16],q=t.high,t=t.low,b=p+b.low,j=j+W+(b>>>0<p>>>0?1:0),b=b+c,j=j+u+(b>>>0<c>>>0?1:0),b=b+t,j=j+q+(b>>>0<t>>>0?1:0);s.high=j;s.low=b}var W=l&R^~l&S,t=h&C^~h&D,s=k&z^k&A^z&A,T=g&x^g&y^x&y,p=(k>>>28|g<<4)^(k<<30|g>>>2)^(k<<25|g>>>7),u=(g>>>28|k<<4)^(g<<30|k>>>2)^(g<<25|k>>>7),c=ea[m],fa=c.high,da=c.low,c=E+((h>>>14|l<<18)^(h>>>18|l<<14)^(h<<23|l>>>9)),q=V+((l>>>14|h<<18)^(l>>>18|h<<14)^(l<<23|h>>>9))+(c>>>0<E>>>0?1:
	0),c=c+t,q=q+W+(c>>>0<t>>>0?1:0),c=c+da,q=q+fa+(c>>>0<da>>>0?1:0),c=c+b,q=q+j+(c>>>0<b>>>0?1:0),b=u+T,s=p+s+(b>>>0<u>>>0?1:0),V=S,E=D,S=R,D=C,R=l,C=h,h=B+c|0,l=U+q+(h>>>0<B>>>0?1:0)|0,U=A,B=y,A=z,y=x,z=k,x=g,g=c+b|0,k=q+s+(g>>>0<c>>>0?1:0)|0}J=F.low=J+g;F.high=w+k+(J>>>0<g>>>0?1:0);K=e.low=K+x;e.high=X+z+(K>>>0<x>>>0?1:0);L=n.low=L+y;n.high=Y+A+(L>>>0<y>>>0?1:0);M=r.low=M+B;r.high=Z+U+(M>>>0<B>>>0?1:0);N=G.low=N+h;G.high=$+l+(N>>>0<h>>>0?1:0);O=H.low=O+C;H.high=aa+R+(O>>>0<C>>>0?1:0);P=I.low=P+D;
	I.high=ba+S+(P>>>0<D>>>0?1:0);Q=f.low=Q+E;f.high=ca+V+(Q>>>0<E>>>0?1:0)},_doFinalize:function(){var a=this._data,d=a.words,f=8*this._nDataBytes,e=8*a.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+128>>>10<<5)+30]=Math.floor(f/4294967296);d[(e+128>>>10<<5)+31]=f;a.sigBytes=4*d.length;this._process();return this._hash.toX32()},clone:function(){var a=r.clone.call(this);a._hash=this._hash.clone();return a},blockSize:32});n.SHA512=r._createHelper(e);n.HmacSHA512=r._createHmacHelper(e)})();
	
	/*
	CryptoJS v3.1.2 sha384-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){var c=CryptoJS,a=c.x64,b=a.Word,e=a.WordArray,a=c.algo,d=a.SHA512,a=a.SHA384=d.extend({_doReset:function(){this._hash=new e.init([new b.init(3418070365,3238371032),new b.init(1654270250,914150663),new b.init(2438529370,812702999),new b.init(355462360,4144912697),new b.init(1731405415,4290775857),new b.init(2394180231,1750603025),new b.init(3675008525,1694076839),new b.init(1203062813,3204075428)])},_doFinalize:function(){var a=d._doFinalize.call(this);a.sigBytes-=16;return a}});c.SHA384=
	d._createHelper(a);c.HmacSHA384=d._createHmacHelper(a)})();
	
	/*
	CryptoJS v3.1.2 ripemd160-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/*
	
	(c) 2012 by Cedric Mesnil. All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	(function(){var q=CryptoJS,d=q.lib,n=d.WordArray,p=d.Hasher,d=q.algo,x=n.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),y=n.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),z=n.create([11,14,15,12,
	5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),A=n.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),B=n.create([0,1518500249,1859775393,2400959708,2840853838]),C=n.create([1352829926,1548603684,1836072691,
	2053994217,0]),d=d.RIPEMD160=p.extend({_doReset:function(){this._hash=n.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,v){for(var b=0;16>b;b++){var c=v+b,f=e[c];e[c]=(f<<8|f>>>24)&16711935|(f<<24|f>>>8)&4278255360}var c=this._hash.words,f=B.words,d=C.words,n=x.words,q=y.words,p=z.words,w=A.words,t,g,h,j,r,u,k,l,m,s;u=t=c[0];k=g=c[1];l=h=c[2];m=j=c[3];s=r=c[4];for(var a,b=0;80>b;b+=1)a=t+e[v+n[b]]|0,a=16>b?a+((g^h^j)+f[0]):32>b?a+((g&h|~g&j)+f[1]):48>b?
	a+(((g|~h)^j)+f[2]):64>b?a+((g&j|h&~j)+f[3]):a+((g^(h|~j))+f[4]),a|=0,a=a<<p[b]|a>>>32-p[b],a=a+r|0,t=r,r=j,j=h<<10|h>>>22,h=g,g=a,a=u+e[v+q[b]]|0,a=16>b?a+((k^(l|~m))+d[0]):32>b?a+((k&m|l&~m)+d[1]):48>b?a+(((k|~l)^m)+d[2]):64>b?a+((k&l|~k&m)+d[3]):a+((k^l^m)+d[4]),a|=0,a=a<<w[b]|a>>>32-w[b],a=a+s|0,u=s,s=m,m=l<<10|l>>>22,l=k,k=a;a=c[1]+h+m|0;c[1]=c[2]+j+s|0;c[2]=c[3]+r+u|0;c[3]=c[4]+t+k|0;c[4]=c[0]+g+l|0;c[0]=a},_doFinalize:function(){var e=this._data,d=e.words,b=8*this._nDataBytes,c=8*e.sigBytes;
	d[c>>>5]|=128<<24-c%32;d[(c+64>>>9<<4)+14]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360;e.sigBytes=4*(d.length+1);this._process();e=this._hash;d=e.words;for(b=0;5>b;b++)c=d[b],d[b]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return e},clone:function(){var d=p.clone.call(this);d._hash=this._hash.clone();return d}});q.RIPEMD160=p._createHelper(d);q.HmacRIPEMD160=p._createHmacHelper(d)})(Math);
	
	/*
	CryptoJS v3.1.2 hmac.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){var c=CryptoJS,k=c.enc.Utf8;c.algo.HMAC=c.lib.Base.extend({init:function(a,b){a=this._hasher=new a.init;"string"==typeof b&&(b=k.parse(b));var c=a.blockSize,e=4*c;b.sigBytes>e&&(b=a.finalize(b));b.clamp();for(var f=this._oKey=b.clone(),g=this._iKey=b.clone(),h=f.words,j=g.words,d=0;d<c;d++)h[d]^=1549556828,j[d]^=909522486;f.sigBytes=g.sigBytes=e;this.reset()},reset:function(){var a=this._hasher;a.reset();a.update(this._iKey)},update:function(a){this._hasher.update(a);return this},finalize:function(a){var b=
	this._hasher;a=b.finalize(a);b.reset();return b.finalize(this._oKey.clone().concat(a))}})})();
	
	/*
	CryptoJS v3.1.2 pbkdf2-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function(){var b=CryptoJS,a=b.lib,d=a.Base,m=a.WordArray,a=b.algo,q=a.HMAC,l=a.PBKDF2=d.extend({cfg:d.extend({keySize:4,hasher:a.SHA1,iterations:1}),init:function(a){this.cfg=this.cfg.extend(a)},compute:function(a,b){for(var c=this.cfg,f=q.create(c.hasher,a),g=m.create(),d=m.create([1]),l=g.words,r=d.words,n=c.keySize,c=c.iterations;l.length<n;){var h=f.update(b).finalize(d);f.reset();for(var j=h.words,s=j.length,k=h,p=1;p<c;p++){k=f.finalize(k);f.reset();for(var t=k.words,e=0;e<s;e++)j[e]^=t[e]}g.concat(h);
	r[0]++}g.sigBytes=4*n;return g}});b.PBKDF2=function(a,b,c){return l.create(c).compute(a,b)}})();
	
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var b64map="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad="=";function hex2b64(d){var b;var e;var a="";for(b=0;b+3<=d.length;b+=3){e=parseInt(d.substring(b,b+3),16);a+=b64map.charAt(e>>6)+b64map.charAt(e&63)}if(b+1==d.length){e=parseInt(d.substring(b,b+1),16);a+=b64map.charAt(e<<2)}else{if(b+2==d.length){e=parseInt(d.substring(b,b+2),16);a+=b64map.charAt(e>>2)+b64map.charAt((e&3)<<4)}}if(b64pad){while((a.length&3)>0){a+=b64pad}}return a}function b64tohex(f){var d="";var e;var b=0;var c;var a;for(e=0;e<f.length;++e){if(f.charAt(e)==b64pad){break}a=b64map.indexOf(f.charAt(e));if(a<0){continue}if(b==0){d+=int2char(a>>2);c=a&3;b=1}else{if(b==1){d+=int2char((c<<2)|(a>>4));c=a&15;b=2}else{if(b==2){d+=int2char(c);d+=int2char(a>>2);c=a&3;b=3}else{d+=int2char((c<<2)|(a>>4));d+=int2char(a&15);b=0}}}}if(b==1){d+=int2char(c<<2)}return d}function b64toBA(e){var d=b64tohex(e);var c;var b=new Array();for(c=0;2*c<d.length;++c){b[c]=parseInt(d.substring(2*c,2*c+2),16)}return b};
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var dbits;var canary=244837814094590;var j_lm=((canary&16777215)==15715070);function BigInteger(e,d,f){if(e!=null){if("number"==typeof e){this.fromNumber(e,d,f)}else{if(d==null&&"string"!=typeof e){this.fromString(e,256)}else{this.fromString(e,d)}}}}function nbi(){return new BigInteger(null)}function am1(f,a,b,e,h,g){while(--g>=0){var d=a*this[f++]+b[e]+h;h=Math.floor(d/67108864);b[e++]=d&67108863}return h}function am2(f,q,r,e,o,a){var k=q&32767,p=q>>15;while(--a>=0){var d=this[f]&32767;var g=this[f++]>>15;var b=p*d+g*k;d=k*d+((b&32767)<<15)+r[e]+(o&1073741823);o=(d>>>30)+(b>>>15)+p*g+(o>>>30);r[e++]=d&1073741823}return o}function am3(f,q,r,e,o,a){var k=q&16383,p=q>>14;while(--a>=0){var d=this[f]&16383;var g=this[f++]>>14;var b=p*d+g*k;d=k*d+((b&16383)<<14)+r[e]+o;o=(d>>28)+(b>>14)+p*g;r[e++]=d&268435455}return o}if(j_lm&&(navigator.appName=="Microsoft Internet Explorer")){BigInteger.prototype.am=am2;dbits=30}else{if(j_lm&&(navigator.appName!="Netscape")){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=((1<<dbits)-1);BigInteger.prototype.DV=(1<<dbits);var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array();var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv){BI_RC[rr++]=vv}rr="a".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}rr="A".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}function int2char(a){return BI_RM.charAt(a)}function intAt(b,a){var d=BI_RC[b.charCodeAt(a)];return(d==null)?-1:d}function bnpCopyTo(b){for(var a=this.t-1;a>=0;--a){b[a]=this[a]}b.t=this.t;b.s=this.s}function bnpFromInt(a){this.t=1;this.s=(a<0)?-1:0;if(a>0){this[0]=a}else{if(a<-1){this[0]=a+this.DV}else{this.t=0}}}function nbv(a){var b=nbi();b.fromInt(a);return b}function bnpFromString(h,c){var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==256){e=8}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{this.fromRadix(h,c);return}}}}}}this.t=0;this.s=0;var g=h.length,d=false,f=0;while(--g>=0){var a=(e==8)?h[g]&255:intAt(h,g);if(a<0){if(h.charAt(g)=="-"){d=true}continue}d=false;if(f==0){this[this.t++]=a}else{if(f+e>this.DB){this[this.t-1]|=(a&((1<<(this.DB-f))-1))<<f;this[this.t++]=(a>>(this.DB-f))}else{this[this.t-1]|=a<<f}}f+=e;if(f>=this.DB){f-=this.DB}}if(e==8&&(h[0]&128)!=0){this.s=-1;if(f>0){this[this.t-1]|=((1<<(this.DB-f))-1)<<f}}this.clamp();if(d){BigInteger.ZERO.subTo(this,this)}}function bnpClamp(){var a=this.s&this.DM;while(this.t>0&&this[this.t-1]==a){--this.t}}function bnToString(c){if(this.s<0){return"-"+this.negate().toString(c)}var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{return this.toRadix(c)}}}}}var g=(1<<e)-1,l,a=false,h="",f=this.t;var j=this.DB-(f*this.DB)%e;if(f-->0){if(j<this.DB&&(l=this[f]>>j)>0){a=true;h=int2char(l)}while(f>=0){if(j<e){l=(this[f]&((1<<j)-1))<<(e-j);l|=this[--f]>>(j+=this.DB-e)}else{l=(this[f]>>(j-=e))&g;if(j<=0){j+=this.DB;--f}}if(l>0){a=true}if(a){h+=int2char(l)}}}return a?h:"0"}function bnNegate(){var a=nbi();BigInteger.ZERO.subTo(this,a);return a}function bnAbs(){return(this.s<0)?this.negate():this}function bnCompareTo(b){var d=this.s-b.s;if(d!=0){return d}var c=this.t;d=c-b.t;if(d!=0){return(this.s<0)?-d:d}while(--c>=0){if((d=this[c]-b[c])!=0){return d}}return 0}function nbits(a){var c=1,b;if((b=a>>>16)!=0){a=b;c+=16}if((b=a>>8)!=0){a=b;c+=8}if((b=a>>4)!=0){a=b;c+=4}if((b=a>>2)!=0){a=b;c+=2}if((b=a>>1)!=0){a=b;c+=1}return c}function bnBitLength(){if(this.t<=0){return 0}return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM))}function bnpDLShiftTo(c,b){var a;for(a=this.t-1;a>=0;--a){b[a+c]=this[a]}for(a=c-1;a>=0;--a){b[a]=0}b.t=this.t+c;b.s=this.s}function bnpDRShiftTo(c,b){for(var a=c;a<this.t;++a){b[a-c]=this[a]}b.t=Math.max(this.t-c,0);b.s=this.s}function bnpLShiftTo(j,e){var b=j%this.DB;var a=this.DB-b;var g=(1<<a)-1;var f=Math.floor(j/this.DB),h=(this.s<<b)&this.DM,d;for(d=this.t-1;d>=0;--d){e[d+f+1]=(this[d]>>a)|h;h=(this[d]&g)<<b}for(d=f-1;d>=0;--d){e[d]=0}e[f]=h;e.t=this.t+f+1;e.s=this.s;e.clamp()}function bnpRShiftTo(g,d){d.s=this.s;var e=Math.floor(g/this.DB);if(e>=this.t){d.t=0;return}var b=g%this.DB;var a=this.DB-b;var f=(1<<b)-1;d[0]=this[e]>>b;for(var c=e+1;c<this.t;++c){d[c-e-1]|=(this[c]&f)<<a;d[c-e]=this[c]>>b}if(b>0){d[this.t-e-1]|=(this.s&f)<<a}d.t=this.t-e;d.clamp()}function bnpSubTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]-d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g-=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g-=d[e];f[e++]=g&this.DM;g>>=this.DB}g-=d.s}f.s=(g<0)?-1:0;if(g<-1){f[e++]=this.DV+g}else{if(g>0){f[e++]=g}}f.t=e;f.clamp()}function bnpMultiplyTo(c,e){var b=this.abs(),f=c.abs();var d=b.t;e.t=d+f.t;while(--d>=0){e[d]=0}for(d=0;d<f.t;++d){e[d+b.t]=b.am(0,f[d],e,d,0,b.t)}e.s=0;e.clamp();if(this.s!=c.s){BigInteger.ZERO.subTo(e,e)}}function bnpSquareTo(d){var a=this.abs();var b=d.t=2*a.t;while(--b>=0){d[b]=0}for(b=0;b<a.t-1;++b){var e=a.am(b,a[b],d,2*b,0,1);if((d[b+a.t]+=a.am(b+1,2*a[b],d,2*b+1,e,a.t-b-1))>=a.DV){d[b+a.t]-=a.DV;d[b+a.t+1]=1}}if(d.t>0){d[d.t-1]+=a.am(b,a[b],d,2*b,0,1)}d.s=0;d.clamp()}function bnpDivRemTo(n,h,g){var w=n.abs();if(w.t<=0){return}var k=this.abs();if(k.t<w.t){if(h!=null){h.fromInt(0)}if(g!=null){this.copyTo(g)}return}if(g==null){g=nbi()}var d=nbi(),a=this.s,l=n.s;var v=this.DB-nbits(w[w.t-1]);if(v>0){w.lShiftTo(v,d);k.lShiftTo(v,g)}else{w.copyTo(d);k.copyTo(g)}var p=d.t;var b=d[p-1];if(b==0){return}var o=b*(1<<this.F1)+((p>1)?d[p-2]>>this.F2:0);var A=this.FV/o,z=(1<<this.F1)/o,x=1<<this.F2;var u=g.t,s=u-p,f=(h==null)?nbi():h;d.dlShiftTo(s,f);if(g.compareTo(f)>=0){g[g.t++]=1;g.subTo(f,g)}BigInteger.ONE.dlShiftTo(p,f);f.subTo(d,d);while(d.t<p){d[d.t++]=0}while(--s>=0){var c=(g[--u]==b)?this.DM:Math.floor(g[u]*A+(g[u-1]+x)*z);if((g[u]+=d.am(0,c,g,s,0,p))<c){d.dlShiftTo(s,f);g.subTo(f,g);while(g[u]<--c){g.subTo(f,g)}}}if(h!=null){g.drShiftTo(p,h);if(a!=l){BigInteger.ZERO.subTo(h,h)}}g.t=p;g.clamp();if(v>0){g.rShiftTo(v,g)}if(a<0){BigInteger.ZERO.subTo(g,g)}}function bnMod(b){var c=nbi();this.abs().divRemTo(b,null,c);if(this.s<0&&c.compareTo(BigInteger.ZERO)>0){b.subTo(c,c)}return c}function Classic(a){this.m=a}function cConvert(a){if(a.s<0||a.compareTo(this.m)>=0){return a.mod(this.m)}else{return a}}function cRevert(a){return a}function cReduce(a){a.divRemTo(this.m,null,a)}function cMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}function cSqrTo(a,b){a.squareTo(b);this.reduce(b)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1){return 0}var a=this[0];if((a&1)==0){return 0}var b=a&3;b=(b*(2-(a&15)*b))&15;b=(b*(2-(a&255)*b))&255;b=(b*(2-(((a&65535)*b)&65535)))&65535;b=(b*(2-a*b%this.DV))%this.DV;return(b>0)?this.DV-b:-b}function Montgomery(a){this.m=a;this.mp=a.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<(a.DB-15))-1;this.mt2=2*a.t}function montConvert(a){var b=nbi();a.abs().dlShiftTo(this.m.t,b);b.divRemTo(this.m,null,b);if(a.s<0&&b.compareTo(BigInteger.ZERO)>0){this.m.subTo(b,b)}return b}function montRevert(a){var b=nbi();a.copyTo(b);this.reduce(b);return b}function montReduce(a){while(a.t<=this.mt2){a[a.t++]=0}for(var c=0;c<this.m.t;++c){var b=a[c]&32767;var d=(b*this.mpl+(((b*this.mph+(a[c]>>15)*this.mpl)&this.um)<<15))&a.DM;b=c+this.m.t;a[b]+=this.m.am(0,d,a,c,0,this.m.t);while(a[b]>=a.DV){a[b]-=a.DV;a[++b]++}}a.clamp();a.drShiftTo(this.m.t,a);if(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function montSqrTo(a,b){a.squareTo(b);this.reduce(b)}function montMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return((this.t>0)?(this[0]&1):this.s)==0}function bnpExp(h,j){if(h>4294967295||h<1){return BigInteger.ONE}var f=nbi(),a=nbi(),d=j.convert(this),c=nbits(h)-1;d.copyTo(f);while(--c>=0){j.sqrTo(f,a);if((h&(1<<c))>0){j.mulTo(a,d,f)}else{var b=f;f=a;a=b}}return j.revert(f)}function bnModPowInt(b,a){var c;if(b<256||a.isEven()){c=new Classic(a)}else{c=new Montgomery(a)}return this.exp(b,c)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function bnClone(){var a=nbi();this.copyTo(a);return a}function bnIntValue(){if(this.s<0){if(this.t==1){return this[0]-this.DV}else{if(this.t==0){return -1}}}else{if(this.t==1){return this[0]}else{if(this.t==0){return 0}}}return((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0]}function bnByteValue(){return(this.t==0)?this.s:(this[0]<<24)>>24}function bnShortValue(){return(this.t==0)?this.s:(this[0]<<16)>>16}function bnpChunkSize(a){return Math.floor(Math.LN2*this.DB/Math.log(a))}function bnSigNum(){if(this.s<0){return -1}else{if(this.t<=0||(this.t==1&&this[0]<=0)){return 0}else{return 1}}}function bnpToRadix(c){if(c==null){c=10}if(this.signum()==0||c<2||c>36){return"0"}var f=this.chunkSize(c);var e=Math.pow(c,f);var i=nbv(e),j=nbi(),h=nbi(),g="";this.divRemTo(i,j,h);while(j.signum()>0){g=(e+h.intValue()).toString(c).substr(1)+g;j.divRemTo(i,j,h)}return h.intValue().toString(c)+g}function bnpFromRadix(m,h){this.fromInt(0);if(h==null){h=10}var f=this.chunkSize(h);var g=Math.pow(h,f),e=false,a=0,l=0;for(var c=0;c<m.length;++c){var k=intAt(m,c);if(k<0){if(m.charAt(c)=="-"&&this.signum()==0){e=true}continue}l=h*l+k;if(++a>=f){this.dMultiply(g);this.dAddOffset(l,0);a=0;l=0}}if(a>0){this.dMultiply(Math.pow(h,a));this.dAddOffset(l,0)}if(e){BigInteger.ZERO.subTo(this,this)}}function bnpFromNumber(f,e,h){if("number"==typeof e){if(f<2){this.fromInt(1)}else{this.fromNumber(f,h);if(!this.testBit(f-1)){this.bitwiseTo(BigInteger.ONE.shiftLeft(f-1),op_or,this)}if(this.isEven()){this.dAddOffset(1,0)}while(!this.isProbablePrime(e)){this.dAddOffset(2,0);if(this.bitLength()>f){this.subTo(BigInteger.ONE.shiftLeft(f-1),this)}}}}else{var d=new Array(),g=f&7;d.length=(f>>3)+1;e.nextBytes(d);if(g>0){d[0]&=((1<<g)-1)}else{d[0]=0}this.fromString(d,256)}}function bnToByteArray(){var b=this.t,c=new Array();c[0]=this.s;var e=this.DB-(b*this.DB)%8,f,a=0;if(b-->0){if(e<this.DB&&(f=this[b]>>e)!=(this.s&this.DM)>>e){c[a++]=f|(this.s<<(this.DB-e))}while(b>=0){if(e<8){f=(this[b]&((1<<e)-1))<<(8-e);f|=this[--b]>>(e+=this.DB-8)}else{f=(this[b]>>(e-=8))&255;if(e<=0){e+=this.DB;--b}}if((f&128)!=0){f|=-256}if(a==0&&(this.s&128)!=(f&128)){++a}if(a>0||f!=this.s){c[a++]=f}}}return c}function bnEquals(b){return(this.compareTo(b)==0)}function bnMin(b){return(this.compareTo(b)<0)?this:b}function bnMax(b){return(this.compareTo(b)>0)?this:b}function bnpBitwiseTo(c,h,e){var d,g,b=Math.min(c.t,this.t);for(d=0;d<b;++d){e[d]=h(this[d],c[d])}if(c.t<this.t){g=c.s&this.DM;for(d=b;d<this.t;++d){e[d]=h(this[d],g)}e.t=this.t}else{g=this.s&this.DM;for(d=b;d<c.t;++d){e[d]=h(g,c[d])}e.t=c.t}e.s=h(this.s,c.s);e.clamp()}function op_and(a,b){return a&b}function bnAnd(b){var c=nbi();this.bitwiseTo(b,op_and,c);return c}function op_or(a,b){return a|b}function bnOr(b){var c=nbi();this.bitwiseTo(b,op_or,c);return c}function op_xor(a,b){return a^b}function bnXor(b){var c=nbi();this.bitwiseTo(b,op_xor,c);return c}function op_andnot(a,b){return a&~b}function bnAndNot(b){var c=nbi();this.bitwiseTo(b,op_andnot,c);return c}function bnNot(){var b=nbi();for(var a=0;a<this.t;++a){b[a]=this.DM&~this[a]}b.t=this.t;b.s=~this.s;return b}function bnShiftLeft(b){var a=nbi();if(b<0){this.rShiftTo(-b,a)}else{this.lShiftTo(b,a)}return a}function bnShiftRight(b){var a=nbi();if(b<0){this.lShiftTo(-b,a)}else{this.rShiftTo(b,a)}return a}function lbit(a){if(a==0){return -1}var b=0;if((a&65535)==0){a>>=16;b+=16}if((a&255)==0){a>>=8;b+=8}if((a&15)==0){a>>=4;b+=4}if((a&3)==0){a>>=2;b+=2}if((a&1)==0){++b}return b}function bnGetLowestSetBit(){for(var a=0;a<this.t;++a){if(this[a]!=0){return a*this.DB+lbit(this[a])}}if(this.s<0){return this.t*this.DB}return -1}function cbit(a){var b=0;while(a!=0){a&=a-1;++b}return b}function bnBitCount(){var c=0,a=this.s&this.DM;for(var b=0;b<this.t;++b){c+=cbit(this[b]^a)}return c}function bnTestBit(b){var a=Math.floor(b/this.DB);if(a>=this.t){return(this.s!=0)}return((this[a]&(1<<(b%this.DB)))!=0)}function bnpChangeBit(c,b){var a=BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a,b,a);return a}function bnSetBit(a){return this.changeBit(a,op_or)}function bnClearBit(a){return this.changeBit(a,op_andnot)}function bnFlipBit(a){return this.changeBit(a,op_xor)}function bnpAddTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]+d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g+=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g+=d[e];f[e++]=g&this.DM;g>>=this.DB}g+=d.s}f.s=(g<0)?-1:0;if(g>0){f[e++]=g}else{if(g<-1){f[e++]=this.DV+g}}f.t=e;f.clamp()}function bnAdd(b){var c=nbi();this.addTo(b,c);return c}function bnSubtract(b){var c=nbi();this.subTo(b,c);return c}function bnMultiply(b){var c=nbi();this.multiplyTo(b,c);return c}function bnSquare(){var a=nbi();this.squareTo(a);return a}function bnDivide(b){var c=nbi();this.divRemTo(b,c,null);return c}function bnRemainder(b){var c=nbi();this.divRemTo(b,null,c);return c}function bnDivideAndRemainder(b){var d=nbi(),c=nbi();this.divRemTo(b,d,c);return new Array(d,c)}function bnpDMultiply(a){this[this.t]=this.am(0,a-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(b,a){if(b==0){return}while(this.t<=a){this[this.t++]=0}this[a]+=b;while(this[a]>=this.DV){this[a]-=this.DV;if(++a>=this.t){this[this.t++]=0}++this[a]}}function NullExp(){}function nNop(a){return a}function nMulTo(a,c,b){a.multiplyTo(c,b)}function nSqrTo(a,b){a.squareTo(b)}NullExp.prototype.convert=nNop;NullExp.prototype.revert=nNop;NullExp.prototype.mulTo=nMulTo;NullExp.prototype.sqrTo=nSqrTo;function bnPow(a){return this.exp(a,new NullExp())}function bnpMultiplyLowerTo(b,f,e){var d=Math.min(this.t+b.t,f);e.s=0;e.t=d;while(d>0){e[--d]=0}var c;for(c=e.t-this.t;d<c;++d){e[d+this.t]=this.am(0,b[d],e,d,0,this.t)}for(c=Math.min(b.t,f);d<c;++d){this.am(0,b[d],e,d,0,f-d)}e.clamp()}function bnpMultiplyUpperTo(b,e,d){--e;var c=d.t=this.t+b.t-e;d.s=0;while(--c>=0){d[c]=0}for(c=Math.max(e-this.t,0);c<b.t;++c){d[this.t+c-e]=this.am(e-c,b[c],d,0,0,this.t+c-e)}d.clamp();d.drShiftTo(1,d)}function Barrett(a){this.r2=nbi();this.q3=nbi();BigInteger.ONE.dlShiftTo(2*a.t,this.r2);this.mu=this.r2.divide(a);this.m=a}function barrettConvert(a){if(a.s<0||a.t>2*this.m.t){return a.mod(this.m)}else{if(a.compareTo(this.m)<0){return a}else{var b=nbi();a.copyTo(b);this.reduce(b);return b}}}function barrettRevert(a){return a}function barrettReduce(a){a.drShiftTo(this.m.t-1,this.r2);if(a.t>this.m.t+1){a.t=this.m.t+1;a.clamp()}this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);while(a.compareTo(this.r2)<0){a.dAddOffset(1,this.m.t+1)}a.subTo(this.r2,a);while(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function barrettSqrTo(a,b){a.squareTo(b);this.reduce(b)}function barrettMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Barrett.prototype.convert=barrettConvert;Barrett.prototype.revert=barrettRevert;Barrett.prototype.reduce=barrettReduce;Barrett.prototype.mulTo=barrettMulTo;Barrett.prototype.sqrTo=barrettSqrTo;function bnModPow(q,f){var o=q.bitLength(),h,b=nbv(1),v;if(o<=0){return b}else{if(o<18){h=1}else{if(o<48){h=3}else{if(o<144){h=4}else{if(o<768){h=5}else{h=6}}}}}if(o<8){v=new Classic(f)}else{if(f.isEven()){v=new Barrett(f)}else{v=new Montgomery(f)}}var p=new Array(),d=3,s=h-1,a=(1<<h)-1;p[1]=v.convert(this);if(h>1){var A=nbi();v.sqrTo(p[1],A);while(d<=a){p[d]=nbi();v.mulTo(A,p[d-2],p[d]);d+=2}}var l=q.t-1,x,u=true,c=nbi(),y;o=nbits(q[l])-1;while(l>=0){if(o>=s){x=(q[l]>>(o-s))&a}else{x=(q[l]&((1<<(o+1))-1))<<(s-o);if(l>0){x|=q[l-1]>>(this.DB+o-s)}}d=h;while((x&1)==0){x>>=1;--d}if((o-=d)<0){o+=this.DB;--l}if(u){p[x].copyTo(b);u=false}else{while(d>1){v.sqrTo(b,c);v.sqrTo(c,b);d-=2}if(d>0){v.sqrTo(b,c)}else{y=b;b=c;c=y}v.mulTo(c,p[x],b)}while(l>=0&&(q[l]&(1<<o))==0){v.sqrTo(b,c);y=b;b=c;c=y;if(--o<0){o=this.DB-1;--l}}}return v.revert(b)}function bnGCD(c){var b=(this.s<0)?this.negate():this.clone();var h=(c.s<0)?c.negate():c.clone();if(b.compareTo(h)<0){var e=b;b=h;h=e}var d=b.getLowestSetBit(),f=h.getLowestSetBit();if(f<0){return b}if(d<f){f=d}if(f>0){b.rShiftTo(f,b);h.rShiftTo(f,h)}while(b.signum()>0){if((d=b.getLowestSetBit())>0){b.rShiftTo(d,b)}if((d=h.getLowestSetBit())>0){h.rShiftTo(d,h)}if(b.compareTo(h)>=0){b.subTo(h,b);b.rShiftTo(1,b)}else{h.subTo(b,h);h.rShiftTo(1,h)}}if(f>0){h.lShiftTo(f,h)}return h}function bnpModInt(e){if(e<=0){return 0}var c=this.DV%e,b=(this.s<0)?e-1:0;if(this.t>0){if(c==0){b=this[0]%e}else{for(var a=this.t-1;a>=0;--a){b=(c*b+this[a])%e}}}return b}function bnModInverse(f){var j=f.isEven();if((this.isEven()&&j)||f.signum()==0){return BigInteger.ZERO}var i=f.clone(),h=this.clone();var g=nbv(1),e=nbv(0),l=nbv(0),k=nbv(1);while(i.signum()!=0){while(i.isEven()){i.rShiftTo(1,i);if(j){if(!g.isEven()||!e.isEven()){g.addTo(this,g);e.subTo(f,e)}g.rShiftTo(1,g)}else{if(!e.isEven()){e.subTo(f,e)}}e.rShiftTo(1,e)}while(h.isEven()){h.rShiftTo(1,h);if(j){if(!l.isEven()||!k.isEven()){l.addTo(this,l);k.subTo(f,k)}l.rShiftTo(1,l)}else{if(!k.isEven()){k.subTo(f,k)}}k.rShiftTo(1,k)}if(i.compareTo(h)>=0){i.subTo(h,i);if(j){g.subTo(l,g)}e.subTo(k,e)}else{h.subTo(i,h);if(j){l.subTo(g,l)}k.subTo(e,k)}}if(h.compareTo(BigInteger.ONE)!=0){return BigInteger.ZERO}if(k.compareTo(f)>=0){return k.subtract(f)}if(k.signum()<0){k.addTo(f,k)}else{return k}if(k.signum()<0){return k.add(f)}else{return k}}var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];var lplim=(1<<26)/lowprimes[lowprimes.length-1];function bnIsProbablePrime(e){var d,b=this.abs();if(b.t==1&&b[0]<=lowprimes[lowprimes.length-1]){for(d=0;d<lowprimes.length;++d){if(b[0]==lowprimes[d]){return true}}return false}if(b.isEven()){return false}d=1;while(d<lowprimes.length){var a=lowprimes[d],c=d+1;while(c<lowprimes.length&&a<lplim){a*=lowprimes[c++]}a=b.modInt(a);while(d<c){if(a%lowprimes[d++]==0){return false}}}return b.millerRabin(e)}function bnpMillerRabin(f){var g=this.subtract(BigInteger.ONE);var c=g.getLowestSetBit();if(c<=0){return false}var h=g.shiftRight(c);f=(f+1)>>1;if(f>lowprimes.length){f=lowprimes.length}var b=nbi();for(var e=0;e<f;++e){b.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);var l=b.modPow(h,this);if(l.compareTo(BigInteger.ONE)!=0&&l.compareTo(g)!=0){var d=1;while(d++<c&&l.compareTo(g)!=0){l=l.modPowInt(2,this);if(l.compareTo(BigInteger.ONE)==0){return false}}if(l.compareTo(g)!=0){return false}}}return true}BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.fromNumber=bnpFromNumber;BigInteger.prototype.bitwiseTo=bnpBitwiseTo;BigInteger.prototype.changeBit=bnpChangeBit;BigInteger.prototype.addTo=bnpAddTo;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.multiplyLowerTo=bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo=bnpMultiplyUpperTo;BigInteger.prototype.modInt=bnpModInt;BigInteger.prototype.millerRabin=bnpMillerRabin;BigInteger.prototype.clone=bnClone;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.byteValue=bnByteValue;BigInteger.prototype.shortValue=bnShortValue;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.toByteArray=bnToByteArray;BigInteger.prototype.equals=bnEquals;BigInteger.prototype.min=bnMin;BigInteger.prototype.max=bnMax;BigInteger.prototype.and=bnAnd;BigInteger.prototype.or=bnOr;BigInteger.prototype.xor=bnXor;BigInteger.prototype.andNot=bnAndNot;BigInteger.prototype.not=bnNot;BigInteger.prototype.shiftLeft=bnShiftLeft;BigInteger.prototype.shiftRight=bnShiftRight;BigInteger.prototype.getLowestSetBit=bnGetLowestSetBit;BigInteger.prototype.bitCount=bnBitCount;BigInteger.prototype.testBit=bnTestBit;BigInteger.prototype.setBit=bnSetBit;BigInteger.prototype.clearBit=bnClearBit;BigInteger.prototype.flipBit=bnFlipBit;BigInteger.prototype.add=bnAdd;BigInteger.prototype.subtract=bnSubtract;BigInteger.prototype.multiply=bnMultiply;BigInteger.prototype.divide=bnDivide;BigInteger.prototype.remainder=bnRemainder;BigInteger.prototype.divideAndRemainder=bnDivideAndRemainder;BigInteger.prototype.modPow=bnModPow;BigInteger.prototype.modInverse=bnModInverse;BigInteger.prototype.pow=bnPow;BigInteger.prototype.gcd=bnGCD;BigInteger.prototype.isProbablePrime=bnIsProbablePrime;BigInteger.prototype.square=bnSquare;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function Arcfour(){this.i=0;this.j=0;this.S=new Array()}function ARC4init(d){var c,a,b;for(c=0;c<256;++c){this.S[c]=c}a=0;for(c=0;c<256;++c){a=(a+this.S[c]+d[c%d.length])&255;b=this.S[c];this.S[c]=this.S[a];this.S[a]=b}this.i=0;this.j=0}function ARC4next(){var a;this.i=(this.i+1)&255;this.j=(this.j+this.S[this.i])&255;a=this.S[this.i];this.S[this.i]=this.S[this.j];this.S[this.j]=a;return this.S[(a+this.S[this.i])&255]}Arcfour.prototype.init=ARC4init;Arcfour.prototype.next=ARC4next;function prng_newstate(){return new Arcfour()}var rng_psize=256;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a){rng_pool[rng_pptr++]^=a&255;rng_pool[rng_pptr++]^=(a>>8)&255;rng_pool[rng_pptr++]^=(a>>16)&255;rng_pool[rng_pptr++]^=(a>>24)&255;if(rng_pptr>=rng_psize){rng_pptr-=rng_psize}}function rng_seed_time(){rng_seed_int(new Date().getTime())}if(rng_pool==null){rng_pool=new Array();rng_pptr=0;var t;if(window.crypto&&window.crypto.getRandomValues){var ua=new Uint8Array(32);window.crypto.getRandomValues(ua);for(t=0;t<32;++t){rng_pool[rng_pptr++]=ua[t]}}if(navigator.appName=="Netscape"&&navigator.appVersion<"5"&&window.crypto){var z=window.crypto.random(32);for(t=0;t<z.length;++t){rng_pool[rng_pptr++]=z.charCodeAt(t)&255}}while(rng_pptr<rng_psize){t=Math.floor(65536*Math.random());rng_pool[rng_pptr++]=t>>>8;rng_pool[rng_pptr++]=t&255}rng_pptr=0;rng_seed_time()}function rng_get_byte(){if(rng_state==null){rng_seed_time();rng_state=prng_newstate();rng_state.init(rng_pool);for(rng_pptr=0;rng_pptr<rng_pool.length;++rng_pptr){rng_pool[rng_pptr]=0}rng_pptr=0}return rng_state.next()}function rng_get_bytes(b){var a;for(a=0;a<b.length;++a){b[a]=rng_get_byte()}}function SecureRandom(){}SecureRandom.prototype.nextBytes=rng_get_bytes;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function parseBigInt(b,a){return new BigInteger(b,a)}function linebrk(c,d){var a="";var b=0;while(b+d<c.length){a+=c.substring(b,b+d)+"\n";b+=d}return a+c.substring(b,c.length)}function byte2Hex(a){if(a<16){return"0"+a.toString(16)}else{return a.toString(16)}}function pkcs1pad2(e,h){if(h<e.length+11){alert("Message too long for RSA");return null}var g=new Array();var d=e.length-1;while(d>=0&&h>0){var f=e.charCodeAt(d--);if(f<128){g[--h]=f}else{if((f>127)&&(f<2048)){g[--h]=(f&63)|128;g[--h]=(f>>6)|192}else{g[--h]=(f&63)|128;g[--h]=((f>>6)&63)|128;g[--h]=(f>>12)|224}}}g[--h]=0;var b=new SecureRandom();var a=new Array();while(h>2){a[0]=0;while(a[0]==0){b.nextBytes(a)}g[--h]=a[0]}g[--h]=2;g[--h]=0;return new BigInteger(g)}function oaep_mgf1_arr(c,a,e){var b="",d=0;while(b.length<a){b+=e(String.fromCharCode.apply(String,c.concat([(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255])));d+=1}return b}var SHA1_SIZE=20;function oaep_pad(l,a,c){if(l.length+2*SHA1_SIZE+2>a){throw"Message too long for RSA"}var h="",d;for(d=0;d<a-l.length-2*SHA1_SIZE-2;d+=1){h+="\x00"}var e=rstr_sha1("")+h+"\x01"+l;var f=new Array(SHA1_SIZE);new SecureRandom().nextBytes(f);var g=oaep_mgf1_arr(f,e.length,c||rstr_sha1);var k=[];for(d=0;d<e.length;d+=1){k[d]=e.charCodeAt(d)^g.charCodeAt(d)}var j=oaep_mgf1_arr(k,f.length,rstr_sha1);var b=[0];for(d=0;d<f.length;d+=1){b[d+1]=f[d]^j.charCodeAt(d)}return new BigInteger(b.concat(k))}function RSAKey(){this.n=null;this.e=0;this.d=null;this.p=null;this.q=null;this.dmp1=null;this.dmq1=null;this.coeff=null}function RSASetPublic(b,a){this.isPublic=true;if(typeof b!=="string"){this.n=b;this.e=a}else{if(b!=null&&a!=null&&b.length>0&&a.length>0){this.n=parseBigInt(b,16);this.e=parseInt(a,16)}else{alert("Invalid RSA public key")}}}function RSADoPublic(a){return a.modPowInt(this.e,this.n)}function RSAEncrypt(d){var a=pkcs1pad2(d,(this.n.bitLength()+7)>>3);if(a==null){return null}var e=this.doPublic(a);if(e==null){return null}var b=e.toString(16);if((b.length&1)==0){return b}else{return"0"+b}}function RSAEncryptOAEP(e,d){var a=oaep_pad(e,(this.n.bitLength()+7)>>3,d);if(a==null){return null}var f=this.doPublic(a);if(f==null){return null}var b=f.toString(16);if((b.length&1)==0){return b}else{return"0"+b}}RSAKey.prototype.doPublic=RSADoPublic;RSAKey.prototype.setPublic=RSASetPublic;RSAKey.prototype.encrypt=RSAEncrypt;RSAKey.prototype.encryptOAEP=RSAEncryptOAEP;RSAKey.prototype.type="RSA";
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function pkcs1unpad2(g,j){var a=g.toByteArray();var f=0;while(f<a.length&&a[f]==0){++f}if(a.length-f!=j-1||a[f]!=2){return null}++f;while(a[f]!=0){if(++f>=a.length){return null}}var e="";while(++f<a.length){var h=a[f]&255;if(h<128){e+=String.fromCharCode(h)}else{if((h>191)&&(h<224)){e+=String.fromCharCode(((h&31)<<6)|(a[f+1]&63));++f}else{e+=String.fromCharCode(((h&15)<<12)|((a[f+1]&63)<<6)|(a[f+2]&63));f+=2}}}return e}function oaep_mgf1_str(c,a,e){var b="",d=0;while(b.length<a){b+=e(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]));d+=1}return b}var SHA1_SIZE=20;function oaep_unpad(l,b,e){l=l.toByteArray();var f;for(f=0;f<l.length;f+=1){l[f]&=255}while(l.length<b){l.unshift(0)}l=String.fromCharCode.apply(String,l);if(l.length<2*SHA1_SIZE+2){throw"Cipher too short"}var c=l.substr(1,SHA1_SIZE);var o=l.substr(SHA1_SIZE+1);var m=oaep_mgf1_str(o,SHA1_SIZE,e||rstr_sha1);var h=[],f;for(f=0;f<c.length;f+=1){h[f]=c.charCodeAt(f)^m.charCodeAt(f)}var j=oaep_mgf1_str(String.fromCharCode.apply(String,h),l.length-SHA1_SIZE,rstr_sha1);var g=[];for(f=0;f<o.length;f+=1){g[f]=o.charCodeAt(f)^j.charCodeAt(f)}g=String.fromCharCode.apply(String,g);if(g.substr(0,SHA1_SIZE)!==rstr_sha1("")){throw"Hash mismatch"}g=g.substr(SHA1_SIZE);var a=g.indexOf("\x01");var k=(a!=-1)?g.substr(0,a).lastIndexOf("\x00"):-1;if(k+1!=a){throw"Malformed data"}return g.substr(a+1)}function RSASetPrivate(c,a,b){this.isPrivate=true;if(typeof c!=="string"){this.n=c;this.e=a;this.d=b}else{if(c!=null&&a!=null&&c.length>0&&a.length>0){this.n=parseBigInt(c,16);this.e=parseInt(a,16);this.d=parseBigInt(b,16)}else{alert("Invalid RSA private key")}}}function RSASetPrivateEx(g,d,e,c,b,a,h,f){this.isPrivate=true;if(g==null){throw"RSASetPrivateEx N == null"}if(d==null){throw"RSASetPrivateEx E == null"}if(g.length==0){throw"RSASetPrivateEx N.length == 0"}if(d.length==0){throw"RSASetPrivateEx E.length == 0"}if(g!=null&&d!=null&&g.length>0&&d.length>0){this.n=parseBigInt(g,16);this.e=parseInt(d,16);this.d=parseBigInt(e,16);this.p=parseBigInt(c,16);this.q=parseBigInt(b,16);this.dmp1=parseBigInt(a,16);this.dmq1=parseBigInt(h,16);this.coeff=parseBigInt(f,16)}else{alert("Invalid RSA private key in RSASetPrivateEx")}}function RSAGenerate(b,i){var a=new SecureRandom();var f=b>>1;this.e=parseInt(i,16);var c=new BigInteger(i,16);for(;;){for(;;){this.p=new BigInteger(b-f,1,a);if(this.p.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.p.isProbablePrime(10)){break}}for(;;){this.q=new BigInteger(f,1,a);if(this.q.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.q.isProbablePrime(10)){break}}if(this.p.compareTo(this.q)<=0){var h=this.p;this.p=this.q;this.q=h}var g=this.p.subtract(BigInteger.ONE);var d=this.q.subtract(BigInteger.ONE);var e=g.multiply(d);if(e.gcd(c).compareTo(BigInteger.ONE)==0){this.n=this.p.multiply(this.q);this.d=c.modInverse(e);this.dmp1=this.d.mod(g);this.dmq1=this.d.mod(d);this.coeff=this.q.modInverse(this.p);break}}}function RSADoPrivate(a){if(this.p==null||this.q==null){return a.modPow(this.d,this.n)}var c=a.mod(this.p).modPow(this.dmp1,this.p);var b=a.mod(this.q).modPow(this.dmq1,this.q);while(c.compareTo(b)<0){c=c.add(this.p)}return c.subtract(b).multiply(this.coeff).mod(this.p).multiply(this.q).add(b)}function RSADecrypt(b){var d=parseBigInt(b,16);var a=this.doPrivate(d);if(a==null){return null}return pkcs1unpad2(a,(this.n.bitLength()+7)>>3)}function RSADecryptOAEP(d,b){var e=parseBigInt(d,16);var a=this.doPrivate(e);if(a==null){return null}return oaep_unpad(a,(this.n.bitLength()+7)>>3,b)}RSAKey.prototype.doPrivate=RSADoPrivate;RSAKey.prototype.setPrivate=RSASetPrivate;RSAKey.prototype.setPrivateEx=RSASetPrivateEx;RSAKey.prototype.generate=RSAGenerate;RSAKey.prototype.decrypt=RSADecrypt;RSAKey.prototype.decryptOAEP=RSADecryptOAEP;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function ECFieldElementFp(b,a){this.x=a;this.q=b}function feFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.x.equals(a.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(a){return new ECFieldElementFp(this.q,this.x.add(a.toBigInteger()).mod(this.q))}function feFpSubtract(a){return new ECFieldElementFp(this.q,this.x.subtract(a.toBigInteger()).mod(this.q))}function feFpMultiply(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;function ECPointFp(c,a,d,b){this.curve=c;this.x=a;this.y=d;if(b==null){this.z=BigInteger.ONE}else{this.z=b}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpEquals(a){if(a==this){return true}if(this.isInfinity()){return a.isInfinity()}if(a.isInfinity()){return this.isInfinity()}var c,b;c=a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if(!c.equals(BigInteger.ZERO)){return false}b=a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(l){if(this.isInfinity()){return l}if(l.isInfinity()){return this}var p=l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o=l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(o)){if(BigInteger.ZERO.equals(p)){return this.twice()}return this.curve.getInfinity()}var j=new BigInteger("3");var e=this.x.toBigInteger();var n=this.y.toBigInteger();var c=l.x.toBigInteger();var k=l.y.toBigInteger();var m=o.square();var i=m.multiply(o);var d=e.multiply(m);var g=p.square().multiply(this.z);var a=g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h=d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f=i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(h),f)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var g=new BigInteger("3");var c=this.x.toBigInteger();var h=this.y.toBigInteger();var e=h.multiply(this.z);var j=e.multiply(h).mod(this.curve.q);var i=this.curve.a.toBigInteger();var k=c.square().multiply(g);if(!BigInteger.ZERO.equals(i)){k=k.add(this.z.square().multiply(i))}k=k.mod(this.curve.q);var b=k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f=k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d=e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(b),this.curve.fromBigInteger(f),d)}function pointFpMultiply(b){if(this.isInfinity()){return this}if(b.signum()==0){return this.curve.getInfinity()}var g=b;var f=g.multiply(new BigInteger("3"));var l=this.negate();var d=this;var c;for(c=f.bitLength()-2;c>0;--c){d=d.twice();var a=f.testBit(c);var j=g.testBit(c);if(a!=j){d=d.add(a?this:l)}}return d}function pointFpMultiplyTwo(c,a,b){var d;if(c.bitLength()>b.bitLength()){d=c.bitLength()-1}else{d=b.bitLength()-1}var f=this.curve.getInfinity();var e=this.add(a);while(d>=0){f=f.twice();if(c.testBit(d)){if(b.testBit(d)){f=f.add(e)}else{f=f.add(this)}}else{if(b.testBit(d)){f=f.add(a)}}--d}return f}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(e,d,c){this.q=e;this.a=this.fromBigInteger(d);this.b=this.fromBigInteger(c);this.infinity=new ECPointFp(this,null,null)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.a.equals(a.a)&&this.b.equals(a.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(a){return new ECFieldElementFp(this.q,a)}function curveFpDecodePointHex(d){switch(parseInt(d.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var a=(d.length-2)/2;var c=d.substr(2,a);var b=d.substr(a+2,a);return new ECPointFp(this,this.fromBigInteger(new BigInteger(c,16)),this.fromBigInteger(new BigInteger(b,16)));default:return null}}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex=curveFpDecodePointHex;
	/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
	 */
	ECFieldElementFp.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)};ECPointFp.prototype.getEncoded=function(c){var d=function(h,f){var g=h.toByteArrayUnsigned();if(f<g.length){g=g.slice(g.length-f)}else{while(f>g.length){g.unshift(0)}}return g};var a=this.getX().toBigInteger();var e=this.getY().toBigInteger();var b=d(a,32);if(c){if(e.isEven()){b.unshift(2)}else{b.unshift(3)}}else{b.unshift(4);b=b.concat(d(e,32))}return b};ECPointFp.decodeFrom=function(g,c){var f=c[0];var e=c.length-1;var d=c.slice(1,1+e/2);var b=c.slice(1+e/2,1+e);d.unshift(0);b.unshift(0);var a=new BigInteger(d);var h=new BigInteger(b);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.decodeFromHex=function(g,c){var f=c.substr(0,2);var e=c.length-2;var d=c.substr(2,e/2);var b=c.substr(2+e/2,e/2);var a=new BigInteger(d,16);var h=new BigInteger(b,16);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.prototype.add2D=function(c){if(this.isInfinity()){return c}if(c.isInfinity()){return this}if(this.x.equals(c.x)){if(this.y.equals(c.y)){return this.twice()}return this.curve.getInfinity()}var g=c.x.subtract(this.x);var e=c.y.subtract(this.y);var a=e.divide(g);var d=a.square().subtract(this.x).subtract(c.x);var f=a.multiply(this.x.subtract(d)).subtract(this.y);return new ECPointFp(this.curve,d,f)};ECPointFp.prototype.twice2D=function(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var b=this.curve.fromBigInteger(BigInteger.valueOf(2));var e=this.curve.fromBigInteger(BigInteger.valueOf(3));var a=this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(b));var c=a.square().subtract(this.x.multiply(b));var d=a.multiply(this.x.subtract(c)).subtract(this.y);return new ECPointFp(this.curve,c,d)};ECPointFp.prototype.multiply2D=function(b){if(this.isInfinity()){return this}if(b.signum()==0){return this.curve.getInfinity()}var g=b;var f=g.multiply(new BigInteger("3"));var l=this.negate();var d=this;var c;for(c=f.bitLength()-2;c>0;--c){d=d.twice();var a=f.testBit(c);var j=g.testBit(c);if(a!=j){d=d.add2D(a?this:l)}}return d};ECPointFp.prototype.isOnCurve=function(){var d=this.getX().toBigInteger();var i=this.getY().toBigInteger();var f=this.curve.getA().toBigInteger();var c=this.curve.getB().toBigInteger();var h=this.curve.getQ();var e=i.multiply(i).mod(h);var g=d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);return e.equals(g)};ECPointFp.prototype.toString=function(){return"("+this.getX().toBigInteger().toString()+","+this.getY().toBigInteger().toString()+")"};ECPointFp.prototype.validate=function(){var c=this.curve.getQ();if(this.isInfinity()){throw new Error("Point is at infinity.")}var a=this.getX().toBigInteger();var b=this.getY().toBigInteger();if(a.compareTo(BigInteger.ONE)<0||a.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error("x coordinate out of bounds")}if(b.compareTo(BigInteger.ONE)<0||b.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error("y coordinate out of bounds")}if(!this.isOnCurve()){throw new Error("Point is not on the curve.")}if(this.multiply(c).isInfinity()){throw new Error("Point is not a scalar multiple of G.")}return true};
	/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
	 */
	var jsonParse=(function(){var e="(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j='(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i='(?:"'+j+'*")';var d=new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|"+e+"|"+i+")","g");var k=new RegExp("\\\\(?:([^u])|u(.{4}))","g");var g={'"':'"',"/":"/","\\":"\\",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function h(l,m,n){return m?g[m]:String.fromCharCode(parseInt(n,16))}var c=new String("");var a="\\";var f={"{":Object,"[":Array};var b=Object.hasOwnProperty;return function(u,q){var p=u.match(d);var x;var v=p[0];var l=false;if("{"===v){x={}}else{if("["===v){x=[]}else{x=[];l=true}}var t;var r=[x];for(var o=1-l,m=p.length;o<m;++o){v=p[o];var w;switch(v.charCodeAt(0)){default:w=r[0];w[t||w.length]=+(v);t=void 0;break;case 34:v=v.substring(1,v.length-1);if(v.indexOf(a)!==-1){v=v.replace(k,h)}w=r[0];if(!t){if(w instanceof Array){t=w.length}else{t=v||c;break}}w[t]=v;t=void 0;break;case 91:w=r[0];r.unshift(w[t||w.length]=[]);t=void 0;break;case 93:r.shift();break;case 102:w=r[0];w[t||w.length]=false;t=void 0;break;case 110:w=r[0];w[t||w.length]=null;t=void 0;break;case 116:w=r[0];w[t||w.length]=true;t=void 0;break;case 123:w=r[0];r.unshift(w[t||w.length]={});t=void 0;break;case 125:r.shift();break}}if(l){if(r.length!==1){throw new Error()}x=x[0]}else{if(r.length){throw new Error()}}if(q){var s=function(C,B){var D=C[B];if(D&&typeof D==="object"){var n=null;for(var z in D){if(b.call(D,z)&&D!==C){var y=s(D,z);if(y!==void 0){D[z]=y}else{if(!n){n=[]}n.push(z)}}}if(n){for(var A=n.length;--A>=0;){delete D[n[A]]}}}return q.call(C,B,D)};x=s({"":x},"")}return x}})();
	/*! asn1-1.0.11.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}KJUR.asn1.ASN1Util=new function(){this.integerToByteHex=function(a){var b=a.toString(16);if((b.length%2)==1){b="0"+b}return b};this.bigIntToMinTwosComplementsHex=function(j){var f=j.toString(16);if(f.substr(0,1)!="-"){if(f.length%2==1){f="0"+f}else{if(!f.match(/^[0-7]/)){f="00"+f}}}else{var a=f.substr(1);var e=a.length;if(e%2==1){e+=1}else{if(!f.match(/^[0-7]/)){e+=2}}var g="";for(var d=0;d<e;d++){g+="f"}var c=new BigInteger(g,16);var b=c.xor(j).add(BigInteger.ONE);f=b.toString(16).replace(/^-/,"")}return f};this.getPEMStringFromHex=function(a,b){var c=hextob64(a);var d=c.replace(/(.{64})/g,"$1\r\n");d=d.replace(/\r\n$/,"");return"-----BEGIN "+b+"-----\r\n"+d+"\r\n-----END "+b+"-----\r\n"};this.newObject=function(b){var g=KJUR.asn1;var k=Object.keys(b);if(k.length!=1){throw"key of param shall be only one."}var j=k[0];if(":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":"+j+":")==-1){throw"undefined key: "+j}if(j=="bool"){return new g.DERBoolean(b[j])}if(j=="int"){return new g.DERInteger(b[j])}if(j=="bitstr"){return new g.DERBitString(b[j])}if(j=="octstr"){return new g.DEROctetString(b[j])}if(j=="null"){return new g.DERNull(b[j])}if(j=="oid"){return new g.DERObjectIdentifier(b[j])}if(j=="enum"){return new g.DEREnumerated(b[j])}if(j=="utf8str"){return new g.DERUTF8String(b[j])}if(j=="numstr"){return new g.DERNumericString(b[j])}if(j=="prnstr"){return new g.DERPrintableString(b[j])}if(j=="telstr"){return new g.DERTeletexString(b[j])}if(j=="ia5str"){return new g.DERIA5String(b[j])}if(j=="utctime"){return new g.DERUTCTime(b[j])}if(j=="gentime"){return new g.DERGeneralizedTime(b[j])}if(j=="seq"){var m=b[j];var h=[];for(var e=0;e<m.length;e++){var l=g.ASN1Util.newObject(m[e]);h.push(l)}return new g.DERSequence({array:h})}if(j=="set"){var m=b[j];var h=[];for(var e=0;e<m.length;e++){var l=g.ASN1Util.newObject(m[e]);h.push(l)}return new g.DERSet({array:h})}if(j=="tag"){var c=b[j];if(Object.prototype.toString.call(c)==="[object Array]"&&c.length==3){var d=g.ASN1Util.newObject(c[2]);return new g.DERTaggedObject({tag:c[0],explicit:c[1],obj:d})}else{var f={};if(c.explicit!==undefined){f.explicit=c.explicit}if(c.tag!==undefined){f.tag=c.tag}if(c.obj===undefined){throw"obj shall be specified for 'tag'."}f.obj=g.ASN1Util.newObject(c.obj);return new g.DERTaggedObject(f)}}};this.jsonToASN1HEX=function(b){var a=this.newObject(b);return a.getEncodedHex()}};KJUR.asn1.ASN1Util.oidHexToInt=function(a){var j="";var k=parseInt(a.substr(0,2),16);var d=Math.floor(k/40);var c=k%40;var j=d+"."+c;var e="";for(var f=2;f<a.length;f+=2){var g=parseInt(a.substr(f,2),16);var h=("00000000"+g.toString(2)).slice(-8);e=e+h.substr(1,7);if(h.substr(0,1)=="0"){var b=new BigInteger(e,2);j=j+"."+b.toString(10);e=""}}return j};KJUR.asn1.ASN1Util.oidIntToHex=function(f){var e=function(a){var k=a.toString(16);if(k.length==1){k="0"+k}return k};var d=function(o){var n="";var k=new BigInteger(o,10);var a=k.toString(2);var l=7-a.length%7;if(l==7){l=0}var q="";for(var m=0;m<l;m++){q+="0"}a=q+a;for(var m=0;m<a.length-1;m+=7){var p=a.substr(m,7);if(m!=a.length-7){p="1"+p}n+=e(parseInt(p,2))}return n};if(!f.match(/^[0-9.]+$/)){throw"malformed oid string: "+f}var g="";var b=f.split(".");var j=parseInt(b[0])*40+parseInt(b[1]);g+=e(j);b.splice(0,2);for(var c=0;c<b.length;c++){g+=d(b[c])}return g};KJUR.asn1.ASN1Object=function(){var c=true;var b=null;var d="00";var e="00";var a="";this.getLengthHexFromValue=function(){if(typeof this.hV=="undefined"||this.hV==null){throw"this.hV is null or undefined."}if(this.hV.length%2==1){throw"value hex must be even length: n="+a.length+",v="+this.hV}var i=this.hV.length/2;var h=i.toString(16);if(h.length%2==1){h="0"+h}if(i<128){return h}else{var g=h.length/2;if(g>15){throw"ASN.1 length too long to represent by 8x: n = "+i.toString(16)}var f=128+g;return f.toString(16)+h}};this.getEncodedHex=function(){if(this.hTLV==null||this.isModified){this.hV=this.getFreshValueHex();this.hL=this.getLengthHexFromValue();this.hTLV=this.hT+this.hL+this.hV;this.isModified=false}return this.hTLV};this.getValueHex=function(){this.getEncodedHex();return this.hV};this.getFreshValueHex=function(){return""}};KJUR.asn1.DERAbstractString=function(c){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b=null;var a=null;this.getString=function(){return this.s};this.setString=function(d){this.hTLV=null;this.isModified=true;this.s=d;this.hV=stohex(this.s)};this.setStringHex=function(d){this.hTLV=null;this.isModified=true;this.s=null;this.hV=d};this.getFreshValueHex=function(){return this.hV};if(typeof c!="undefined"){if(typeof c=="string"){this.setString(c)}else{if(typeof c.str!="undefined"){this.setString(c.str)}else{if(typeof c.hex!="undefined"){this.setStringHex(c.hex)}}}}};YAHOO.lang.extend(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime=function(c){KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b=null;var a=null;this.localDateToUTC=function(f){utc=f.getTime()+(f.getTimezoneOffset()*60000);var e=new Date(utc);return e};this.formatDate=function(m,o,e){var g=this.zeroPadding;var n=this.localDateToUTC(m);var p=String(n.getFullYear());if(o=="utc"){p=p.substr(2,2)}var l=g(String(n.getMonth()+1),2);var q=g(String(n.getDate()),2);var h=g(String(n.getHours()),2);var i=g(String(n.getMinutes()),2);var j=g(String(n.getSeconds()),2);var r=p+l+q+h+i+j;if(e===true){var f=n.getMilliseconds();if(f!=0){var k=g(String(f),3);k=k.replace(/[0]+$/,"");r=r+"."+k}}return r+"Z"};this.zeroPadding=function(e,d){if(e.length>=d){return e}return new Array(d-e.length+1).join("0")+e};this.getString=function(){return this.s};this.setString=function(d){this.hTLV=null;this.isModified=true;this.s=d;this.hV=stohex(d)};this.setByDateValue=function(h,j,e,d,f,g){var i=new Date(Date.UTC(h,j-1,e,d,f,g,0));this.setByDate(i)};this.getFreshValueHex=function(){return this.hV}};YAHOO.lang.extend(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured=function(b){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a=null;this.setByASN1ObjectArray=function(c){this.hTLV=null;this.isModified=true;this.asn1Array=c};this.appendASN1Object=function(c){this.hTLV=null;this.isModified=true;this.asn1Array.push(c)};this.asn1Array=new Array();if(typeof b!="undefined"){if(typeof b.array!="undefined"){this.asn1Array=b.array}}};YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean=function(){KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT="01";this.hTLV="0101ff"};YAHOO.lang.extend(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger=function(a){KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT="02";this.setByBigInteger=function(b){this.hTLV=null;this.isModified=true;this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b)};this.setByInteger=function(c){var b=new BigInteger(String(c),10);this.setByBigInteger(b)};this.setValueHex=function(b){this.hV=b};this.getFreshValueHex=function(){return this.hV};if(typeof a!="undefined"){if(typeof a.bigint!="undefined"){this.setByBigInteger(a.bigint)}else{if(typeof a["int"]!="undefined"){this.setByInteger(a["int"])}else{if(typeof a=="number"){this.setByInteger(a)}else{if(typeof a.hex!="undefined"){this.setValueHex(a.hex)}}}}}};YAHOO.lang.extend(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString=function(b){if(b!==undefined&&typeof b.obj!=="undefined"){var a=KJUR.asn1.ASN1Util.newObject(b.obj);b.hex="00"+a.getEncodedHex()}KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT="03";this.setHexValueIncludingUnusedBits=function(c){this.hTLV=null;this.isModified=true;this.hV=c};this.setUnusedBitsAndHexValue=function(c,e){if(c<0||7<c){throw"unused bits shall be from 0 to 7: u = "+c}var d="0"+c;this.hTLV=null;this.isModified=true;this.hV=d+e};this.setByBinaryString=function(e){e=e.replace(/0+$/,"");var f=8-e.length%8;if(f==8){f=0}for(var g=0;g<=f;g++){e+="0"}var j="";for(var g=0;g<e.length-1;g+=8){var d=e.substr(g,8);var c=parseInt(d,2).toString(16);if(c.length==1){c="0"+c}j+=c}this.hTLV=null;this.isModified=true;this.hV="0"+f+j};this.setByBooleanArray=function(e){var d="";for(var c=0;c<e.length;c++){if(e[c]==true){d+="1"}else{d+="0"}}this.setByBinaryString(d)};this.newFalseArray=function(e){var c=new Array(e);for(var d=0;d<e;d++){c[d]=false}return c};this.getFreshValueHex=function(){return this.hV};if(typeof b!="undefined"){if(typeof b=="string"&&b.toLowerCase().match(/^[0-9a-f]+$/)){this.setHexValueIncludingUnusedBits(b)}else{if(typeof b.hex!="undefined"){this.setHexValueIncludingUnusedBits(b.hex)}else{if(typeof b.bin!="undefined"){this.setByBinaryString(b.bin)}else{if(typeof b.array!="undefined"){this.setByBooleanArray(b.array)}}}}}};YAHOO.lang.extend(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString=function(b){if(b!==undefined&&typeof b.obj!=="undefined"){var a=KJUR.asn1.ASN1Util.newObject(b.obj);b.hex=a.getEncodedHex()}KJUR.asn1.DEROctetString.superclass.constructor.call(this,b);this.hT="04"};YAHOO.lang.extend(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull=function(){KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT="05";this.hTLV="0500"};YAHOO.lang.extend(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier=function(c){var b=function(d){var e=d.toString(16);if(e.length==1){e="0"+e}return e};var a=function(k){var j="";var e=new BigInteger(k,10);var d=e.toString(2);var f=7-d.length%7;if(f==7){f=0}var m="";for(var g=0;g<f;g++){m+="0"}d=m+d;for(var g=0;g<d.length-1;g+=7){var l=d.substr(g,7);if(g!=d.length-7){l="1"+l}j+=b(parseInt(l,2))}return j};KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT="06";this.setValueHex=function(d){this.hTLV=null;this.isModified=true;this.s=null;this.hV=d};this.setValueOidString=function(f){if(!f.match(/^[0-9.]+$/)){throw"malformed oid string: "+f}var g="";var d=f.split(".");var j=parseInt(d[0])*40+parseInt(d[1]);g+=b(j);d.splice(0,2);for(var e=0;e<d.length;e++){g+=a(d[e])}this.hTLV=null;this.isModified=true;this.s=null;this.hV=g};this.setValueName=function(e){if(typeof KJUR.asn1.x509.OID.name2oidList[e]!="undefined"){var d=KJUR.asn1.x509.OID.name2oidList[e];this.setValueOidString(d)}else{throw"DERObjectIdentifier oidName undefined: "+e}};this.getFreshValueHex=function(){return this.hV};if(typeof c!="undefined"){if(typeof c=="string"&&c.match(/^[0-2].[0-9.]+$/)){this.setValueOidString(c)}else{if(KJUR.asn1.x509.OID.name2oidList[c]!==undefined){this.setValueOidString(KJUR.asn1.x509.OID.name2oidList[c])}else{if(typeof c.oid!="undefined"){this.setValueOidString(c.oid)}else{if(typeof c.hex!="undefined"){this.setValueHex(c.hex)}else{if(typeof c.name!="undefined"){this.setValueName(c.name)}}}}}}};YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated=function(a){KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT="0a";this.setByBigInteger=function(b){this.hTLV=null;this.isModified=true;this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b)};this.setByInteger=function(c){var b=new BigInteger(String(c),10);this.setByBigInteger(b)};this.setValueHex=function(b){this.hV=b};this.getFreshValueHex=function(){return this.hV};if(typeof a!="undefined"){if(typeof a["int"]!="undefined"){this.setByInteger(a["int"])}else{if(typeof a=="number"){this.setByInteger(a)}else{if(typeof a.hex!="undefined"){this.setValueHex(a.hex)}}}}};YAHOO.lang.extend(KJUR.asn1.DEREnumerated,KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String=function(a){KJUR.asn1.DERUTF8String.superclass.constructor.call(this,a);this.hT="0c"};YAHOO.lang.extend(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString=function(a){KJUR.asn1.DERNumericString.superclass.constructor.call(this,a);this.hT="12"};YAHOO.lang.extend(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString=function(a){KJUR.asn1.DERPrintableString.superclass.constructor.call(this,a);this.hT="13"};YAHOO.lang.extend(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString=function(a){KJUR.asn1.DERTeletexString.superclass.constructor.call(this,a);this.hT="14"};YAHOO.lang.extend(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String=function(a){KJUR.asn1.DERIA5String.superclass.constructor.call(this,a);this.hT="16"};YAHOO.lang.extend(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime=function(a){KJUR.asn1.DERUTCTime.superclass.constructor.call(this,a);this.hT="17";this.setByDate=function(b){this.hTLV=null;this.isModified=true;this.date=b;this.s=this.formatDate(this.date,"utc");this.hV=stohex(this.s)};this.getFreshValueHex=function(){if(typeof this.date=="undefined"&&typeof this.s=="undefined"){this.date=new Date();this.s=this.formatDate(this.date,"utc");this.hV=stohex(this.s)}return this.hV};if(a!==undefined){if(a.str!==undefined){this.setString(a.str)}else{if(typeof a=="string"&&a.match(/^[0-9]{12}Z$/)){this.setString(a)}else{if(a.hex!==undefined){this.setStringHex(a.hex)}else{if(a.date!==undefined){this.setByDate(a.date)}}}}}};YAHOO.lang.extend(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime=function(a){KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,a);this.hT="18";this.withMillis=false;this.setByDate=function(b){this.hTLV=null;this.isModified=true;this.date=b;this.s=this.formatDate(this.date,"gen",this.withMillis);this.hV=stohex(this.s)};this.getFreshValueHex=function(){if(this.date===undefined&&this.s===undefined){this.date=new Date();this.s=this.formatDate(this.date,"gen",this.withMillis);this.hV=stohex(this.s)}return this.hV};if(a!==undefined){if(a.str!==undefined){this.setString(a.str)}else{if(typeof a=="string"&&a.match(/^[0-9]{14}Z$/)){this.setString(a)}else{if(a.hex!==undefined){this.setStringHex(a.hex)}else{if(a.date!==undefined){this.setByDate(a.date)}}}}if(a.millis===true){this.withMillis=true}}};YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence=function(a){KJUR.asn1.DERSequence.superclass.constructor.call(this,a);this.hT="30";this.getFreshValueHex=function(){var c="";for(var b=0;b<this.asn1Array.length;b++){var d=this.asn1Array[b];c+=d.getEncodedHex()}this.hV=c;return this.hV}};YAHOO.lang.extend(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet=function(a){KJUR.asn1.DERSet.superclass.constructor.call(this,a);this.hT="31";this.sortFlag=true;this.getFreshValueHex=function(){var b=new Array();for(var c=0;c<this.asn1Array.length;c++){var d=this.asn1Array[c];b.push(d.getEncodedHex())}if(this.sortFlag==true){b.sort()}this.hV=b.join("");return this.hV};if(typeof a!="undefined"){if(typeof a.sortflag!="undefined"&&a.sortflag==false){this.sortFlag=false}}};YAHOO.lang.extend(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject=function(a){KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);this.hT="a0";this.hV="";this.isExplicit=true;this.asn1Object=null;this.setASN1Object=function(b,c,d){this.hT=c;this.isExplicit=b;this.asn1Object=d;if(this.isExplicit){this.hV=this.asn1Object.getEncodedHex();this.hTLV=null;this.isModified=true}else{this.hV=null;this.hTLV=d.getEncodedHex();this.hTLV=this.hTLV.replace(/^../,c);this.isModified=false}};this.getFreshValueHex=function(){return this.hV};if(typeof a!="undefined"){if(typeof a.tag!="undefined"){this.hT=a.tag}if(typeof a.explicit!="undefined"){this.isExplicit=a.explicit}if(typeof a.obj!="undefined"){this.asn1Object=a.obj;this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)}}};YAHOO.lang.extend(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object);
	/*! asn1hex-1.1.7.js (c) 2012-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	var ASN1HEX=new function(){};ASN1HEX.getByteLengthOfL_AtObj=function(b,c){if(b.substring(c+2,c+3)!="8"){return 1}var a=parseInt(b.substring(c+3,c+4));if(a==0){return -1}if(0<a&&a<10){return a+1}return -2};ASN1HEX.getHexOfL_AtObj=function(b,c){var a=ASN1HEX.getByteLengthOfL_AtObj(b,c);if(a<1){return""}return b.substring(c+2,c+2+a*2)};ASN1HEX.getIntOfL_AtObj=function(c,d){var b=ASN1HEX.getHexOfL_AtObj(c,d);if(b==""){return -1}var a;if(parseInt(b.substring(0,1))<8){a=new BigInteger(b,16)}else{a=new BigInteger(b.substring(2),16)}return a.intValue()};ASN1HEX.getStartPosOfV_AtObj=function(b,c){var a=ASN1HEX.getByteLengthOfL_AtObj(b,c);if(a<0){return a}return c+(a+1)*2};ASN1HEX.getHexOfV_AtObj=function(c,d){var b=ASN1HEX.getStartPosOfV_AtObj(c,d);var a=ASN1HEX.getIntOfL_AtObj(c,d);return c.substring(b,b+a*2)};ASN1HEX.getHexOfTLV_AtObj=function(c,e){var b=c.substr(e,2);var d=ASN1HEX.getHexOfL_AtObj(c,e);var a=ASN1HEX.getHexOfV_AtObj(c,e);return b+d+a};ASN1HEX.getPosOfNextSibling_AtObj=function(c,d){var b=ASN1HEX.getStartPosOfV_AtObj(c,d);var a=ASN1HEX.getIntOfL_AtObj(c,d);return b+a*2};ASN1HEX.getPosArrayOfChildren_AtObj=function(f,j){var c=new Array();var i=ASN1HEX.getStartPosOfV_AtObj(f,j);if(f.substr(j,2)=="03"){c.push(i+2)}else{c.push(i)}var b=ASN1HEX.getIntOfL_AtObj(f,j);var g=i;var d=0;while(1){var e=ASN1HEX.getPosOfNextSibling_AtObj(f,g);if(e==null||(e-i>=(b*2))){break}if(d>=200){break}c.push(e);g=e;d++}return c};ASN1HEX.getNthChildIndex_AtObj=function(d,b,e){var c=ASN1HEX.getPosArrayOfChildren_AtObj(d,b);return c[e]};ASN1HEX.getDecendantIndexByNthList=function(e,d,c){if(c.length==0){return d}var f=c.shift();var b=ASN1HEX.getPosArrayOfChildren_AtObj(e,d);return ASN1HEX.getDecendantIndexByNthList(e,b[f],c)};ASN1HEX.getDecendantHexTLVByNthList=function(d,c,b){var a=ASN1HEX.getDecendantIndexByNthList(d,c,b);return ASN1HEX.getHexOfTLV_AtObj(d,a)};ASN1HEX.getDecendantHexVByNthList=function(d,c,b){var a=ASN1HEX.getDecendantIndexByNthList(d,c,b);return ASN1HEX.getHexOfV_AtObj(d,a)};ASN1HEX.getVbyList=function(d,c,b,e){var a=ASN1HEX.getDecendantIndexByNthList(d,c,b);if(a===undefined){throw"can't find nthList object"}if(e!==undefined){if(d.substr(a,2)!=e){throw"checking tag doesn't match: "+d.substr(a,2)+"!="+e}}return ASN1HEX.getHexOfV_AtObj(d,a)};ASN1HEX.hextooidstr=function(e){var h=function(b,a){if(b.length>=a){return b}return new Array(a-b.length+1).join("0")+b};var l=[];var o=e.substr(0,2);var f=parseInt(o,16);l[0]=new String(Math.floor(f/40));l[1]=new String(f%40);var m=e.substr(2);var k=[];for(var g=0;g<m.length/2;g++){k.push(parseInt(m.substr(g*2,2),16))}var j=[];var d="";for(var g=0;g<k.length;g++){if(k[g]&128){d=d+h((k[g]&127).toString(2),7)}else{d=d+h((k[g]&127).toString(2),7);j.push(new String(parseInt(d,2)));d=""}}var n=l.join(".");if(j.length>0){n=n+"."+j.join(".")}return n};ASN1HEX.dump=function(e,c,k,g){var o=function(w,i){if(w.length<=i*2){return w}else{var v=w.substr(0,i)+"..(total "+w.length/2+"bytes).."+w.substr(w.length-i,i);return v}};if(c===undefined){c={ommit_long_octet:32}}if(k===undefined){k=0}if(g===undefined){g=""}var r=c.ommit_long_octet;if(e.substr(k,2)=="01"){var h=ASN1HEX.getHexOfV_AtObj(e,k);if(h=="00"){return g+"BOOLEAN FALSE\n"}else{return g+"BOOLEAN TRUE\n"}}if(e.substr(k,2)=="02"){var h=ASN1HEX.getHexOfV_AtObj(e,k);return g+"INTEGER "+o(h,r)+"\n"}if(e.substr(k,2)=="03"){var h=ASN1HEX.getHexOfV_AtObj(e,k);return g+"BITSTRING "+o(h,r)+"\n"}if(e.substr(k,2)=="04"){var h=ASN1HEX.getHexOfV_AtObj(e,k);if(ASN1HEX.isASN1HEX(h)){var j=g+"OCTETSTRING, encapsulates\n";j=j+ASN1HEX.dump(h,c,0,g+"  ");return j}else{return g+"OCTETSTRING "+o(h,r)+"\n"}}if(e.substr(k,2)=="05"){return g+"NULL\n"}if(e.substr(k,2)=="06"){var l=ASN1HEX.getHexOfV_AtObj(e,k);var a=KJUR.asn1.ASN1Util.oidHexToInt(l);var n=KJUR.asn1.x509.OID.oid2name(a);var b=a.replace(/\./g," ");if(n!=""){return g+"ObjectIdentifier "+n+" ("+b+")\n"}else{return g+"ObjectIdentifier ("+b+")\n"}}if(e.substr(k,2)=="0c"){return g+"UTF8String '"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+"'\n"}if(e.substr(k,2)=="13"){return g+"PrintableString '"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+"'\n"}if(e.substr(k,2)=="14"){return g+"TeletexString '"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+"'\n"}if(e.substr(k,2)=="16"){return g+"IA5String '"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+"'\n"}if(e.substr(k,2)=="17"){return g+"UTCTime "+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+"\n"}if(e.substr(k,2)=="18"){return g+"GeneralizedTime "+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+"\n"}if(e.substr(k,2)=="30"){if(e.substr(k,4)=="3000"){return g+"SEQUENCE {}\n"}var j=g+"SEQUENCE\n";var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,k);var f=c;if((d.length==2||d.length==3)&&e.substr(d[0],2)=="06"&&e.substr(d[d.length-1],2)=="04"){var t=ASN1HEX.getHexOfV_AtObj(e,d[0]);var a=KJUR.asn1.ASN1Util.oidHexToInt(t);var n=KJUR.asn1.x509.OID.oid2name(a);var p=JSON.parse(JSON.stringify(c));p.x509ExtName=n;f=p}for(var q=0;q<d.length;q++){j=j+ASN1HEX.dump(e,f,d[q],g+"  ")}return j}if(e.substr(k,2)=="31"){var j=g+"SET\n";var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,k);for(var q=0;q<d.length;q++){j=j+ASN1HEX.dump(e,c,d[q],g+"  ")}return j}var u=parseInt(e.substr(k,2),16);if((u&128)!=0){var m=u&31;if((u&32)!=0){var j=g+"["+m+"]\n";var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,k);for(var q=0;q<d.length;q++){j=j+ASN1HEX.dump(e,c,d[q],g+"  ")}return j}else{var h=ASN1HEX.getHexOfV_AtObj(e,k);if(h.substr(0,8)=="68747470"){h=hextoutf8(h)}if(c.x509ExtName==="subjectAltName"&&m==2){h=hextoutf8(h)}var j=g+"["+m+"] "+h+"\n";return j}}return g+"UNKNOWN("+e.substr(k,2)+") "+ASN1HEX.getHexOfV_AtObj(e,k)+"\n"};ASN1HEX.isASN1HEX=function(d){if(d.length%2==1){return false}var c=ASN1HEX.getIntOfL_AtObj(d,0);var b=d.substr(0,2);var e=ASN1HEX.getHexOfL_AtObj(d,0);var a=d.length-b.length-e.length;if(a==c*2){return true}return false};
	/*! asn1x509-1.0.15.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.x509=="undefined"||!KJUR.asn1.x509){KJUR.asn1.x509={}}KJUR.asn1.x509.Certificate=function(g){KJUR.asn1.x509.Certificate.superclass.constructor.call(this);var b=null;var d=null;var f=null;var c=null;var a=null;var e=null;this.setRsaPrvKeyByPEMandPass=function(i,k){var h=PKCS5PKEY.getDecryptedKeyHex(i,k);var j=new RSAKey();j.readPrivateKeyFromASN1HexString(h);this.prvKey=j};this.sign=function(){this.asn1SignatureAlg=this.asn1TBSCert.asn1SignatureAlg;sig=new KJUR.crypto.Signature({alg:"SHA1withRSA"});sig.init(this.prvKey);sig.updateHex(this.asn1TBSCert.getEncodedHex());this.hexSig=sig.sign();this.asn1Sig=new KJUR.asn1.DERBitString({hex:"00"+this.hexSig});var h=new KJUR.asn1.DERSequence({array:[this.asn1TBSCert,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=h.getEncodedHex();this.isModified=false};this.setSignatureHex=function(h){this.asn1SignatureAlg=this.asn1TBSCert.asn1SignatureAlg;this.hexSig=h;this.asn1Sig=new KJUR.asn1.DERBitString({hex:"00"+this.hexSig});var i=new KJUR.asn1.DERSequence({array:[this.asn1TBSCert,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=i.getEncodedHex();this.isModified=false};this.getEncodedHex=function(){if(this.isModified==false&&this.hTLV!=null){return this.hTLV}throw"not signed yet"};this.getPEMString=function(){var j=this.getEncodedHex();var h=CryptoJS.enc.Hex.parse(j);var i=CryptoJS.enc.Base64.stringify(h);var k=i.replace(/(.{64})/g,"$1\r\n");return"-----BEGIN CERTIFICATE-----\r\n"+k+"\r\n-----END CERTIFICATE-----\r\n"};if(typeof g!="undefined"){if(typeof g.tbscertobj!="undefined"){this.asn1TBSCert=g.tbscertobj}if(typeof g.prvkeyobj!="undefined"){this.prvKey=g.prvkeyobj}else{if(typeof g.rsaprvkey!="undefined"){this.prvKey=g.rsaprvkey}else{if((typeof g.rsaprvpem!="undefined")&&(typeof g.rsaprvpas!="undefined")){this.setRsaPrvKeyByPEMandPass(g.rsaprvpem,g.rsaprvpas)}}}}};YAHOO.lang.extend(KJUR.asn1.x509.Certificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertificate=function(a){KJUR.asn1.x509.TBSCertificate.superclass.constructor.call(this);this._initialize=function(){this.asn1Array=new Array();this.asn1Version=new KJUR.asn1.DERTaggedObject({obj:new KJUR.asn1.DERInteger({"int":2})});this.asn1SerialNumber=null;this.asn1SignatureAlg=null;this.asn1Issuer=null;this.asn1NotBefore=null;this.asn1NotAfter=null;this.asn1Subject=null;this.asn1SubjPKey=null;this.extensionsArray=new Array()};this.setSerialNumberByParam=function(b){this.asn1SerialNumber=new KJUR.asn1.DERInteger(b)};this.setSignatureAlgByParam=function(b){this.asn1SignatureAlg=new KJUR.asn1.x509.AlgorithmIdentifier(b)};this.setIssuerByParam=function(b){this.asn1Issuer=new KJUR.asn1.x509.X500Name(b)};this.setNotBeforeByParam=function(b){this.asn1NotBefore=new KJUR.asn1.x509.Time(b)};this.setNotAfterByParam=function(b){this.asn1NotAfter=new KJUR.asn1.x509.Time(b)};this.setSubjectByParam=function(b){this.asn1Subject=new KJUR.asn1.x509.X500Name(b)};this.setSubjectPublicKeyByParam=function(b){this.asn1SubjPKey=new KJUR.asn1.x509.SubjectPublicKeyInfo(b)};this.setSubjectPublicKeyByGetKey=function(c){var b=KEYUTIL.getKey(c);this.asn1SubjPKey=new KJUR.asn1.x509.SubjectPublicKeyInfo(b)};this.appendExtension=function(b){this.extensionsArray.push(b)};this.appendExtensionByName=function(d,b){if(d.toLowerCase()=="basicconstraints"){var c=new KJUR.asn1.x509.BasicConstraints(b);this.appendExtension(c)}else{if(d.toLowerCase()=="keyusage"){var c=new KJUR.asn1.x509.KeyUsage(b);this.appendExtension(c)}else{if(d.toLowerCase()=="crldistributionpoints"){var c=new KJUR.asn1.x509.CRLDistributionPoints(b);this.appendExtension(c)}else{if(d.toLowerCase()=="extkeyusage"){var c=new KJUR.asn1.x509.ExtKeyUsage(b);this.appendExtension(c)}else{if(d.toLowerCase()=="authoritykeyidentifier"){var c=new KJUR.asn1.x509.AuthorityKeyIdentifier(b);this.appendExtension(c)}else{throw"unsupported extension name: "+d}}}}}};this.getEncodedHex=function(){if(this.asn1NotBefore==null||this.asn1NotAfter==null){throw"notBefore and/or notAfter not set"}var c=new KJUR.asn1.DERSequence({array:[this.asn1NotBefore,this.asn1NotAfter]});this.asn1Array=new Array();this.asn1Array.push(this.asn1Version);this.asn1Array.push(this.asn1SerialNumber);this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(c);this.asn1Array.push(this.asn1Subject);this.asn1Array.push(this.asn1SubjPKey);if(this.extensionsArray.length>0){var d=new KJUR.asn1.DERSequence({array:this.extensionsArray});var b=new KJUR.asn1.DERTaggedObject({explicit:true,tag:"a3",obj:d});this.asn1Array.push(b)}var e=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=e.getEncodedHex();this.isModified=false;return this.hTLV};this._initialize()};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension=function(b){KJUR.asn1.x509.Extension.superclass.constructor.call(this);var a=null;this.getEncodedHex=function(){var f=new KJUR.asn1.DERObjectIdentifier({oid:this.oid});var e=new KJUR.asn1.DEROctetString({hex:this.getExtnValueHex()});var d=new Array();d.push(f);if(this.critical){d.push(new KJUR.asn1.DERBoolean())}d.push(e);var c=new KJUR.asn1.DERSequence({array:d});return c.getEncodedHex()};this.critical=false;if(typeof b!="undefined"){if(typeof b.critical!="undefined"){this.critical=b.critical}}};YAHOO.lang.extend(KJUR.asn1.x509.Extension,KJUR.asn1.ASN1Object);KJUR.asn1.x509.KeyUsage=function(a){KJUR.asn1.x509.KeyUsage.superclass.constructor.call(this,a);this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.15";if(typeof a!="undefined"){if(typeof a.bin!="undefined"){this.asn1ExtnValue=new KJUR.asn1.DERBitString(a)}}};YAHOO.lang.extend(KJUR.asn1.x509.KeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.BasicConstraints=function(c){KJUR.asn1.x509.BasicConstraints.superclass.constructor.call(this,c);var a=false;var b=-1;this.getExtnValueHex=function(){var e=new Array();if(this.cA){e.push(new KJUR.asn1.DERBoolean())}if(this.pathLen>-1){e.push(new KJUR.asn1.DERInteger({"int":this.pathLen}))}var d=new KJUR.asn1.DERSequence({array:e});this.asn1ExtnValue=d;return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.19";this.cA=false;this.pathLen=-1;if(typeof c!="undefined"){if(typeof c.cA!="undefined"){this.cA=c.cA}if(typeof c.pathLen!="undefined"){this.pathLen=c.pathLen}}};YAHOO.lang.extend(KJUR.asn1.x509.BasicConstraints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLDistributionPoints=function(a){KJUR.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this,a);this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.setByDPArray=function(b){this.asn1ExtnValue=new KJUR.asn1.DERSequence({array:b})};this.setByOneURI=function(e){var b=new KJUR.asn1.x509.GeneralNames([{uri:e}]);var d=new KJUR.asn1.x509.DistributionPointName(b);var c=new KJUR.asn1.x509.DistributionPoint({dpobj:d});this.setByDPArray([c])};this.oid="2.5.29.31";if(typeof a!="undefined"){if(typeof a.array!="undefined"){this.setByDPArray(a.array)}else{if(typeof a.uri!="undefined"){this.setByOneURI(a.uri)}}}};YAHOO.lang.extend(KJUR.asn1.x509.CRLDistributionPoints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.ExtKeyUsage=function(a){KJUR.asn1.x509.ExtKeyUsage.superclass.constructor.call(this,a);this.setPurposeArray=function(b){this.asn1ExtnValue=new KJUR.asn1.DERSequence();for(var c=0;c<b.length;c++){var d=new KJUR.asn1.DERObjectIdentifier(b[c]);this.asn1ExtnValue.appendASN1Object(d)}};this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.37";if(typeof a!="undefined"){if(typeof a.array!="undefined"){this.setPurposeArray(a.array)}}};YAHOO.lang.extend(KJUR.asn1.x509.ExtKeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityKeyIdentifier=function(a){KJUR.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this,a);this.asn1KID=null;this.asn1CertIssuer=null;this.asn1CertSN=null;this.getExtnValueHex=function(){var c=new Array();if(this.asn1KID){c.push(new KJUR.asn1.DERTaggedObject({explicit:false,tag:"80",obj:this.asn1KID}))}if(this.asn1CertIssuer){c.push(new KJUR.asn1.DERTaggedObject({explicit:false,tag:"a1",obj:this.asn1CertIssuer}))}if(this.asn1CertSN){c.push(new KJUR.asn1.DERTaggedObject({explicit:false,tag:"82",obj:this.asn1CertSN}))}var b=new KJUR.asn1.DERSequence({array:c});this.asn1ExtnValue=b;return this.asn1ExtnValue.getEncodedHex()};this.setKIDByParam=function(b){this.asn1KID=new KJUR.asn1.DEROctetString(b)};this.setCertIssuerByParam=function(b){this.asn1CertIssuer=new KJUR.asn1.x509.X500Name(b)};this.setCertSNByParam=function(b){this.asn1CertSN=new KJUR.asn1.DERInteger(b)};this.oid="2.5.29.35";if(typeof a!="undefined"){if(typeof a.kid!="undefined"){this.setKIDByParam(a.kid)}if(typeof a.issuer!="undefined"){this.setCertIssuerByParam(a.issuer)}if(typeof a.sn!="undefined"){this.setCertSNByParam(a.sn)}}};YAHOO.lang.extend(KJUR.asn1.x509.AuthorityKeyIdentifier,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRL=function(f){KJUR.asn1.x509.CRL.superclass.constructor.call(this);var a=null;var c=null;var e=null;var b=null;var d=null;this.setRsaPrvKeyByPEMandPass=function(h,j){var g=PKCS5PKEY.getDecryptedKeyHex(h,j);var i=new RSAKey();i.readPrivateKeyFromASN1HexString(g);this.rsaPrvKey=i};this.sign=function(){this.asn1SignatureAlg=this.asn1TBSCertList.asn1SignatureAlg;sig=new KJUR.crypto.Signature({alg:"SHA1withRSA",prov:"cryptojs/jsrsa"});sig.initSign(this.rsaPrvKey);sig.updateHex(this.asn1TBSCertList.getEncodedHex());this.hexSig=sig.sign();this.asn1Sig=new KJUR.asn1.DERBitString({hex:"00"+this.hexSig});var g=new KJUR.asn1.DERSequence({array:[this.asn1TBSCertList,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=g.getEncodedHex();this.isModified=false};this.getEncodedHex=function(){if(this.isModified==false&&this.hTLV!=null){return this.hTLV}throw"not signed yet"};this.getPEMString=function(){var i=this.getEncodedHex();var g=CryptoJS.enc.Hex.parse(i);var h=CryptoJS.enc.Base64.stringify(g);var j=h.replace(/(.{64})/g,"$1\r\n");return"-----BEGIN X509 CRL-----\r\n"+j+"\r\n-----END X509 CRL-----\r\n"};if(typeof f!="undefined"){if(typeof f.tbsobj!="undefined"){this.asn1TBSCertList=f.tbsobj}if(typeof f.rsaprvkey!="undefined"){this.rsaPrvKey=f.rsaprvkey}if((typeof f.rsaprvpem!="undefined")&&(typeof f.rsaprvpas!="undefined")){this.setRsaPrvKeyByPEMandPass(f.rsaprvpem,f.rsaprvpas)}}};YAHOO.lang.extend(KJUR.asn1.x509.CRL,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertList=function(b){KJUR.asn1.x509.TBSCertList.superclass.constructor.call(this);var a=null;this.setSignatureAlgByParam=function(c){this.asn1SignatureAlg=new KJUR.asn1.x509.AlgorithmIdentifier(c)};this.setIssuerByParam=function(c){this.asn1Issuer=new KJUR.asn1.x509.X500Name(c)};this.setThisUpdateByParam=function(c){this.asn1ThisUpdate=new KJUR.asn1.x509.Time(c)};this.setNextUpdateByParam=function(c){this.asn1NextUpdate=new KJUR.asn1.x509.Time(c)};this.addRevokedCert=function(c,d){var f={};if(c!=undefined&&c!=null){f.sn=c}if(d!=undefined&&d!=null){f.time=d}var e=new KJUR.asn1.x509.CRLEntry(f);this.aRevokedCert.push(e)};this.getEncodedHex=function(){this.asn1Array=new Array();if(this.asn1Version!=null){this.asn1Array.push(this.asn1Version)}this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(this.asn1ThisUpdate);if(this.asn1NextUpdate!=null){this.asn1Array.push(this.asn1NextUpdate)}if(this.aRevokedCert.length>0){var c=new KJUR.asn1.DERSequence({array:this.aRevokedCert});this.asn1Array.push(c)}var d=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=d.getEncodedHex();this.isModified=false;return this.hTLV};this._initialize=function(){this.asn1Version=null;this.asn1SignatureAlg=null;this.asn1Issuer=null;this.asn1ThisUpdate=null;this.asn1NextUpdate=null;this.aRevokedCert=new Array()};this._initialize()};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertList,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLEntry=function(c){KJUR.asn1.x509.CRLEntry.superclass.constructor.call(this);var b=null;var a=null;this.setCertSerial=function(d){this.sn=new KJUR.asn1.DERInteger(d)};this.setRevocationDate=function(d){this.time=new KJUR.asn1.x509.Time(d)};this.getEncodedHex=function(){var d=new KJUR.asn1.DERSequence({array:[this.sn,this.time]});this.TLV=d.getEncodedHex();return this.TLV};if(typeof c!="undefined"){if(typeof c.time!="undefined"){this.setRevocationDate(c.time)}if(typeof c.sn!="undefined"){this.setCertSerial(c.sn)}}};YAHOO.lang.extend(KJUR.asn1.x509.CRLEntry,KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name=function(b){KJUR.asn1.x509.X500Name.superclass.constructor.call(this);this.asn1Array=new Array();this.setByString=function(c){var d=c.split("/");d.shift();for(var e=0;e<d.length;e++){this.asn1Array.push(new KJUR.asn1.x509.RDN({str:d[e]}))}};this.setByObject=function(e){for(var c in e){if(e.hasOwnProperty(c)){var d=new KJUR.asn1.x509.RDN({str:c+"="+e[c]});this.asn1Array?this.asn1Array.push(d):this.asn1Array=[d]}}};this.getEncodedHex=function(){if(typeof this.hTLV=="string"){return this.hTLV}var c=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=c.getEncodedHex();return this.hTLV};if(typeof b!="undefined"){if(typeof b.str!="undefined"){this.setByString(b.str)}else{if(typeof b==="object"){this.setByObject(b)}}if(typeof b.certissuer!="undefined"){var a=new X509();a.hex=X509.pemToHex(b.certissuer);this.hTLV=a.getIssuerHex()}if(typeof b.certsubject!="undefined"){var a=new X509();a.hex=X509.pemToHex(b.certsubject);this.hTLV=a.getSubjectHex()}}};YAHOO.lang.extend(KJUR.asn1.x509.X500Name,KJUR.asn1.ASN1Object);KJUR.asn1.x509.RDN=function(a){KJUR.asn1.x509.RDN.superclass.constructor.call(this);this.asn1Array=new Array();this.addByString=function(b){this.asn1Array.push(new KJUR.asn1.x509.AttributeTypeAndValue({str:b}))};this.getEncodedHex=function(){var b=new KJUR.asn1.DERSet({array:this.asn1Array});this.TLV=b.getEncodedHex();return this.TLV};if(typeof a!="undefined"){if(typeof a.str!="undefined"){this.addByString(a.str)}}};YAHOO.lang.extend(KJUR.asn1.x509.RDN,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AttributeTypeAndValue=function(b){KJUR.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this);var d=null;var c=null;var a="utf8";this.setByString=function(f){var e=f.match(/^([^=]+)=(.+)$/);if(e){this.setByAttrTypeAndValueStr(e[1],e[2])}else{throw"malformed attrTypeAndValueStr: "+f}};this.setByAttrTypeAndValueStr=function(g,f){this.typeObj=KJUR.asn1.x509.OID.atype2obj(g);var e=a;if(g=="C"){e="prn"}this.valueObj=this.getValueObj(e,f)};this.getValueObj=function(f,e){if(f=="utf8"){return new KJUR.asn1.DERUTF8String({str:e})}if(f=="prn"){return new KJUR.asn1.DERPrintableString({str:e})}if(f=="tel"){return new KJUR.asn1.DERTeletexString({str:e})}if(f=="ia5"){return new KJUR.asn1.DERIA5String({str:e})}throw"unsupported directory string type: type="+f+" value="+e};this.getEncodedHex=function(){var e=new KJUR.asn1.DERSequence({array:[this.typeObj,this.valueObj]});this.TLV=e.getEncodedHex();return this.TLV};if(typeof b!="undefined"){if(typeof b.str!="undefined"){this.setByString(b.str)}}};YAHOO.lang.extend(KJUR.asn1.x509.AttributeTypeAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.x509.SubjectPublicKeyInfo=function(d){KJUR.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);var b=null;var c=null;var a=null;this.setRSAKey=function(e){if(!RSAKey.prototype.isPrototypeOf(e)){throw"argument is not RSAKey instance"}this.rsaKey=e;var g=new KJUR.asn1.DERInteger({bigint:e.n});var f=new KJUR.asn1.DERInteger({"int":e.e});var i=new KJUR.asn1.DERSequence({array:[g,f]});var h=i.getEncodedHex();this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:"rsaEncryption"});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:"00"+h})};this.setRSAPEM=function(g){if(g.match(/-----BEGIN PUBLIC KEY-----/)){var n=g;n=n.replace(/^-----[^-]+-----/,"");n=n.replace(/-----[^-]+-----\s*$/,"");var m=n.replace(/\s+/g,"");var f=CryptoJS.enc.Base64.parse(m);var i=CryptoJS.enc.Hex.stringify(f);var k=_rsapem_getHexValueArrayOfChildrenFromHex(i);var h=k[1];var l=h.substr(2);var e=_rsapem_getHexValueArrayOfChildrenFromHex(l);var j=new RSAKey();j.setPublic(e[0],e[1]);this.setRSAKey(j)}else{throw"key not supported"}};this.getASN1Object=function(){if(this.asn1AlgId==null||this.asn1SubjPKey==null){throw"algId and/or subjPubKey not set"}var e=new KJUR.asn1.DERSequence({array:[this.asn1AlgId,this.asn1SubjPKey]});return e};this.getEncodedHex=function(){var e=this.getASN1Object();this.hTLV=e.getEncodedHex();return this.hTLV};this._setRSAKey=function(e){var g=KJUR.asn1.ASN1Util.newObject({seq:[{"int":{bigint:e.n}},{"int":{"int":e.e}}]});var f=g.getEncodedHex();this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:"rsaEncryption"});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:"00"+f})};this._setEC=function(e){var f=new KJUR.asn1.DERObjectIdentifier({name:e.curveName});this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:"ecPublicKey",asn1params:f});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:"00"+e.pubKeyHex})};this._setDSA=function(e){var f=new KJUR.asn1.ASN1Util.newObject({seq:[{"int":{bigint:e.p}},{"int":{bigint:e.q}},{"int":{bigint:e.g}}]});this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:"dsa",asn1params:f});var g=new KJUR.asn1.DERInteger({bigint:e.y});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:"00"+g.getEncodedHex()})};if(typeof d!="undefined"){if(typeof RSAKey!="undefined"&&d instanceof RSAKey){this._setRSAKey(d)}else{if(typeof KJUR.crypto.ECDSA!="undefined"&&d instanceof KJUR.crypto.ECDSA){this._setEC(d)}else{if(typeof KJUR.crypto.DSA!="undefined"&&d instanceof KJUR.crypto.DSA){this._setDSA(d)}else{if(typeof d.rsakey!="undefined"){this.setRSAKey(d.rsakey)}else{if(typeof d.rsapem!="undefined"){this.setRSAPEM(d.rsapem)}}}}}}};YAHOO.lang.extend(KJUR.asn1.x509.SubjectPublicKeyInfo,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Time=function(c){KJUR.asn1.x509.Time.superclass.constructor.call(this);var b=null;var a=null;this.setTimeParams=function(d){this.timeParams=d};this.getEncodedHex=function(){var d=null;if(this.timeParams!=null){if(this.type=="utc"){d=new KJUR.asn1.DERUTCTime(this.timeParams)}else{d=new KJUR.asn1.DERGeneralizedTime(this.timeParams)}}else{if(this.type=="utc"){d=new KJUR.asn1.DERUTCTime()}else{d=new KJUR.asn1.DERGeneralizedTime()}}this.TLV=d.getEncodedHex();return this.TLV};this.type="utc";if(typeof c!="undefined"){if(typeof c.type!="undefined"){this.type=c.type}else{if(typeof c.str!="undefined"){if(c.str.match(/^[0-9]{12}Z$/)){this.type="utc"}if(c.str.match(/^[0-9]{14}Z$/)){this.type="gen"}}}this.timeParams=c}};YAHOO.lang.extend(KJUR.asn1.x509.Time,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier=function(e){KJUR.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this);var a=null;var d=null;var b=null;var c=false;this.getEncodedHex=function(){if(this.nameAlg==null&&this.asn1Alg==null){throw"algorithm not specified"}if(this.nameAlg!=null&&this.asn1Alg==null){this.asn1Alg=KJUR.asn1.x509.OID.name2obj(this.nameAlg)}var f=[this.asn1Alg];if(!this.paramEmpty){f.push(this.asn1Params)}var g=new KJUR.asn1.DERSequence({array:f});this.hTLV=g.getEncodedHex();return this.hTLV};if(typeof e!="undefined"){if(typeof e.name!="undefined"){this.nameAlg=e.name}if(typeof e.asn1params!="undefined"){this.asn1Params=e.asn1params}if(typeof e.paramempty!="undefined"){this.paramEmpty=e.paramempty}}if(this.asn1Params==null){this.asn1Params=new KJUR.asn1.DERNull()}};YAHOO.lang.extend(KJUR.asn1.x509.AlgorithmIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralName=function(d){KJUR.asn1.x509.GeneralName.superclass.constructor.call(this);var c=null;var b=null;var a={rfc822:"81",dns:"82",dn:"a4",uri:"86"};this.explicit=false;this.setByParam=function(k){var j=null;var g=null;if(typeof k=="undefined"){return}if(typeof k.rfc822!="undefined"){this.type="rfc822";g=new KJUR.asn1.DERIA5String({str:k[this.type]})}if(typeof k.dns!="undefined"){this.type="dns";g=new KJUR.asn1.DERIA5String({str:k[this.type]})}if(typeof k.uri!="undefined"){this.type="uri";g=new KJUR.asn1.DERIA5String({str:k[this.type]})}if(typeof k.certissuer!="undefined"){this.type="dn";this.explicit=true;var h=k.certissuer;var f=null;if(h.match(/^[0-9A-Fa-f]+$/)){f==h}if(h.indexOf("-----BEGIN ")!=-1){f=X509.pemToHex(h)}if(f==null){throw"certissuer param not cert"}var e=new X509();e.hex=f;var i=e.getIssuerHex();g=new KJUR.asn1.ASN1Object();g.hTLV=i}if(typeof k.certsubj!="undefined"){this.type="dn";this.explicit=true;var h=k.certsubj;var f=null;if(h.match(/^[0-9A-Fa-f]+$/)){f==h}if(h.indexOf("-----BEGIN ")!=-1){f=X509.pemToHex(h)}if(f==null){throw"certsubj param not cert"}var e=new X509();e.hex=f;var i=e.getSubjectHex();g=new KJUR.asn1.ASN1Object();g.hTLV=i}if(this.type==null){throw"unsupported type in params="+k}this.asn1Obj=new KJUR.asn1.DERTaggedObject({explicit:this.explicit,tag:a[this.type],obj:g})};this.getEncodedHex=function(){return this.asn1Obj.getEncodedHex()};if(typeof d!="undefined"){this.setByParam(d)}};YAHOO.lang.extend(KJUR.asn1.x509.GeneralName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralNames=function(b){KJUR.asn1.x509.GeneralNames.superclass.constructor.call(this);var a=null;this.setByParamArray=function(e){for(var c=0;c<e.length;c++){var d=new KJUR.asn1.x509.GeneralName(e[c]);this.asn1Array.push(d)}};this.getEncodedHex=function(){var c=new KJUR.asn1.DERSequence({array:this.asn1Array});return c.getEncodedHex()};this.asn1Array=new Array();if(typeof b!="undefined"){this.setByParamArray(b)}};YAHOO.lang.extend(KJUR.asn1.x509.GeneralNames,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPointName=function(b){KJUR.asn1.x509.DistributionPointName.superclass.constructor.call(this);var e=null;var c=null;var a=null;var d=null;this.getEncodedHex=function(){if(this.type!="full"){throw"currently type shall be 'full': "+this.type}this.asn1Obj=new KJUR.asn1.DERTaggedObject({explicit:false,tag:this.tag,obj:this.asn1V});this.hTLV=this.asn1Obj.getEncodedHex();return this.hTLV};if(typeof b!="undefined"){if(KJUR.asn1.x509.GeneralNames.prototype.isPrototypeOf(b)){this.type="full";this.tag="a0";this.asn1V=b}else{throw"This class supports GeneralNames only as argument"}}};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPointName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPoint=function(b){KJUR.asn1.x509.DistributionPoint.superclass.constructor.call(this);var a=null;this.getEncodedHex=function(){var c=new KJUR.asn1.DERSequence();if(this.asn1DP!=null){var d=new KJUR.asn1.DERTaggedObject({explicit:true,tag:"a0",obj:this.asn1DP});c.appendASN1Object(d)}this.hTLV=c.getEncodedHex();return this.hTLV};if(typeof b!="undefined"){if(typeof b.dpobj!="undefined"){this.asn1DP=b.dpobj}}};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPoint,KJUR.asn1.ASN1Object);KJUR.asn1.x509.OID=new function(a){this.atype2oidList={C:"2.5.4.6",O:"2.5.4.10",OU:"2.5.4.11",ST:"2.5.4.8",L:"2.5.4.7",CN:"2.5.4.3",SN:"2.5.4.4",DN:"2.5.4.49",DC:"0.9.2342.19200300.100.1.25",};this.name2oidList={sha1:"1.3.14.3.2.26",sha256:"2.16.840.1.101.3.4.2.1",sha384:"2.16.840.1.101.3.4.2.2",sha512:"2.16.840.1.101.3.4.2.3",sha224:"2.16.840.1.101.3.4.2.4",md5:"1.2.840.113549.2.5",md2:"1.3.14.7.2.2.1",ripemd160:"1.3.36.3.2.1",MD2withRSA:"1.2.840.113549.1.1.2",MD4withRSA:"1.2.840.113549.1.1.3",MD5withRSA:"1.2.840.113549.1.1.4",SHA1withRSA:"1.2.840.113549.1.1.5",SHA224withRSA:"1.2.840.113549.1.1.14",SHA256withRSA:"1.2.840.113549.1.1.11",SHA384withRSA:"1.2.840.113549.1.1.12",SHA512withRSA:"1.2.840.113549.1.1.13",SHA1withECDSA:"1.2.840.10045.4.1",SHA224withECDSA:"1.2.840.10045.4.3.1",SHA256withECDSA:"1.2.840.10045.4.3.2",SHA384withECDSA:"1.2.840.10045.4.3.3",SHA512withECDSA:"1.2.840.10045.4.3.4",dsa:"1.2.840.10040.4.1",SHA1withDSA:"1.2.840.10040.4.3",SHA224withDSA:"2.16.840.1.101.3.4.3.1",SHA256withDSA:"2.16.840.1.101.3.4.3.2",rsaEncryption:"1.2.840.113549.1.1.1",countryName:"2.5.4.6",organization:"2.5.4.10",organizationalUnit:"2.5.4.11",stateOrProvinceName:"2.5.4.8",locality:"2.5.4.7",commonName:"2.5.4.3",subjectKeyIdentifier:"2.5.29.14",keyUsage:"2.5.29.15",subjectAltName:"2.5.29.17",basicConstraints:"2.5.29.19",nameConstraints:"2.5.29.30",cRLDistributionPoints:"2.5.29.31",certificatePolicies:"2.5.29.32",authorityKeyIdentifier:"2.5.29.35",policyConstraints:"2.5.29.36",extKeyUsage:"2.5.29.37",authorityInfoAccess:"1.3.6.1.5.5.7.1.1",anyExtendedKeyUsage:"2.5.29.37.0",serverAuth:"1.3.6.1.5.5.7.3.1",clientAuth:"1.3.6.1.5.5.7.3.2",codeSigning:"1.3.6.1.5.5.7.3.3",emailProtection:"1.3.6.1.5.5.7.3.4",timeStamping:"1.3.6.1.5.5.7.3.8",ocspSigning:"1.3.6.1.5.5.7.3.9",ecPublicKey:"1.2.840.10045.2.1",secp256r1:"1.2.840.10045.3.1.7",secp256k1:"1.3.132.0.10",secp384r1:"1.3.132.0.34",pkcs5PBES2:"1.2.840.113549.1.5.13",pkcs5PBKDF2:"1.2.840.113549.1.5.12","des-EDE3-CBC":"1.2.840.113549.3.7",data:"1.2.840.113549.1.7.1","signed-data":"1.2.840.113549.1.7.2","enveloped-data":"1.2.840.113549.1.7.3","digested-data":"1.2.840.113549.1.7.5","encrypted-data":"1.2.840.113549.1.7.6","authenticated-data":"1.2.840.113549.1.9.16.1.2",tstinfo:"1.2.840.113549.1.9.16.1.4",};this.objCache={};this.name2obj=function(b){if(typeof this.objCache[b]!="undefined"){return this.objCache[b]}if(typeof this.name2oidList[b]=="undefined"){throw"Name of ObjectIdentifier not defined: "+b}var c=this.name2oidList[b];var d=new KJUR.asn1.DERObjectIdentifier({oid:c});this.objCache[b]=d;return d};this.atype2obj=function(b){if(typeof this.objCache[b]!="undefined"){return this.objCache[b]}if(typeof this.atype2oidList[b]=="undefined"){throw"AttributeType name undefined: "+b}var c=this.atype2oidList[b];var d=new KJUR.asn1.DERObjectIdentifier({oid:c});this.objCache[b]=d;return d}};KJUR.asn1.x509.OID.oid2name=function(b){var c=KJUR.asn1.x509.OID.name2oidList;for(var a in c){if(c[a]==b){return a}}return""};KJUR.asn1.x509.OID.name2oid=function(a){var b=KJUR.asn1.x509.OID.name2oidList;if(b[a]===undefined){return""}return b[a]};KJUR.asn1.x509.X509Util=new function(){this.getPKCS8PubKeyPEMfromRSAKey=function(i){var h=null;var f=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(i.n);var j=KJUR.asn1.ASN1Util.integerToByteHex(i.e);var a=new KJUR.asn1.DERInteger({hex:f});var g=new KJUR.asn1.DERInteger({hex:j});var l=new KJUR.asn1.DERSequence({array:[a,g]});var c=l.getEncodedHex();var d=new KJUR.asn1.x509.AlgorithmIdentifier({name:"rsaEncryption"});var b=new KJUR.asn1.DERBitString({hex:"00"+c});var k=new KJUR.asn1.DERSequence({array:[d,b]});var e=k.getEncodedHex();var h=KJUR.asn1.ASN1Util.getPEMStringFromHex(e,"PUBLIC KEY");return h}};KJUR.asn1.x509.X509Util.newCertPEM=function(f){var c=KJUR.asn1.x509;var e=new c.TBSCertificate();if(f.serial!==undefined){e.setSerialNumberByParam(f.serial)}else{throw"serial number undefined."}if(typeof f.sigalg.name=="string"){e.setSignatureAlgByParam(f.sigalg)}else{throw"unproper signature algorithm name"}if(f.issuer!==undefined){e.setIssuerByParam(f.issuer)}else{throw"issuer name undefined."}if(f.notbefore!==undefined){e.setNotBeforeByParam(f.notbefore)}else{throw"notbefore undefined."}if(f.notafter!==undefined){e.setNotAfterByParam(f.notafter)}else{throw"notafter undefined."}if(f.subject!==undefined){e.setSubjectByParam(f.subject)}else{throw"subject name undefined."}if(f.sbjpubkey!==undefined){e.setSubjectPublicKeyByGetKey(f.sbjpubkey)}else{throw"subject public key undefined."}if(f.ext!==undefined&&f.ext.length!==undefined){for(var b=0;b<f.ext.length;b++){for(key in f.ext[b]){e.appendExtensionByName(key,f.ext[b][key])}}}if(f.cakey===undefined&&f.sighex===undefined){throw"param cakey and sighex undefined."}var d=null;var a=null;if(f.cakey){d=KEYUTIL.getKey.apply(null,f.cakey);a=new c.Certificate({tbscertobj:e,prvkeyobj:d});a.sign()}if(f.sighex){a=new c.Certificate({tbscertobj:e});a.setSignatureHex(f.sighex)}return a.getPEMString()};
	/*! asn1cms-1.0.2.js (c) 2013-2014 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cms=="undefined"||!KJUR.asn1.cms){KJUR.asn1.cms={}}KJUR.asn1.cms.Attribute=function(b){KJUR.asn1.cms.Attribute.superclass.constructor.call(this);var a=[];this.getEncodedHex=function(){var f,e,c;f=new KJUR.asn1.DERObjectIdentifier({oid:this.attrTypeOid});e=new KJUR.asn1.DERSet({array:this.valueList});try{e.getEncodedHex()}catch(d){throw"fail valueSet.getEncodedHex in Attribute(1)/"+d}c=new KJUR.asn1.DERSequence({array:[f,e]});try{this.hTLV=c.getEncodedHex()}catch(d){throw"failed seq.getEncodedHex in Attribute(2)/"+d}return this.hTLV}};YAHOO.lang.extend(KJUR.asn1.cms.Attribute,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentType=function(b){KJUR.asn1.cms.ContentType.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.3";var a=null;if(typeof b!="undefined"){var a=new KJUR.asn1.DERObjectIdentifier(b);this.valueList=[a]}};YAHOO.lang.extend(KJUR.asn1.cms.ContentType,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.MessageDigest=function(e){KJUR.asn1.cms.MessageDigest.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.4";if(typeof e!="undefined"){if(e.eciObj instanceof KJUR.asn1.cms.EncapsulatedContentInfo&&typeof e.hashAlg=="string"){var b=e.eciObj.eContentValueHex;var a=e.hashAlg;var c=KJUR.crypto.Util.hashHex(b,a);var d=new KJUR.asn1.DEROctetString({hex:c});d.getEncodedHex();this.valueList=[d]}else{var d=new KJUR.asn1.DEROctetString(e);d.getEncodedHex();this.valueList=[d]}}};YAHOO.lang.extend(KJUR.asn1.cms.MessageDigest,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningTime=function(c){KJUR.asn1.cms.SigningTime.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.5";if(typeof c!="undefined"){var a=new KJUR.asn1.x509.Time(c);try{a.getEncodedHex()}catch(b){throw"SigningTime.getEncodedHex() failed/"+b}this.valueList=[a]}};YAHOO.lang.extend(KJUR.asn1.cms.SigningTime,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningCertificate=function(d){KJUR.asn1.cms.SigningCertificate.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.16.2.12";var a=KJUR.asn1;var c=KJUR.asn1.cms;var b=KJUR.crypto;this.setCerts=function(l){var j=[];for(var h=0;h<l.length;h++){var f=KEYUTIL.getHexFromPEM(l[h]);var e=b.Util.hashHex(f,"sha1");var m=new a.DEROctetString({hex:e});m.getEncodedHex();var k=new c.IssuerAndSerialNumber({cert:l[h]});k.getEncodedHex();var n=new a.DERSequence({array:[m,k]});n.getEncodedHex();j.push(n)}var g=new a.DERSequence({array:j});g.getEncodedHex();this.valueList=[g]};if(typeof d!="undefined"){if(typeof d.array=="object"){this.setCerts(d.array)}}};YAHOO.lang.extend(KJUR.asn1.cms.SigningCertificate,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningCertificateV2=function(e){KJUR.asn1.cms.SigningCertificateV2.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.16.2.47";var b=KJUR.asn1;var f=KJUR.asn1.x509;var d=KJUR.asn1.cms;var c=KJUR.crypto;this.setCerts=function(p,h){var n=[];for(var l=0;l<p.length;l++){var j=KEYUTIL.getHexFromPEM(p[l]);var r=[];if(h!="sha256"){r.push(new f.AlgorithmIdentifier({name:h}))}var g=c.Util.hashHex(j,h);var q=new b.DEROctetString({hex:g});q.getEncodedHex();r.push(q);var m=new d.IssuerAndSerialNumber({cert:p[l]});m.getEncodedHex();r.push(m);var o=new b.DERSequence({array:r});o.getEncodedHex();n.push(o)}var k=new b.DERSequence({array:n});k.getEncodedHex();this.valueList=[k]};if(typeof e!="undefined"){if(typeof e.array=="object"){var a="sha256";if(typeof e.hashAlg=="string"){a=e.hashAlg}this.setCerts(e.array,a)}}};YAHOO.lang.extend(KJUR.asn1.cms.SigningCertificateV2,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.IssuerAndSerialNumber=function(c){KJUR.asn1.cms.IssuerAndSerialNumber.superclass.constructor.call(this);var e=null;var b=null;var a=KJUR.asn1;var d=a.x509;this.setByCertPEM=function(i){var g=KEYUTIL.getHexFromPEM(i);var f=new X509();f.hex=g;var j=f.getIssuerHex();this.dIssuer=new d.X500Name();this.dIssuer.hTLV=j;var h=f.getSerialNumberHex();this.dSerial=new a.DERInteger({hex:h})};this.getEncodedHex=function(){var f=new KJUR.asn1.DERSequence({array:[this.dIssuer,this.dSerial]});this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof c!="undefined"){if(typeof c=="string"&&c.indexOf("-----BEGIN ")!=-1){this.setByCertPEM(c)}if(c.issuer&&c.serial){if(c.issuer instanceof KJUR.asn1.x509.X500Name){this.dIssuer=c.issuer}else{this.dIssuer=new KJUR.asn1.x509.X500Name(c.issuer)}if(c.serial instanceof KJUR.asn1.DERInteger){this.dSerial=c.serial}else{this.dSerial=new KJUR.asn1.DERInteger(c.serial)}}if(typeof c.cert=="string"){this.setByCertPEM(c.cert)}}};YAHOO.lang.extend(KJUR.asn1.cms.IssuerAndSerialNumber,KJUR.asn1.ASN1Object);KJUR.asn1.cms.AttributeList=function(a){KJUR.asn1.cms.AttributeList.superclass.constructor.call(this);this.list=new Array();this.sortFlag=true;this.add=function(b){if(b instanceof KJUR.asn1.cms.Attribute){this.list.push(b)}};this.length=function(){return this.list.length};this.clear=function(){this.list=new Array();this.hTLV=null;this.hV=null};this.getEncodedHex=function(){if(typeof this.hTLV=="string"){return this.hTLV}var b=new KJUR.asn1.DERSet({array:this.list,sortflag:this.sortFlag});this.hTLV=b.getEncodedHex();return this.hTLV};if(typeof a!="undefined"){if(typeof a.sortflag!="undefined"&&a.sortflag==false){this.sortFlag=false}}};YAHOO.lang.extend(KJUR.asn1.cms.AttributeList,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignerInfo=function(c){KJUR.asn1.cms.SignerInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dCMSVersion=new a.DERInteger({"int":1});this.dSignerIdentifier=null;this.dDigestAlgorithm=null;this.dSignedAttrs=new b.AttributeList();this.dSigAlg=null;this.dSig=null;this.dUnsignedAttrs=new b.AttributeList();this.setSignerIdentifier=function(f){if(typeof f=="string"&&f.indexOf("CERTIFICATE")!=-1&&f.indexOf("BEGIN")!=-1&&f.indexOf("END")!=-1){var e=f;this.dSignerIdentifier=new b.IssuerAndSerialNumber({cert:f})}};this.setForContentAndHash=function(e){if(typeof e!="undefined"){if(e.eciObj instanceof KJUR.asn1.cms.EncapsulatedContentInfo){this.dSignedAttrs.add(new b.ContentType({oid:"1.2.840.113549.1.7.1"}));this.dSignedAttrs.add(new b.MessageDigest({eciObj:e.eciObj,hashAlg:e.hashAlg}))}if(typeof e.sdObj!="undefined"&&e.sdObj instanceof KJUR.asn1.cms.SignedData){if(e.sdObj.digestAlgNameList.join(":").indexOf(e.hashAlg)==-1){e.sdObj.digestAlgNameList.push(e.hashAlg)}}if(typeof e.hashAlg=="string"){this.dDigestAlgorithm=new d.AlgorithmIdentifier({name:e.hashAlg})}}};this.sign=function(j,f){this.dSigAlg=new d.AlgorithmIdentifier({name:f});var g=this.dSignedAttrs.getEncodedHex();var e=KEYUTIL.getKey(j);var i=new KJUR.crypto.Signature({alg:f});i.init(e);i.updateHex(g);var h=i.sign();this.dSig=new a.DEROctetString({hex:h})};this.addUnsigned=function(e){this.hTLV=null;this.dUnsignedAttrs.hTLV=null;this.dUnsignedAttrs.add(e)};this.getEncodedHex=function(){if(this.dSignedAttrs instanceof KJUR.asn1.cms.AttributeList&&this.dSignedAttrs.length()==0){throw"SignedAttrs length = 0 (empty)"}var e=new a.DERTaggedObject({obj:this.dSignedAttrs,tag:"a0",explicit:false});var h=null;if(this.dUnsignedAttrs.length()>0){h=new a.DERTaggedObject({obj:this.dUnsignedAttrs,tag:"a1",explicit:false})}var g=[this.dCMSVersion,this.dSignerIdentifier,this.dDigestAlgorithm,e,this.dSigAlg,this.dSig,];if(h!=null){g.push(h)}var f=new a.DERSequence({array:g});this.hTLV=f.getEncodedHex();return this.hTLV}};YAHOO.lang.extend(KJUR.asn1.cms.SignerInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.EncapsulatedContentInfo=function(c){KJUR.asn1.cms.EncapsulatedContentInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dEContentType=new a.DERObjectIdentifier({name:"data"});this.dEContent=null;this.isDetached=false;this.eContentValueHex=null;this.setContentType=function(e){if(e.match(/^[0-2][.][0-9.]+$/)){this.dEContentType=new a.DERObjectIdentifier({oid:e})}else{this.dEContentType=new a.DERObjectIdentifier({name:e})}};this.setContentValue=function(e){if(typeof e!="undefined"){if(typeof e.hex=="string"){this.eContentValueHex=e.hex}else{if(typeof e.str=="string"){this.eContentValueHex=utf8tohex(e.str)}}}};this.setContentValueHex=function(e){this.eContentValueHex=e};this.setContentValueStr=function(e){this.eContentValueHex=utf8tohex(e)};this.getEncodedHex=function(){if(typeof this.eContentValueHex!="string"){throw"eContentValue not yet set"}var g=new a.DEROctetString({hex:this.eContentValueHex});this.dEContent=new a.DERTaggedObject({obj:g,tag:"a0",explicit:true});var e=[this.dEContentType];if(!this.isDetached){e.push(this.dEContent)}var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV}};YAHOO.lang.extend(KJUR.asn1.cms.EncapsulatedContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentInfo=function(c){KJUR.asn1.cms.ContentInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dContentType=null;this.dContent=null;this.setContentType=function(e){if(typeof e=="string"){this.dContentType=d.OID.name2obj(e)}};this.getEncodedHex=function(){var f=new a.DERTaggedObject({obj:this.dContent,tag:"a0",explicit:true});var e=new a.DERSequence({array:[this.dContentType,f]});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!="undefined"){if(c.type){this.setContentType(c.type)}if(c.obj&&c.obj instanceof a.ASN1Object){this.dContent=c.obj}}};YAHOO.lang.extend(KJUR.asn1.cms.ContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignedData=function(c){KJUR.asn1.cms.SignedData.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dCMSVersion=new a.DERInteger({"int":1});this.dDigestAlgs=null;this.digestAlgNameList=[];this.dEncapContentInfo=new b.EncapsulatedContentInfo();this.dCerts=null;this.certificateList=[];this.crlList=[];this.signerInfoList=[new b.SignerInfo()];this.addCertificatesByPEM=function(e){var f=KEYUTIL.getHexFromPEM(e);var g=new a.ASN1Object();g.hTLV=f;this.certificateList.push(g)};this.getEncodedHex=function(){if(typeof this.hTLV=="string"){return this.hTLV}if(this.dDigestAlgs==null){var k=[];for(var j=0;j<this.digestAlgNameList.length;j++){var h=this.digestAlgNameList[j];var m=new d.AlgorithmIdentifier({name:h});k.push(m)}this.dDigestAlgs=new a.DERSet({array:k})}var e=[this.dCMSVersion,this.dDigestAlgs,this.dEncapContentInfo];if(this.dCerts==null){if(this.certificateList.length>0){var l=new a.DERSet({array:this.certificateList});this.dCerts=new a.DERTaggedObject({obj:l,tag:"a0",explicit:false})}}if(this.dCerts!=null){e.push(this.dCerts)}var g=new a.DERSet({array:this.signerInfoList});e.push(g);var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV};this.getContentInfo=function(){this.getEncodedHex();var e=new b.ContentInfo({type:"signed-data",obj:this});return e};this.getContentInfoEncodedHex=function(){var e=this.getContentInfo();var f=e.getEncodedHex();return f};this.getPEM=function(){var e=this.getContentInfoEncodedHex();var f=a.ASN1Util.getPEMStringFromHex(e,"CMS");return f}};YAHOO.lang.extend(KJUR.asn1.cms.SignedData,KJUR.asn1.ASN1Object);KJUR.asn1.cms.CMSUtil=new function(){};KJUR.asn1.cms.CMSUtil.newSignedData=function(a){var h=KJUR.asn1.cms;var g=KJUR.asn1.cades;var f=new h.SignedData();f.dEncapContentInfo.setContentValue(a.content);if(typeof a.certs=="object"){for(var b=0;b<a.certs.length;b++){f.addCertificatesByPEM(a.certs[b])}}f.signerInfoList=[];for(var b=0;b<a.signerInfos.length;b++){var d=a.signerInfos[b];var c=new h.SignerInfo();c.setSignerIdentifier(d.signerCert);c.setForContentAndHash({sdObj:f,eciObj:f.dEncapContentInfo,hashAlg:d.hashAlg});for(attrName in d.sAttr){var j=d.sAttr[attrName];if(attrName=="SigningTime"){var e=new h.SigningTime(j);c.dSignedAttrs.add(e)}if(attrName=="SigningCertificate"){var e=new h.SigningCertificate(j);c.dSignedAttrs.add(e)}if(attrName=="SigningCertificateV2"){var e=new h.SigningCertificateV2(j);c.dSignedAttrs.add(e)}if(attrName=="SignaturePolicyIdentifier"){var e=new g.SignaturePolicyIdentifier(j);c.dSignedAttrs.add(e)}}c.sign(d.signerPrvKey,d.sigAlg);f.signerInfoList.push(c)}return f};
	/*! asn1tsp-1.0.1.js (c) 2014 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.tsp=="undefined"||!KJUR.asn1.tsp){KJUR.asn1.tsp={}}KJUR.asn1.tsp.Accuracy=function(b){KJUR.asn1.tsp.Accuracy.superclass.constructor.call(this);var a=KJUR.asn1;this.seconds=null;this.millis=null;this.micros=null;this.getEncodedHex=function(){var e=null;var g=null;var i=null;var c=[];if(this.seconds!=null){e=new a.DERInteger({"int":this.seconds});c.push(e)}if(this.millis!=null){var h=new a.DERInteger({"int":this.millis});g=new a.DERTaggedObject({obj:h,tag:"80",explicit:false});c.push(g)}if(this.micros!=null){var f=new a.DERInteger({"int":this.micros});i=new a.DERTaggedObject({obj:f,tag:"81",explicit:false});c.push(i)}var d=new a.DERSequence({array:c});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!="undefined"){if(typeof b.seconds=="number"){this.seconds=b.seconds}if(typeof b.millis=="number"){this.millis=b.millis}if(typeof b.micros=="number"){this.micros=b.micros}}};YAHOO.lang.extend(KJUR.asn1.tsp.Accuracy,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.MessageImprint=function(b){KJUR.asn1.tsp.MessageImprint.superclass.constructor.call(this);var a=KJUR.asn1;var c=KJUR.asn1.x509;this.dHashAlg=null;this.dHashValue=null;this.getEncodedHex=function(){if(typeof this.hTLV=="string"){return this.hTLV}var d=new a.DERSequence({array:[this.dHashAlg,this.dHashValue]});return d.getEncodedHex()};if(typeof b!="undefined"){if(typeof b.hashAlg=="string"){this.dHashAlg=new c.AlgorithmIdentifier({name:b.hashAlg})}if(typeof b.hashValue=="string"){this.dHashValue=new a.DEROctetString({hex:b.hashValue})}}};YAHOO.lang.extend(KJUR.asn1.tsp.MessageImprint,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampReq=function(c){KJUR.asn1.tsp.TimeStampReq.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.dVersion=new a.DERInteger({"int":1});this.dMessageImprint=null;this.dPolicy=null;this.dNonce=null;this.certReq=true;this.setMessageImprint=function(d){if(d instanceof KJUR.asn1.tsp.MessageImprint){this.dMessageImprint=d;return}if(typeof d=="object"){this.dMessageImprint=new b.MessageImprint(d)}};this.getEncodedHex=function(){if(this.dMessageImprint==null){throw"messageImprint shall be specified"}var d=[this.dVersion,this.dMessageImprint];if(this.dPolicy!=null){d.push(this.dPolicy)}if(this.dNonce!=null){d.push(this.dNonce)}if(this.certReq){d.push(new a.DERBoolean())}var e=new a.DERSequence({array:d});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!="undefined"){if(typeof c.mi=="object"){this.setMessageImprint(c.mi)}if(typeof c.policy=="object"){this.dPolicy=new a.DERObjectIdentifier(c.policy)}if(typeof c.nonce=="object"){this.dNonce=new a.DERInteger(c.nonce)}if(typeof c.certreq=="boolean"){this.certReq=c.certreq}}};YAHOO.lang.extend(KJUR.asn1.tsp.TimeStampReq,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TSTInfo=function(c){KJUR.asn1.tsp.TSTInfo.superclass.constructor.call(this);var a=KJUR.asn1;var d=KJUR.asn1.x509;var b=KJUR.asn1.tsp;this.dVersion=new a.DERInteger({"int":1});this.dPolicy=null;this.dMessageImprint=null;this.dSerialNumber=null;this.dGenTime=null;this.dAccuracy=null;this.dOrdering=null;this.dNonce=null;this.dTsa=null;this.getEncodedHex=function(){var e=[this.dVersion];if(this.dPolicy==null){throw"policy shall be specified."}e.push(this.dPolicy);if(this.dMessageImprint==null){throw"messageImprint shall be specified."}e.push(this.dMessageImprint);if(this.dSerialNumber==null){throw"serialNumber shall be specified."}e.push(this.dSerialNumber);if(this.dGenTime==null){throw"genTime shall be specified."}e.push(this.dGenTime);if(this.dAccuracy!=null){e.push(this.dAccuracy)}if(this.dOrdering!=null){e.push(this.dOrdering)}if(this.dNonce!=null){e.push(this.dNonce)}if(this.dTsa!=null){e.push(this.dTsa)}var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof c!="undefined"){if(typeof c.policy=="string"){if(!c.policy.match(/^[0-9.]+$/)){throw"policy shall be oid like 0.1.4.134"}this.dPolicy=new a.DERObjectIdentifier({oid:c.policy})}if(typeof c.messageImprint!="undefined"){this.dMessageImprint=new b.MessageImprint(c.messageImprint)}if(typeof c.serialNumber!="undefined"){this.dSerialNumber=new a.DERInteger(c.serialNumber)}if(typeof c.genTime!="undefined"){this.dGenTime=new a.DERGeneralizedTime(c.genTime)}if(typeof c.accuracy!="undefind"){this.dAccuracy=new b.Accuracy(c.accuracy)}if(typeof c.ordering!="undefined"&&c.ordering==true){this.dOrdering=new a.DERBoolean()}if(typeof c.nonce!="undefined"){this.dNonce=new a.DERInteger(c.nonce)}if(typeof c.tsa!="undefined"){this.dTsa=new d.X500Name(c.tsa)}}};YAHOO.lang.extend(KJUR.asn1.tsp.TSTInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampResp=function(c){KJUR.asn1.tsp.TimeStampResp.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.dStatus=null;this.dTST=null;this.getEncodedHex=function(){if(this.dStatus==null){throw"status shall be specified"}var d=[this.dStatus];if(this.dTST!=null){d.push(this.dTST)}var e=new a.DERSequence({array:d});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!="undefined"){if(typeof c.status=="object"){this.dStatus=new b.PKIStatusInfo(c.status)}if(typeof c.tst!="undefined"&&c.tst instanceof KJUR.asn1.ASN1Object){this.dTST=c.tst.getContentInfo()}}};YAHOO.lang.extend(KJUR.asn1.tsp.TimeStampResp,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatusInfo=function(c){KJUR.asn1.tsp.PKIStatusInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.dStatus=null;this.dStatusString=null;this.dFailureInfo=null;this.getEncodedHex=function(){if(this.dStatus==null){throw"status shall be specified"}var d=[this.dStatus];if(this.dStatusString!=null){d.push(this.dStatusString)}if(this.dFailureInfo!=null){d.push(this.dFailureInfo)}var e=new a.DERSequence({array:d});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!="undefined"){if(typeof c.status=="object"){this.dStatus=new b.PKIStatus(c.status)}if(typeof c.statstr=="object"){this.dStatusString=new b.PKIFreeText({array:c.statstr})}if(typeof c.failinfo=="object"){this.dFailureInfo=new b.PKIFailureInfo(c.failinfo)}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIStatusInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatus=function(e){KJUR.asn1.tsp.PKIStatus.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;var d=null;this.getEncodedHex=function(){this.hTLV=this.dStatus.getEncodedHex();return this.hTLV};if(typeof e!="undefined"){if(typeof e.name!="undefined"){var c=b.PKIStatus.valueList;if(typeof c[e.name]=="undefined"){throw"name undefined: "+e.name}this.dStatus=new a.DERInteger({"int":c[e.name]})}else{this.dStatus=new a.DERInteger(e)}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIStatus,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatus.valueList={granted:0,grantedWithMods:1,rejection:2,waiting:3,revocationWarning:4,revocationNotification:5};KJUR.asn1.tsp.PKIFreeText=function(b){KJUR.asn1.tsp.PKIFreeText.superclass.constructor.call(this);var a=KJUR.asn1;this.textList=[];this.getEncodedHex=function(){var c=[];for(var e=0;e<this.textList.length;e++){c.push(new a.DERUTF8String({str:this.textList[e]}))}var d=new a.DERSequence({array:c});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!="undefined"){if(typeof b.array=="object"){this.textList=b.array}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIFreeText,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFailureInfo=function(d){KJUR.asn1.tsp.PKIFailureInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.value=null;this.getEncodedHex=function(){if(this.value==null){throw"value shall be specified"}var e=new Number(this.value).toString(2);var f=new a.DERBitString();f.setByBinaryString(e);this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof d!="undefined"){if(typeof d.name=="string"){var c=b.PKIFailureInfo.valueList;if(typeof c[d.name]=="undefined"){throw"name undefined: "+d.name}this.value=c[d.name]}else{if(typeof d["int"]=="number"){this.value=d["int"]}}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIFailureInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFailureInfo.valueList={badAlg:0,badRequest:2,badDataFormat:5,timeNotAvailable:14,unacceptedPolicy:15,unacceptedExtension:16,addInfoNotAvailable:17,systemFailure:25};KJUR.asn1.tsp.AbstractTSAAdapter=function(a){this.getTSTHex=function(c,b){throw"not implemented yet"}};KJUR.asn1.tsp.SimpleTSAAdapter=function(a){KJUR.asn1.tsp.SimpleTSAAdapter.superclass.constructor.call(this);this.params=null;this.serial=0;this.getTSTHex=function(c,b){var e=KJUR.crypto.Util.hashHex(c,b);this.params.tstInfo.messageImprint={hashAlg:b,hashValue:e};this.params.tstInfo.serialNumber={"int":this.serial++};var d=Math.floor(Math.random()*1000000000);this.params.tstInfo.nonce={"int":d};var f=KJUR.asn1.tsp.TSPUtil.newTimeStampToken(this.params);return f.getContentInfoEncodedHex()};if(typeof a!="undefined"){this.params=a}};YAHOO.lang.extend(KJUR.asn1.tsp.SimpleTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.FixedTSAAdapter=function(a){KJUR.asn1.tsp.FixedTSAAdapter.superclass.constructor.call(this);this.params=null;this.getTSTHex=function(c,b){var d=KJUR.crypto.Util.hashHex(c,b);this.params.tstInfo.messageImprint={hashAlg:b,hashValue:d};var e=KJUR.asn1.tsp.TSPUtil.newTimeStampToken(this.params);return e.getContentInfoEncodedHex()};if(typeof a!="undefined"){this.params=a}};YAHOO.lang.extend(KJUR.asn1.tsp.FixedTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.TSPUtil=new function(){};KJUR.asn1.tsp.TSPUtil.newTimeStampToken=function(b){var j=KJUR.asn1.cms;var a=KJUR.asn1.tsp;var g=new j.SignedData();var e=new a.TSTInfo(b.tstInfo);var f=e.getEncodedHex();g.dEncapContentInfo.setContentValue({hex:f});g.dEncapContentInfo.setContentType("tstinfo");if(typeof b.certs=="object"){for(var c=0;c<b.certs.length;c++){g.addCertificatesByPEM(b.certs[c])}}var d=g.signerInfoList[0];d.setSignerIdentifier(b.signerCert);d.setForContentAndHash({sdObj:g,eciObj:g.dEncapContentInfo,hashAlg:b.hashAlg});var h=new j.SigningCertificate({array:[b.signerCert]});d.dSignedAttrs.add(h);d.sign(b.signerPrvKey,b.sigAlg);return g};KJUR.asn1.tsp.TSPUtil.parseTimeStampReq=function(d){var f={};f.certreq=false;var h=ASN1HEX.getPosArrayOfChildren_AtObj(d,0);if(h.length<2){throw"TimeStampReq must have at least 2 items"}var c=ASN1HEX.getHexOfTLV_AtObj(d,h[1]);f.mi=KJUR.asn1.tsp.TSPUtil.parseMessageImprint(c);for(var e=2;e<h.length;e++){var b=h[e];var a=d.substr(b,2);if(a=="06"){var g=ASN1HEX.getHexOfV_AtObj(d,b);f.policy=ASN1HEX.hextooidstr(g)}if(a=="02"){f.nonce=ASN1HEX.getHexOfV_AtObj(d,b)}if(a=="01"){f.certreq=true}}return f};KJUR.asn1.tsp.TSPUtil.parseMessageImprint=function(c){var h={};if(c.substr(0,2)!="30"){throw"head of messageImprint hex shall be '30'"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(c,0);var i=ASN1HEX.getDecendantIndexByNthList(c,0,[0,0]);var d=ASN1HEX.getHexOfV_AtObj(c,i);var e=ASN1HEX.hextooidstr(d);var g=KJUR.asn1.x509.OID.oid2name(e);if(g==""){throw"hashAlg name undefined: "+e}var b=g;var f=ASN1HEX.getDecendantIndexByNthList(c,0,[1]);h.hashAlg=b;h.hashValue=ASN1HEX.getHexOfV_AtObj(c,f);return h};
	/*! asn1cades-1.0.0.js (c) 2013-2014 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cades=="undefined"||!KJUR.asn1.cades){KJUR.asn1.cades={}}KJUR.asn1.cades.SignaturePolicyIdentifier=function(e){KJUR.asn1.cades.SignaturePolicyIdentifier.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.16.2.15";var b=KJUR.asn1;var d=KJUR.asn1.cades;if(typeof e!="undefined"){if(typeof e.oid=="string"&&typeof e.hash=="object"){var f=new b.DERObjectIdentifier({oid:e.oid});var a=new d.OtherHashAlgAndValue(e.hash);var c=new b.DERSequence({array:[f,a]});this.valueList=[c]}}};YAHOO.lang.extend(KJUR.asn1.cades.SignaturePolicyIdentifier,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.OtherHashAlgAndValue=function(b){KJUR.asn1.cades.OtherHashAlgAndValue.superclass.constructor.call(this);var a=KJUR.asn1;var c=KJUR.asn1.x509;this.dAlg=null;this.dHash=null;this.getEncodedHex=function(){var d=new a.DERSequence({array:[this.dAlg,this.dHash]});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!="undefined"){if(typeof b.alg=="string"&&typeof b.hash=="string"){this.dAlg=new c.AlgorithmIdentifier({name:b.alg});this.dHash=new a.DEROctetString({hex:b.hash})}}};YAHOO.lang.extend(KJUR.asn1.cades.OtherHashAlgAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.cades.SignatureTimeStamp=function(c){KJUR.asn1.cades.SignatureTimeStamp.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.16.2.14";this.tstHex=null;var a=KJUR.asn1;if(typeof c!="undefined"){if(typeof c.res!="undefined"){if(typeof c.res=="string"&&c.res.match(/^[0-9A-Fa-f]+$/)){}else{if(c.res instanceof KJUR.asn1.ASN1Object){}else{throw"res param shall be ASN1Object or hex string"}}}if(typeof c.tst!="undefined"){if(typeof c.tst=="string"&&c.tst.match(/^[0-9A-Fa-f]+$/)){var b=new a.ASN1Object();this.tstHex=c.tst;b.hTLV=this.tstHex;b.getEncodedHex();this.valueList=[b]}else{if(c.tst instanceof KJUR.asn1.ASN1Object){}else{throw"tst param shall be ASN1Object or hex string"}}}}};YAHOO.lang.extend(KJUR.asn1.cades.SignatureTimeStamp,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.CompleteCertificateRefs=function(c){KJUR.asn1.cades.CompleteCertificateRefs.superclass.constructor.call(this);this.attrTypeOid="1.2.840.113549.1.9.16.2.21";var a=KJUR.asn1;var b=KJUR.asn1.cades;this.setByArray=function(d){this.valueList=[];for(var e=0;e<d.length;e++){var f=new b.OtherCertID(d[e]);this.valueList.push(f)}};if(typeof c!="undefined"){if(typeof c=="object"&&typeof c.length=="number"){this.setByArray(c)}}};YAHOO.lang.extend(KJUR.asn1.cades.CompleteCertificateRefs,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.OtherCertID=function(d){KJUR.asn1.cades.OtherCertID.superclass.constructor.call(this);var a=KJUR.asn1;var c=KJUR.asn1.cms;var b=KJUR.asn1.cades;this.hasIssuerSerial=true;this.dOtherCertHash=null;this.dIssuerSerial=null;this.setByCertPEM=function(e){this.dOtherCertHash=new b.OtherHash(e);if(this.hasIssuerSerial){this.dIssuerSerial=new c.IssuerAndSerialNumber(e)}};this.getEncodedHex=function(){if(this.hTLV!=null){return this.hTLV}if(this.dOtherCertHash==null){throw"otherCertHash not set"}var e=[this.dOtherCertHash];if(this.dIssuerSerial!=null){e.push(this.dIssuerSerial)}var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof d!="undefined"){if(typeof d=="string"&&d.indexOf("-----BEGIN ")!=-1){this.setByCertPEM(d)}if(typeof d=="object"){if(d.hasis===false){this.hasIssuerSerial=false}if(typeof d.cert=="string"){this.setByCertPEM(d.cert)}}}};YAHOO.lang.extend(KJUR.asn1.cades.OtherCertID,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHash=function(c){KJUR.asn1.cades.OtherHash.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cades;this.alg="sha256";this.dOtherHash=null;this.setByCertPEM=function(d){if(d.indexOf("-----BEGIN ")==-1){throw"certPEM not to seem PEM format"}var e=X509.pemToHex(d);var f=KJUR.crypto.Util.hashHex(e,this.alg);this.dOtherHash=new b.OtherHashAlgAndValue({alg:this.alg,hash:f})};this.getEncodedHex=function(){if(this.dOtherHash==null){throw"OtherHash not set"}return this.dOtherHash.getEncodedHex()};if(typeof c!="undefined"){if(typeof c=="string"){if(c.indexOf("-----BEGIN ")!=-1){this.setByCertPEM(c)}else{if(c.match(/^[0-9A-Fa-f]+$/)){this.dOtherHash=new a.DEROctetString({hex:c})}else{throw"unsupported string value for params"}}}else{if(typeof c=="object"){if(typeof c.cert=="string"){if(typeof c.alg=="string"){this.alg=c.alg}this.setByCertPEM(c.cert)}else{this.dOtherHash=new b.OtherHashAlgAndValue(c)}}}}};YAHOO.lang.extend(KJUR.asn1.cades.OtherHash,KJUR.asn1.ASN1Object);KJUR.asn1.cades.CAdESUtil=new function(){};KJUR.asn1.cades.CAdESUtil.addSigTS=function(c,b,a){};KJUR.asn1.cades.CAdESUtil.parseSignedDataForAddingUnsigned=function(d){var q=KJUR.asn1;var p=KJUR.asn1.cms;var c=KJUR.asn1.cades.CAdESUtil;var a={};if(ASN1HEX.getDecendantHexTLVByNthList(d,0,[0])!="06092a864886f70d010702"){throw"hex is not CMS SignedData"}var s=ASN1HEX.getDecendantIndexByNthList(d,0,[1,0]);var b=ASN1HEX.getPosArrayOfChildren_AtObj(d,s);if(b.length<4){throw"num of SignedData elem shall be 4 at least"}var f=b.shift();a.version=ASN1HEX.getHexOfTLV_AtObj(d,f);var l=b.shift();a.algs=ASN1HEX.getHexOfTLV_AtObj(d,l);var m=b.shift();a.encapcontent=ASN1HEX.getHexOfTLV_AtObj(d,m);a.certs=null;a.revs=null;a.si=[];var n=b.shift();if(d.substr(n,2)=="a0"){a.certs=ASN1HEX.getHexOfTLV_AtObj(d,n);n=b.shift()}if(d.substr(n,2)=="a1"){a.revs=ASN1HEX.getHexOfTLV_AtObj(d,n);n=b.shift()}var k=n;if(d.substr(k,2)!="31"){throw"Can't find signerInfos"}var j=ASN1HEX.getPosArrayOfChildren_AtObj(d,k);for(var h=0;h<j.length;h++){var o=j[h];var e=c.parseSignerInfoForAddingUnsigned(d,o,h);a.si[h]=e}var g=null;a.obj=new p.SignedData();g=new q.ASN1Object();g.hTLV=a.version;a.obj.dCMSVersion=g;g=new q.ASN1Object();g.hTLV=a.algs;a.obj.dDigestAlgs=g;g=new q.ASN1Object();g.hTLV=a.encapcontent;a.obj.dEncapContentInfo=g;g=new q.ASN1Object();g.hTLV=a.certs;a.obj.dCerts=g;a.obj.signerInfoList=[];for(var h=0;h<a.si.length;h++){a.obj.signerInfoList.push(a.si[h].obj)}return a};KJUR.asn1.cades.CAdESUtil.parseSignerInfoForAddingUnsigned=function(d,k,a){var m=KJUR.asn1;var l=KJUR.asn1.cms;var b={};var e=ASN1HEX.getPosArrayOfChildren_AtObj(d,k);if(e.length!=6){throw"not supported items for SignerInfo (!=6)"}var f=e.shift();b.version=ASN1HEX.getHexOfTLV_AtObj(d,f);var n=e.shift();b.si=ASN1HEX.getHexOfTLV_AtObj(d,n);var h=e.shift();b.digalg=ASN1HEX.getHexOfTLV_AtObj(d,h);var c=e.shift();b.sattrs=ASN1HEX.getHexOfTLV_AtObj(d,c);var i=e.shift();b.sigalg=ASN1HEX.getHexOfTLV_AtObj(d,i);var j=e.shift();b.sig=ASN1HEX.getHexOfTLV_AtObj(d,j);b.sigval=ASN1HEX.getHexOfV_AtObj(d,j);var g=null;b.obj=new l.SignerInfo();g=new m.ASN1Object();g.hTLV=b.version;b.obj.dCMSVersion=g;g=new m.ASN1Object();g.hTLV=b.si;b.obj.dSignerIdentifier=g;g=new m.ASN1Object();g.hTLV=b.digalg;b.obj.dDigestAlgorithm=g;g=new m.ASN1Object();g.hTLV=b.sattrs;b.obj.dSignedAttrs=g;g=new m.ASN1Object();g.hTLV=b.sigalg;b.obj.dSigAlg=g;g=new m.ASN1Object();g.hTLV=b.sig;b.obj.dSig=g;b.obj.dUnsignedAttrs=new l.AttributeList();return b};
	/*! asn1csr-1.0.0.js (c) 2015 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR.asn1.csr=="undefined"||!KJUR.asn1.csr){KJUR.asn1.csr={}}KJUR.asn1.csr.CertificationRequest=function(f){KJUR.asn1.csr.CertificationRequest.superclass.constructor.call(this);var b=null;var d=null;var e=null;var c=null;var a=null;this.sign=function(i,h){if(this.prvKey==null){this.prvKey=h}this.asn1SignatureAlg=new KJUR.asn1.x509.AlgorithmIdentifier({name:i});sig=new KJUR.crypto.Signature({alg:i});sig.initSign(this.prvKey);sig.updateHex(this.asn1CSRInfo.getEncodedHex());this.hexSig=sig.sign();this.asn1Sig=new KJUR.asn1.DERBitString({hex:"00"+this.hexSig});var g=new KJUR.asn1.DERSequence({array:[this.asn1CSRInfo,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=g.getEncodedHex();this.isModified=false};this.getPEMString=function(){var g=KJUR.asn1.ASN1Util.getPEMStringFromHex(this.getEncodedHex(),"CERTIFICATE REQUEST");return g};this.getEncodedHex=function(){if(this.isModified==false&&this.hTLV!=null){return this.hTLV}throw"not signed yet"};if(typeof f!="undefined"){if(typeof f.csrinfo!="undefined"){this.asn1CSRInfo=f.csrinfo}}};YAHOO.lang.extend(KJUR.asn1.csr.CertificationRequest,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CertificationRequestInfo=function(a){KJUR.asn1.csr.CertificationRequestInfo.superclass.constructor.call(this);this._initialize=function(){this.asn1Array=new Array();this.asn1Version=new KJUR.asn1.DERInteger({"int":0});this.asn1Subject=null;this.asn1SubjPKey=null;this.extensionsArray=new Array()};this.setSubjectByParam=function(b){this.asn1Subject=new KJUR.asn1.x509.X500Name(b)};this.setSubjectPublicKeyByGetKey=function(c){var b=KEYUTIL.getKey(c);this.asn1SubjPKey=new KJUR.asn1.x509.SubjectPublicKeyInfo(b)};this.getEncodedHex=function(){this.asn1Array=new Array();this.asn1Array.push(this.asn1Version);this.asn1Array.push(this.asn1Subject);this.asn1Array.push(this.asn1SubjPKey);var c=new KJUR.asn1.DERSequence({array:this.extensionsArray});var b=new KJUR.asn1.DERTaggedObject({explicit:false,tag:"a0",obj:c});this.asn1Array.push(b);var d=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=d.getEncodedHex();this.isModified=false;return this.hTLV};this._initialize()};YAHOO.lang.extend(KJUR.asn1.csr.CertificationRequestInfo,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CSRUtil=new function(){};KJUR.asn1.csr.CSRUtil.newCSRPEM=function(f){var c=KJUR.asn1.csr;if(f.subject===undefined){throw"parameter subject undefined"}if(f.sbjpubkey===undefined){throw"parameter sbjpubkey undefined"}if(f.sigalg===undefined){throw"parameter sigalg undefined"}if(f.sbjprvkey===undefined){throw"parameter sbjpubkey undefined"}var b=new c.CertificationRequestInfo();b.setSubjectByParam(f.subject);b.setSubjectPublicKeyByGetKey(f.sbjpubkey);var d=new c.CertificationRequest({csrinfo:b});var a=KEYUTIL.getKey(f.sbjprvkey);d.sign(f.sigalg,a);var e=d.getPEMString();return e};
	/*! asn1ocsp-1.0.1.js (c) 2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.ocsp=="undefined"||!KJUR.asn1.ocsp){KJUR.asn1.ocsp={}}KJUR.asn1.ocsp.DEFAULT_HASH="sha1";KJUR.asn1.ocsp.CertID=function(c){KJUR.asn1.ocsp.CertID.superclass.constructor.call(this);var a=KJUR.asn1;var e=KJUR.asn1.x509;this.dHashAlg=null;this.dIssuerNameHash=null;this.dIssuerKeyHash=null;this.dSerialNumber=null;this.setByValue=function(i,h,f,g){if(g===undefined){g=KJUR.asn1.ocsp.DEFAULT_HASH}this.dHashAlg=new e.AlgorithmIdentifier({name:g});this.dIssuerNameHash=new a.DEROctetString({hex:i});this.dIssuerKeyHash=new a.DEROctetString({hex:h});this.dSerialNumber=new a.DERInteger({hex:f})};this.setByCert=function(m,i,k){if(k===undefined){k=KJUR.asn1.ocsp.DEFAULT_HASH}var f=new X509();f.readCertPEM(i);var n=new X509();n.readCertPEM(m);var o=X509.getPublicKeyInfoPropOfCertPEM(m);var l=o.keyhex;var g=f.getSerialNumberHex();var h=KJUR.crypto.Util.hashHex(n.getSubjectHex(),k);var j=KJUR.crypto.Util.hashHex(l,k);this.setByValue(h,j,g,k);this.hoge=f.getSerialNumberHex()};this.getEncodedHex=function(){if(this.dHashAlg===null&&this.dIssuerNameHash===null&&this.dIssuerKeyHash===null&&this.dSerialNumber===null){throw"not yet set values"}var f=[this.dHashAlg,this.dIssuerNameHash,this.dIssuerKeyHash,this.dSerialNumber];var g=new a.DERSequence({array:f});this.hTLV=g.getEncodedHex();return this.hTLV};if(typeof c!=="undefined"){var b=c;if(typeof b.issuerCert!=="undefined"&&typeof b.subjectCert!=="undefined"){var d=KJUR.asn1.ocsp.DEFAULT_HASH;if(typeof b.alg==="undefined"){d=undefined}this.setByCert(b.issuerCert,b.subjectCert,d)}else{if(typeof b.namehash!=="undefined"&&typeof b.keyhash!=="undefined"&&typeof b.serial!=="undefined"){var d=KJUR.asn1.ocsp.DEFAULT_HASH;if(typeof b.alg==="undefined"){d=undefined}this.setByValue(b.namehash,b.keyhash,b.serial,d)}else{throw"invalid constructor arguments"}}}};YAHOO.lang.extend(KJUR.asn1.ocsp.CertID,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.Request=function(b){KJUR.asn1.ocsp.Request.superclass.constructor.call(this);this.dReqCert=null;this.dExt=null;this.getEncodedHex=function(){var c=[];if(this.dReqCert===null){throw"reqCert not set"}c.push(this.dReqCert);var d=new KJUR.asn1.DERSequence({array:c});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!=="undefined"){var a=new KJUR.asn1.ocsp.CertID(b);this.dReqCert=a}};YAHOO.lang.extend(KJUR.asn1.ocsp.Request,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.TBSRequest=function(a){KJUR.asn1.ocsp.TBSRequest.superclass.constructor.call(this);this.version=0;this.dRequestorName=null;this.dRequestList=[];this.dRequestExt=null;this.setRequestListByParam=function(d){var b=[];for(var c=0;c<d.length;c++){var e=new KJUR.asn1.ocsp.Request(d[0]);b.push(e)}this.dRequestList=b};this.getEncodedHex=function(){var b=[];if(this.version!==0){throw"not supported version: "+this.version}if(this.dRequestorName!==null){throw"requestorName not supported"}var d=new KJUR.asn1.DERSequence({array:this.dRequestList});b.push(d);if(this.dRequestExt!==null){throw"requestExtensions not supported"}var c=new KJUR.asn1.DERSequence({array:b});this.hTLV=c.getEncodedHex();return this.hTLV};if(typeof a!=="undefined"){if(typeof a.reqList!=="undefined"){this.setRequestListByParam(a.reqList)}}};YAHOO.lang.extend(KJUR.asn1.ocsp.TBSRequest,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.OCSPRequest=function(b){KJUR.asn1.ocsp.OCSPRequest.superclass.constructor.call(this);this.dTbsRequest=null;this.dOptionalSignature=null;this.getEncodedHex=function(){var c=[];if(this.dTbsRequest!==null){c.push(this.dTbsRequest)}else{throw"tbsRequest not set"}if(this.dOptionalSignature!==null){throw"optionalSignature not supported"}var d=new KJUR.asn1.DERSequence({array:c});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!=="undefined"){if(typeof b.reqList!=="undefined"){var a=new KJUR.asn1.ocsp.TBSRequest(b);this.dTbsRequest=a}}};YAHOO.lang.extend(KJUR.asn1.ocsp.OCSPRequest,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.OCSPUtil={};KJUR.asn1.ocsp.OCSPUtil.getRequestHex=function(a,b,e){if(e===undefined){e=KJUR.asn1.ocsp.DEFAULT_HASH}var d={alg:e,issuerCert:a,subjectCert:b};var c=new KJUR.asn1.ocsp.OCSPRequest({reqList:[d]});return c.getEncodedHex()};KJUR.asn1.ocsp.OCSPUtil.getOCSPResponseInfo=function(f){var a={};try{var b=ASN1HEX.getVbyList(f,0,[0],"0a");a.responseStatus=parseInt(b,16)}catch(d){}if(a.responseStatus!==0){return a}try{var e=ASN1HEX.getDecendantIndexByNthList(f,0,[1,0,1,0,0,2,0,1]);if(f.substr(e,2)==="80"){a.certStatus="good"}else{if(f.substr(e,2)==="a1"){a.certStatus="revoked";a.revocationTime=hextoutf8(ASN1HEX.getDecendantHexVByNthList(f,e,[0]))}else{if(f.substr(e,2)==="82"){a.certStatus="unknown"}}}}catch(d){}try{var c=ASN1HEX.getDecendantIndexByNthList(f,0,[1,0,1,0,0,2,0,2]);a.thisUpdate=hextoutf8(ASN1HEX.getHexOfV_AtObj(f,c))}catch(d){}try{var g=ASN1HEX.getDecendantIndexByNthList(f,0,[1,0,1,0,0,2,0,3]);if(f.substr(g,2)==="a0"){a.nextUpdate=hextoutf8(ASN1HEX.getDecendantHexVByNthList(f,g,[0]))}}catch(d){}return a};
	/*! base64x-1.1.7 (c) 2012-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	var KJUR;if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.lang=="undefined"||!KJUR.lang){KJUR.lang={}}KJUR.lang.String=function(){};function Base64x(){}function stoBA(d){var b=new Array();for(var c=0;c<d.length;c++){b[c]=d.charCodeAt(c)}return b}function BAtos(b){var d="";for(var c=0;c<b.length;c++){d=d+String.fromCharCode(b[c])}return d}function BAtohex(b){var e="";for(var d=0;d<b.length;d++){var c=b[d].toString(16);if(c.length==1){c="0"+c}e=e+c}return e}function stohex(a){return BAtohex(stoBA(a))}function stob64(a){return hex2b64(stohex(a))}function stob64u(a){return b64tob64u(hex2b64(stohex(a)))}function b64utos(a){return BAtos(b64toBA(b64utob64(a)))}function b64tob64u(a){a=a.replace(/\=/g,"");a=a.replace(/\+/g,"-");a=a.replace(/\//g,"_");return a}function b64utob64(a){if(a.length%4==2){a=a+"=="}else{if(a.length%4==3){a=a+"="}}a=a.replace(/-/g,"+");a=a.replace(/_/g,"/");return a}function hextob64u(a){if(a.length%2==1){a="0"+a}return b64tob64u(hex2b64(a))}function b64utohex(a){return b64tohex(b64utob64(a))}var utf8tob64u,b64utoutf8;if(typeof Buffer==="function"){utf8tob64u=function(a){return b64tob64u(new Buffer(a,"utf8").toString("base64"))};b64utoutf8=function(a){return new Buffer(b64utob64(a),"base64").toString("utf8")}}else{utf8tob64u=function(a){return hextob64u(uricmptohex(encodeURIComponentAll(a)))};b64utoutf8=function(a){return decodeURIComponent(hextouricmp(b64utohex(a)))}}function utf8tob64(a){return hex2b64(uricmptohex(encodeURIComponentAll(a)))}function b64toutf8(a){return decodeURIComponent(hextouricmp(b64tohex(a)))}function utf8tohex(a){return uricmptohex(encodeURIComponentAll(a))}function hextoutf8(a){return decodeURIComponent(hextouricmp(a))}function hextorstr(c){var b="";for(var a=0;a<c.length-1;a+=2){b+=String.fromCharCode(parseInt(c.substr(a,2),16))}return b}function rstrtohex(c){var a="";for(var b=0;b<c.length;b++){a+=("0"+c.charCodeAt(b).toString(16)).slice(-2)}return a}function hextob64(a){return hex2b64(a)}function hextob64nl(b){var a=hextob64(b);var c=a.replace(/(.{64})/g,"$1\r\n");c=c.replace(/\r\n$/,"");return c}function b64nltohex(b){var a=b.replace(/[^0-9A-Za-z\/+=]*/g,"");var c=b64tohex(a);return c}function uricmptohex(a){return a.replace(/%/g,"")}function hextouricmp(a){return a.replace(/(..)/g,"%$1")}function encodeURIComponentAll(a){var d=encodeURIComponent(a);var b="";for(var c=0;c<d.length;c++){if(d[c]=="%"){b=b+d.substr(c,3);c=c+2}else{b=b+"%"+stohex(d[c])}}return b}function newline_toUnix(a){a=a.replace(/\r\n/mg,"\n");return a}function newline_toDos(a){a=a.replace(/\r\n/mg,"\n");a=a.replace(/\n/mg,"\r\n");return a}KJUR.lang.String.isInteger=function(a){if(a.match(/^[0-9]+$/)){return true}else{if(a.match(/^-[0-9]+$/)){return true}else{return false}}};KJUR.lang.String.isHex=function(a){if(a.length%2==0&&(a.match(/^[0-9a-f]+$/)||a.match(/^[0-9A-F]+$/))){return true}else{return false}};KJUR.lang.String.isBase64=function(a){a=a.replace(/\s+/g,"");if(a.match(/^[0-9A-Za-z+\/]+={0,3}$/)&&a.length%4==0){return true}else{return false}};KJUR.lang.String.isBase64URL=function(a){if(a.match(/[+/=]/)){return false}a=b64utob64(a);return KJUR.lang.String.isBase64(a)};KJUR.lang.String.isIntegerArray=function(a){a=a.replace(/\s+/g,"");if(a.match(/^\[[0-9,]+\]$/)){return true}else{return false}};function intarystrtohex(b){b=b.replace(/^\s*\[\s*/,"");b=b.replace(/\s*\]\s*$/,"");b=b.replace(/\s*/g,"");try{var c=b.split(/,/).map(function(g,e,h){var f=parseInt(g);if(f<0||255<f){throw"integer not in range 0-255"}var d=("00"+f.toString(16)).slice(-2);return d}).join("");return c}catch(a){throw"malformed integer array string: "+a}}var strdiffidx=function(c,a){var d=c.length;if(c.length>a.length){d=a.length}for(var b=0;b<d;b++){if(c.charCodeAt(b)!=a.charCodeAt(b)){return b}}if(c.length!=a.length){return d}return -1};
	/*! crypto-1.1.9.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414",};this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa",};this.CRYPTOJSMESSAGEDIGESTNAME={md5:CryptoJS.algo.MD5,sha1:CryptoJS.algo.SHA1,sha224:CryptoJS.algo.SHA224,sha256:CryptoJS.algo.SHA256,sha384:CryptoJS.algo.SHA384,sha512:CryptoJS.algo.SHA512,ripemd160:CryptoJS.algo.RIPEMD160};this.getDigestInfoHex=function(a,b){if(typeof this.DIGESTINFOHEAD[b]=="undefined"){throw"alg not supported in Util.DIGESTINFOHEAD: "+b}return this.DIGESTINFOHEAD[b]+a};this.getPaddedDigestInfoHex=function(h,a,j){var c=this.getDigestInfoHex(h,a);var d=j/4;if(c.length+22>d){throw"key is too short for SigAlg: keylen="+j+","+a}var b="0001";var k="00"+c;var g="";var l=d-b.length-k.length;for(var f=0;f<l;f+=2){g+="ff"}var e=b+g+k;return e};this.hashString=function(a,c){var b=new KJUR.crypto.MessageDigest({alg:c});return b.digestString(a)};this.hashHex=function(b,c){var a=new KJUR.crypto.MessageDigest({alg:c});return a.digestHex(b)};this.sha1=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha1",prov:"cryptojs"});return b.digestString(a)};this.sha256=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha256",prov:"cryptojs"});return b.digestString(a)};this.sha256Hex=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha256",prov:"cryptojs"});return b.digestHex(a)};this.sha512=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha512",prov:"cryptojs"});return b.digestString(a)};this.sha512Hex=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha512",prov:"cryptojs"});return b.digestHex(a)};this.md5=function(a){var b=new KJUR.crypto.MessageDigest({alg:"md5",prov:"cryptojs"});return b.digestString(a)};this.ripemd160=function(a){var b=new KJUR.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"});return b.digestString(a)};this.getCryptoJSMDByName=function(a){}};KJUR.crypto.MessageDigest=function(c){var b=null;var a=null;var d=null;this.setAlgAndProvider=function(g,f){if(g!=null&&f===undefined){f=KJUR.crypto.Util.DEFAULTPROVIDER[g]}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g)!=-1&&f=="cryptojs"){try{this.md=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+g+"/"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(h){var i=CryptoJS.enc.Hex.parse(h);this.md.update(i)};this.digest=function(){var h=this.md.finalize();return h.toString(CryptoJS.enc.Hex)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}if(":sha256:".indexOf(g)!=-1&&f=="sjcl"){try{this.md=new sjcl.hash.sha256()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+g+"/"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(i){var h=sjcl.codec.hex.toBits(i);this.md.update(h)};this.digest=function(){var h=this.md.finalize();return sjcl.codec.hex.fromBits(h)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}};this.updateString=function(e){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.updateHex=function(e){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestString=function(e){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestHex=function(e){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};if(c!==undefined){if(c.alg!==undefined){this.algName=c.alg;if(c.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Mac=function(d){var f=null;var c=null;var a=null;var e=null;var b=null;this.setAlgAndProvider=function(k,i){k=k.toLowerCase();if(k==null){k="hmacsha1"}k=k.toLowerCase();if(k.substr(0,4)!="hmac"){throw"setAlgAndProvider unsupported HMAC alg: "+k}if(i===undefined){i=KJUR.crypto.Util.DEFAULTPROVIDER[k]}this.algProv=k+"/"+i;var g=k.substr(4);if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g)!=-1&&i=="cryptojs"){try{var j=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac=CryptoJS.algo.HMAC.create(j,this.pass)}catch(h){throw"setAlgAndProvider hash alg set fail hashAlg="+g+"/"+h}this.updateString=function(l){this.mac.update(l)};this.updateHex=function(l){var m=CryptoJS.enc.Hex.parse(l);this.mac.update(m)};this.doFinal=function(){var l=this.mac.finalize();return l.toString(CryptoJS.enc.Hex)};this.doFinalString=function(l){this.updateString(l);return this.doFinal()};this.doFinalHex=function(l){this.updateHex(l);return this.doFinal()}}};this.updateString=function(g){throw"updateString(str) not supported for this alg/prov: "+this.algProv};this.updateHex=function(g){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv};this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv};this.doFinalString=function(g){throw"digestString(str) not supported for this alg/prov: "+this.algProv};this.doFinalHex=function(g){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv};this.setPassword=function(h){if(typeof h=="string"){var g=h;if(h.length%2==1||!h.match(/^[0-9A-Fa-f]+$/)){g=rstrtohex(h)}this.pass=CryptoJS.enc.Hex.parse(g);return}if(typeof h!="object"){throw"KJUR.crypto.Mac unsupported password type: "+h}var g=null;if(h.hex!==undefined){if(h.hex.length%2!=0||!h.hex.match(/^[0-9A-Fa-f]+$/)){throw"Mac: wrong hex password: "+h.hex}g=h.hex}if(h.utf8!==undefined){g=utf8tohex(h.utf8)}if(h.rstr!==undefined){g=rstrtohex(h.rstr)}if(h.b64!==undefined){g=b64tohex(h.b64)}if(h.b64u!==undefined){g=b64utohex(h.b64u)}if(g==null){throw"KJUR.crypto.Mac unsupported password type: "+h}this.pass=CryptoJS.enc.Hex.parse(g)};if(d!==undefined){if(d.pass!==undefined){this.setPassword(d.pass)}if(d.alg!==undefined){this.algName=d.alg;if(d.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Signature=function(o){var q=null;var n=null;var r=null;var c=null;var l=null;var d=null;var k=null;var h=null;var p=null;var e=null;var b=-1;var g=null;var j=null;var a=null;var i=null;var f=null;this._setAlgNames=function(){var s=this.algName.match(/^(.+)with(.+)$/);if(s){this.mdAlgName=s[1].toLowerCase();this.pubkeyAlgName=s[2].toLowerCase()}};this._zeroPaddingOfSignature=function(x,w){var v="";var t=w/4-x.length;for(var u=0;u<t;u++){v=v+"0"}return v+x};this.setAlgAndProvider=function(u,t){this._setAlgNames();if(t!="cryptojs/jsrsa"){throw"provider not supported: "+t}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)!=-1){try{this.md=new KJUR.crypto.MessageDigest({alg:this.mdAlgName})}catch(s){throw"setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+s}this.init=function(w,x){var y=null;try{if(x===undefined){y=KEYUTIL.getKey(w)}else{y=KEYUTIL.getKey(w,x)}}catch(v){throw"init failed:"+v}if(y.isPrivate===true){this.prvKey=y;this.state="SIGN"}else{if(y.isPublic===true){this.pubKey=y;this.state="VERIFY"}else{throw"init failed.:"+y}}};this.initSign=function(v){if(typeof v.ecprvhex=="string"&&typeof v.eccurvename=="string"){this.ecprvhex=v.ecprvhex;this.eccurvename=v.eccurvename}else{this.prvKey=v}this.state="SIGN"};this.initVerifyByPublicKey=function(v){if(typeof v.ecpubhex=="string"&&typeof v.eccurvename=="string"){this.ecpubhex=v.ecpubhex;this.eccurvename=v.eccurvename}else{if(v instanceof KJUR.crypto.ECDSA){this.pubKey=v}else{if(v instanceof RSAKey){this.pubKey=v}}}this.state="VERIFY"};this.initVerifyByCertificatePEM=function(v){var w=new X509();w.readCertPEM(v);this.pubKey=w.subjectPublicKeyRSA;this.state="VERIFY"};this.updateString=function(v){this.md.updateString(v)};this.updateHex=function(v){this.md.updateHex(v)};this.sign=function(){this.sHashHex=this.md.digest();if(typeof this.ecprvhex!="undefined"&&typeof this.eccurvename!="undefined"){var v=new KJUR.crypto.ECDSA({curve:this.eccurvename});this.hSign=v.signHex(this.sHashHex,this.ecprvhex)}else{if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName=="rsaandmgf1"){this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen)}else{if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName=="rsa"){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName)}else{if(this.prvKey instanceof KJUR.crypto.ECDSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{if(this.prvKey instanceof KJUR.crypto.DSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}}}}return this.hSign};this.signString=function(v){this.updateString(v);return this.sign()};this.signHex=function(v){this.updateHex(v);return this.sign()};this.verify=function(v){this.sHashHex=this.md.digest();if(typeof this.ecpubhex!="undefined"&&typeof this.eccurvename!="undefined"){var w=new KJUR.crypto.ECDSA({curve:this.eccurvename});return w.verifyHex(this.sHashHex,v,this.ecpubhex)}else{if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName=="rsaandmgf1"){return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,v,this.mdAlgName,this.pssSaltLen)}else{if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName=="rsa"){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(this.pubKey instanceof KJUR.crypto.ECDSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(this.pubKey instanceof KJUR.crypto.DSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}}}}}}};this.init=function(s,t){throw"init(key, pass) not supported for this alg:prov="+this.algProvName};this.initVerifyByPublicKey=function(s){throw"initVerifyByPublicKey(rsaPubKeyy) not supported for this alg:prov="+this.algProvName};this.initVerifyByCertificatePEM=function(s){throw"initVerifyByCertificatePEM(certPEM) not supported for this alg:prov="+this.algProvName};this.initSign=function(s){throw"initSign(prvKey) not supported for this alg:prov="+this.algProvName};this.updateString=function(s){throw"updateString(str) not supported for this alg:prov="+this.algProvName};this.updateHex=function(s){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName};this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName};this.signString=function(s){throw"digestString(str) not supported for this alg:prov="+this.algProvName};this.signHex=function(s){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName};this.verify=function(s){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName};this.initParams=o;if(o!==undefined){if(o.alg!==undefined){this.algName=o.alg;if(o.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}else{this.provName=o.prov}this.algProvName=this.algName+":"+this.provName;this.setAlgAndProvider(this.algName,this.provName);this._setAlgNames()}if(o.psssaltlen!==undefined){this.pssSaltLen=o.psssaltlen}if(o.prvkeypem!==undefined){if(o.prvkeypas!==undefined){throw"both prvkeypem and prvkeypas parameters not supported"}else{try{var q=new RSAKey();q.readPrivateKeyFromPEMString(o.prvkeypem);this.initSign(q)}catch(m){throw"fatal error to load pem private key: "+m}}}}};KJUR.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040023":"secp521r1","2b81040022":"secp384r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA",}};
	/*! ecdsa-modified-1.0.5.js (c) Stephan Thomas, Kenji Urushima | github.com/bitcoinjs/bitcoinjs-lib/blob/master/LICENSE
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECDSA=function(h){var e="secp256r1";var g=null;var b=null;var f=null;var a=new SecureRandom();var d=null;this.type="EC";function c(s,o,r,n){var j=Math.max(o.bitLength(),n.bitLength());var t=s.add2D(r);var q=s.curve.getInfinity();for(var p=j-1;p>=0;--p){q=q.twice2D();q.z=BigInteger.ONE;if(o.testBit(p)){if(n.testBit(p)){q=q.add2D(t)}else{q=q.add2D(s)}}else{if(n.testBit(p)){q=q.add2D(r)}}}return q}this.getBigRandom=function(i){return new BigInteger(i.bitLength(),a).mod(i.subtract(BigInteger.ONE)).add(BigInteger.ONE)};this.setNamedCurve=function(i){this.ecparams=KJUR.crypto.ECParameterDB.getByName(i);this.prvKeyHex=null;this.pubKeyHex=null;this.curveName=i};this.setPrivateKeyHex=function(i){this.isPrivate=true;this.prvKeyHex=i};this.setPublicKeyHex=function(i){this.isPublic=true;this.pubKeyHex=i};this.getPublicKeyXYHex=function(){var k=this.pubKeyHex;if(k.substr(0,2)!=="04"){throw"this method supports uncompressed format(04) only"}var j=this.ecparams.keylen/4;if(k.length!==2+j*2){throw"malformed public key hex length"}var i={};i.x=k.substr(2,j);i.y=k.substr(2+j);return i};this.getShortNISTPCurveName=function(){var i=this.curveName;if(i==="secp256r1"||i==="NIST P-256"||i==="P-256"||i==="prime256v1"){return"P-256"}if(i==="secp384r1"||i==="NIST P-384"||i==="P-384"){return"P-384"}return null};this.generateKeyPairHex=function(){var k=this.ecparams.n;var n=this.getBigRandom(k);var l=this.ecparams.G.multiply(n);var q=l.getX().toBigInteger();var o=l.getY().toBigInteger();var i=this.ecparams.keylen/4;var m=("0000000000"+n.toString(16)).slice(-i);var r=("0000000000"+q.toString(16)).slice(-i);var p=("0000000000"+o.toString(16)).slice(-i);var j="04"+r+p;this.setPrivateKeyHex(m);this.setPublicKeyHex(j);return{ecprvhex:m,ecpubhex:j}};this.signWithMessageHash=function(i){return this.signHex(i,this.prvKeyHex)};this.signHex=function(o,j){var t=new BigInteger(j,16);var l=this.ecparams.n;var q=new BigInteger(o,16);do{var m=this.getBigRandom(l);var u=this.ecparams.G;var p=u.multiply(m);var i=p.getX().toBigInteger().mod(l)}while(i.compareTo(BigInteger.ZERO)<=0);var v=m.modInverse(l).multiply(q.add(t.multiply(i))).mod(l);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(i,v)};this.sign=function(m,u){var q=u;var j=this.ecparams.n;var p=BigInteger.fromByteArrayUnsigned(m);do{var l=this.getBigRandom(j);var t=this.ecparams.G;var o=t.multiply(l);var i=o.getX().toBigInteger().mod(j)}while(i.compareTo(BigInteger.ZERO)<=0);var v=l.modInverse(j).multiply(p.add(q.multiply(i))).mod(j);return this.serializeSig(i,v)};this.verifyWithMessageHash=function(j,i){return this.verifyHex(j,i,this.pubKeyHex)};this.verifyHex=function(m,i,p){var l,j;var o=KJUR.crypto.ECDSA.parseSigHex(i);l=o.r;j=o.s;var k;k=ECPointFp.decodeFromHex(this.ecparams.curve,p);var n=new BigInteger(m,16);return this.verifyRaw(n,l,j,k)};this.verify=function(o,p,j){var l,i;if(Bitcoin.Util.isArray(p)){var n=this.parseSig(p);l=n.r;i=n.s}else{if("object"===typeof p&&p.r&&p.s){l=p.r;i=p.s}else{throw"Invalid value for signature"}}var k;if(j instanceof ECPointFp){k=j}else{if(Bitcoin.Util.isArray(j)){k=ECPointFp.decodeFrom(this.ecparams.curve,j)}else{throw"Invalid format for pubkey value, must be byte array or ECPointFp"}}var m=BigInteger.fromByteArrayUnsigned(o);return this.verifyRaw(m,l,i,k)};this.verifyRaw=function(o,i,w,m){var l=this.ecparams.n;var u=this.ecparams.G;if(i.compareTo(BigInteger.ONE)<0||i.compareTo(l)>=0){return false}if(w.compareTo(BigInteger.ONE)<0||w.compareTo(l)>=0){return false}var p=w.modInverse(l);var k=o.multiply(p).mod(l);var j=i.multiply(p).mod(l);var q=u.multiply(k).add(m.multiply(j));var t=q.getX().toBigInteger().mod(l);return t.equals(i)};this.serializeSig=function(k,j){var l=k.toByteArraySigned();var i=j.toByteArraySigned();var m=[];m.push(2);m.push(l.length);m=m.concat(l);m.push(2);m.push(i.length);m=m.concat(i);m.unshift(m.length);m.unshift(48);return m};this.parseSig=function(n){var m;if(n[0]!=48){throw new Error("Signature not a valid DERSequence")}m=2;if(n[m]!=2){throw new Error("First element in signature must be a DERInteger")}var l=n.slice(m+2,m+2+n[m+1]);m+=2+n[m+1];if(n[m]!=2){throw new Error("Second element in signature must be a DERInteger")}var i=n.slice(m+2,m+2+n[m+1]);m+=2+n[m+1];var k=BigInteger.fromByteArrayUnsigned(l);var j=BigInteger.fromByteArrayUnsigned(i);return{r:k,s:j}};this.parseSigCompact=function(m){if(m.length!==65){throw"Signature has the wrong length"}var j=m[0]-27;if(j<0||j>7){throw"Invalid signature type"}var o=this.ecparams.n;var l=BigInteger.fromByteArrayUnsigned(m.slice(1,33)).mod(o);var k=BigInteger.fromByteArrayUnsigned(m.slice(33,65)).mod(o);return{r:l,s:k,i:j}};if(h!==undefined){if(h.curve!==undefined){this.curveName=h.curve}}if(this.curveName===undefined){this.curveName=e}this.setNamedCurve(this.curveName);if(h!==undefined){if(h.prv!==undefined){this.setPrivateKeyHex(h.prv)}if(h.pub!==undefined){this.setPublicKeyHex(h.pub)}}};KJUR.crypto.ECDSA.parseSigHex=function(a){var b=KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d=new BigInteger(b.r,16);var c=new BigInteger(b.s,16);return{r:d,s:c}};KJUR.crypto.ECDSA.parseSigHexInHexRS=function(c){if(c.substr(0,2)!="30"){throw"signature is not a ASN.1 sequence"}var b=ASN1HEX.getPosArrayOfChildren_AtObj(c,0);if(b.length!=2){throw"number of signature ASN.1 sequence elements seem wrong"}var g=b[0];var f=b[1];if(c.substr(g,2)!="02"){throw"1st item of sequene of signature is not ASN.1 integer"}if(c.substr(f,2)!="02"){throw"2nd item of sequene of signature is not ASN.1 integer"}var e=ASN1HEX.getHexOfV_AtObj(c,g);var d=ASN1HEX.getHexOfV_AtObj(c,f);return{r:e,s:d}};KJUR.crypto.ECDSA.asn1SigToConcatSig=function(c){var d=KJUR.crypto.ECDSA.parseSigHexInHexRS(c);var b=d.r;var a=d.s;if(b.substr(0,2)=="00"&&(((b.length/2)*8)%(16*8))==8){b=b.substr(2)}if(a.substr(0,2)=="00"&&(((a.length/2)*8)%(16*8))==8){a=a.substr(2)}if((((b.length/2)*8)%(16*8))!=0){throw"unknown ECDSA sig r length error"}if((((a.length/2)*8)%(16*8))!=0){throw"unknown ECDSA sig s length error"}return b+a};KJUR.crypto.ECDSA.concatSigToASN1Sig=function(a){if((((a.length/2)*8)%(16*8))!=0){throw"unknown ECDSA concatinated r-s sig  length error"}var c=a.substr(0,a.length/2);var b=a.substr(a.length/2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c,b)};KJUR.crypto.ECDSA.hexRSSigToASN1Sig=function(b,a){var d=new BigInteger(b,16);var c=new BigInteger(a,16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d,c)};KJUR.crypto.ECDSA.biRSSigToASN1Sig=function(e,c){var b=new KJUR.asn1.DERInteger({bigint:e});var a=new KJUR.asn1.DERInteger({bigint:c});var d=new KJUR.asn1.DERSequence({array:[b,a]});return d.getEncodedHex()};
	/*! ecparam-1.0.0.js (c) 2013 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECParameterDB=new function(){var b={};var c={};function a(d){return new BigInteger(d,16)}this.getByName=function(e){var d=e;if(typeof c[d]!="undefined"){d=c[e]}if(typeof b[d]!="undefined"){return b[d]}throw"unregistered EC curve name: "+d};this.regist=function(A,l,o,g,m,e,j,f,k,u,d,x){b[A]={};var s=a(o);var z=a(g);var y=a(m);var t=a(e);var w=a(j);var r=new ECCurveFp(s,z,y);var q=r.decodePointHex("04"+f+k);b[A]["name"]=A;b[A]["keylen"]=l;b[A]["curve"]=r;b[A]["G"]=q;b[A]["n"]=t;b[A]["h"]=w;b[A]["oid"]=d;b[A]["info"]=x;for(var v=0;v<u.length;v++){c[u[v]]=A}}};KJUR.crypto.ECParameterDB.regist("secp128r1",128,"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC","E87579C11079F43DD824993C2CEE5ED3","FFFFFFFE0000000075A30D1B9038A115","1","161FF7528B899B2D0C28607CA52C5B86","CF5AC8395BAFEB13C02DA292DDED7A83",[],"","secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73","0","7","0100000000000000000001B8FA16DFAB9ACA16B6B3","1","3B4C382CE37AA192A4019E763036F4F5DD4D7EBB","938CF935318FDCED6BC28286531733C3F03C4FEE",[],"","secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC","1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45","0100000000000000000001F4C8F927AED3CA752257","1","4A96B5688EF573284664698968C38BB913CBFC82","23A628553168947D59DCC912042351377AC5FB32",[],"","secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37","0","3","FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D","1","DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D","9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",[]);KJUR.crypto.ECParameterDB.regist("secp192r1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC","64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1","FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831","1","188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012","07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",[]);KJUR.crypto.ECParameterDB.regist("secp224r1",224,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE","B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4","FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D","1","B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21","BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",[]);KJUR.crypto.ECParameterDB.regist("secp256k1",256,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F","0","7","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","1","79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798","483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",[]);KJUR.crypto.ECParameterDB.regist("secp256r1",256,"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC","5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B","FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551","1","6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296","4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",["NIST P-256","P-256","prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1",384,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC","B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973","1","AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7","3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",["NIST P-384","P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1",521,"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC","051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409","1","C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",["NIST P-521","P-521"]);
	/*! dsa-modified-1.0.1.js (c) Recurity Labs GmbH, Kenji Urushimma | github.com/openpgpjs/openpgpjs/blob/master/LICENSE
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.DSA=function(){this.p=null;this.q=null;this.g=null;this.y=null;this.x=null;this.type="DSA";this.setPrivate=function(z,w,v,A,u){this.isPrivate=true;this.p=z;this.q=w;this.g=v;this.y=A;this.x=u};this.setPublic=function(w,v,u,z){this.isPublic=true;this.p=w;this.q=v;this.g=u;this.y=z;this.x=null};this.signWithMessageHash=function(z){var v=this.p;var u=this.q;var C=this.g;var D=this.y;var E=this.x;var A=z.substr(0,u.bitLength()/4);var B=new BigInteger(z,16);var w=n(BigInteger.ONE.add(BigInteger.ONE),u.subtract(BigInteger.ONE));var G=(C.modPow(w,v)).mod(u);var F=(w.modInverse(u).multiply(B.add(E.multiply(G)))).mod(u);var H=KJUR.asn1.ASN1Util.jsonToASN1HEX({seq:[{"int":{bigint:G}},{"int":{bigint:F}}]});return H};this.verifyWithMessageHash=function(C,B){var z=this.p;var u=this.q;var G=this.g;var H=this.y;var E=this.parseASN1Signature(B);var K=E[0];var J=E[1];var C=C.substr(0,u.bitLength()/4);var D=new BigInteger(C,16);if(BigInteger.ZERO.compareTo(K)>0||K.compareTo(u)>0||BigInteger.ZERO.compareTo(J)>0||J.compareTo(u)>0){throw"invalid DSA signature"}var I=J.modInverse(u);var A=D.multiply(I).mod(u);var v=K.multiply(I).mod(u);var F=G.modPow(A,z).multiply(H.modPow(v,z)).mod(z).mod(u);return F.compareTo(K)==0};this.parseASN1Signature=function(u){try{var y=new BigInteger(ASN1HEX.getVbyList(u,0,[0],"02"),16);var v=new BigInteger(ASN1HEX.getVbyList(u,0,[1],"02"),16);return[y,v]}catch(w){throw"malformed DSA signature"}};function d(E,w,B,v,u,C){var z=KJUR.crypto.Util.hashString(w,E.toLowerCase());var z=z.substr(0,u.bitLength()/4);var A=new BigInteger(z,16);var y=n(BigInteger.ONE.add(BigInteger.ONE),u.subtract(BigInteger.ONE));var F=(B.modPow(y,v)).mod(u);var D=(y.modInverse(u).multiply(A.add(C.multiply(F)))).mod(u);var G=new Array();G[0]=F;G[1]=D;return G}function r(v){var u=openpgp.config.config.prefer_hash_algorithm;switch(Math.round(v.bitLength()/8)){case 20:if(u!=2&&u>11&&u!=10&&u<8){return 2}return u;case 28:if(u>11&&u<8){return 11}return u;case 32:if(u>10&&u<8){return 8}return u;default:util.print_debug("DSA select hash algorithm: returning null for an unknown length of q");return null}}this.select_hash_algorithm=r;function m(I,K,J,B,z,u,F,G){var C=KJUR.crypto.Util.hashString(B,I.toLowerCase());var C=C.substr(0,u.bitLength()/4);var D=new BigInteger(C,16);if(BigInteger.ZERO.compareTo(K)>0||K.compareTo(u)>0||BigInteger.ZERO.compareTo(J)>0||J.compareTo(u)>0){util.print_error("invalid DSA Signature");return null}var H=J.modInverse(u);var A=D.multiply(H).mod(u);var v=K.multiply(H).mod(u);var E=F.modPow(A,z).multiply(G.modPow(v,z)).mod(z).mod(u);return E.compareTo(K)==0}function a(z){var A=new BigInteger(z,primeCenterie);var y=j(q,512);var u=t(p,q,z);var v;do{v=new BigInteger(q.bitCount(),rand)}while(x.compareTo(BigInteger.ZERO)!=1&&x.compareTo(q)!=-1);var w=g.modPow(x,p);return{x:v,q:A,p:y,g:u,y:w}}function j(y,z,w){if(z%64!=0){return false}var u;var v;do{u=w(bitcount,true);v=u.subtract(BigInteger.ONE);u=u.subtract(v.remainder(y))}while(!u.isProbablePrime(primeCenterie)||u.bitLength()!=l);return u}function t(B,z,A,w){var u=B.subtract(BigInteger.ONE);var y=u.divide(z);var v;do{v=w(A)}while(v.compareTo(u)!=-1&&v.compareTo(BigInteger.ONE)!=1);return v.modPow(y,B)}function o(w,y,u){var v;do{v=u(y,false)}while(v.compareTo(w)!=-1&&v.compareTo(BigInteger.ZERO)!=1);return v}function i(v,w){k=o(v);var u=g.modPow(k,w).mod(v);return u}function h(B,w,y,v,z,u){var A=B(v);s=(w.modInverse(z).multiply(A.add(u.multiply(y)))).mod(z);return s}this.sign=d;this.verify=m;function n(w,u){if(u.compareTo(w)<=0){return}var v=u.subtract(w);var y=e(v.bitLength());while(y>v){y=e(v.bitLength())}return w.add(y)}function e(w){if(w<0){return null}var u=Math.floor((w+7)/8);var v=c(u);if(w%8>0){v=String.fromCharCode((Math.pow(2,w%8)-1)&v.charCodeAt(0))+v.substring(1)}return new BigInteger(f(v),16)}function c(w){var u="";for(var v=0;v<w;v++){u+=String.fromCharCode(b())}return u}function b(){var u=new Uint32Array(1);window.crypto.getRandomValues(u);return u[0]&255}function f(y){if(y==null){return""}var v=[];var w=y.length;var z=0;var u;while(z<w){u=y[z++].charCodeAt().toString(16);while(u.length<2){u="0"+u}v.push(""+u)}return v.join("")}this.getRandomBigIntegerInRange=n;this.getRandomBigInteger=e;this.getRandomBytes=c};
	/*! pkcs5pkey-1.0.7.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	var PKCS5PKEY=function(){var c=function(n,p,o){return i(CryptoJS.AES,n,p,o)};var d=function(n,p,o){return i(CryptoJS.TripleDES,n,p,o)};var i=function(q,v,s,o){var p=CryptoJS.enc.Hex.parse(v);var u=CryptoJS.enc.Hex.parse(s);var n=CryptoJS.enc.Hex.parse(o);var r={};r.key=u;r.iv=n;r.ciphertext=p;var t=q.decrypt(r,u,{iv:n});return CryptoJS.enc.Hex.stringify(t)};var j=function(n,p,o){return e(CryptoJS.AES,n,p,o)};var m=function(n,p,o){return e(CryptoJS.TripleDES,n,p,o)};var e=function(s,x,v,p){var r=CryptoJS.enc.Hex.parse(x);var w=CryptoJS.enc.Hex.parse(v);var o=CryptoJS.enc.Hex.parse(p);var n={};var u=s.encrypt(r,w,{iv:o});var q=CryptoJS.enc.Hex.parse(u.toString());var t=CryptoJS.enc.Base64.stringify(q);return t};var g={"AES-256-CBC":{proc:c,eproc:j,keylen:32,ivlen:16},"AES-192-CBC":{proc:c,eproc:j,keylen:24,ivlen:16},"AES-128-CBC":{proc:c,eproc:j,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:d,eproc:m,keylen:24,ivlen:8}};var b=function(n){return g[n]["proc"]};var k=function(n){var p=CryptoJS.lib.WordArray.random(n);var o=CryptoJS.enc.Hex.stringify(p);return o};var l=function(t){var u={};var o=t.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));if(o){u.cipher=o[1];u.ivsalt=o[2]}var n=t.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if(n){u.type=n[1]}var r=-1;var v=0;if(t.indexOf("\r\n\r\n")!=-1){r=t.indexOf("\r\n\r\n");v=2}if(t.indexOf("\n\n")!=-1){r=t.indexOf("\n\n");v=1}var q=t.indexOf("-----END");if(r!=-1&&q!=-1){var p=t.substring(r+v*2,q-v);p=p.replace(/\s+/g,"");u.data=p}return u};var h=function(o,w,n){var t=n.substring(0,16);var r=CryptoJS.enc.Hex.parse(t);var p=CryptoJS.enc.Utf8.parse(w);var s=g[o]["keylen"]+g[o]["ivlen"];var v="";var u=null;for(;;){var q=CryptoJS.algo.MD5.create();if(u!=null){q.update(u)}q.update(p);q.update(r);u=q.finalize();v=v+CryptoJS.enc.Hex.stringify(u);if(v.length>=s*2){break}}var x={};x.keyhex=v.substr(0,g[o]["keylen"]*2);x.ivhex=v.substr(g[o]["keylen"]*2,g[o]["ivlen"]*2);return x};var a=function(n,t,p,u){var q=CryptoJS.enc.Base64.parse(n);var o=CryptoJS.enc.Hex.stringify(q);var s=g[t]["proc"];var r=s(o,p,u);return r};var f=function(n,q,o,s){var p=g[q]["eproc"];var r=p(n,o,s);return r};return{version:"1.0.5",getHexFromPEM:function(o,r){var p=o;if(p.indexOf("BEGIN "+r)==-1){throw"can't find PEM header: "+r}p=p.replace("-----BEGIN "+r+"-----","");p=p.replace("-----END "+r+"-----","");var q=p.replace(/\s+/g,"");var n=b64tohex(q);return n},getDecryptedKeyHexByKeyIV:function(o,r,q,p){var n=b(r);return n(o,q,p)},parsePKCS5PEM:function(n){return l(n)},getKeyAndUnusedIvByPasscodeAndIvsalt:function(o,n,p){return h(o,n,p)},decryptKeyB64:function(n,p,o,q){return a(n,p,o,q)},getDecryptedKeyHex:function(w,v){var o=l(w);var r=o.type;var p=o.cipher;var n=o.ivsalt;var q=o.data;var u=h(p,v,n);var t=u.keyhex;var s=a(q,p,t,n);return s},getRSAKeyFromEncryptedPKCS5PEM:function(p,o){var q=this.getDecryptedKeyHex(p,o);var n=new RSAKey();n.readPrivateKeyFromASN1HexString(q);return n},getEryptedPKCS5PEMFromPrvKeyHex:function(q,x,r,p){var n="";if(typeof r=="undefined"||r==null){r="AES-256-CBC"}if(typeof g[r]=="undefined"){throw"PKCS5PKEY unsupported algorithm: "+r}if(typeof p=="undefined"||p==null){var t=g[r]["ivlen"];var s=k(t);p=s.toUpperCase()}var w=h(r,x,p);var v=w.keyhex;var u=f(q,r,v,p);var o=u.replace(/(.{64})/g,"$1\r\n");var n="-----BEGIN RSA PRIVATE KEY-----\r\n";n+="Proc-Type: 4,ENCRYPTED\r\n";n+="DEK-Info: "+r+","+p+"\r\n";n+="\r\n";n+=o;n+="\r\n-----END RSA PRIVATE KEY-----\r\n";return n},getEryptedPKCS5PEMFromRSAKey:function(C,D,o,s){var A=new KJUR.asn1.DERInteger({"int":0});var v=new KJUR.asn1.DERInteger({bigint:C.n});var z=new KJUR.asn1.DERInteger({"int":C.e});var B=new KJUR.asn1.DERInteger({bigint:C.d});var t=new KJUR.asn1.DERInteger({bigint:C.p});var r=new KJUR.asn1.DERInteger({bigint:C.q});var y=new KJUR.asn1.DERInteger({bigint:C.dmp1});var u=new KJUR.asn1.DERInteger({bigint:C.dmq1});var x=new KJUR.asn1.DERInteger({bigint:C.coeff});var E=new KJUR.asn1.DERSequence({array:[A,v,z,B,t,r,y,u,x]});var w=E.getEncodedHex();return this.getEryptedPKCS5PEMFromPrvKeyHex(w,D,o,s)},newEncryptedPKCS5PEM:function(n,o,r,s){if(typeof o=="undefined"||o==null){o=1024}if(typeof r=="undefined"||r==null){r="10001"}var p=new RSAKey();p.generate(o,r);var q=null;if(typeof s=="undefined"||s==null){q=this.getEncryptedPKCS5PEMFromRSAKey(pkey,n)}else{q=this.getEncryptedPKCS5PEMFromRSAKey(pkey,n,s)}return q},getRSAKeyFromPlainPKCS8PEM:function(p){if(p.match(/ENCRYPTED/)){throw"pem shall be not ENCRYPTED"}var o=this.getHexFromPEM(p,"PRIVATE KEY");var n=this.getRSAKeyFromPlainPKCS8Hex(o);return n},getRSAKeyFromPlainPKCS8Hex:function(q){var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,0);if(p.length!=3){throw"outer DERSequence shall have 3 elements: "+p.length}var o=ASN1HEX.getHexOfTLV_AtObj(q,p[1]);if(o!="300d06092a864886f70d0101010500"){throw"PKCS8 AlgorithmIdentifier is not rsaEnc: "+o}var o=ASN1HEX.getHexOfTLV_AtObj(q,p[1]);var r=ASN1HEX.getHexOfTLV_AtObj(q,p[2]);var s=ASN1HEX.getHexOfV_AtObj(r,0);var n=new RSAKey();n.readPrivateKeyFromASN1HexString(s);return n},parseHexOfEncryptedPKCS8:function(u){var q={};var p=ASN1HEX.getPosArrayOfChildren_AtObj(u,0);if(p.length!=2){throw"malformed format: SEQUENCE(0).items != 2: "+p.length}q.ciphertext=ASN1HEX.getHexOfV_AtObj(u,p[1]);var w=ASN1HEX.getPosArrayOfChildren_AtObj(u,p[0]);if(w.length!=2){throw"malformed format: SEQUENCE(0.0).items != 2: "+w.length}if(ASN1HEX.getHexOfV_AtObj(u,w[0])!="2a864886f70d01050d"){throw"this only supports pkcs5PBES2"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(u,w[1]);if(w.length!=2){throw"malformed format: SEQUENCE(0.0.1).items != 2: "+n.length}var o=ASN1HEX.getPosArrayOfChildren_AtObj(u,n[1]);if(o.length!=2){throw"malformed format: SEQUENCE(0.0.1.1).items != 2: "+o.length}if(ASN1HEX.getHexOfV_AtObj(u,o[0])!="2a864886f70d0307"){throw"this only supports TripleDES"}q.encryptionSchemeAlg="TripleDES";q.encryptionSchemeIV=ASN1HEX.getHexOfV_AtObj(u,o[1]);var r=ASN1HEX.getPosArrayOfChildren_AtObj(u,n[0]);if(r.length!=2){throw"malformed format: SEQUENCE(0.0.1.0).items != 2: "+r.length}if(ASN1HEX.getHexOfV_AtObj(u,r[0])!="2a864886f70d01050c"){throw"this only supports pkcs5PBKDF2"}var v=ASN1HEX.getPosArrayOfChildren_AtObj(u,r[1]);if(v.length<2){throw"malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+v.length}q.pbkdf2Salt=ASN1HEX.getHexOfV_AtObj(u,v[0]);var s=ASN1HEX.getHexOfV_AtObj(u,v[1]);try{q.pbkdf2Iter=parseInt(s,16)}catch(t){throw"malformed format pbkdf2Iter: "+s}return q},getPBKDF2KeyHexFromParam:function(s,n){var r=CryptoJS.enc.Hex.parse(s.pbkdf2Salt);var o=s.pbkdf2Iter;var q=CryptoJS.PBKDF2(n,r,{keySize:192/32,iterations:o});var p=CryptoJS.enc.Hex.stringify(q);return p},getPlainPKCS8HexFromEncryptedPKCS8PEM:function(v,w){var p=this.getHexFromPEM(v,"ENCRYPTED PRIVATE KEY");var n=this.parseHexOfEncryptedPKCS8(p);var s=PKCS5PKEY.getPBKDF2KeyHexFromParam(n,w);var t={};t.ciphertext=CryptoJS.enc.Hex.parse(n.ciphertext);var r=CryptoJS.enc.Hex.parse(s);var q=CryptoJS.enc.Hex.parse(n.encryptionSchemeIV);var u=CryptoJS.TripleDES.decrypt(t,r,{iv:q});var o=CryptoJS.enc.Hex.stringify(u);return o},getRSAKeyFromEncryptedPKCS8PEM:function(q,p){var o=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(q,p);var n=this.getRSAKeyFromPlainPKCS8Hex(o);return n},getKeyFromEncryptedPKCS8PEM:function(q,o){var n=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(q,o);var p=this.getKeyFromPlainPrivatePKCS8Hex(n);return p},parsePlainPrivatePKCS8Hex:function(q){var o={};o.algparam=null;if(q.substr(0,2)!="30"){throw"malformed plain PKCS8 private key(code:001)"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,0);if(p.length!=3){throw"malformed plain PKCS8 private key(code:002)"}if(q.substr(p[1],2)!="30"){throw"malformed PKCS8 private key(code:003)"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(q,p[1]);if(n.length!=2){throw"malformed PKCS8 private key(code:004)"}if(q.substr(n[0],2)!="06"){throw"malformed PKCS8 private key(code:005)"}o.algoid=ASN1HEX.getHexOfV_AtObj(q,n[0]);if(q.substr(n[1],2)=="06"){o.algparam=ASN1HEX.getHexOfV_AtObj(q,n[1])}if(q.substr(p[2],2)!="04"){throw"malformed PKCS8 private key(code:006)"}o.keyidx=ASN1HEX.getStartPosOfV_AtObj(q,p[2]);return o},getKeyFromPlainPrivatePKCS8PEM:function(o){var n=this.getHexFromPEM(o,"PRIVATE KEY");var p=this.getKeyFromPlainPrivatePKCS8Hex(n);return p},getKeyFromPlainPrivatePKCS8Hex:function(n){var p=this.parsePlainPrivatePKCS8Hex(n);if(p.algoid=="2a864886f70d010101"){this.parsePrivateRawRSAKeyHexAtObj(n,p);var o=p.key;var q=new RSAKey();q.setPrivateEx(o.n,o.e,o.d,o.p,o.q,o.dp,o.dq,o.co);return q}else{if(p.algoid=="2a8648ce3d0201"){this.parsePrivateRawECKeyHexAtObj(n,p);if(KJUR.crypto.OID.oidhex2name[p.algparam]===undefined){throw"KJUR.crypto.OID.oidhex2name undefined: "+p.algparam}var r=KJUR.crypto.OID.oidhex2name[p.algparam];var q=new KJUR.crypto.ECDSA({curve:r,prv:p.key});return q}else{throw"unsupported private key algorithm"}}},getRSAKeyFromPublicPKCS8PEM:function(o){var p=this.getHexFromPEM(o,"PUBLIC KEY");var n=this.getRSAKeyFromPublicPKCS8Hex(p);return n},getKeyFromPublicPKCS8PEM:function(o){var p=this.getHexFromPEM(o,"PUBLIC KEY");var n=this.getKeyFromPublicPKCS8Hex(p);return n},getKeyFromPublicPKCS8Hex:function(o){var n=this.parsePublicPKCS8Hex(o);if(n.algoid=="2a864886f70d010101"){var r=this.parsePublicRawRSAKeyHex(n.key);var p=new RSAKey();p.setPublic(r.n,r.e);return p}else{if(n.algoid=="2a8648ce3d0201"){if(KJUR.crypto.OID.oidhex2name[n.algparam]===undefined){throw"KJUR.crypto.OID.oidhex2name undefined: "+n.algparam}var q=KJUR.crypto.OID.oidhex2name[n.algparam];var p=new KJUR.crypto.ECDSA({curve:q,pub:n.key});return p}else{throw"unsupported public key algorithm"}}},parsePublicRawRSAKeyHex:function(p){var n={};if(p.substr(0,2)!="30"){throw"malformed RSA key(code:001)"}var o=ASN1HEX.getPosArrayOfChildren_AtObj(p,0);if(o.length!=2){throw"malformed RSA key(code:002)"}if(p.substr(o[0],2)!="02"){throw"malformed RSA key(code:003)"}n.n=ASN1HEX.getHexOfV_AtObj(p,o[0]);if(p.substr(o[1],2)!="02"){throw"malformed RSA key(code:004)"}n.e=ASN1HEX.getHexOfV_AtObj(p,o[1]);return n},parsePrivateRawRSAKeyHexAtObj:function(o,q){var p=q.keyidx;if(o.substr(p,2)!="30"){throw"malformed RSA private key(code:001)"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(o,p);if(n.length!=9){throw"malformed RSA private key(code:002)"}q.key={};q.key.n=ASN1HEX.getHexOfV_AtObj(o,n[1]);q.key.e=ASN1HEX.getHexOfV_AtObj(o,n[2]);q.key.d=ASN1HEX.getHexOfV_AtObj(o,n[3]);q.key.p=ASN1HEX.getHexOfV_AtObj(o,n[4]);q.key.q=ASN1HEX.getHexOfV_AtObj(o,n[5]);q.key.dp=ASN1HEX.getHexOfV_AtObj(o,n[6]);q.key.dq=ASN1HEX.getHexOfV_AtObj(o,n[7]);q.key.co=ASN1HEX.getHexOfV_AtObj(o,n[8])},parsePrivateRawECKeyHexAtObj:function(o,q){var p=q.keyidx;if(o.substr(p,2)!="30"){throw"malformed ECC private key(code:001)"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(o,p);if(n.length!=3){throw"malformed ECC private key(code:002)"}if(o.substr(n[1],2)!="04"){throw"malformed ECC private key(code:003)"}q.key=ASN1HEX.getHexOfV_AtObj(o,n[1])},parsePublicPKCS8Hex:function(q){var o={};o.algparam=null;var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,0);if(p.length!=2){throw"outer DERSequence shall have 2 elements: "+p.length}var r=p[0];if(q.substr(r,2)!="30"){throw"malformed PKCS8 public key(code:001)"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(q,r);if(n.length!=2){throw"malformed PKCS8 public key(code:002)"}if(q.substr(n[0],2)!="06"){throw"malformed PKCS8 public key(code:003)"}o.algoid=ASN1HEX.getHexOfV_AtObj(q,n[0]);if(q.substr(n[1],2)=="06"){o.algparam=ASN1HEX.getHexOfV_AtObj(q,n[1])}if(q.substr(p[1],2)!="03"){throw"malformed PKCS8 public key(code:004)"}o.key=ASN1HEX.getHexOfV_AtObj(q,p[1]).substr(2);return o},getRSAKeyFromPublicPKCS8Hex:function(r){var q=ASN1HEX.getPosArrayOfChildren_AtObj(r,0);if(q.length!=2){throw"outer DERSequence shall have 2 elements: "+q.length}var p=ASN1HEX.getHexOfTLV_AtObj(r,q[0]);if(p!="300d06092a864886f70d0101010500"){throw"PKCS8 AlgorithmId is not rsaEncryption"}if(r.substr(q[1],2)!="03"){throw"PKCS8 Public Key is not BITSTRING encapslated."}var t=ASN1HEX.getStartPosOfV_AtObj(r,q[1])+2;if(r.substr(t,2)!="30"){throw"PKCS8 Public Key is not SEQUENCE."}var n=ASN1HEX.getPosArrayOfChildren_AtObj(r,t);if(n.length!=2){throw"inner DERSequence shall have 2 elements: "+n.length}if(r.substr(n[0],2)!="02"){throw"N is not ASN.1 INTEGER"}if(r.substr(n[1],2)!="02"){throw"E is not ASN.1 INTEGER"}var u=ASN1HEX.getHexOfV_AtObj(r,n[0]);var s=ASN1HEX.getHexOfV_AtObj(r,n[1]);var o=new RSAKey();o.setPublic(u,s);return o},}}();
	/*! keyutil-1.0.14.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	var KEYUTIL=function(){var d=function(p,r,q){return k(CryptoJS.AES,p,r,q)};var e=function(p,r,q){return k(CryptoJS.TripleDES,p,r,q)};var a=function(p,r,q){return k(CryptoJS.DES,p,r,q)};var k=function(s,x,u,q){var r=CryptoJS.enc.Hex.parse(x);var w=CryptoJS.enc.Hex.parse(u);var p=CryptoJS.enc.Hex.parse(q);var t={};t.key=w;t.iv=p;t.ciphertext=r;var v=s.decrypt(t,w,{iv:p});return CryptoJS.enc.Hex.stringify(v)};var l=function(p,r,q){return g(CryptoJS.AES,p,r,q)};var o=function(p,r,q){return g(CryptoJS.TripleDES,p,r,q)};var f=function(p,r,q){return g(CryptoJS.DES,p,r,q)};var g=function(t,y,v,q){var s=CryptoJS.enc.Hex.parse(y);var x=CryptoJS.enc.Hex.parse(v);var p=CryptoJS.enc.Hex.parse(q);var w=t.encrypt(s,x,{iv:p});var r=CryptoJS.enc.Hex.parse(w.toString());var u=CryptoJS.enc.Base64.stringify(r);return u};var i={"AES-256-CBC":{proc:d,eproc:l,keylen:32,ivlen:16},"AES-192-CBC":{proc:d,eproc:l,keylen:24,ivlen:16},"AES-128-CBC":{proc:d,eproc:l,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:e,eproc:o,keylen:24,ivlen:8},"DES-CBC":{proc:a,eproc:f,keylen:8,ivlen:8}};var c=function(p){return i[p]["proc"]};var m=function(p){var r=CryptoJS.lib.WordArray.random(p);var q=CryptoJS.enc.Hex.stringify(r);return q};var n=function(v){var w={};var q=v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));if(q){w.cipher=q[1];w.ivsalt=q[2]}var p=v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if(p){w.type=p[1]}var u=-1;var x=0;if(v.indexOf("\r\n\r\n")!=-1){u=v.indexOf("\r\n\r\n");x=2}if(v.indexOf("\n\n")!=-1){u=v.indexOf("\n\n");x=1}var t=v.indexOf("-----END");if(u!=-1&&t!=-1){var r=v.substring(u+x*2,t-x);r=r.replace(/\s+/g,"");w.data=r}return w};var j=function(q,y,p){var v=p.substring(0,16);var t=CryptoJS.enc.Hex.parse(v);var r=CryptoJS.enc.Utf8.parse(y);var u=i[q]["keylen"]+i[q]["ivlen"];var x="";var w=null;for(;;){var s=CryptoJS.algo.MD5.create();if(w!=null){s.update(w)}s.update(r);s.update(t);w=s.finalize();x=x+CryptoJS.enc.Hex.stringify(w);if(x.length>=u*2){break}}var z={};z.keyhex=x.substr(0,i[q]["keylen"]*2);z.ivhex=x.substr(i[q]["keylen"]*2,i[q]["ivlen"]*2);return z};var b=function(p,v,r,w){var s=CryptoJS.enc.Base64.parse(p);var q=CryptoJS.enc.Hex.stringify(s);var u=i[v]["proc"];var t=u(q,r,w);return t};var h=function(p,s,q,u){var r=i[s]["eproc"];var t=r(p,q,u);return t};return{version:"1.0.0",getHexFromPEM:function(q,u){var r=q;if(r.indexOf("-----BEGIN ")==-1){throw"can't find PEM header: "+u}if(typeof u=="string"&&u!=""){r=r.replace("-----BEGIN "+u+"-----","");r=r.replace("-----END "+u+"-----","")}else{r=r.replace(/-----BEGIN [^-]+-----/,"");r=r.replace(/-----END [^-]+-----/,"")}var t=r.replace(/\s+/g,"");var p=b64tohex(t);return p},getDecryptedKeyHexByKeyIV:function(q,t,s,r){var p=c(t);return p(q,s,r)},parsePKCS5PEM:function(p){return n(p)},getKeyAndUnusedIvByPasscodeAndIvsalt:function(q,p,r){return j(q,p,r)},decryptKeyB64:function(p,r,q,s){return b(p,r,q,s)},getDecryptedKeyHex:function(y,x){var q=n(y);var t=q.type;var r=q.cipher;var p=q.ivsalt;var s=q.data;var w=j(r,x,p);var v=w.keyhex;var u=b(s,r,v,p);return u},getRSAKeyFromEncryptedPKCS5PEM:function(r,q){var s=this.getDecryptedKeyHex(r,q);var p=new RSAKey();p.readPrivateKeyFromASN1HexString(s);return p},getEncryptedPKCS5PEMFromPrvKeyHex:function(x,s,A,t,r){var p="";if(typeof t=="undefined"||t==null){t="AES-256-CBC"}if(typeof i[t]=="undefined"){throw"KEYUTIL unsupported algorithm: "+t}if(typeof r=="undefined"||r==null){var v=i[t]["ivlen"];var u=m(v);r=u.toUpperCase()}var z=j(t,A,r);var y=z.keyhex;var w=h(s,t,y,r);var q=w.replace(/(.{64})/g,"$1\r\n");var p="-----BEGIN "+x+" PRIVATE KEY-----\r\n";p+="Proc-Type: 4,ENCRYPTED\r\n";p+="DEK-Info: "+t+","+r+"\r\n";p+="\r\n";p+=q;p+="\r\n-----END "+x+" PRIVATE KEY-----\r\n";return p},getEncryptedPKCS5PEMFromRSAKey:function(D,E,r,t){var B=new KJUR.asn1.DERInteger({"int":0});var w=new KJUR.asn1.DERInteger({bigint:D.n});var A=new KJUR.asn1.DERInteger({"int":D.e});var C=new KJUR.asn1.DERInteger({bigint:D.d});var u=new KJUR.asn1.DERInteger({bigint:D.p});var s=new KJUR.asn1.DERInteger({bigint:D.q});var z=new KJUR.asn1.DERInteger({bigint:D.dmp1});var v=new KJUR.asn1.DERInteger({bigint:D.dmq1});var y=new KJUR.asn1.DERInteger({bigint:D.coeff});var F=new KJUR.asn1.DERSequence({array:[B,w,A,C,u,s,z,v,y]});var x=F.getEncodedHex();return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",x,E,r,t)},newEncryptedPKCS5PEM:function(p,q,t,u){if(typeof q=="undefined"||q==null){q=1024}if(typeof t=="undefined"||t==null){t="10001"}var r=new RSAKey();r.generate(q,t);var s=null;if(typeof u=="undefined"||u==null){s=this.getEncryptedPKCS5PEMFromRSAKey(r,p)}else{s=this.getEncryptedPKCS5PEMFromRSAKey(r,p,u)}return s},getRSAKeyFromPlainPKCS8PEM:function(r){if(r.match(/ENCRYPTED/)){throw"pem shall be not ENCRYPTED"}var q=this.getHexFromPEM(r,"PRIVATE KEY");var p=this.getRSAKeyFromPlainPKCS8Hex(q);return p},getRSAKeyFromPlainPKCS8Hex:function(s){var r=ASN1HEX.getPosArrayOfChildren_AtObj(s,0);if(r.length!=3){throw"outer DERSequence shall have 3 elements: "+r.length}var q=ASN1HEX.getHexOfTLV_AtObj(s,r[1]);if(q!="300d06092a864886f70d0101010500"){throw"PKCS8 AlgorithmIdentifier is not rsaEnc: "+q}var q=ASN1HEX.getHexOfTLV_AtObj(s,r[1]);var t=ASN1HEX.getHexOfTLV_AtObj(s,r[2]);var u=ASN1HEX.getHexOfV_AtObj(t,0);var p=new RSAKey();p.readPrivateKeyFromASN1HexString(u);return p},parseHexOfEncryptedPKCS8:function(w){var s={};var r=ASN1HEX.getPosArrayOfChildren_AtObj(w,0);if(r.length!=2){throw"malformed format: SEQUENCE(0).items != 2: "+r.length}s.ciphertext=ASN1HEX.getHexOfV_AtObj(w,r[1]);var y=ASN1HEX.getPosArrayOfChildren_AtObj(w,r[0]);if(y.length!=2){throw"malformed format: SEQUENCE(0.0).items != 2: "+y.length}if(ASN1HEX.getHexOfV_AtObj(w,y[0])!="2a864886f70d01050d"){throw"this only supports pkcs5PBES2"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(w,y[1]);if(y.length!=2){throw"malformed format: SEQUENCE(0.0.1).items != 2: "+p.length}var q=ASN1HEX.getPosArrayOfChildren_AtObj(w,p[1]);if(q.length!=2){throw"malformed format: SEQUENCE(0.0.1.1).items != 2: "+q.length}if(ASN1HEX.getHexOfV_AtObj(w,q[0])!="2a864886f70d0307"){throw"this only supports TripleDES"}s.encryptionSchemeAlg="TripleDES";s.encryptionSchemeIV=ASN1HEX.getHexOfV_AtObj(w,q[1]);var t=ASN1HEX.getPosArrayOfChildren_AtObj(w,p[0]);if(t.length!=2){throw"malformed format: SEQUENCE(0.0.1.0).items != 2: "+t.length}if(ASN1HEX.getHexOfV_AtObj(w,t[0])!="2a864886f70d01050c"){throw"this only supports pkcs5PBKDF2"}var x=ASN1HEX.getPosArrayOfChildren_AtObj(w,t[1]);if(x.length<2){throw"malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+x.length}s.pbkdf2Salt=ASN1HEX.getHexOfV_AtObj(w,x[0]);var u=ASN1HEX.getHexOfV_AtObj(w,x[1]);try{s.pbkdf2Iter=parseInt(u,16)}catch(v){throw"malformed format pbkdf2Iter: "+u}return s},getPBKDF2KeyHexFromParam:function(u,p){var t=CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q=u.pbkdf2Iter;var s=CryptoJS.PBKDF2(p,t,{keySize:192/32,iterations:q});var r=CryptoJS.enc.Hex.stringify(s);return r},getPlainPKCS8HexFromEncryptedPKCS8PEM:function(x,y){var r=this.getHexFromPEM(x,"ENCRYPTED PRIVATE KEY");var p=this.parseHexOfEncryptedPKCS8(r);var u=KEYUTIL.getPBKDF2KeyHexFromParam(p,y);var v={};v.ciphertext=CryptoJS.enc.Hex.parse(p.ciphertext);var t=CryptoJS.enc.Hex.parse(u);var s=CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w=CryptoJS.TripleDES.decrypt(v,t,{iv:s});var q=CryptoJS.enc.Hex.stringify(w);return q},getRSAKeyFromEncryptedPKCS8PEM:function(s,r){var q=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(s,r);var p=this.getRSAKeyFromPlainPKCS8Hex(q);return p},getKeyFromEncryptedPKCS8PEM:function(s,q){var p=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(s,q);var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},parsePlainPrivatePKCS8Hex:function(s){var q={};q.algparam=null;if(s.substr(0,2)!="30"){throw"malformed plain PKCS8 private key(code:001)"}var r=ASN1HEX.getPosArrayOfChildren_AtObj(s,0);if(r.length!=3){throw"malformed plain PKCS8 private key(code:002)"}if(s.substr(r[1],2)!="30"){throw"malformed PKCS8 private key(code:003)"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(s,r[1]);if(p.length!=2){throw"malformed PKCS8 private key(code:004)"}if(s.substr(p[0],2)!="06"){throw"malformed PKCS8 private key(code:005)"}q.algoid=ASN1HEX.getHexOfV_AtObj(s,p[0]);if(s.substr(p[1],2)=="06"){q.algparam=ASN1HEX.getHexOfV_AtObj(s,p[1])}if(s.substr(r[2],2)!="04"){throw"malformed PKCS8 private key(code:006)"}q.keyidx=ASN1HEX.getStartPosOfV_AtObj(s,r[2]);return q},getKeyFromPlainPrivatePKCS8PEM:function(q){var p=this.getHexFromPEM(q,"PRIVATE KEY");var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},getKeyFromPlainPrivatePKCS8Hex:function(p){var w=this.parsePlainPrivatePKCS8Hex(p);if(w.algoid=="2a864886f70d010101"){this.parsePrivateRawRSAKeyHexAtObj(p,w);var u=w.key;var z=new RSAKey();z.setPrivateEx(u.n,u.e,u.d,u.p,u.q,u.dp,u.dq,u.co);return z}else{if(w.algoid=="2a8648ce3d0201"){this.parsePrivateRawECKeyHexAtObj(p,w);if(KJUR.crypto.OID.oidhex2name[w.algparam]===undefined){throw"KJUR.crypto.OID.oidhex2name undefined: "+w.algparam}var v=KJUR.crypto.OID.oidhex2name[w.algparam];var z=new KJUR.crypto.ECDSA({curve:v});z.setPublicKeyHex(w.pubkey);z.setPrivateKeyHex(w.key);z.isPublic=false;return z}else{if(w.algoid=="2a8648ce380401"){var t=ASN1HEX.getVbyList(p,0,[1,1,0],"02");var s=ASN1HEX.getVbyList(p,0,[1,1,1],"02");var y=ASN1HEX.getVbyList(p,0,[1,1,2],"02");var B=ASN1HEX.getVbyList(p,0,[2,0],"02");var r=new BigInteger(t,16);var q=new BigInteger(s,16);var x=new BigInteger(y,16);var A=new BigInteger(B,16);var z=new KJUR.crypto.DSA();z.setPrivate(r,q,x,null,A);return z}else{throw"unsupported private key algorithm"}}}},getRSAKeyFromPublicPKCS8PEM:function(q){var r=this.getHexFromPEM(q,"PUBLIC KEY");var p=this.getRSAKeyFromPublicPKCS8Hex(r);return p},getKeyFromPublicPKCS8PEM:function(q){var r=this.getHexFromPEM(q,"PUBLIC KEY");var p=this.getKeyFromPublicPKCS8Hex(r);return p},getKeyFromPublicPKCS8Hex:function(q){var p=this.parsePublicPKCS8Hex(q);if(p.algoid=="2a864886f70d010101"){var u=this.parsePublicRawRSAKeyHex(p.key);var r=new RSAKey();r.setPublic(u.n,u.e);return r}else{if(p.algoid=="2a8648ce3d0201"){if(KJUR.crypto.OID.oidhex2name[p.algparam]===undefined){throw"KJUR.crypto.OID.oidhex2name undefined: "+p.algparam}var s=KJUR.crypto.OID.oidhex2name[p.algparam];var r=new KJUR.crypto.ECDSA({curve:s,pub:p.key});return r}else{if(p.algoid=="2a8648ce380401"){var t=p.algparam;var v=ASN1HEX.getHexOfV_AtObj(p.key,0);var r=new KJUR.crypto.DSA();r.setPublic(new BigInteger(t.p,16),new BigInteger(t.q,16),new BigInteger(t.g,16),new BigInteger(v,16));return r}else{throw"unsupported public key algorithm"}}}},parsePublicRawRSAKeyHex:function(r){var p={};if(r.substr(0,2)!="30"){throw"malformed RSA key(code:001)"}var q=ASN1HEX.getPosArrayOfChildren_AtObj(r,0);if(q.length!=2){throw"malformed RSA key(code:002)"}if(r.substr(q[0],2)!="02"){throw"malformed RSA key(code:003)"}p.n=ASN1HEX.getHexOfV_AtObj(r,q[0]);if(r.substr(q[1],2)!="02"){throw"malformed RSA key(code:004)"}p.e=ASN1HEX.getHexOfV_AtObj(r,q[1]);return p},parsePrivateRawRSAKeyHexAtObj:function(q,s){var r=s.keyidx;if(q.substr(r,2)!="30"){throw"malformed RSA private key(code:001)"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,r);if(p.length!=9){throw"malformed RSA private key(code:002)"}s.key={};s.key.n=ASN1HEX.getHexOfV_AtObj(q,p[1]);s.key.e=ASN1HEX.getHexOfV_AtObj(q,p[2]);s.key.d=ASN1HEX.getHexOfV_AtObj(q,p[3]);s.key.p=ASN1HEX.getHexOfV_AtObj(q,p[4]);s.key.q=ASN1HEX.getHexOfV_AtObj(q,p[5]);s.key.dp=ASN1HEX.getHexOfV_AtObj(q,p[6]);s.key.dq=ASN1HEX.getHexOfV_AtObj(q,p[7]);s.key.co=ASN1HEX.getHexOfV_AtObj(q,p[8])},parsePrivateRawECKeyHexAtObj:function(p,t){var q=t.keyidx;var r=ASN1HEX.getVbyList(p,q,[1],"04");var s=ASN1HEX.getVbyList(p,q,[2,0],"03").substr(2);t.key=r;t.pubkey=s},parsePublicPKCS8Hex:function(s){var q={};q.algparam=null;var r=ASN1HEX.getPosArrayOfChildren_AtObj(s,0);if(r.length!=2){throw"outer DERSequence shall have 2 elements: "+r.length}var t=r[0];if(s.substr(t,2)!="30"){throw"malformed PKCS8 public key(code:001)"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(s,t);if(p.length!=2){throw"malformed PKCS8 public key(code:002)"}if(s.substr(p[0],2)!="06"){throw"malformed PKCS8 public key(code:003)"}q.algoid=ASN1HEX.getHexOfV_AtObj(s,p[0]);if(s.substr(p[1],2)=="06"){q.algparam=ASN1HEX.getHexOfV_AtObj(s,p[1])}else{if(s.substr(p[1],2)=="30"){q.algparam={};q.algparam.p=ASN1HEX.getVbyList(s,p[1],[0],"02");q.algparam.q=ASN1HEX.getVbyList(s,p[1],[1],"02");q.algparam.g=ASN1HEX.getVbyList(s,p[1],[2],"02")}}if(s.substr(r[1],2)!="03"){throw"malformed PKCS8 public key(code:004)"}q.key=ASN1HEX.getHexOfV_AtObj(s,r[1]).substr(2);return q},getRSAKeyFromPublicPKCS8Hex:function(t){var s=ASN1HEX.getPosArrayOfChildren_AtObj(t,0);if(s.length!=2){throw"outer DERSequence shall have 2 elements: "+s.length}var r=ASN1HEX.getHexOfTLV_AtObj(t,s[0]);if(r!="300d06092a864886f70d0101010500"){throw"PKCS8 AlgorithmId is not rsaEncryption"}if(t.substr(s[1],2)!="03"){throw"PKCS8 Public Key is not BITSTRING encapslated."}var v=ASN1HEX.getStartPosOfV_AtObj(t,s[1])+2;if(t.substr(v,2)!="30"){throw"PKCS8 Public Key is not SEQUENCE."}var p=ASN1HEX.getPosArrayOfChildren_AtObj(t,v);if(p.length!=2){throw"inner DERSequence shall have 2 elements: "+p.length}if(t.substr(p[0],2)!="02"){throw"N is not ASN.1 INTEGER"}if(t.substr(p[1],2)!="02"){throw"E is not ASN.1 INTEGER"}var w=ASN1HEX.getHexOfV_AtObj(t,p[0]);var u=ASN1HEX.getHexOfV_AtObj(t,p[1]);var q=new RSAKey();q.setPublic(w,u);return q},}}();KEYUTIL.getKey=function(f,e,h){if(typeof RSAKey!="undefined"&&f instanceof RSAKey){return f}if(typeof KJUR.crypto.ECDSA!="undefined"&&f instanceof KJUR.crypto.ECDSA){return f}if(typeof KJUR.crypto.DSA!="undefined"&&f instanceof KJUR.crypto.DSA){return f}if(f.curve!==undefined&&f.xy!==undefined&&f.d===undefined){return new KJUR.crypto.ECDSA({pub:f.xy,curve:f.curve})}if(f.curve!==undefined&&f.d!==undefined){return new KJUR.crypto.ECDSA({prv:f.d,curve:f.curve})}if(f.kty===undefined&&f.n!==undefined&&f.e!==undefined&&f.d===undefined){var w=new RSAKey();w.setPublic(f.n,f.e);return w}if(f.kty===undefined&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined&&f.p!==undefined&&f.q!==undefined&&f.dp!==undefined&&f.dq!==undefined&&f.co!==undefined&&f.qi===undefined){var w=new RSAKey();w.setPrivateEx(f.n,f.e,f.d,f.p,f.q,f.dp,f.dq,f.co);return w}if(f.kty===undefined&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined&&f.p===undefined){var w=new RSAKey();w.setPrivate(f.n,f.e,f.d);return w}if(f.p!==undefined&&f.q!==undefined&&f.g!==undefined&&f.y!==undefined&&f.x===undefined){var w=new KJUR.crypto.DSA();w.setPublic(f.p,f.q,f.g,f.y);return w}if(f.p!==undefined&&f.q!==undefined&&f.g!==undefined&&f.y!==undefined&&f.x!==undefined){var w=new KJUR.crypto.DSA();w.setPrivate(f.p,f.q,f.g,f.y,f.x);return w}if(f.kty==="RSA"&&f.n!==undefined&&f.e!==undefined&&f.d===undefined){var w=new RSAKey();w.setPublic(b64utohex(f.n),b64utohex(f.e));return w}if(f.kty==="RSA"&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined&&f.p!==undefined&&f.q!==undefined&&f.dp!==undefined&&f.dq!==undefined&&f.qi!==undefined){var w=new RSAKey();w.setPrivateEx(b64utohex(f.n),b64utohex(f.e),b64utohex(f.d),b64utohex(f.p),b64utohex(f.q),b64utohex(f.dp),b64utohex(f.dq),b64utohex(f.qi));return w}if(f.kty==="RSA"&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined){var w=new RSAKey();w.setPrivate(b64utohex(f.n),b64utohex(f.e),b64utohex(f.d));return w}if(f.kty==="EC"&&f.crv!==undefined&&f.x!==undefined&&f.y!==undefined&&f.d===undefined){var d=new KJUR.crypto.ECDSA({curve:f.crv});var l=d.ecparams.keylen/4;var r=("0000000000"+b64utohex(f.x)).slice(-l);var n=("0000000000"+b64utohex(f.y)).slice(-l);var m="04"+r+n;d.setPublicKeyHex(m);return d}if(f.kty==="EC"&&f.crv!==undefined&&f.x!==undefined&&f.y!==undefined&&f.d!==undefined){var d=new KJUR.crypto.ECDSA({curve:f.crv});var l=d.ecparams.keylen/4;var r=("0000000000"+b64utohex(f.x)).slice(-l);var n=("0000000000"+b64utohex(f.y)).slice(-l);var m="04"+r+n;var a=("0000000000"+b64utohex(f.d)).slice(-l);d.setPublicKeyHex(m);d.setPrivateKeyHex(a);return d}if(f.indexOf("-END CERTIFICATE-",0)!=-1||f.indexOf("-END X509 CERTIFICATE-",0)!=-1||f.indexOf("-END TRUSTED CERTIFICATE-",0)!=-1){return X509.getPublicKeyFromCertPEM(f)}if(h==="pkcs8pub"){return KEYUTIL.getKeyFromPublicPKCS8Hex(f)}if(f.indexOf("-END PUBLIC KEY-")!=-1){return KEYUTIL.getKeyFromPublicPKCS8PEM(f)}if(h==="pkcs5prv"){var w=new RSAKey();w.readPrivateKeyFromASN1HexString(f);return w}if(h==="pkcs5prv"){var w=new RSAKey();w.readPrivateKeyFromASN1HexString(f);return w}if(f.indexOf("-END RSA PRIVATE KEY-")!=-1&&f.indexOf("4,ENCRYPTED")==-1){var i=KEYUTIL.getHexFromPEM(f,"RSA PRIVATE KEY");return KEYUTIL.getKey(i,null,"pkcs5prv")}if(f.indexOf("-END DSA PRIVATE KEY-")!=-1&&f.indexOf("4,ENCRYPTED")==-1){var u=this.getHexFromPEM(f,"DSA PRIVATE KEY");var t=ASN1HEX.getVbyList(u,0,[1],"02");var s=ASN1HEX.getVbyList(u,0,[2],"02");var v=ASN1HEX.getVbyList(u,0,[3],"02");var j=ASN1HEX.getVbyList(u,0,[4],"02");var k=ASN1HEX.getVbyList(u,0,[5],"02");var w=new KJUR.crypto.DSA();w.setPrivate(new BigInteger(t,16),new BigInteger(s,16),new BigInteger(v,16),new BigInteger(j,16),new BigInteger(k,16));return w}if(f.indexOf("-END PRIVATE KEY-")!=-1){return KEYUTIL.getKeyFromPlainPrivatePKCS8PEM(f)}if(f.indexOf("-END RSA PRIVATE KEY-")!=-1&&f.indexOf("4,ENCRYPTED")!=-1){return KEYUTIL.getRSAKeyFromEncryptedPKCS5PEM(f,e)}if(f.indexOf("-END EC PRIVATE KEY-")!=-1&&f.indexOf("4,ENCRYPTED")!=-1){var u=KEYUTIL.getDecryptedKeyHex(f,e);var w=ASN1HEX.getVbyList(u,0,[1],"04");var c=ASN1HEX.getVbyList(u,0,[2,0],"06");var o=ASN1HEX.getVbyList(u,0,[3,0],"03").substr(2);var b="";if(KJUR.crypto.OID.oidhex2name[c]!==undefined){b=KJUR.crypto.OID.oidhex2name[c]}else{throw"undefined OID(hex) in KJUR.crypto.OID: "+c}var d=new KJUR.crypto.ECDSA({name:b});d.setPublicKeyHex(o);d.setPrivateKeyHex(w);d.isPublic=false;return d}if(f.indexOf("-END DSA PRIVATE KEY-")!=-1&&f.indexOf("4,ENCRYPTED")!=-1){var u=KEYUTIL.getDecryptedKeyHex(f,e);var t=ASN1HEX.getVbyList(u,0,[1],"02");var s=ASN1HEX.getVbyList(u,0,[2],"02");var v=ASN1HEX.getVbyList(u,0,[3],"02");var j=ASN1HEX.getVbyList(u,0,[4],"02");var k=ASN1HEX.getVbyList(u,0,[5],"02");var w=new KJUR.crypto.DSA();w.setPrivate(new BigInteger(t,16),new BigInteger(s,16),new BigInteger(v,16),new BigInteger(j,16),new BigInteger(k,16));return w}if(f.indexOf("-END ENCRYPTED PRIVATE KEY-")!=-1){return KEYUTIL.getKeyFromEncryptedPKCS8PEM(f,e)}throw"not supported argument"};KEYUTIL.generateKeypair=function(a,c){if(a=="RSA"){var b=c;var h=new RSAKey();h.generate(b,"10001");h.isPrivate=true;h.isPublic=true;var f=new RSAKey();var e=h.n.toString(16);var i=h.e.toString(16);f.setPublic(e,i);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{if(a=="EC"){var d=c;var g=new KJUR.crypto.ECDSA({curve:d});var j=g.generateKeyPairHex();var h=new KJUR.crypto.ECDSA({curve:d});h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate=true;h.isPublic=false;var f=new KJUR.crypto.ECDSA({curve:d});f.setPublicKeyHex(j.ecpubhex);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{throw"unknown algorithm: "+a}}};KEYUTIL.getPEM=function(a,r,o,g,j){var v=KJUR.asn1;var u=KJUR.crypto;function p(s){var w=KJUR.asn1.ASN1Util.newObject({seq:[{"int":0},{"int":{bigint:s.n}},{"int":s.e},{"int":{bigint:s.d}},{"int":{bigint:s.p}},{"int":{bigint:s.q}},{"int":{bigint:s.dmp1}},{"int":{bigint:s.dmq1}},{"int":{bigint:s.coeff}}]});return w}function q(w){var s=KJUR.asn1.ASN1Util.newObject({seq:[{"int":1},{octstr:{hex:w.prvKeyHex}},{tag:["a0",true,{oid:{name:w.curveName}}]},{tag:["a1",true,{bitstr:{hex:"00"+w.pubKeyHex}}]}]});return s}function n(s){var w=KJUR.asn1.ASN1Util.newObject({seq:[{"int":0},{"int":{bigint:s.p}},{"int":{bigint:s.q}},{"int":{bigint:s.g}},{"int":{bigint:s.y}},{"int":{bigint:s.x}}]});return w}if(((typeof RSAKey!="undefined"&&a instanceof RSAKey)||(typeof u.DSA!="undefined"&&a instanceof u.DSA)||(typeof u.ECDSA!="undefined"&&a instanceof u.ECDSA))&&a.isPublic==true&&(r===undefined||r=="PKCS8PUB")){var t=new KJUR.asn1.x509.SubjectPublicKeyInfo(a);var m=t.getEncodedHex();return v.ASN1Util.getPEMStringFromHex(m,"PUBLIC KEY")}if(r=="PKCS1PRV"&&typeof RSAKey!="undefined"&&a instanceof RSAKey&&(o===undefined||o==null)&&a.isPrivate==true){var t=p(a);var m=t.getEncodedHex();return v.ASN1Util.getPEMStringFromHex(m,"RSA PRIVATE KEY")}if(r=="PKCS1PRV"&&typeof RSAKey!="undefined"&&a instanceof KJUR.crypto.ECDSA&&(o===undefined||o==null)&&a.isPrivate==true){var f=new KJUR.asn1.DERObjectIdentifier({name:a.curveName});var l=f.getEncodedHex();var e=q(a);var k=e.getEncodedHex();var i="";i+=v.ASN1Util.getPEMStringFromHex(l,"EC PARAMETERS");i+=v.ASN1Util.getPEMStringFromHex(k,"EC PRIVATE KEY");return i}if(r=="PKCS1PRV"&&typeof KJUR.crypto.DSA!="undefined"&&a instanceof KJUR.crypto.DSA&&(o===undefined||o==null)&&a.isPrivate==true){var t=n(a);var m=t.getEncodedHex();return v.ASN1Util.getPEMStringFromHex(m,"DSA PRIVATE KEY")}if(r=="PKCS5PRV"&&typeof RSAKey!="undefined"&&a instanceof RSAKey&&(o!==undefined&&o!=null)&&a.isPrivate==true){var t=p(a);var m=t.getEncodedHex();if(g===undefined){g="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",m,o,g)}if(r=="PKCS5PRV"&&typeof KJUR.crypto.ECDSA!="undefined"&&a instanceof KJUR.crypto.ECDSA&&(o!==undefined&&o!=null)&&a.isPrivate==true){var t=q(a);var m=t.getEncodedHex();if(g===undefined){g="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC",m,o,g)}if(r=="PKCS5PRV"&&typeof KJUR.crypto.DSA!="undefined"&&a instanceof KJUR.crypto.DSA&&(o!==undefined&&o!=null)&&a.isPrivate==true){var t=n(a);var m=t.getEncodedHex();if(g===undefined){g="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA",m,o,g)}var h=function(w,s){var y=b(w,s);var x=new KJUR.asn1.ASN1Util.newObject({seq:[{seq:[{oid:{name:"pkcs5PBES2"}},{seq:[{seq:[{oid:{name:"pkcs5PBKDF2"}},{seq:[{octstr:{hex:y.pbkdf2Salt}},{"int":y.pbkdf2Iter}]}]},{seq:[{oid:{name:"des-EDE3-CBC"}},{octstr:{hex:y.encryptionSchemeIV}}]}]}]},{octstr:{hex:y.ciphertext}}]});return x.getEncodedHex()};var b=function(D,E){var x=100;var C=CryptoJS.lib.WordArray.random(8);var B="DES-EDE3-CBC";var s=CryptoJS.lib.WordArray.random(8);var y=CryptoJS.PBKDF2(E,C,{keySize:192/32,iterations:x});var z=CryptoJS.enc.Hex.parse(D);var A=CryptoJS.TripleDES.encrypt(z,y,{iv:s})+"";var w={};w.ciphertext=A;w.pbkdf2Salt=CryptoJS.enc.Hex.stringify(C);w.pbkdf2Iter=x;w.encryptionSchemeAlg=B;w.encryptionSchemeIV=CryptoJS.enc.Hex.stringify(s);return w};if(r=="PKCS8PRV"&&typeof RSAKey!="undefined"&&a instanceof RSAKey&&a.isPrivate==true){var d=p(a);var c=d.getEncodedHex();var t=KJUR.asn1.ASN1Util.newObject({seq:[{"int":0},{seq:[{oid:{name:"rsaEncryption"}},{"null":true}]},{octstr:{hex:c}}]});var m=t.getEncodedHex();if(o===undefined||o==null){return v.ASN1Util.getPEMStringFromHex(m,"PRIVATE KEY")}else{var k=h(m,o);return v.ASN1Util.getPEMStringFromHex(k,"ENCRYPTED PRIVATE KEY")}}if(r=="PKCS8PRV"&&typeof KJUR.crypto.ECDSA!="undefined"&&a instanceof KJUR.crypto.ECDSA&&a.isPrivate==true){var d=new KJUR.asn1.ASN1Util.newObject({seq:[{"int":1},{octstr:{hex:a.prvKeyHex}},{tag:["a1",true,{bitstr:{hex:"00"+a.pubKeyHex}}]}]});var c=d.getEncodedHex();var t=KJUR.asn1.ASN1Util.newObject({seq:[{"int":0},{seq:[{oid:{name:"ecPublicKey"}},{oid:{name:a.curveName}}]},{octstr:{hex:c}}]});var m=t.getEncodedHex();if(o===undefined||o==null){return v.ASN1Util.getPEMStringFromHex(m,"PRIVATE KEY")}else{var k=h(m,o);return v.ASN1Util.getPEMStringFromHex(k,"ENCRYPTED PRIVATE KEY")}}if(r=="PKCS8PRV"&&typeof KJUR.crypto.DSA!="undefined"&&a instanceof KJUR.crypto.DSA&&a.isPrivate==true){var d=new KJUR.asn1.DERInteger({bigint:a.x});var c=d.getEncodedHex();var t=KJUR.asn1.ASN1Util.newObject({seq:[{"int":0},{seq:[{oid:{name:"dsa"}},{seq:[{"int":{bigint:a.p}},{"int":{bigint:a.q}},{"int":{bigint:a.g}}]}]},{octstr:{hex:c}}]});var m=t.getEncodedHex();if(o===undefined||o==null){return v.ASN1Util.getPEMStringFromHex(m,"PRIVATE KEY")}else{var k=h(m,o);return v.ASN1Util.getPEMStringFromHex(k,"ENCRYPTED PRIVATE KEY")}}throw"unsupported object nor format"};KEYUTIL.getKeyFromCSRPEM=function(b){var a=KEYUTIL.getHexFromPEM(b,"CERTIFICATE REQUEST");var c=KEYUTIL.getKeyFromCSRHex(a);return c};KEYUTIL.getKeyFromCSRHex=function(a){var c=KEYUTIL.parseCSRHex(a);var b=KEYUTIL.getKey(c.p8pubkeyhex,null,"pkcs8pub");return b};KEYUTIL.parseCSRHex=function(c){var b={};var e=c;if(e.substr(0,2)!="30"){throw"malformed CSR(code:001)"}var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,0);if(d.length<1){throw"malformed CSR(code:002)"}if(e.substr(d[0],2)!="30"){throw"malformed CSR(code:003)"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(e,d[0]);if(a.length<3){throw"malformed CSR(code:004)"}b.p8pubkeyhex=ASN1HEX.getHexOfTLV_AtObj(e,a[2]);return b};KEYUTIL.getJWKFromKey=function(d){var b={};if(d instanceof RSAKey&&d.isPrivate){b.kty="RSA";b.n=hextob64u(d.n.toString(16));b.e=hextob64u(d.e.toString(16));b.d=hextob64u(d.d.toString(16));b.p=hextob64u(d.p.toString(16));b.q=hextob64u(d.q.toString(16));b.dp=hextob64u(d.dmp1.toString(16));b.dq=hextob64u(d.dmq1.toString(16));b.qi=hextob64u(d.coeff.toString(16));return b}else{if(d instanceof RSAKey&&d.isPublic){b.kty="RSA";b.n=hextob64u(d.n.toString(16));b.e=hextob64u(d.e.toString(16));return b}else{if(d instanceof KJUR.crypto.ECDSA&&d.isPrivate){var a=d.getShortNISTPCurveName();if(a!=="P-256"&&a!=="P-384"){throw"unsupported curve name for JWT: "+a}var c=d.getPublicKeyXYHex();b.kty="EC";b.crv=a;b.x=hextob64u(c.x);b.y=hextob64u(c.y);b.d=hextob64u(d.prvKeyHex);return b}else{if(d instanceof KJUR.crypto.ECDSA&&d.isPublic){var a=d.getShortNISTPCurveName();if(a!=="P-256"&&a!=="P-384"){throw"unsupported curve name for JWT: "+a}var c=d.getPublicKeyXYHex();b.kty="EC";b.crv=a;b.x=hextob64u(c.x);b.y=hextob64u(c.y);return b}}}}throw"not supported key object"};
	/*! rsapem-1.1.js (c) 2012 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	function _rsapem_pemToBase64(b){var a=b;a=a.replace("-----BEGIN RSA PRIVATE KEY-----","");a=a.replace("-----END RSA PRIVATE KEY-----","");a=a.replace(/[ \n]+/g,"");return a}function _rsapem_getPosArrayOfChildrenFromHex(d){var j=new Array();var k=ASN1HEX.getStartPosOfV_AtObj(d,0);var f=ASN1HEX.getPosOfNextSibling_AtObj(d,k);var h=ASN1HEX.getPosOfNextSibling_AtObj(d,f);var b=ASN1HEX.getPosOfNextSibling_AtObj(d,h);var l=ASN1HEX.getPosOfNextSibling_AtObj(d,b);var e=ASN1HEX.getPosOfNextSibling_AtObj(d,l);var g=ASN1HEX.getPosOfNextSibling_AtObj(d,e);var c=ASN1HEX.getPosOfNextSibling_AtObj(d,g);var i=ASN1HEX.getPosOfNextSibling_AtObj(d,c);j.push(k,f,h,b,l,e,g,c,i);return j}function _rsapem_getHexValueArrayOfChildrenFromHex(i){var o=_rsapem_getPosArrayOfChildrenFromHex(i);var r=ASN1HEX.getHexOfV_AtObj(i,o[0]);var f=ASN1HEX.getHexOfV_AtObj(i,o[1]);var j=ASN1HEX.getHexOfV_AtObj(i,o[2]);var k=ASN1HEX.getHexOfV_AtObj(i,o[3]);var c=ASN1HEX.getHexOfV_AtObj(i,o[4]);var b=ASN1HEX.getHexOfV_AtObj(i,o[5]);var h=ASN1HEX.getHexOfV_AtObj(i,o[6]);var g=ASN1HEX.getHexOfV_AtObj(i,o[7]);var l=ASN1HEX.getHexOfV_AtObj(i,o[8]);var m=new Array();m.push(r,f,j,k,c,b,h,g,l);return m}function _rsapem_readPrivateKeyFromASN1HexString(c){var b=_rsapem_getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])}function _rsapem_readPrivateKeyFromPEMString(e){var c=_rsapem_pemToBase64(e);var d=b64tohex(c);var b=_rsapem_getHexValueArrayOfChildrenFromHex(d);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])}RSAKey.prototype.readPrivateKeyFromPEMString=_rsapem_readPrivateKeyFromPEMString;RSAKey.prototype.readPrivateKeyFromASN1HexString=_rsapem_readPrivateKeyFromASN1HexString;
	/*! rsasign-1.2.7.js (c) 2012 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	var _RE_HEXDECONLY=new RegExp("");_RE_HEXDECONLY.compile("[^0-9a-f]","gi");function _rsasign_getHexPaddedDigestInfoForString(d,e,a){var b=function(f){return KJUR.crypto.Util.hashString(f,a)};var c=b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c,a,e)}function _zeroPaddingOfSignature(e,d){var c="";var a=d/4-e.length;for(var b=0;b<a;b++){c=c+"0"}return c+e}function _rsasign_signString(d,a){var b=function(e){return KJUR.crypto.Util.hashString(e,a)};var c=b(d);return this.signWithMessageHash(c,a)}function _rsasign_signWithMessageHash(e,c){var f=KJUR.crypto.Util.getPaddedDigestInfoHex(e,c,this.n.bitLength());var b=parseBigInt(f,16);var d=this.doPrivate(b);var a=d.toString(16);return _zeroPaddingOfSignature(a,this.n.bitLength())}function _rsasign_signStringWithSHA1(a){return _rsasign_signString.call(this,a,"sha1")}function _rsasign_signStringWithSHA256(a){return _rsasign_signString.call(this,a,"sha256")}function pss_mgf1_str(c,a,e){var b="",d=0;while(b.length<a){b+=hextorstr(e(rstrtohex(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]))));d+=1}return b}function _rsasign_signStringPSS(e,a,d){var c=function(f){return KJUR.crypto.Util.hashHex(f,a)};var b=c(rstrtohex(e));if(d===undefined){d=-1}return this.signWithMessageHashPSS(b,a,d)}function _rsasign_signWithMessageHashPSS(l,a,k){var b=hextorstr(l);var g=b.length;var m=this.n.bitLength()-1;var c=Math.ceil(m/8);var d;var o=function(i){return KJUR.crypto.Util.hashHex(i,a)};if(k===-1||k===undefined){k=g}else{if(k===-2){k=c-g-2}else{if(k<-2){throw"invalid salt length"}}}if(c<(g+k+2)){throw"data too long"}var f="";if(k>0){f=new Array(k);new SecureRandom().nextBytes(f);f=String.fromCharCode.apply(String,f)}var n=hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00"+b+f)));var j=[];for(d=0;d<c-k-g-2;d+=1){j[d]=0}var e=String.fromCharCode.apply(String,j)+"\x01"+f;var h=pss_mgf1_str(n,e.length,o);var q=[];for(d=0;d<e.length;d+=1){q[d]=e.charCodeAt(d)^h.charCodeAt(d)}var p=(65280>>(8*c-m))&255;q[0]&=~p;for(d=0;d<g;d++){q.push(n.charCodeAt(d))}q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16),this.n.bitLength())}function _rsasign_getDecryptSignatureBI(a,d,c){var b=new RSAKey();b.setPublic(d,c);var e=b.doPublic(a);return e}function _rsasign_getHexDigestInfoFromSig(a,c,b){var e=_rsasign_getDecryptSignatureBI(a,c,b);var d=e.toString(16).replace(/^1f+00/,"");return d}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f){for(var e in KJUR.crypto.Util.DIGESTINFOHEAD){var d=KJUR.crypto.Util.DIGESTINFOHEAD[e];var b=d.length;if(f.substring(0,b)==d){var c=[e,f.substring(b)];return c}}return[]}function _rsasign_verifySignatureWithArgs(f,b,g,j){var e=_rsasign_getHexDigestInfoFromSig(b,g,j);var h=_rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if(h.length==0){return false}var d=h[0];var i=h[1];var a=function(k){return KJUR.crypto.Util.hashString(k,d)};var c=a(f);return(i==c)}function _rsasign_verifyHexSignatureForMessage(c,b){var d=parseBigInt(c,16);var a=_rsasign_verifySignatureWithArgs(b,d,this.n.toString(16),this.e.toString(16));return a}function _rsasign_verifyString(f,j){j=j.replace(_RE_HEXDECONLY,"");j=j.replace(/[ \n]+/g,"");var b=parseBigInt(j,16);if(b.bitLength()>this.n.bitLength()){return 0}var i=this.doPublic(b);var e=i.toString(16).replace(/^1f+00/,"");var g=_rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if(g.length==0){return false}var d=g[0];var h=g[1];var a=function(k){return KJUR.crypto.Util.hashString(k,d)};var c=a(f);return(h==c)}function _rsasign_verifyWithMessageHash(e,a){a=a.replace(_RE_HEXDECONLY,"");a=a.replace(/[ \n]+/g,"");var b=parseBigInt(a,16);if(b.bitLength()>this.n.bitLength()){return 0}var h=this.doPublic(b);var g=h.toString(16).replace(/^1f+00/,"");var c=_rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if(c.length==0){return false}var d=c[0];var f=c[1];return(f==e)}function _rsasign_verifyStringPSS(c,b,a,f){var e=function(g){return KJUR.crypto.Util.hashHex(g,a)};var d=e(rstrtohex(c));if(f===undefined){f=-1}return this.verifyWithMessageHashPSS(d,b,a,f)}function _rsasign_verifyWithMessageHashPSS(f,s,l,c){var k=new BigInteger(s,16);if(k.bitLength()>this.n.bitLength()){return false}var r=function(i){return KJUR.crypto.Util.hashHex(i,l)};var j=hextorstr(f);var h=j.length;var g=this.n.bitLength()-1;var m=Math.ceil(g/8);var q;if(c===-1||c===undefined){c=h}else{if(c===-2){c=m-h-2}else{if(c<-2){throw"invalid salt length"}}}if(m<(h+c+2)){throw"data too long"}var a=this.doPublic(k).toByteArray();for(q=0;q<a.length;q+=1){a[q]&=255}while(a.length<m){a.unshift(0)}if(a[m-1]!==188){throw"encoded message does not end in 0xbc"}a=String.fromCharCode.apply(String,a);var d=a.substr(0,m-h-1);var e=a.substr(d.length,h);var p=(65280>>(8*m-g))&255;if((d.charCodeAt(0)&p)!==0){throw"bits beyond keysize not zero"}var n=pss_mgf1_str(e,d.length,r);var o=[];for(q=0;q<d.length;q+=1){o[q]=d.charCodeAt(q)^n.charCodeAt(q)}o[0]&=~p;var b=m-h-c-2;for(q=0;q<b;q+=1){if(o[q]!==0){throw"leftmost octets not zero"}}if(o[b]!==1){throw"0x01 marker not found"}return e===hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00"+j+String.fromCharCode.apply(String,o.slice(-c)))))}RSAKey.prototype.signWithMessageHash=_rsasign_signWithMessageHash;RSAKey.prototype.signString=_rsasign_signString;RSAKey.prototype.signStringWithSHA1=_rsasign_signStringWithSHA1;RSAKey.prototype.signStringWithSHA256=_rsasign_signStringWithSHA256;RSAKey.prototype.sign=_rsasign_signString;RSAKey.prototype.signWithSHA1=_rsasign_signStringWithSHA1;RSAKey.prototype.signWithSHA256=_rsasign_signStringWithSHA256;RSAKey.prototype.signWithMessageHashPSS=_rsasign_signWithMessageHashPSS;RSAKey.prototype.signStringPSS=_rsasign_signStringPSS;RSAKey.prototype.signPSS=_rsasign_signStringPSS;RSAKey.SALT_LEN_HLEN=-1;RSAKey.SALT_LEN_MAX=-2;RSAKey.prototype.verifyWithMessageHash=_rsasign_verifyWithMessageHash;RSAKey.prototype.verifyString=_rsasign_verifyString;RSAKey.prototype.verifyHexSignatureForMessage=_rsasign_verifyHexSignatureForMessage;RSAKey.prototype.verify=_rsasign_verifyString;RSAKey.prototype.verifyHexSignatureForByteArrayMessage=_rsasign_verifyHexSignatureForMessage;RSAKey.prototype.verifyWithMessageHashPSS=_rsasign_verifyWithMessageHashPSS;RSAKey.prototype.verifyStringPSS=_rsasign_verifyStringPSS;RSAKey.prototype.verifyPSS=_rsasign_verifyStringPSS;RSAKey.SALT_LEN_RECOVER=-2;
	/*! x509-1.1.9.js (c) 2012-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	function X509(){this.subjectPublicKeyRSA=null;this.subjectPublicKeyRSA_hN=null;this.subjectPublicKeyRSA_hE=null;this.hex=null;this.getSerialNumberHex=function(){return ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,1])};this.getSignatureAlgorithmField=function(){var b=ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,2,0]);var a=KJUR.asn1.ASN1Util.oidHexToInt(b);var c=KJUR.asn1.x509.OID.oid2name(a);return c};this.getIssuerHex=function(){return ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,3])};this.getIssuerString=function(){return X509.hex2dn(ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,3]))};this.getSubjectHex=function(){return ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,5])};this.getSubjectString=function(){return X509.hex2dn(ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,5]))};this.getNotBefore=function(){var a=ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,4,0]);a=a.replace(/(..)/g,"%$1");a=decodeURIComponent(a);return a};this.getNotAfter=function(){var a=ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,4,1]);a=a.replace(/(..)/g,"%$1");a=decodeURIComponent(a);return a};this.readCertPEM=function(c){var e=X509.pemToHex(c);var b=X509.getPublicKeyHexArrayFromCertHex(e);var d=new RSAKey();d.setPublic(b[0],b[1]);this.subjectPublicKeyRSA=d;this.subjectPublicKeyRSA_hN=b[0];this.subjectPublicKeyRSA_hE=b[1];this.hex=e};this.readCertPEMWithoutRSAInit=function(c){var d=X509.pemToHex(c);var b=X509.getPublicKeyHexArrayFromCertHex(d);this.subjectPublicKeyRSA.setPublic(b[0],b[1]);this.subjectPublicKeyRSA_hN=b[0];this.subjectPublicKeyRSA_hE=b[1];this.hex=d};this.getInfo=function(){var p="Basic Fields\n";p+="  serial number: "+this.getSerialNumberHex()+"\n";p+="  signature algorithm: "+this.getSignatureAlgorithmField()+"\n";p+="  issuer: "+this.getIssuerString()+"\n";p+="  notBefore: "+this.getNotBefore()+"\n";p+="  notAfter: "+this.getNotAfter()+"\n";p+="  subject: "+this.getSubjectString()+"\n";p+="  subject public key info: \n";var j=X509.getSubjectPublicKeyInfoPosFromCertHex(this.hex);var d=ASN1HEX.getHexOfTLV_AtObj(this.hex,j);var n=KEYUTIL.getKey(d,null,"pkcs8pub");if(n instanceof RSAKey){p+="    key algorithm: RSA\n";p+="    n="+n.n.toString(16).substr(0,16)+"...\n";p+="    e="+n.e.toString(16)+"\n"}p+="X509v3 Extensions:\n";var m=X509.getV3ExtInfoListOfCertHex(this.hex);for(var e=0;e<m.length;e++){var b=m[e];var o=KJUR.asn1.x509.OID.oid2name(b.oid);if(o===""){o=b.oid}var k="";if(b.critical===true){k="CRITICAL"}p+="  "+o+" "+k+":\n";if(o==="basicConstraints"){var g=X509.getExtBasicConstraints(this.hex);if(g.cA===undefined){p+="    {}\n"}else{p+="    cA=true";if(g.pathLen!==undefined){p+=", pathLen="+g.pathLen}p+="\n"}}else{if(o==="keyUsage"){p+="    "+X509.getExtKeyUsageString(this.hex)+"\n"}else{if(o==="subjectKeyIdentifier"){p+="    "+X509.getExtSubjectKeyIdentifier(this.hex)+"\n"}else{if(o==="authorityKeyIdentifier"){var a=X509.getExtAuthorityKeyIdentifier(this.hex);if(a.kid!==undefined){p+="    kid="+a.kid+"\n"}}else{if(o==="extKeyUsage"){var h=X509.getExtExtKeyUsageName(this.hex);p+="    "+h.join(", ")+"\n"}else{if(o==="subjectAltName"){var f=X509.getExtSubjectAltName(this.hex);p+="    "+f.join(", ")+"\n"}else{if(o==="cRLDistributionPoints"){var l=X509.getExtCRLDistributionPointsURI(this.hex);p+="    "+l+"\n"}else{if(o==="authorityInfoAccess"){var c=X509.getExtAIAInfo(this.hex);if(c.ocsp!==undefined){p+="    ocsp: "+c.ocsp.join(",")+"\n"}if(c.caissuer!==undefined){p+="    caissuer: "+c.caissuer.join(",")+"\n"}}}}}}}}}}p+="signature algorithm: "+X509.getSignatureAlgorithmName(this.hex)+"\n";p+="signature: "+X509.getSignatureValueHex(this.hex).substr(0,16)+"...\n";return p}}X509.pemToBase64=function(a){var b=a;b=b.replace("-----BEGIN CERTIFICATE-----","");b=b.replace("-----END CERTIFICATE-----","");b=b.replace(/[ \n]+/g,"");return b};X509.pemToHex=function(a){var c=X509.pemToBase64(a);var b=b64tohex(c);return b};X509.getSubjectPublicKeyPosFromCertHex=function(f){var e=X509.getSubjectPublicKeyInfoPosFromCertHex(f);if(e==-1){return -1}var b=ASN1HEX.getPosArrayOfChildren_AtObj(f,e);if(b.length!=2){return -1}var d=b[1];if(f.substring(d,d+2)!="03"){return -1}var c=ASN1HEX.getStartPosOfV_AtObj(f,d);if(f.substring(c,c+2)!="00"){return -1}return c+2};X509.getSubjectPublicKeyInfoPosFromCertHex=function(d){var c=ASN1HEX.getStartPosOfV_AtObj(d,0);var b=ASN1HEX.getPosArrayOfChildren_AtObj(d,c);if(b.length<1){return -1}if(d.substring(b[0],b[0]+10)=="a003020102"){if(b.length<6){return -1}return b[6]}else{if(b.length<5){return -1}return b[5]}};X509.getPublicKeyHexArrayFromCertHex=function(f){var e=X509.getSubjectPublicKeyPosFromCertHex(f);var b=ASN1HEX.getPosArrayOfChildren_AtObj(f,e);if(b.length!=2){return[]}var d=ASN1HEX.getHexOfV_AtObj(f,b[0]);var c=ASN1HEX.getHexOfV_AtObj(f,b[1]);if(d!=null&&c!=null){return[d,c]}else{return[]}};X509.getHexTbsCertificateFromCert=function(b){var a=ASN1HEX.getStartPosOfV_AtObj(b,0);return a};X509.getPublicKeyHexArrayFromCertPEM=function(c){var d=X509.pemToHex(c);var b=X509.getPublicKeyHexArrayFromCertHex(d);return b};X509.hex2dn=function(e){var f="";var c=ASN1HEX.getPosArrayOfChildren_AtObj(e,0);for(var d=0;d<c.length;d++){var b=ASN1HEX.getHexOfTLV_AtObj(e,c[d]);f=f+"/"+X509.hex2rdn(b)}return f};X509.hex2rdn=function(a){var f=ASN1HEX.getDecendantHexTLVByNthList(a,0,[0,0]);var e=ASN1HEX.getDecendantHexVByNthList(a,0,[0,1]);var c="";try{c=X509.DN_ATTRHEX[f]}catch(b){c=f}e=e.replace(/(..)/g,"%$1");var d=decodeURIComponent(e);return c+"="+d};X509.DN_ATTRHEX={"0603550406":"C","060355040a":"O","060355040b":"OU","0603550403":"CN","0603550405":"SN","0603550408":"ST","0603550407":"L","0603550409":"streetAddress","060355040f":"businessCategory","0603550411":"postalCode","060b2b0601040182373c020102":"jurisdictionOfIncorporationSP","060b2b0601040182373c020103":"jurisdictionOfIncorporationC",};X509.getPublicKeyFromCertPEM=function(f){var c=X509.getPublicKeyInfoPropOfCertPEM(f);if(c.algoid=="2a864886f70d010101"){var i=KEYUTIL.parsePublicRawRSAKeyHex(c.keyhex);var j=new RSAKey();j.setPublic(i.n,i.e);return j}else{if(c.algoid=="2a8648ce3d0201"){var e=KJUR.crypto.OID.oidhex2name[c.algparam];var j=new KJUR.crypto.ECDSA({curve:e,info:c.keyhex});j.setPublicKeyHex(c.keyhex);return j}else{if(c.algoid=="2a8648ce380401"){var b=ASN1HEX.getVbyList(c.algparam,0,[0],"02");var a=ASN1HEX.getVbyList(c.algparam,0,[1],"02");var d=ASN1HEX.getVbyList(c.algparam,0,[2],"02");var h=ASN1HEX.getHexOfV_AtObj(c.keyhex,0);h=h.substr(2);var j=new KJUR.crypto.DSA();j.setPublic(new BigInteger(b,16),new BigInteger(a,16),new BigInteger(d,16),new BigInteger(h,16));return j}else{throw"unsupported key"}}}};X509.getPublicKeyInfoPropOfCertPEM=function(e){var i={};i.algparam=null;var f=X509.pemToHex(e);var d=ASN1HEX.getPosArrayOfChildren_AtObj(f,0);if(d.length!=3){throw"malformed X.509 certificate PEM (code:001)"}if(f.substr(d[0],2)!="30"){throw"malformed X.509 certificate PEM (code:002)"}var c=ASN1HEX.getPosArrayOfChildren_AtObj(f,d[0]);var g=6;if(f.substr(c[0],2)!=="a0"){g=5}if(c.length<g+1){throw"malformed X.509 certificate PEM (code:003)"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(f,c[g]);if(a.length!=2){throw"malformed X.509 certificate PEM (code:004)"}var h=ASN1HEX.getPosArrayOfChildren_AtObj(f,a[0]);if(h.length!=2){throw"malformed X.509 certificate PEM (code:005)"}i.algoid=ASN1HEX.getHexOfV_AtObj(f,h[0]);if(f.substr(h[1],2)=="06"){i.algparam=ASN1HEX.getHexOfV_AtObj(f,h[1])}else{if(f.substr(h[1],2)=="30"){i.algparam=ASN1HEX.getHexOfTLV_AtObj(f,h[1])}}if(f.substr(a[1],2)!="03"){throw"malformed X.509 certificate PEM (code:006)"}var b=ASN1HEX.getHexOfV_AtObj(f,a[1]);i.keyhex=b.substr(2);return i};X509.getPublicKeyInfoPosOfCertHEX=function(c){var b=ASN1HEX.getPosArrayOfChildren_AtObj(c,0);if(b.length!=3){throw"malformed X.509 certificate PEM (code:001)"}if(c.substr(b[0],2)!="30"){throw"malformed X.509 certificate PEM (code:002)"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(c,b[0]);if(a.length<7){throw"malformed X.509 certificate PEM (code:003)"}return a[6]};X509.getV3ExtInfoListOfCertHex=function(g){var b=ASN1HEX.getPosArrayOfChildren_AtObj(g,0);if(b.length!=3){throw"malformed X.509 certificate PEM (code:001)"}if(g.substr(b[0],2)!="30"){throw"malformed X.509 certificate PEM (code:002)"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(g,b[0]);if(a.length<8){throw"malformed X.509 certificate PEM (code:003)"}if(g.substr(a[7],2)!="a3"){throw"malformed X.509 certificate PEM (code:004)"}var h=ASN1HEX.getPosArrayOfChildren_AtObj(g,a[7]);if(h.length!=1){throw"malformed X.509 certificate PEM (code:005)"}if(g.substr(h[0],2)!="30"){throw"malformed X.509 certificate PEM (code:006)"}var f=ASN1HEX.getPosArrayOfChildren_AtObj(g,h[0]);var e=f.length;var d=new Array(e);for(var c=0;c<e;c++){d[c]=X509.getV3ExtItemInfo_AtObj(g,f[c])}return d};X509.getV3ExtItemInfo_AtObj=function(f,g){var e={};e.posTLV=g;var b=ASN1HEX.getPosArrayOfChildren_AtObj(f,g);if(b.length!=2&&b.length!=3){throw"malformed X.509v3 Ext (code:001)"}if(f.substr(b[0],2)!="06"){throw"malformed X.509v3 Ext (code:002)"}var d=ASN1HEX.getHexOfV_AtObj(f,b[0]);e.oid=ASN1HEX.hextooidstr(d);e.critical=false;if(b.length==3){e.critical=true}var c=b[b.length-1];if(f.substr(c,2)!="04"){throw"malformed X.509v3 Ext (code:003)"}e.posV=ASN1HEX.getStartPosOfV_AtObj(f,c);return e};X509.getHexOfTLV_V3ExtValue=function(b,a){var c=X509.getPosOfTLV_V3ExtValue(b,a);if(c==-1){return null}return ASN1HEX.getHexOfTLV_AtObj(b,c)};X509.getHexOfV_V3ExtValue=function(b,a){var c=X509.getPosOfTLV_V3ExtValue(b,a);if(c==-1){return null}return ASN1HEX.getHexOfV_AtObj(b,c)};X509.getPosOfTLV_V3ExtValue=function(f,b){var d=b;if(!b.match(/^[0-9.]+$/)){d=KJUR.asn1.x509.OID.name2oid(b)}if(d==""){return -1}var c=X509.getV3ExtInfoListOfCertHex(f);for(var a=0;a<c.length;a++){var e=c[a];if(e.oid==d){return e.posV}}return -1};X509.getExtBasicConstraints=function(d){var a=X509.getHexOfV_V3ExtValue(d,"basicConstraints");if(a===null){return null}if(a===""){return{}}if(a==="0101ff"){return{cA:true}}if(a.substr(0,8)==="0101ff02"){var c=ASN1HEX.getHexOfV_AtObj(a,6);var b=parseInt(c,16);return{cA:true,pathLen:b}}throw"unknown error"};X509.KEYUSAGE_NAME=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"];X509.getExtKeyUsageBin=function(d){var b=X509.getHexOfV_V3ExtValue(d,"keyUsage");if(b==""){return""}if(b.length%2!=0||b.length<=2){throw"malformed key usage value"}var a=parseInt(b.substr(0,2));var c=parseInt(b.substr(2),16).toString(2);return c.substr(0,c.length-a)};X509.getExtKeyUsageString=function(e){var d=X509.getExtKeyUsageBin(e);var b=new Array();for(var c=0;c<d.length;c++){if(d.substr(c,1)=="1"){b.push(X509.KEYUSAGE_NAME[c])}}return b.join(",")};X509.getExtSubjectKeyIdentifier=function(b){var a=X509.getHexOfV_V3ExtValue(b,"subjectKeyIdentifier");return a};X509.getExtAuthorityKeyIdentifier=function(f){var b={};var e=X509.getHexOfTLV_V3ExtValue(f,"authorityKeyIdentifier");if(e===null){return null}var c=ASN1HEX.getPosArrayOfChildren_AtObj(e,0);for(var d=0;d<c.length;d++){if(e.substr(c[d],2)==="80"){b.kid=ASN1HEX.getHexOfV_AtObj(e,c[d])}}return b};X509.getExtExtKeyUsageName=function(k){var b=new Array();var f=X509.getHexOfTLV_V3ExtValue(k,"extKeyUsage");if(f===null){return null}var c=ASN1HEX.getPosArrayOfChildren_AtObj(f,0);for(var e=0;e<c.length;e++){var j=ASN1HEX.getHexOfV_AtObj(f,c[e]);var g=KJUR.asn1.ASN1Util.oidHexToInt(j);var d=KJUR.asn1.x509.OID.oid2name(g);b.push(d)}return b};X509.getExtSubjectAltName=function(g){var b=new Array();var f=X509.getHexOfTLV_V3ExtValue(g,"subjectAltName");var c=ASN1HEX.getPosArrayOfChildren_AtObj(f,0);for(var e=0;e<c.length;e++){if(f.substr(c[e],2)==="82"){var d=hextoutf8(ASN1HEX.getHexOfV_AtObj(f,c[e]));b.push(d)}}return b};X509.getExtCRLDistributionPointsURI=function(n){var p=new Array();var k=X509.getHexOfTLV_V3ExtValue(n,"cRLDistributionPoints");var o=ASN1HEX.getPosArrayOfChildren_AtObj(k,0);for(var g=0;g<o.length;g++){var l=ASN1HEX.getHexOfTLV_AtObj(k,o[g]);var b=ASN1HEX.getPosArrayOfChildren_AtObj(l,0);for(var e=0;e<b.length;e++){if(l.substr(b[e],2)==="a0"){var f=ASN1HEX.getHexOfV_AtObj(l,b[e]);if(f.substr(0,2)==="a0"){var c=ASN1HEX.getHexOfV_AtObj(f,0);if(c.substr(0,2)==="86"){var m=ASN1HEX.getHexOfV_AtObj(c,0);var d=hextoutf8(m);p.push(d)}}}}}return p};X509.getExtAIAInfo=function(g){var j={};j.ocsp=[];j.caissuer=[];var h=X509.getPosOfTLV_V3ExtValue(g,"authorityInfoAccess");if(h==-1){return null}if(g.substr(h,2)!="30"){throw"malformed AIA Extn Value"}var d=ASN1HEX.getPosArrayOfChildren_AtObj(g,h);for(var c=0;c<d.length;c++){var a=d[c];var b=ASN1HEX.getPosArrayOfChildren_AtObj(g,a);if(b.length!=2){throw"malformed AccessDescription of AIA Extn"}var e=b[0];var f=b[1];if(ASN1HEX.getHexOfV_AtObj(g,e)=="2b06010505073001"){if(g.substr(f,2)=="86"){j.ocsp.push(hextoutf8(ASN1HEX.getHexOfV_AtObj(g,f)))}}if(ASN1HEX.getHexOfV_AtObj(g,e)=="2b06010505073002"){if(g.substr(f,2)=="86"){j.caissuer.push(hextoutf8(ASN1HEX.getHexOfV_AtObj(g,f)))}}}return j};X509.getSignatureAlgorithmName=function(d){var b=ASN1HEX.getDecendantHexVByNthList(d,0,[1,0]);var a=KJUR.asn1.ASN1Util.oidHexToInt(b);var c=KJUR.asn1.x509.OID.oid2name(a);return c};X509.getSignatureValueHex=function(b){var a=ASN1HEX.getDecendantHexVByNthList(b,0,[2]);if(a.substr(0,2)!=="00"){throw"can't get signature value"}return a.substr(2)};X509.getSerialNumberHex=function(a){return ASN1HEX.getDecendantHexVByNthList(a,0,[0,1])};
	/*! jws-3.3.5 (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.jws=="undefined"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWS=function(){var a=KJUR.jws.JWS;this.parseJWS=function(e,h){if((this.parsedJWS!==undefined)&&(h||(this.parsedJWS.sigvalH!==undefined))){return}var g=e.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if(g==null){throw"JWS signature is not a form of 'Head.Payload.SigValue'."}var i=g[1];var c=g[2];var j=g[3];var l=i+"."+c;this.parsedJWS={};this.parsedJWS.headB64U=i;this.parsedJWS.payloadB64U=c;this.parsedJWS.sigvalB64U=j;this.parsedJWS.si=l;if(!h){var f=b64utohex(j);var d=parseBigInt(f,16);this.parsedJWS.sigvalH=f;this.parsedJWS.sigvalBI=d}var b=b64utoutf8(i);var k=b64utoutf8(c);this.parsedJWS.headS=b;this.parsedJWS.payloadS=k;if(!a.isSafeJSONString(b,this.parsedJWS,"headP")){throw"malformed JSON string for JWS Head: "+b}}};KJUR.jws.JWS.sign=function(a,i,c,m,l){var k=KJUR.jws.JWS;var q,e,j;if(typeof i!="string"&&typeof i!="object"){throw"spHeader must be JSON string or object: "+i}if(typeof i=="object"){e=i;q=JSON.stringify(e)}if(typeof i=="string"){q=i;if(!k.isSafeJSONString(q)){throw"JWS Head is not safe JSON string: "+q}e=k.readSafeJSONString(q)}j=c;if(typeof c=="object"){j=JSON.stringify(c)}if((a==""||a==null)&&e.alg!==undefined){a=e.alg}if((a!=""&&a!=null)&&e.alg===undefined){e.alg=a;q=JSON.stringify(e)}if(a!==e.alg){throw"alg and sHeader.alg doesn't match: "+a+"!="+e.alg}var d=null;if(k.jwsalg2sigalg[a]===undefined){throw"unsupported alg name: "+a}else{d=k.jwsalg2sigalg[a]}var b=utf8tob64u(q);var g=utf8tob64u(j);var o=b+"."+g;var n="";if(d.substr(0,4)=="Hmac"){if(m===undefined){throw"mac key shall be specified for HS* alg"}var h=new KJUR.crypto.Mac({alg:d,prov:"cryptojs",pass:m});h.updateString(o);n=h.doFinal()}else{if(d.indexOf("withECDSA")!=-1){var p=new KJUR.crypto.Signature({alg:d});p.init(m,l);p.updateString(o);hASN1Sig=p.sign();n=KJUR.crypto.ECDSA.asn1SigToConcatSig(hASN1Sig)}else{if(d!="none"){var p=new KJUR.crypto.Signature({alg:d});p.init(m,l);p.updateString(o);n=p.sign()}}}var f=hextob64u(n);return o+"."+f};KJUR.jws.JWS.verify=function(p,t,j){var m=KJUR.jws.JWS;var q=p.split(".");var d=q[0];var l=q[1];var b=d+"."+l;var r=b64utohex(q[2]);var i=m.readSafeJSONString(b64utoutf8(q[0]));var h=null;var s=null;if(i.alg===undefined){throw"algorithm not specified in header"}else{h=i.alg;s=h.substr(0,2)}if(j!=null&&Object.prototype.toString.call(j)==="[object Array]"&&j.length>0){var c=":"+j.join(":")+":";if(c.indexOf(":"+h+":")==-1){throw"algorithm '"+h+"' not accepted in the list"}}if(h!="none"&&t===null){throw"key shall be specified to verify."}if(typeof t=="string"&&t.indexOf("-----BEGIN ")!=-1){t=KEYUTIL.getKey(t)}if(s=="RS"||s=="PS"){if(!(t instanceof RSAKey)){throw"key shall be a RSAKey obj for RS* and PS* algs"}}if(s=="ES"){if(!(t instanceof KJUR.crypto.ECDSA)){throw"key shall be a ECDSA obj for ES* algs"}}if(h=="none"){}var n=null;if(m.jwsalg2sigalg[i.alg]===undefined){throw"unsupported alg name: "+h}else{n=m.jwsalg2sigalg[h]}if(n=="none"){throw"not supported"}else{if(n.substr(0,4)=="Hmac"){var k=null;if(t===undefined){throw"hexadecimal key shall be specified for HMAC"}var g=new KJUR.crypto.Mac({alg:n,pass:t});g.updateString(b);k=g.doFinal();return r==k}else{if(n.indexOf("withECDSA")!=-1){var f=null;try{f=KJUR.crypto.ECDSA.concatSigToASN1Sig(r)}catch(o){return false}var e=new KJUR.crypto.Signature({alg:n});e.init(t);e.updateString(b);return e.verify(f)}else{var e=new KJUR.crypto.Signature({alg:n});e.init(t);e.updateString(b);return e.verify(r)}}}};KJUR.jws.JWS.parse=function(g){var c=g.split(".");var b={};var f,e,d;if(c.length!=2&&c.length!=3){throw"malformed sJWS: wrong number of '.' splitted elements"}f=c[0];e=c[1];if(c.length==3){d=c[2]}b.headerObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP=JSON.stringify(b.headerObj,null,"  ");if(b.payloadObj==null){b.payloadPP=b64utoutf8(e)}else{b.payloadPP=JSON.stringify(b.payloadObj,null,"  ")}if(d!==undefined){b.sigHex=b64utohex(d)}return b};KJUR.jws.JWS.verifyJWT=function(d,j,l){var h=KJUR.jws.JWS;var i=d.split(".");var c=i[0];var g=i[1];var m=c+"."+g;var k=b64utohex(i[2]);var f=h.readSafeJSONString(b64utoutf8(c));var e=h.readSafeJSONString(b64utoutf8(g));if(f.alg===undefined){return false}if(l.alg===undefined){throw"acceptField.alg shall be specified"}if(!h.inArray(f.alg,l.alg)){return false}if(e.iss!==undefined&&typeof l.iss==="object"){if(!h.inArray(e.iss,l.iss)){return false}}if(e.sub!==undefined&&typeof l.sub==="object"){if(!h.inArray(e.sub,l.sub)){return false}}if(e.aud!==undefined&&typeof l.aud==="object"){if(typeof e.aud=="string"){if(!h.inArray(e.aud,l.aud)){return false}}else{if(typeof e.aud=="object"){if(!h.includedArray(e.aud,l.aud)){return false}}}}var b=KJUR.jws.IntDate.getNow();if(l.verifyAt!==undefined&&typeof l.verifyAt==="number"){b=l.verifyAt}if(l.gracePeriod===undefined||typeof l.gracePeriod!=="number"){l.gracePeriod=0}if(e.exp!==undefined&&typeof e.exp=="number"){if(e.exp+l.gracePeriod<b){return false}}if(e.nbf!==undefined&&typeof e.nbf=="number"){if(b<e.nbf-l.gracePeriod){return false}}if(e.iat!==undefined&&typeof e.iat=="number"){if(b<e.iat-l.gracePeriod){return false}}if(e.jti!==undefined&&l.jti!==undefined){if(e.jti!==l.jti){return false}}if(!KJUR.jws.JWS.verify(d,j,l.alg)){return false}return true};KJUR.jws.JWS.includedArray=function(b,a){var d=KJUR.jws.JWS.inArray;if(b===null){return false}if(typeof b!=="object"){return false}if(typeof b.length!=="number"){return false}for(var c=0;c<b.length;c++){if(!d(b[c],a)){return false}}return true};KJUR.jws.JWS.inArray=function(d,b){if(b===null){return false}if(typeof b!=="object"){return false}if(typeof b.length!=="number"){return false}for(var c=0;c<b.length;c++){if(b[c]==d){return true}}return false};KJUR.jws.JWS.jwsalg2sigalg={HS256:"HmacSHA256",HS384:"HmacSHA384",HS512:"HmacSHA512",RS256:"SHA256withRSA",RS384:"SHA384withRSA",RS512:"SHA512withRSA",ES256:"SHA256withECDSA",ES384:"SHA384withECDSA",PS256:"SHA256withRSAandMGF1",PS384:"SHA384withRSAandMGF1",PS512:"SHA512withRSAandMGF1",none:"none",};KJUR.jws.JWS.isSafeJSONString=function(c,b,d){var e=null;try{e=jsonParse(c);if(typeof e!="object"){return 0}if(e.constructor===Array){return 0}if(b){b[d]=e}return 1}catch(a){return 0}};KJUR.jws.JWS.readSafeJSONString=function(b){var c=null;try{c=jsonParse(b);if(typeof c!="object"){return null}if(c.constructor===Array){return null}return c}catch(a){return null}};KJUR.jws.JWS.getEncodedSignatureValueFromJWS=function(b){var a=b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if(a==null){throw"JWS signature is not a form of 'Head.Payload.SigValue'."}return a[1]};KJUR.jws.JWS.getJWKthumbprint=function(d){if(d.kty!=="RSA"&&d.kty!=="EC"&&d.kty!=="oct"){throw"unsupported algorithm for JWK Thumprint"}var a="{";if(d.kty==="RSA"){if(typeof d.n!="string"||typeof d.e!="string"){throw"wrong n and e value for RSA key"}a+='"e":"'+d.e+'",';a+='"kty":"'+d.kty+'",';a+='"n":"'+d.n+'"}'}else{if(d.kty==="EC"){if(typeof d.crv!="string"||typeof d.x!="string"||typeof d.y!="string"){throw"wrong crv, x and y value for EC key"}a+='"crv":"'+d.crv+'",';a+='"kty":"'+d.kty+'",';a+='"x":"'+d.x+'",';a+='"y":"'+d.y+'"}'}else{if(d.kty==="oct"){if(typeof d.k!="string"){throw"wrong k value for oct(symmetric) key"}a+='"kty":"'+d.kty+'",';a+='"k":"'+d.k+'"}'}}}var b=rstrtohex(a);var c=KJUR.crypto.Util.hashHex(b,"sha256");var e=hextob64u(c);return e};KJUR.jws.IntDate={};KJUR.jws.IntDate.get=function(a){if(a=="now"){return KJUR.jws.IntDate.getNow()}else{if(a=="now + 1hour"){return KJUR.jws.IntDate.getNow()+60*60}else{if(a=="now + 1day"){return KJUR.jws.IntDate.getNow()+60*60*24}else{if(a=="now + 1month"){return KJUR.jws.IntDate.getNow()+60*60*24*30}else{if(a=="now + 1year"){return KJUR.jws.IntDate.getNow()+60*60*24*365}else{if(a.match(/Z$/)){return KJUR.jws.IntDate.getZulu(a)}else{if(a.match(/^[0-9]+$/)){return parseInt(a)}}}}}}}throw"unsupported format: "+a};KJUR.jws.IntDate.getZulu=function(k){var b=k.match(/(\d+)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)Z/);if(b){var a=b[1];var i=parseInt(a);if(a.length==4){}else{if(a.length==2){if(50<=i&&i<100){i=1900+i}else{if(0<=i&&i<50){i=2000+i}else{throw"malformed year string for UTCTime"}}}else{throw"malformed year string"}}var g=parseInt(b[2])-1;var j=parseInt(b[3]);var c=parseInt(b[4]);var e=parseInt(b[5]);var f=parseInt(b[6]);var h=new Date(Date.UTC(i,g,j,c,e,f));return ~~(h/1000)}throw"unsupported format: "+k};KJUR.jws.IntDate.getNow=function(){var a=~~(new Date()/1000);return a};KJUR.jws.IntDate.intDate2UTCString=function(a){var b=new Date(a*1000);return b.toUTCString()};KJUR.jws.IntDate.intDate2Zulu=function(e){var i=new Date(e*1000);var h=("0000"+i.getUTCFullYear()).slice(-4);var g=("00"+(i.getUTCMonth()+1)).slice(-2);var b=("00"+i.getUTCDate()).slice(-2);var a=("00"+i.getUTCHours()).slice(-2);var c=("00"+i.getUTCMinutes()).slice(-2);var f=("00"+i.getUTCSeconds()).slice(-2);return h+g+b+a+c+f+"Z"};
	/*! jwsjs-2.1.0 (c) 2010-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.jws=="undefined"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWSJS=function(){var b=KJUR.jws.JWS;var a=KJUR.jws.JWS;this.aHeader=[];this.sPayload="";this.aSignature=[];this.init=function(){this.aHeader=[];this.sPayload=undefined;this.aSignature=[]};this.initWithJWS=function(d){this.init();var c=d.split(".");if(c.length!=3){throw"malformed input JWS"}this.aHeader.push(c[0]);this.sPayload=c[1];this.aSignature.push(c[2])};this.addSignature=function(c,f,k,i){if(this.sPayload===undefined||this.sPayload===null){throw"there's no JSON-JS signature to add."}var j=this.aHeader.length;if(this.aHeader.length!=this.aSignature.length){throw"aHeader.length != aSignature.length"}try{var d=KJUR.jws.JWS.sign(c,f,this.sPayload,k,i);var h=d.split(".");var l=h[0];var e=h[2];this.aHeader.push(h[0]);this.aSignature.push(h[2])}catch(g){if(this.aHeader.length>j){this.aHeader.pop()}if(this.aSignature.length>j){this.aSignature.pop()}throw"addSignature failed: "+g}};this.addSignatureByHeaderKey=function(f,c){var e=b64utoutf8(this.sPayload);var d=new KJUR.jws.JWS();var g=d.generateJWSByP1PrvKey(f,e,c);this.aHeader.push(d.parsedJWS.headB64U);this.aSignature.push(d.parsedJWS.sigvalB64U)};this.addSignatureByHeaderPayloadKey=function(f,e,c){var d=new KJUR.jws.JWS();var g=d.generateJWSByP1PrvKey(f,e,c);this.aHeader.push(d.parsedJWS.headB64U);this.sPayload=d.parsedJWS.payloadB64U;this.aSignature.push(d.parsedJWS.sigvalB64U)};this.verifyAll=function(f){if(this.aHeader.length!==f.length||this.aSignature.length!==f.length){return false}for(var e=0;e<f.length;e++){var d=f[e];if(d.length!==2){return false}var c=this.verifyNth(e,d[0],d[1]);if(c===false){return false}}return true};this.verifyNth=function(d,h,e){if(this.aHeader.length<=d||this.aSignature.length<=d){return false}var f=this.aHeader[d];var i=this.aSignature[d];var j=f+"."+this.sPayload+"."+i;var c=false;try{c=a.verify(j,h,e)}catch(g){return false}return c};this.verifyWithCerts=function(d){if(this.aHeader.length!=d.length){throw"num headers does not match with num certs"}if(this.aSignature.length!=d.length){throw"num signatures does not match with num certs"}var l=this.sPayload;var h="";for(var e=0;e<d.length;e++){var f=d[e];var g=this.aHeader[e];var n=this.aSignature[e];var c=g+"."+l+"."+n;var k=new KJUR.jws.JWS();try{var m=k.verifyJWSByPemX509Cert(c,f);if(m!=1){h+=(e+1)+"th signature unmatch. "}}catch(j){h+=(e+1)+"th signature fail("+j+"). "}}if(h==""){return 1}else{throw h}};this.readJWSJS=function(e){if(typeof e==="string"){var d=b.readSafeJSONString(e);if(d==null){throw"argument is not safe JSON object string"}this.aHeader=d.headers;this.sPayload=d.payload;this.aSignature=d.signatures}else{try{if(e.headers.length>0){this.aHeader=e.headers}else{throw"malformed header"}if(typeof e.payload==="string"){this.sPayload=e.payload}else{throw"malformed signatures"}if(e.signatures.length>0){this.signatures=e.signatures}else{throw"malformed signatures"}}catch(c){throw"malformed JWS-JS JSON object: "+c}}};this.getJSON=function(){return{headers:this.aHeader,payload:this.sPayload,signatures:this.aSignature}};this.isEmpty=function(){if(this.aHeader.length==0){return 1}return 0}};
	exports.SecureRandom = SecureRandom;
	exports.rng_seed_time = rng_seed_time;
	
	exports.BigInteger = BigInteger;
	exports.RSAKey = RSAKey;
	exports.ECDSA = KJUR.crypto.ECDSA;
	exports.DSA = KJUR.crypto.DSA;
	exports.Signature = KJUR.crypto.Signature;
	exports.MessageDigest = KJUR.crypto.MessageDigest;
	exports.Mac = KJUR.crypto.Mac;
	exports.KEYUTIL = KEYUTIL;
	exports.ASN1HEX = ASN1HEX;
	exports.X509 = X509;
	exports.CryptoJS = CryptoJS;
	
	// ext/base64.js
	exports.b64tohex = b64tohex;
	exports.b64toBA = b64toBA;
	
	// base64x.js
	exports.stoBA = stoBA;
	exports.BAtos = BAtos;
	exports.BAtohex = BAtohex;
	exports.stohex = stohex;
	exports.stob64 = stob64;
	exports.stob64u = stob64u;
	exports.b64utos = b64utos;
	exports.b64tob64u = b64tob64u;
	exports.b64utob64 = b64utob64;
	exports.hex2b64 = hex2b64;
	exports.hextob64u = hextob64u;
	exports.b64utohex = b64utohex;
	exports.b64tohex = b64tohex;
	exports.utf8tob64u = utf8tob64u;
	exports.b64utoutf8 = b64utoutf8;
	exports.utf8tob64 = utf8tob64;
	exports.b64toutf8 = b64toutf8;
	exports.utf8tohex = utf8tohex;
	exports.hextoutf8 = hextoutf8;
	exports.hextorstr = hextorstr;
	exports.rstrtohex = rstrtohex;
	exports.newline_toUnix = newline_toUnix;
	exports.newline_toDos = newline_toDos;
	exports.intarystrtohex = intarystrtohex;
	exports.strdiffidx = strdiffidx;
	
	exports.KJUR = KJUR;
	exports.crypto = KJUR.crypto;
	exports.asn1 = KJUR.asn1;
	exports.jws = KJUR.jws;
	exports.lang = KJUR.lang;
	
	


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _UrlUtility = __webpack_require__(14);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	var _SigninState = __webpack_require__(15);
	
	var _SigninState2 = _interopRequireDefault(_SigninState);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SigninRequest = function () {
	    function SigninRequest(_ref) {
	        var url = _ref.url;
	        var client_id = _ref.client_id;
	        var redirect_uri = _ref.redirect_uri;
	        var response_type = _ref.response_type;
	        var scope = _ref.scope;
	        var authority = _ref.authority;
	        var data = _ref.data;
	        var prompt = _ref.prompt;
	        var display = _ref.display;
	        var max_age = _ref.max_age;
	        var ui_locales = _ref.ui_locales;
	        var id_token_hint = _ref.id_token_hint;
	        var login_hint = _ref.login_hint;
	        var acr_values = _ref.acr_values;
	        var resource = _ref.resource;
	
	        _classCallCheck(this, SigninRequest);
	
	        if (!url) {
	            _Log2.default.error("No url passed to SigninRequest");
	            throw new Error("url");
	        }
	        if (!client_id) {
	            _Log2.default.error("No client_id passed to SigninRequest");
	            throw new Error("client_id");
	        }
	        if (!redirect_uri) {
	            _Log2.default.error("No redirect_uri passed to SigninRequest");
	            throw new Error("redirect_uri");
	        }
	        if (!response_type) {
	            _Log2.default.error("No response_type passed to SigninRequest");
	            throw new Error("response_type");
	        }
	        if (!scope) {
	            _Log2.default.error("No scope passed to SigninRequest");
	            throw new Error("scope");
	        }
	        if (!authority) {
	            _Log2.default.error("No authority passed to SigninRequest");
	            throw new Error("authority");
	        }
	
	        var oidc = SigninRequest.isOidc(response_type);
	        this.state = new _SigninState2.default({ nonce: oidc, data: data, client_id: client_id, authority: authority });
	
	        url = _UrlUtility2.default.addQueryParam(url, "client_id", client_id);
	        url = _UrlUtility2.default.addQueryParam(url, "redirect_uri", redirect_uri);
	        url = _UrlUtility2.default.addQueryParam(url, "response_type", response_type);
	        url = _UrlUtility2.default.addQueryParam(url, "scope", scope);
	
	        url = _UrlUtility2.default.addQueryParam(url, "state", this.state.id);
	        if (oidc) {
	            url = _UrlUtility2.default.addQueryParam(url, "nonce", this.state.nonce);
	        }
	
	        var optional = { prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values, resource: resource };
	        for (var key in optional) {
	            if (optional[key]) {
	                url = _UrlUtility2.default.addQueryParam(url, key, optional[key]);
	            }
	        }
	
	        this.url = url;
	    }
	
	    SigninRequest.isOidc = function isOidc(response_type) {
	        var result = response_type.split(/\s+/g).filter(function (item) {
	            return item === "id_token";
	        });
	        return !!result[0];
	    };
	
	    SigninRequest.isOAuth = function isOAuth(response_type) {
	        var result = response_type.split(/\s+/g).filter(function (item) {
	            return item === "token";
	        });
	        return !!result[0];
	    };
	
	    return SigninRequest;
	}();
	
	exports.default = SigninRequest;
	module.exports = exports['default'];

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UrlUtility = function () {
	    function UrlUtility() {
	        _classCallCheck(this, UrlUtility);
	    }
	
	    UrlUtility.addQueryParam = function addQueryParam(url, name, value) {
	        if (url.indexOf('?') < 0) {
	            url += "?";
	        }
	
	        if (url[url.length - 1] !== "?") {
	            url += "&";
	        }
	
	        url += encodeURIComponent(name);
	        url += "=";
	        url += encodeURIComponent(value);
	
	        return url;
	    };
	
	    UrlUtility.parseUrlFragment = function parseUrlFragment(value) {
	        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
	        var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global2.default;
	
	        _Log2.default.info("UrlUtility.parseUrlFragment");
	
	        if (typeof value !== 'string') {
	            value = global.location.href;
	        }
	
	        var idx = value.lastIndexOf(delimiter);
	        if (idx >= 0) {
	            value = value.substr(idx + 1);
	        }
	
	        var params = {},
	            regex = /([^&=]+)=([^&]*)/g,
	            m;
	
	        var counter = 0;
	        while (m = regex.exec(value)) {
	            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
	            if (counter++ > 50) {
	                _Log2.default.error("response exceeded expected number of parameters", value);
	                return {
	                    error: "Response exceeded expected number of parameters"
	                };
	            }
	        }
	
	        for (var prop in params) {
	            return params;
	        }
	
	        return {};
	    };
	
	    return UrlUtility;
	}();
	
	exports.default = UrlUtility;
	module.exports = exports['default'];

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _State2 = __webpack_require__(16);
	
	var _State3 = _interopRequireDefault(_State2);
	
	var _random = __webpack_require__(17);
	
	var _random2 = _interopRequireDefault(_random);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SigninState = function (_State) {
	    _inherits(SigninState, _State);
	
	    function SigninState() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var nonce = _ref.nonce;
	        var authority = _ref.authority;
	        var client_id = _ref.client_id;
	
	        _classCallCheck(this, SigninState);
	
	        var _this = _possibleConstructorReturn(this, _State.call(this, arguments[0]));
	
	        if (nonce === true) {
	            _this._nonce = (0, _random2.default)();
	        } else if (nonce) {
	            _this._nonce = nonce;
	        }
	
	        _this._authority = authority;
	        _this._client_id = client_id;
	        return _this;
	    }
	
	    SigninState.prototype.toStorageString = function toStorageString() {
	        _Log2.default.info("SigninState.toStorageString");
	        return JSON.stringify({
	            id: this.id,
	            data: this.data,
	            created: this.created,
	            nonce: this.nonce,
	            authority: this.authority,
	            client_id: this.client_id
	        });
	    };
	
	    SigninState.fromStorageString = function fromStorageString(storageString) {
	        _Log2.default.info("SigninState.fromStorageString");
	        var data = JSON.parse(storageString);
	        return new SigninState(data);
	    };
	
	    _createClass(SigninState, [{
	        key: 'nonce',
	        get: function get() {
	            return this._nonce;
	        }
	    }, {
	        key: 'authority',
	        get: function get() {
	            return this._authority;
	        }
	    }, {
	        key: 'client_id',
	        get: function get() {
	            return this._client_id;
	        }
	    }]);
	
	    return SigninState;
	}(_State3.default);
	
	exports.default = SigninState;
	module.exports = exports['default'];

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _random = __webpack_require__(17);
	
	var _random2 = _interopRequireDefault(_random);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var State = function () {
	    function State() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var id = _ref.id;
	        var data = _ref.data;
	        var created = _ref.created;
	
	        _classCallCheck(this, State);
	
	        this._id = id || (0, _random2.default)();
	        this._data = data;
	
	        if (typeof created === 'number' && created > 0) {
	            this._created = created;
	        } else {
	            this._created = parseInt(Date.now() / 1000);
	        }
	    }
	
	    State.prototype.toStorageString = function toStorageString() {
	        _Log2.default.info("State.toStorageString");
	        return JSON.stringify({
	            id: this.id,
	            data: this.data,
	            created: this.created
	        });
	    };
	
	    State.fromStorageString = function fromStorageString(storageString) {
	        _Log2.default.info("State.fromStorageString");
	        return new State(JSON.parse(storageString));
	    };
	
	    State.clearStaleState = function clearStaleState(storage, age) {
	        _Log2.default.info("State.clearStaleState");
	
	        var cutoff = Date.now() / 1000 - age;
	
	        return storage.getAllKeys().then(function (keys) {
	            _Log2.default.info("got keys", keys);
	
	            var promises = [];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                var _loop = function _loop() {
	                    var key = _step.value;
	                    p = storage.get(key).then(function (item) {
	                        var remove = false;
	
	                        if (item) {
	                            try {
	                                var state = State.fromStorageString(item);
	
	                                _Log2.default.info("got item from key: ", key, state.created);
	
	                                if (state.created <= cutoff) {
	                                    remove = true;
	                                }
	                            } catch (e) {
	                                _Log2.default.error("Error parsing state for key", key, e.message);
	                                remove = true;
	                            }
	                        } else {
	                            _Log2.default.info("no item in storage for key: ", key);
	                            remove = true;
	                        }
	
	                        if (remove) {
	                            _Log2.default.info("removed item for key: ", key);
	                            return storage.remove(key);
	                        }
	                    });
	
	
	                    promises.push(p);
	                };
	
	                for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var p;
	
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	
	            _Log2.default.info("waiting on promise count:", promises.length);
	            return Promise.all(promises);
	        });
	    };
	
	    _createClass(State, [{
	        key: 'id',
	        get: function get() {
	            return this._id;
	        }
	    }, {
	        key: 'data',
	        get: function get() {
	            return this._data;
	        }
	    }, {
	        key: 'created',
	        get: function get() {
	            return this._created;
	        }
	    }]);
	
	    return State;
	}();
	
	exports.default = State;
	module.exports = exports['default'];

/***/ },
/* 17 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = random;
	//----------------------------------------------------------------------
	// AdalJS v1.0.8
	// @preserve Copyright (c) Microsoft Open Technologies, Inc.
	// All Rights Reserved
	// Apache License 2.0
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//----------------------------------------------------------------------
	// NOTICE: the code in this file originally developed by Microsoft
	// original source: https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/master/lib/adal.js#L1029
	
	function random() {
	    var guidHolder = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx';
	    var hex = '0123456789abcdef';
	    var r = 0;
	    var guidResponse = "";
	    for (var i = 0; i < guidHolder.length; i++) {
	        if (guidHolder[i] !== '-' && guidHolder[i] !== '4') {
	            // each x and y needs to be random
	            r = Math.random() * 16 | 0;
	        }
	
	        if (guidHolder[i] === 'x') {
	            guidResponse += hex[r];
	        } else if (guidHolder[i] === 'y') {
	            // clock-seq-and-reserved first hex is filtered and remaining hex values are random
	            r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
	            r |= 0x8; // set pos 3 to 1 as 1???
	            guidResponse += hex[r];
	        } else {
	            guidResponse += guidHolder[i];
	        }
	    }
	    return guidResponse;
	}
	module.exports = exports['default'];

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _UrlUtility = __webpack_require__(14);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcScope = "openid";
	
	var SigninResponse = function () {
	    function SigninResponse(url) {
	        _classCallCheck(this, SigninResponse);
	
	        var values = _UrlUtility2.default.parseUrlFragment(url, "#");
	
	        this.error = values.error;
	        this.error_description = values.error_description;
	        this.error_uri = values.error_uri;
	
	        this.state = values.state;
	        this.id_token = values.id_token;
	        this.session_state = values.session_state;
	        this.access_token = values.access_token;
	        this.token_type = values.token_type;
	        this.scope = values.scope;
	        this.profile = undefined; // will be set from ResponseValidator
	
	        var expires_in = parseInt(values.expires_in);
	        if (typeof expires_in === 'number' && expires_in > 0) {
	            var now = parseInt(Date.now() / 1000);
	            this.expires_at = now + expires_in;
	        }
	    }
	
	    _createClass(SigninResponse, [{
	        key: "expires_in",
	        get: function get() {
	            if (this.expires_at) {
	                var now = parseInt(Date.now() / 1000);
	                return this.expires_at - now;
	            }
	            return undefined;
	        }
	    }, {
	        key: "expired",
	        get: function get() {
	            var expires_in = this.expires_in;
	            if (expires_in !== undefined) {
	                return expires_in <= 0;
	            }
	            return undefined;
	        }
	    }, {
	        key: "scopes",
	        get: function get() {
	            return (this.scope || "").split(" ");
	        }
	    }, {
	        key: "isOpenIdConnect",
	        get: function get() {
	            return this.scopes.indexOf(OidcScope) >= 0;
	        }
	    }]);
	
	    return SigninResponse;
	}();
	
	exports.default = SigninResponse;
	module.exports = exports['default'];

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _UrlUtility = __webpack_require__(14);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	var _State = __webpack_require__(16);
	
	var _State2 = _interopRequireDefault(_State);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SignoutRequest = function SignoutRequest(_ref) {
	    var url = _ref.url;
	    var id_token_hint = _ref.id_token_hint;
	    var post_logout_redirect_uri = _ref.post_logout_redirect_uri;
	    var data = _ref.data;
	
	    _classCallCheck(this, SignoutRequest);
	
	    if (!url) {
	        _Log2.default.error("No url passed to SignoutRequest");
	        throw new Error("url");
	    }
	
	    if (id_token_hint) {
	        url = _UrlUtility2.default.addQueryParam(url, "id_token_hint", id_token_hint);
	
	        if (post_logout_redirect_uri) {
	            url = _UrlUtility2.default.addQueryParam(url, "post_logout_redirect_uri", post_logout_redirect_uri);
	
	            if (data) {
	                this.state = new _State2.default({ data: data });
	
	                url = _UrlUtility2.default.addQueryParam(url, "state", this.state.id);
	            }
	        }
	    }
	
	    this.url = url;
	};
	
	exports.default = SignoutRequest;
	module.exports = exports['default'];

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	        value: true
	});
	
	var _UrlUtility = __webpack_require__(14);
	
	var _UrlUtility2 = _interopRequireDefault(_UrlUtility);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SignoutResponse = function SignoutResponse(url) {
	        _classCallCheck(this, SignoutResponse);
	
	        var values = _UrlUtility2.default.parseUrlFragment(url, "?");
	
	        this.error = values.error;
	        this.error_description = values.error_description;
	        this.error_uri = values.error_uri;
	
	        this.state = values.state;
	};
	
	exports.default = SignoutResponse;
	module.exports = exports['default'];

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var InMemoryWebStorage = function () {
	    function InMemoryWebStorage() {
	        _classCallCheck(this, InMemoryWebStorage);
	
	        this._data = {};
	    }
	
	    InMemoryWebStorage.prototype.getItem = function getItem(key) {
	        _Log2.default.info("InMemoryWebStorage.getItem", key);
	        return this._data[key];
	    };
	
	    InMemoryWebStorage.prototype.setItem = function setItem(key, value) {
	        _Log2.default.info("InMemoryWebStorage.setItem", key);
	        this._data[key] = value;
	    };
	
	    InMemoryWebStorage.prototype.removeItem = function removeItem(key) {
	        _Log2.default.info("InMemoryWebStorage.removeItem", key);
	        delete this._data[key];
	    };
	
	    InMemoryWebStorage.prototype.key = function key(index) {
	        return Object.getOwnPropertyNames(this._data)[index];
	    };
	
	    _createClass(InMemoryWebStorage, [{
	        key: "length",
	        get: function get() {
	            return Object.getOwnPropertyNames(this._data).length;
	        }
	    }]);
	
	    return InMemoryWebStorage;
	}();
	
	exports.default = InMemoryWebStorage;
	module.exports = exports['default'];

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _OidcClient2 = __webpack_require__(2);
	
	var _OidcClient3 = _interopRequireDefault(_OidcClient2);
	
	var _UserManagerSettings = __webpack_require__(23);
	
	var _UserManagerSettings2 = _interopRequireDefault(_UserManagerSettings);
	
	var _User = __webpack_require__(29);
	
	var _User2 = _interopRequireDefault(_User);
	
	var _UserManagerEvents = __webpack_require__(30);
	
	var _UserManagerEvents2 = _interopRequireDefault(_UserManagerEvents);
	
	var _SilentRenewService = __webpack_require__(34);
	
	var _SilentRenewService2 = _interopRequireDefault(_SilentRenewService);
	
	var _SessionMonitor = __webpack_require__(35);
	
	var _SessionMonitor2 = _interopRequireDefault(_SessionMonitor);
	
	var _TokenRevocationClient = __webpack_require__(37);
	
	var _TokenRevocationClient2 = _interopRequireDefault(_TokenRevocationClient);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserManager = function (_OidcClient) {
	    _inherits(UserManager, _OidcClient);
	
	    function UserManager() {
	        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var SilentRenewServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SilentRenewService2.default;
	        var SessionMonitorCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _SessionMonitor2.default;
	        var TokenRevocationClientCtor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TokenRevocationClient2.default;
	
	        _classCallCheck(this, UserManager);
	
	        if (!(settings instanceof _UserManagerSettings2.default)) {
	            settings = new _UserManagerSettings2.default(settings);
	        }
	
	        var _this = _possibleConstructorReturn(this, _OidcClient.call(this, settings));
	
	        _this._events = new _UserManagerEvents2.default(settings);
	
	        // order is important for the following properties; these services depend upon the events.
	        if (_this.settings.automaticSilentRenew) {
	            _Log2.default.info("automaticSilentRenew is configured, setting up silent renew");
	            _this._silentRenewService = new SilentRenewServiceCtor(_this);
	        }
	        if (_this.settings.monitorSession) {
	            _Log2.default.info("monitorSession is configured, setting up session monitor");
	            _this._sessionMonitor = new SessionMonitorCtor(_this);
	        }
	
	        _this._tokenRevocationClient = new TokenRevocationClientCtor(_this._settings);
	        return _this;
	    }
	
	    UserManager.prototype.getUser = function getUser() {
	        var _this2 = this;
	
	        _Log2.default.info("UserManager.getUser");
	
	        return this._loadUser().then(function (user) {
	            if (user) {
	                _Log2.default.info("user loaded");
	
	                _this2._events.load(user, false);
	
	                return user;
	            } else {
	                _Log2.default.info("user not found in storage");
	                return null;
	            }
	        });
	    };
	
	    UserManager.prototype.removeUser = function removeUser() {
	        var _this3 = this;
	
	        _Log2.default.info("UserManager.removeUser");
	
	        return this._storeUser(null).then(function () {
	            _Log2.default.info("user removed from storage");
	            _this3._events.unload();
	        });
	    };
	
	    UserManager.prototype.signinPopup = function signinPopup() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.info("UserManager.signinPopup");
	
	        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
	        if (!url) {
	            _Log2.default.error("No popup_redirect_uri or redirect_uri configured");
	            return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.display = "popup";
	
	        return this._signin(args, this._popupNavigator, {
	            startUrl: url,
	            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
	            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
	        });
	    };
	
	    UserManager.prototype.signinPopupCallback = function signinPopupCallback(url) {
	        _Log2.default.info("UserManager.signinPopupCallback");
	        return this._signinCallback(url, this._popupNavigator);
	    };
	
	    UserManager.prototype.signinSilent = function signinSilent() {
	        var _this4 = this;
	
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.info("UserManager.signinSilent");
	
	        var url = args.redirect_uri || this.settings.silent_redirect_uri;
	        if (!url) {
	            _Log2.default.error("No silent_redirect_uri configured");
	            return Promise.reject(new Error("No silent_redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.prompt = "none";
	
	        var setIdToken = void 0;
	        if (args.id_token_hint) {
	            setIdToken = Promise.resolve();
	        } else {
	            setIdToken = this.getUser().then(function (user) {
	                args.id_token_hint = user && user.id_token;
	            });
	        }
	
	        return setIdToken.then(function () {
	            return _this4._signin(args, _this4._iframeNavigator, {
	                startUrl: url,
	                silentRequestTimeout: args.silentRequestTimeout || _this4.settings.silentRequestTimeout
	            });
	        });
	    };
	
	    UserManager.prototype.signinSilentCallback = function signinSilentCallback(url) {
	        _Log2.default.info("UserManager.signinSilentCallback");
	        return this._signinCallback(url, this._iframeNavigator);
	    };
	
	    UserManager.prototype.querySessionStatus = function querySessionStatus() {
	        var _this5 = this;
	
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.info("UserManager.querySessionStatus");
	
	        var url = args.redirect_uri || this.settings.silent_redirect_uri;
	        if (!url) {
	            _Log2.default.error("No silent_redirect_uri configured");
	            return Promise.reject(new Error("No silent_redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.prompt = "none";
	        args.response_type = "id_token";
	        args.scope = "openid";
	
	        return this._signinStart(args, this._iframeNavigator, {
	            startUrl: url,
	            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
	        }).then(function (navResponse) {
	            return _this5.processSigninResponse(navResponse.url).then(function (signinResponse) {
	                _Log2.default.info("got signin response");
	
	                if (signinResponse.session_state && signinResponse.profile.sub && signinResponse.profile.sid) {
	                    return {
	                        session_state: signinResponse.session_state,
	                        sub: signinResponse.profile.sub,
	                        sid: signinResponse.profile.sid
	                    };
	                }
	            });
	        });
	    };
	
	    UserManager.prototype.revokeAccessToken = function revokeAccessToken() {
	        var _this6 = this;
	
	        _Log2.default.info("UserManager.revokeAccessToken");
	
	        return this.getUser().then(function (user) {
	            return _this6._revokeInternal(user, true).then(function (success) {
	                if (success) {
	                    _Log2.default.info("removing token properties from user and re-storing");
	
	                    user.access_token = null;
	                    user.expires_at = null;
	                    user.token_type = null;
	
	                    return _this6._storeUser(user).then(function () {
	                        _Log2.default.info("user stored");
	                        _this6._events.load(user);
	                    });
	                }
	            });
	        });
	    };
	
	    UserManager.prototype._revokeInternal = function _revokeInternal(user, required) {
	        _Log2.default.info("checking if token revocation is necessary");
	
	        var access_token = user && user.access_token;
	
	        // check for JWT vs. reference token
	        if (!access_token || access_token.indexOf('.') >= 0) {
	            _Log2.default.info("no need to revoke due to no user, token, or JWT format");
	            return Promise.resolve(false);
	        }
	
	        return this._tokenRevocationClient.revoke(access_token, required).then(function () {
	            return true;
	        });
	    };
	
	    UserManager.prototype._signin = function _signin(args, navigator) {
	        var _this7 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.info("_signin");
	        return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {
	            return _this7._signinEnd(navResponse.url);
	        });
	    };
	
	    UserManager.prototype._signinCallback = function _signinCallback(url, navigator) {
	        _Log2.default.info("_signinCallback");
	        return navigator.callback(url);
	    };
	
	    UserManager.prototype._signout = function _signout(args, navigator) {
	        var _this8 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.info("_signout");
	        return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {
	            return _this8._signoutEnd(navResponse.url);
	        });
	    };
	
	    UserManager.prototype._signoutCallback = function _signoutCallback(url, navigator) {
	        _Log2.default.info("_signoutCallback");
	        return navigator.callback(url);
	    };
	
	    UserManager.prototype.signinRedirect = function signinRedirect(args) {
	        _Log2.default.info("UserManager.signinRedirect");
	        return this._signinStart(args, this._redirectNavigator);
	    };
	
	    UserManager.prototype.signinRedirectCallback = function signinRedirectCallback(url) {
	        _Log2.default.info("UserManager.signinRedirectCallback");
	        return this._signinEnd(url || this._redirectNavigator.url);
	    };
	
	    UserManager.prototype.signoutRedirect = function signoutRedirect(args) {
	        _Log2.default.info("UserManager.signoutRedirect");
	        return this._signoutStart(args, this._redirectNavigator);
	    };
	
	    UserManager.prototype.signoutPopup = function signoutPopup() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _Log2.default.info("UserManager.signoutPopup");
	
	        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
	        if (!url) {
	            _Log2.default.error("No popup_redirect_uri or redirect_uri configured");
	            return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
	        }
	
	        return this._signout(args, this._popupNavigator, {
	            startUrl: url,
	            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
	            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
	        });
	    };
	
	    UserManager.prototype.signoutRedirectCallback = function signoutRedirectCallback(url) {
	        _Log2.default.info("UserManager.signoutRedirectCallback");
	        return this._signoutEnd(url || this._redirectNavigator.url);
	    };
	
	    UserManager.prototype._signinStart = function _signinStart(args, navigator) {
	        var _this9 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.info("_signinStart");
	
	        return navigator.prepare(navigatorParams).then(function (handle) {
	            _Log2.default.info("got navigator window handle");
	
	            return _this9.createSigninRequest(args).then(function (signinRequest) {
	                _Log2.default.info("got signin request");
	
	                navigatorParams.url = signinRequest.url;
	                return handle.navigate(navigatorParams);
	            });
	        });
	    };
	
	    UserManager.prototype._signinEnd = function _signinEnd(url) {
	        var _this10 = this;
	
	        _Log2.default.info("_signinEnd");
	
	        return this.processSigninResponse(url).then(function (signinResponse) {
	            _Log2.default.info("got signin response");
	
	            var user = new _User2.default(signinResponse);
	
	            return _this10._storeUser(user).then(function () {
	                _Log2.default.info("user stored");
	
	                _this10._events.load(user);
	
	                return user;
	            });
	        });
	    };
	
	    UserManager.prototype._signoutStart = function _signoutStart() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var _this11 = this;
	
	        var navigator = arguments[1];
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _Log2.default.info("_signoutStart");
	
	        return navigator.prepare(navigatorParams).then(function (handle) {
	            _Log2.default.info("got navigator window handle");
	
	            return _this11.getUser().then(function (user) {
	                _Log2.default.info("loaded current user from storage");
	
	                return _this11._revokeInternal(user).then(function () {
	
	                    var id_token = args.id_token_hint || user && user.id_token;
	                    if (id_token) {
	                        _Log2.default.info("Setting id_token into signout request");
	                        args.id_token_hint = id_token;
	                    }
	
	                    return _this11.removeUser().then(function () {
	                        _Log2.default.info("user removed, creating signout request");
	
	                        return _this11.createSignoutRequest(args).then(function (signoutRequest) {
	                            _Log2.default.info("got signout request");
	
	                            navigatorParams.url = signoutRequest.url;
	                            return handle.navigate(navigatorParams);
	                        });
	                    });
	                });
	            });
	        });
	    };
	
	    UserManager.prototype._signoutEnd = function _signoutEnd(url) {
	        _Log2.default.info("_signoutEnd");
	
	        return this.processSignoutResponse(url).then(function (signoutResponse) {
	            _Log2.default.info("got signout response");
	
	            return signoutResponse;
	        });
	    };
	
	    UserManager.prototype._loadUser = function _loadUser() {
	        _Log2.default.info("_loadUser");
	
	        return this._userStore.get(this._userStoreKey).then(function (storageString) {
	            if (storageString) {
	                _Log2.default.info("user storageString loaded");
	                return _User2.default.fromStorageString(storageString);
	            }
	
	            _Log2.default.info("no user storageString");
	            return null;
	        });
	    };
	
	    UserManager.prototype._storeUser = function _storeUser(user) {
	        if (user) {
	            _Log2.default.info("_storeUser storing user");
	
	            var storageString = user.toStorageString();
	            return this._userStore.set(this._userStoreKey, storageString);
	        } else {
	            _Log2.default.info("_storeUser removing user storage");
	            return this._userStore.remove(this._userStoreKey);
	        }
	    };
	
	    _createClass(UserManager, [{
	        key: '_redirectNavigator',
	        get: function get() {
	            return this.settings.redirectNavigator;
	        }
	    }, {
	        key: '_popupNavigator',
	        get: function get() {
	            return this.settings.popupNavigator;
	        }
	    }, {
	        key: '_iframeNavigator',
	        get: function get() {
	            return this.settings.iframeNavigator;
	        }
	    }, {
	        key: '_userStore',
	        get: function get() {
	            return this.settings.userStore;
	        }
	    }, {
	        key: 'events',
	        get: function get() {
	            return this._events;
	        }
	    }, {
	        key: '_userStoreKey',
	        get: function get() {
	            return 'user:' + this.settings.authority + ':' + this.settings.client_id;
	        }
	    }]);
	
	    return UserManager;
	}(_OidcClient3.default);
	
	exports.default = UserManager;
	module.exports = exports['default'];

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _OidcClientSettings2 = __webpack_require__(3);
	
	var _OidcClientSettings3 = _interopRequireDefault(_OidcClientSettings2);
	
	var _RedirectNavigator = __webpack_require__(24);
	
	var _RedirectNavigator2 = _interopRequireDefault(_RedirectNavigator);
	
	var _PopupNavigator = __webpack_require__(25);
	
	var _PopupNavigator2 = _interopRequireDefault(_PopupNavigator);
	
	var _IFrameNavigator = __webpack_require__(27);
	
	var _IFrameNavigator2 = _interopRequireDefault(_IFrameNavigator);
	
	var _WebStorageStateStore = __webpack_require__(4);
	
	var _WebStorageStateStore2 = _interopRequireDefault(_WebStorageStateStore);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultAccessTokenExpiringNotificationTime = 60;
	
	var UserManagerSettings = function (_OidcClientSettings) {
	    _inherits(UserManagerSettings, _OidcClientSettings);
	
	    function UserManagerSettings() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var popup_redirect_uri = _ref.popup_redirect_uri;
	        var popupWindowFeatures = _ref.popupWindowFeatures;
	        var popupWindowTarget = _ref.popupWindowTarget;
	        var silent_redirect_uri = _ref.silent_redirect_uri;
	        var silentRequestTimeout = _ref.silentRequestTimeout;
	        var _ref$automaticSilentR = _ref.automaticSilentRenew;
	        var automaticSilentRenew = _ref$automaticSilentR === undefined ? false : _ref$automaticSilentR;
	        var _ref$monitorSession = _ref.monitorSession;
	        var monitorSession = _ref$monitorSession === undefined ? true : _ref$monitorSession;
	        var _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime;
	        var accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir;
	        var _ref$redirectNavigato = _ref.redirectNavigator;
	        var redirectNavigator = _ref$redirectNavigato === undefined ? new _RedirectNavigator2.default() : _ref$redirectNavigato;
	        var _ref$popupNavigator = _ref.popupNavigator;
	        var popupNavigator = _ref$popupNavigator === undefined ? new _PopupNavigator2.default() : _ref$popupNavigator;
	        var _ref$iframeNavigator = _ref.iframeNavigator;
	        var iframeNavigator = _ref$iframeNavigator === undefined ? new _IFrameNavigator2.default() : _ref$iframeNavigator;
	        var _ref$userStore = _ref.userStore;
	        var userStore = _ref$userStore === undefined ? new _WebStorageStateStore2.default({ store: _Global2.default.sessionStorage }) : _ref$userStore;
	
	        _classCallCheck(this, UserManagerSettings);
	
	        var _this = _possibleConstructorReturn(this, _OidcClientSettings.call(this, arguments[0]));
	
	        _this._popup_redirect_uri = popup_redirect_uri;
	        _this._popupWindowFeatures = popupWindowFeatures;
	        _this._popupWindowTarget = popupWindowTarget;
	
	        _this._silent_redirect_uri = silent_redirect_uri;
	        _this._silentRequestTimeout = silentRequestTimeout;
	        _this._automaticSilentRenew = !!automaticSilentRenew;
	        _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
	
	        _this._monitorSession = monitorSession;
	
	        _this._redirectNavigator = redirectNavigator;
	        _this._popupNavigator = popupNavigator;
	        _this._iframeNavigator = iframeNavigator;
	
	        _this._userStore = userStore;
	        return _this;
	    }
	
	    _createClass(UserManagerSettings, [{
	        key: 'popup_redirect_uri',
	        get: function get() {
	            return this._popup_redirect_uri;
	        }
	    }, {
	        key: 'popupWindowFeatures',
	        get: function get() {
	            return this._popupWindowFeatures;
	        }
	    }, {
	        key: 'popupWindowTarget',
	        get: function get() {
	            return this._popupWindowTarget;
	        }
	    }, {
	        key: 'silent_redirect_uri',
	        get: function get() {
	            return this._silent_redirect_uri;
	        }
	    }, {
	        key: 'silentRequestTimeout',
	        get: function get() {
	            return this._silentRequestTimeout;
	        }
	    }, {
	        key: 'automaticSilentRenew',
	        get: function get() {
	            return !!(this.silent_redirect_uri && this._automaticSilentRenew);
	        }
	    }, {
	        key: 'accessTokenExpiringNotificationTime',
	        get: function get() {
	            return this._accessTokenExpiringNotificationTime;
	        }
	    }, {
	        key: 'monitorSession',
	        get: function get() {
	            return this._monitorSession;
	        }
	    }, {
	        key: 'redirectNavigator',
	        get: function get() {
	            return this._redirectNavigator;
	        }
	    }, {
	        key: 'popupNavigator',
	        get: function get() {
	            return this._popupNavigator;
	        }
	    }, {
	        key: 'iframeNavigator',
	        get: function get() {
	            return this._iframeNavigator;
	        }
	    }, {
	        key: 'userStore',
	        get: function get() {
	            return this._userStore;
	        }
	    }]);
	
	    return UserManagerSettings;
	}(_OidcClientSettings3.default);
	
	exports.default = UserManagerSettings;
	module.exports = exports['default'];

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RedirectNavigator = function () {
	    function RedirectNavigator() {
	        _classCallCheck(this, RedirectNavigator);
	    }
	
	    RedirectNavigator.prototype.prepare = function prepare() {
	        return Promise.resolve(this);
	    };
	
	    RedirectNavigator.prototype.navigate = function navigate(params) {
	        _Log2.default.info("RedirectNavigator.navigate");
	
	        if (!params || !params.url) {
	            _Log2.default.error("No url provided");
	            return Promise.reject(new Error("No url provided"));
	        }
	
	        window.location = params.url;
	
	        return Promise.resolve();
	    };
	
	    _createClass(RedirectNavigator, [{
	        key: "url",
	        get: function get() {
	            _Log2.default.info("RedirectNavigator.url");
	            return window.location.href;
	        }
	    }]);
	
	    return RedirectNavigator;
	}();
	
	exports.default = RedirectNavigator;
	module.exports = exports['default'];

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _PopupWindow = __webpack_require__(26);
	
	var _PopupWindow2 = _interopRequireDefault(_PopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var PopupNavigator = function () {
	    function PopupNavigator() {
	        _classCallCheck(this, PopupNavigator);
	    }
	
	    PopupNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _PopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    PopupNavigator.prototype.callback = function callback(url) {
	        _Log2.default.info("PopupNavigator.callback");
	
	        try {
	            _PopupWindow2.default.notifyOpener(url);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return PopupNavigator;
	}();
	
	exports.default = PopupNavigator;
	module.exports = exports['default'];

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CheckForPopupClosedInterval = 500;
	var DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100';
	var DefaultPopupTarget = "_blank";
	
	var PopupWindow = function () {
	    function PopupWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, PopupWindow);
	
	        _Log2.default.info("PopupWindow.ctor");
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this._boundMessageEvent = this._message.bind(this);
	        window.addEventListener("message", this._boundMessageEvent, false);
	
	        var features = params.popupWindowFeatures || DefaultPopupFeatures;
	        var target = params.popupWindowTarget || DefaultPopupTarget;
	
	        this._popup = window.open('', target, features);
	        if (this._popup) {
	            _Log2.default.info("popup successfully created");
	            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
	        }
	    }
	
	    PopupWindow.prototype.navigate = function navigate(params) {
	        _Log2.default.info("PopupWindow.navigate");
	
	        if (!this._popup) {
	            this._error("Error opening popup window");
	        } else if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            _Log2.default.info("Setting URL in popup");
	
	            this._popup.focus();
	            this._popup.window.location = params.url;
	        }
	
	        return this.promise;
	    };
	
	    PopupWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log2.default.info("Successful response from popup window");
	        this._resolve(data);
	    };
	
	    PopupWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log2.default.error(message);
	        this._reject(new Error(message));
	    };
	
	    PopupWindow.prototype._cleanup = function _cleanup() {
	        _Log2.default.info("PopupWindow._cleanup");
	
	        window.removeEventListener("message", this._boundMessageEvent, false);
	        window.clearInterval(this._checkForPopupClosedTimer);
	
	        this._checkForPopupClosedTimer = null;
	        this._boundMessageEventssage = null;
	
	        if (this._popup) {
	            this._popup.close();
	        }
	        this._popup = null;
	    };
	
	    PopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {
	        _Log2.default.info("PopupWindow._checkForPopupClosed");
	
	        if (!this._popup || this._popup.closed) {
	            this._error("Popup window closed");
	        }
	    };
	
	    PopupWindow.prototype._message = function _message(e) {
	        _Log2.default.info("PopupWindow._message");
	
	        if (e.origin === this._origin && e.source === this._popup.window) {
	            _Log2.default.info("processing message");
	
	            var url = e.data || e.source.location.href; // for IE9
	
	            this._cleanup();
	
	            if (url) {
	                this._success({ url: url });
	            } else {
	                this._error("Invalid response from popup");
	            }
	        }
	    };
	
	    PopupWindow.notifyOpener = function notifyOpener(url) {
	        _Log2.default.info("PopupWindow.notifyOpener");
	
	        if (window.opener) {
	            url = url || window.location.href;
	            if (url) {
	                _Log2.default.info("posting url message to opener");
	                window.opener.postMessage(url, location.protocol + "//" + location.host);
	            }
	        }
	    };
	
	    _createClass(PopupWindow, [{
	        key: 'promise',
	        get: function get() {
	            return this._promise;
	        }
	    }, {
	        key: '_origin',
	        get: function get() {
	            return location.protocol + "//" + location.host;
	        }
	    }]);
	
	    return PopupWindow;
	}();
	
	exports.default = PopupWindow;
	module.exports = exports['default'];

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _IFrameWindow = __webpack_require__(28);
	
	var _IFrameWindow2 = _interopRequireDefault(_IFrameWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var IFrameNavigator = function () {
	    function IFrameNavigator() {
	        _classCallCheck(this, IFrameNavigator);
	    }
	
	    IFrameNavigator.prototype.prepare = function prepare(params) {
	        var frame = new _IFrameWindow2.default(params);
	        return Promise.resolve(frame);
	    };
	
	    IFrameNavigator.prototype.callback = function callback(url) {
	        _Log2.default.info("IFrameNavigator.callback");
	
	        try {
	            _IFrameWindow2.default.notifyParent(url);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return IFrameNavigator;
	}();
	
	exports.default = IFrameNavigator;
	module.exports = exports['default'];

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DefaultTimeout = 5000;
	
	var IFrameWindow = function () {
	    function IFrameWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, IFrameWindow);
	
	        _Log2.default.info("IFrameWindow.ctor");
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this._boundMessageEvent = this._message.bind(this);
	        window.addEventListener("message", this._boundMessageEvent, false);
	
	        this._frame = window.document.createElement("iframe");
	        this._frame.style.display = "none";
	        window.document.body.appendChild(this._frame);
	    }
	
	    IFrameWindow.prototype.navigate = function navigate(params) {
	        _Log2.default.info("IFrameWindow.navigate");
	
	        if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            var timeout = params.silentRequestTimeout || DefaultTimeout;
	            _Log2.default.info("Using timeout of:", timeout);
	            this._timer = window.setTimeout(this._timeout.bind(this), timeout);
	            this._frame.src = params.url;
	        }
	
	        return this.promise;
	    };
	
	    IFrameWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log2.default.info("Successful response from frame window");
	        this._resolve(data);
	    };
	
	    IFrameWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log2.default.error(message);
	        this._reject(new Error(message));
	    };
	
	    IFrameWindow.prototype._cleanup = function _cleanup() {
	        _Log2.default.info("IFrameWindow._cleanup");
	
	        window.removeEventListener("message", this._boundMessageEvent, false);
	        window.clearTimeout(this._timer);
	        window.document.body.removeChild(this._frame);
	
	        this._timer = null;
	        this._frame = null;
	        this._boundMessageEvent = null;
	    };
	
	    IFrameWindow.prototype._timeout = function _timeout() {
	        _Log2.default.info("IFrameWindow._timeout");
	        this._error("Frame window timed out");
	    };
	
	    IFrameWindow.prototype._message = function _message(e) {
	        _Log2.default.info("IFrameWindow._message");
	
	        if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow) {
	            var url = e.data;
	            if (url) {
	                this._success({ url: url });
	            } else {
	                this._error("Invalid response from frame");
	            }
	        }
	    };
	
	    IFrameWindow.notifyParent = function notifyParent(url) {
	        _Log2.default.info("IFrameWindow.notifyParent");
	
	        if (window.parent && window !== window.parent) {
	            url = url || window.location.href;
	            if (url) {
	                _Log2.default.info("posting url message to parent");
	                window.parent.postMessage(url, location.protocol + "//" + location.host);
	            }
	        }
	    };
	
	    _createClass(IFrameWindow, [{
	        key: "promise",
	        get: function get() {
	            return this._promise;
	        }
	    }, {
	        key: "_origin",
	        get: function get() {
	            return location.protocol + "//" + location.host;
	        }
	    }]);
	
	    return IFrameWindow;
	}();
	
	exports.default = IFrameWindow;
	module.exports = exports['default'];

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var User = function () {
	    function User(_ref) {
	        var id_token = _ref.id_token;
	        var session_state = _ref.session_state;
	        var access_token = _ref.access_token;
	        var token_type = _ref.token_type;
	        var scope = _ref.scope;
	        var profile = _ref.profile;
	        var expires_at = _ref.expires_at;
	        var state = _ref.state;
	
	        _classCallCheck(this, User);
	
	        this.id_token = id_token;
	        this.session_state = session_state;
	        this.access_token = access_token;
	        this.token_type = token_type;
	        this.scope = scope;
	        this.profile = profile;
	        this.expires_at = expires_at;
	        this.state = state;
	    }
	
	    User.prototype.toStorageString = function toStorageString() {
	        _Log2.default.info("User.toStorageString");
	        return JSON.stringify({
	            id_token: this.id_token,
	            session_state: this.session_state,
	            access_token: this.access_token,
	            token_type: this.token_type,
	            scope: this.scope,
	            profile: this.profile,
	            expires_at: this.expires_at
	        });
	    };
	
	    User.fromStorageString = function fromStorageString(storageString) {
	        _Log2.default.info("User.fromStorageString");
	        return new User(JSON.parse(storageString));
	    };
	
	    _createClass(User, [{
	        key: "expires_in",
	        get: function get() {
	            if (this.expires_at) {
	                var now = parseInt(Date.now() / 1000);
	                return this.expires_at - now;
	            }
	            return undefined;
	        }
	    }, {
	        key: "expired",
	        get: function get() {
	            var expires_in = this.expires_in;
	            if (expires_in !== undefined) {
	                return expires_in <= 0;
	            }
	            return undefined;
	        }
	    }, {
	        key: "scopes",
	        get: function get() {
	            return (this.scope || "").split(" ");
	        }
	    }]);
	
	    return User;
	}();
	
	exports.default = User;
	module.exports = exports['default'];

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _AccessTokenEvents2 = __webpack_require__(31);
	
	var _AccessTokenEvents3 = _interopRequireDefault(_AccessTokenEvents2);
	
	var _Event = __webpack_require__(33);
	
	var _Event2 = _interopRequireDefault(_Event);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserManagerEvents = function (_AccessTokenEvents) {
	    _inherits(UserManagerEvents, _AccessTokenEvents);
	
	    function UserManagerEvents(settings) {
	        _classCallCheck(this, UserManagerEvents);
	
	        var _this = _possibleConstructorReturn(this, _AccessTokenEvents.call(this, settings));
	
	        _this._userLoaded = new _Event2.default("User loaded");
	        _this._userUnloaded = new _Event2.default("User unloaded");
	        _this._silentRenewError = new _Event2.default("Silent renew error");
	        _this._userSignedOut = new _Event2.default("User signed out");
	        _this._userSessionChanged = new _Event2.default("User session changed");
	        return _this;
	    }
	
	    UserManagerEvents.prototype.load = function load(user) {
	        var raiseEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	        _Log2.default.info("UserManagerEvents.load");
	        _AccessTokenEvents.prototype.load.call(this, user);
	        if (raiseEvent) {
	            this._userLoaded.raise(user);
	        }
	    };
	
	    UserManagerEvents.prototype.unload = function unload() {
	        _Log2.default.info("UserManagerEvents.unload");
	        _AccessTokenEvents.prototype.unload.call(this);
	        this._userUnloaded.raise();
	    };
	
	    UserManagerEvents.prototype.addUserLoaded = function addUserLoaded(cb) {
	        this._userLoaded.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserLoaded = function removeUserLoaded(cb) {
	        this._userLoaded.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype.addUserUnloaded = function addUserUnloaded(cb) {
	        this._userUnloaded.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserUnloaded = function removeUserUnloaded(cb) {
	        this._userUnloaded.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype.addSilentRenewError = function addSilentRenewError(cb) {
	        this._silentRenewError.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeSilentRenewError = function removeSilentRenewError(cb) {
	        this._silentRenewError.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseSilentRenewError = function _raiseSilentRenewError(e) {
	        _Log2.default.info("UserManagerEvents._raiseSilentRenewError", e.message);
	        this._silentRenewError.raise(e);
	    };
	
	    UserManagerEvents.prototype.addUserSignedOut = function addUserSignedOut(cb) {
	        this._userSignedOut.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserSignedOut = function removeUserSignedOut(cb) {
	        this._userSignedOut.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseUserSignedOut = function _raiseUserSignedOut(e) {
	        _Log2.default.info("UserManagerEvents._raiseUserSignedOut");
	        this._userSignedOut.raise(e);
	    };
	
	    UserManagerEvents.prototype.addUserSessionChanged = function addUserSessionChanged(cb) {
	        this._userSessionChanged.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserSessionChanged = function removeUserSessionChanged(cb) {
	        this._userSessionChanged.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseUserSessionChanged = function _raiseUserSessionChanged(e) {
	        _Log2.default.info("UserManagerEvents._raiseUserSessionChanged");
	        this._userSessionChanged.raise(e);
	    };
	
	    return UserManagerEvents;
	}(_AccessTokenEvents3.default);
	
	exports.default = UserManagerEvents;
	module.exports = exports['default'];

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Timer = __webpack_require__(32);
	
	var _Timer2 = _interopRequireDefault(_Timer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultAccessTokenExpiringNotificationTime = 60;
	
	var AccessTokenEvents = function () {
	    function AccessTokenEvents() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime;
	        var accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir;
	        var _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer;
	        var accessTokenExpiringTimer = _ref$accessTokenExpir2 === undefined ? new _Timer2.default("Access token expiring") : _ref$accessTokenExpir2;
	        var _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer;
	        var accessTokenExpiredTimer = _ref$accessTokenExpir3 === undefined ? new _Timer2.default("Access token expired") : _ref$accessTokenExpir3;
	
	        _classCallCheck(this, AccessTokenEvents);
	
	        this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
	
	        this._accessTokenExpiring = accessTokenExpiringTimer;
	        this._accessTokenExpired = accessTokenExpiredTimer;
	    }
	
	    AccessTokenEvents.prototype.load = function load(container) {
	        _Log2.default.info("AccessTokenEvents.load");
	
	        this._cancelTimers();
	
	        // only register events if there's an access token where we care about expiration
	        if (container.access_token) {
	            var duration = container.expires_in;
	            _Log2.default.info("access token present, remaining duration:", duration);
	
	            if (duration > 0) {
	                // only register expiring if we still have time
	                var expiring = duration - this._accessTokenExpiringNotificationTime;
	                if (expiring <= 0) {
	                    expiring = 1;
	                }
	                _Log2.default.info("registering expiring timer in:", expiring);
	                this._accessTokenExpiring.init(expiring);
	            }
	
	            // always register expired. if it's negative, it will still fire
	            var expired = duration + 1;
	            _Log2.default.info("registering expired timer in:", expired);
	            this._accessTokenExpired.init(expired);
	        }
	    };
	
	    AccessTokenEvents.prototype.unload = function unload() {
	        _Log2.default.info("AccessTokenEvents.unload");
	        this._cancelTimers();
	    };
	
	    AccessTokenEvents.prototype._cancelTimers = function _cancelTimers() {
	        _Log2.default.info("canceling existing access token timers");
	        this._accessTokenExpiring.cancel();
	        this._accessTokenExpired.cancel();
	    };
	
	    AccessTokenEvents.prototype.addAccessTokenExpiring = function addAccessTokenExpiring(cb) {
	        this._accessTokenExpiring.addHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.removeAccessTokenExpiring = function removeAccessTokenExpiring(cb) {
	        this._accessTokenExpiring.removeHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.addAccessTokenExpired = function addAccessTokenExpired(cb) {
	        this._accessTokenExpired.addHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.removeAccessTokenExpired = function removeAccessTokenExpired(cb) {
	        this._accessTokenExpired.removeHandler(cb);
	    };
	
	    return AccessTokenEvents;
	}();
	
	exports.default = AccessTokenEvents;
	module.exports = exports['default'];

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	var _Event2 = __webpack_require__(33);
	
	var _Event3 = _interopRequireDefault(_Event2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var Timer = function (_Event) {
	    _inherits(Timer, _Event);
	
	    function Timer(name) {
	        var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global2.default.timer;
	
	        _classCallCheck(this, Timer);
	
	        var _this = _possibleConstructorReturn(this, _Event.call(this, name));
	
	        _this._timer = timer;
	        return _this;
	    }
	
	    Timer.prototype.init = function init(duration) {
	        this.cancel();
	
	        if (duration <= 0) {
	            duration = 1;
	        }
	
	        this._timerHandle = this._timer.setTimeout(this._callback.bind(this), duration * 1000);
	    };
	
	    Timer.prototype.cancel = function cancel() {
	        if (this._timerHandle) {
	            this._timer.clearTimeout(this._timerHandle);
	            this._timerHandle = null;
	        }
	    };
	
	    Timer.prototype._callback = function _callback() {
	        this._timerHandle = null;
	        _Event.prototype.raise.call(this);
	    };
	
	    return Timer;
	}(_Event3.default);
	
	exports.default = Timer;
	module.exports = exports['default'];

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var Event = function () {
	    function Event(name) {
	        _classCallCheck(this, Event);
	
	        this._name = name;
	        this._callbacks = [];
	    }
	
	    Event.prototype.addHandler = function addHandler(cb) {
	        this._callbacks.push(cb);
	    };
	
	    Event.prototype.removeHandler = function removeHandler(cb) {
	        var idx = this._callbacks.findIndex(function (item) {
	            return item === cb;
	        });
	        if (idx >= 0) {
	            this._callbacks.splice(idx, 1);
	        }
	    };
	
	    Event.prototype.raise = function raise() {
	        _Log2.default.info("Raising event: " + this._name);
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;
	
	        try {
	            for (var _iterator = this._callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var cb = _step.value;
	
	                cb.apply(undefined, arguments);
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }
	    };
	
	    return Event;
	}();
	
	exports.default = Event;
	module.exports = exports['default'];

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SilentRenewService = function () {
	    function SilentRenewService(userManager) {
	        _classCallCheck(this, SilentRenewService);
	
	        this._userManager = userManager;
	        this._userManager.events.addAccessTokenExpiring(this._tokenExpiring.bind(this));
	
	        // this will trigger loading of the user so the expiring events can be initialized
	        this._userManager.getUser().then(function (user) {
	            // deliberate nop
	        }).catch(function (err) {
	            // catch to suppress errors since we're in a ctor
	            _Log2.default.error("Error from getUser:", err.message);
	        });
	    }
	
	    SilentRenewService.prototype._tokenExpiring = function _tokenExpiring() {
	        var _this = this;
	
	        _Log2.default.info("SilentRenewService automatically renewing access token");
	
	        this._userManager.signinSilent().then(function (user) {
	            _Log2.default.info("Silent token renewal successful");
	        }, function (err) {
	            _Log2.default.error("Error from signinSilent:", err.message);
	            _this._userManager.events._raiseSilentRenewError(err);
	        });
	    };
	
	    return SilentRenewService;
	}();
	
	exports.default = SilentRenewService;
	module.exports = exports['default'];

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _CheckSessionIFrame = __webpack_require__(36);
	
	var _CheckSessionIFrame2 = _interopRequireDefault(_CheckSessionIFrame);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SessionMonitor = function () {
	    function SessionMonitor(userManager) {
	        var _this = this;
	
	        var CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _CheckSessionIFrame2.default;
	
	        _classCallCheck(this, SessionMonitor);
	
	        if (!userManager) {
	            _Log2.default.error("No user manager passed to SessionMonitor");
	            throw new Error("userManager");
	        }
	
	        this._userManager = userManager;
	        this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;
	
	        this._userManager.events.addUserLoaded(this._start.bind(this));
	        this._userManager.events.addUserUnloaded(this._stop.bind(this));
	
	        this._userManager.getUser().then(function (user) {
	            if (user) {
	                _this._start(user);
	            }
	        }).catch(function (err) {
	            // catch to suppress errors since we're in a ctor
	            _Log2.default.error("SessionMonitor ctor; error from getUser:", err.message);
	        });
	    }
	
	    SessionMonitor.prototype._start = function _start(user) {
	        var _this2 = this;
	
	        var session_state = user.session_state;
	
	        if (session_state) {
	            this._sub = user.profile.sub;
	            this._sid = user.profile.sid;
	            _Log2.default.info("SessionMonitor._start; session_state:", session_state, ", sub:", this._sub);
	
	            if (!this._checkSessionIFrame) {
	                this._metadataService.getCheckSessionIframe().then(function (url) {
	                    if (url) {
	                        _Log2.default.info("Initializing check session iframe");
	
	                        var client_id = _this2._client_id;
	                        var interval = _this2._checkSessionInterval;
	
	                        _this2._checkSessionIFrame = new _this2._CheckSessionIFrameCtor(_this2._callback.bind(_this2), client_id, url, interval);
	                        _this2._checkSessionIFrame.start(session_state);
	                    } else {
	                        _Log2.default.warn("No check session iframe found in the metadata");
	                    }
	                }).catch(function (err) {
	                    // catch to suppress errors since we're in non-promise callback
	                    _Log2.default.error("Error from getCheckSessionIframe:", err.message);
	                });
	            } else {
	                this._checkSessionIFrame.start(session_state);
	            }
	        }
	    };
	
	    SessionMonitor.prototype._stop = function _stop() {
	        _Log2.default.info("SessionMonitor._stop");
	
	        this._sub = null;
	        this._sid = null;
	
	        if (this._checkSessionIFrame) {
	            this._checkSessionIFrame.stop();
	        }
	    };
	
	    SessionMonitor.prototype._callback = function _callback() {
	        var _this3 = this;
	
	        _Log2.default.info("SessionMonitor._callback");
	
	        this._userManager.querySessionStatus().then(function (session) {
	            var raiseUserSignedOutEvent = true;
	
	            if (session) {
	                if (session.sub === _this3._sub) {
	                    raiseUserSignedOutEvent = false;
	                    _this3._checkSessionIFrame.start(session.session_state);
	
	                    if (session.sid === _this3._sid) {
	                        _Log2.default.info("Same sub still logged in at OP, restarting check session iframe; session_state:", session.session_state);
	                    } else {
	                        _Log2.default.info("Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", session.session_state);
	                        _this3._userManager.events._raiseUserSessionChanged();
	                    }
	                } else {
	                    _Log2.default.info("Different subject signed into OP:", session.sub);
	                }
	            } else {
	                _Log2.default.info("Subject no longer signed into OP");
	            }
	
	            if (raiseUserSignedOutEvent) {
	                _Log2.default.info("SessionMonitor._callback; raising signed out event");
	                _this3._userManager.events._raiseUserSignedOut();
	            }
	        }).catch(function (err) {
	            _Log2.default.info("Error calling queryCurrentSigninSession; raising signed out event", err.message);
	            _this3._userManager.events._raiseUserSignedOut();
	        });
	    };
	
	    _createClass(SessionMonitor, [{
	        key: '_settings',
	        get: function get() {
	            return this._userManager.settings;
	        }
	    }, {
	        key: '_metadataService',
	        get: function get() {
	            return this._userManager.metadataService;
	        }
	    }, {
	        key: '_client_id',
	        get: function get() {
	            return this._settings.client_id;
	        }
	    }, {
	        key: '_checkSessionInterval',
	        get: function get() {
	            return this._settings.checkSessionInterval;
	        }
	    }]);
	
	    return SessionMonitor;
	}();
	
	exports.default = SessionMonitor;
	module.exports = exports['default'];

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultInterval = 2000;
	
	var CheckSessionIFrame = function () {
	    function CheckSessionIFrame(callback, client_id, url, interval) {
	        _classCallCheck(this, CheckSessionIFrame);
	
	        this._callback = callback;
	        this._client_id = client_id;
	        this._url = url;
	        this._interval = interval || DefaultInterval;
	
	        var idx = url.indexOf("/", url.indexOf("//") + 2);
	        this._frame_origin = url.substr(0, idx);
	
	        this._frame = window.document.createElement("iframe");
	        this._frame.style.display = "none";
	        this._frame.src = url;
	        window.document.body.appendChild(this._frame);
	
	        this._boundMessageEvent = this._message.bind(this);
	        window.addEventListener("message", this._boundMessageEvent, false);
	    }
	
	    CheckSessionIFrame.prototype._message = function _message(e) {
	        if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
	            if (e.data === "error") {
	                _Log2.default.error("error message from check session op iframe");
	                this.stop();
	            } else if (e.data === "changed") {
	                _Log2.default.info("changed message from check session op iframe");
	                this.stop();
	                this._callback();
	            } else {
	                _Log2.default.info(e.data + " message from check session op iframe");
	            }
	        }
	    };
	
	    CheckSessionIFrame.prototype.start = function start(session_state) {
	        var _this = this;
	
	        if (this._session_state !== session_state) {
	            _Log2.default.info("CheckSessionIFrame.start");
	
	            this.stop();
	
	            this._session_state = session_state;
	
	            this._timer = window.setInterval(function () {
	                _this._frame.contentWindow.postMessage(_this._client_id + " " + _this._session_state, _this._frame_origin);
	            }, this._interval);
	        }
	    };
	
	    CheckSessionIFrame.prototype.stop = function stop() {
	        _Log2.default.info("CheckSessionIFrame.stop");
	
	        this._session_state = null;
	
	        if (this._timer) {
	            window.clearInterval(this._timer);
	            this._timer = null;
	        }
	    };
	
	    return CheckSessionIFrame;
	}();
	
	exports.default = CheckSessionIFrame;
	module.exports = exports['default'];

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _MetadataService = __webpack_require__(7);
	
	var _MetadataService2 = _interopRequireDefault(_MetadataService);
	
	var _Global = __webpack_require__(5);
	
	var _Global2 = _interopRequireDefault(_Global);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var AccessTokenTypeHint = "access_token";
	
	var TokenRevocationClient = function () {
	    function TokenRevocationClient(settings) {
	        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global2.default.XMLHttpRequest;
	        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService2.default;
	
	        _classCallCheck(this, TokenRevocationClient);
	
	        if (!settings) {
	            _Log2.default.error("No settings provided");
	            throw new Error("No settings provided.");
	        }
	
	        this._settings = settings;
	        this._XMLHttpRequestCtor = XMLHttpRequestCtor;
	        this._metadataService = new MetadataServiceCtor(this._settings);
	    }
	
	    TokenRevocationClient.prototype.revoke = function revoke(accessToken, required) {
	        var _this = this;
	
	        _Log2.default.info("TokenRevocationClient.revoke");
	
	        if (!accessToken) {
	            _Log2.default.error("No accessToken provided");
	            throw new Error("No accessToken provided.");
	        }
	
	        return this._metadataService.getRevocationEndpoint().then(function (url) {
	            if (!url) {
	                if (required) {
	                    _Log2.default.error("Revocation not supported");
	                    throw new Error("Revocation not supported");
	                }
	
	                // not required, so don't error and just return
	                return;
	            }
	
	            var client_id = _this._settings.client_id;
	            return _this._revoke(url, client_id, accessToken);
	        });
	    };
	
	    TokenRevocationClient.prototype._revoke = function _revoke(url, client_id, accessToken) {
	        var _this2 = this;
	
	        _Log2.default.info("Calling revocation endpoint");
	
	        return new Promise(function (resolve, reject) {
	
	            var xhr = new _this2._XMLHttpRequestCtor();
	            xhr.open("POST", url);
	
	            xhr.onload = function () {
	                _Log2.default.info("HTTP response received, status", xhr.status);
	
	                if (xhr.status === 200) {
	                    resolve();
	                } else {
	                    reject(Error(xhr.statusText + " (" + xhr.status + ")"));
	                }
	            };
	
	            var body = "client_id=" + encodeURIComponent(client_id);
	            body += "&token_type_hint=" + encodeURIComponent(AccessTokenTypeHint);
	            body += "&token=" + encodeURIComponent(accessToken);
	
	            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	            xhr.send(body);
	        });
	    };
	
	    return TokenRevocationClient;
	}();
	
	exports.default = TokenRevocationClient;
	module.exports = exports['default'];

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _CordovaPopupWindow = __webpack_require__(39);
	
	var _CordovaPopupWindow2 = _interopRequireDefault(_CordovaPopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var CordovaPopupNavigator = function () {
	    function CordovaPopupNavigator() {
	        _classCallCheck(this, CordovaPopupNavigator);
	    }
	
	    CordovaPopupNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _CordovaPopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    return CordovaPopupNavigator;
	}();
	
	exports.default = CordovaPopupNavigator;
	module.exports = exports['default'];

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
	var DefaultPopupTarget = "_blank";
	
	var CordovaPopupWindow = function () {
	    function CordovaPopupWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, CordovaPopupWindow);
	
	        _Log2.default.info("CordovaPopupWindow.ctor");
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this.features = params.popupWindowFeatures || DefaultPopupFeatures;
	        this.target = params.popupWindowTarget || DefaultPopupTarget;
	
	        this.redirect_uri = params.startUrl;
	        _Log2.default.info("redirect_uri: " + this.redirect_uri);
	    }
	
	    CordovaPopupWindow.prototype._isInAppBrowserInstalled = function _isInAppBrowserInstalled(cordovaMetadata) {
	        return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (name) {
	            return cordovaMetadata.hasOwnProperty(name);
	        });
	    };
	
	    CordovaPopupWindow.prototype.navigate = function navigate(params) {
	        _Log2.default.info("CordovaPopupWindow.navigate");
	
	        if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            if (!window.cordova) {
	                return this._error("cordova is undefined");
	            }
	
	            var cordovaMetadata = window.cordova.require("cordova/plugin_list").metadata;
	            if (this._isInAppBrowserInstalled(cordovaMetadata) === false) {
	                return this._error("InAppBrowser plugin not found");
	            }
	            this._popup = cordova.InAppBrowser.open(params.url, this.target, this.features);
	            if (this._popup) {
	                _Log2.default.info("popup successfully created");
	
	                this._exitCallbackEvent = this._exitCallback.bind(this);
	                this._loadStartCallbackEvent = this._loadStartCallback.bind(this);
	
	                this._popup.addEventListener("exit", this._exitCallbackEvent, false);
	                this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, false);
	            } else {
	                this._error("Error opening popup window");
	            }
	        }
	        return this.promise;
	    };
	
	    CordovaPopupWindow.prototype._loadStartCallback = function _loadStartCallback(event) {
	        if (event.url.indexOf(this.redirect_uri) === 0) {
	            this._success({ url: event.url });
	        }
	    };
	
	    CordovaPopupWindow.prototype._exitCallback = function _exitCallback(message) {
	        this._error(message);
	    };
	
	    CordovaPopupWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log2.default.info("Successful response from cordova popup window");
	        this._resolve(data);
	    };
	
	    CordovaPopupWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log2.default.error(message);
	        this._reject(new Error(message));
	    };
	
	    CordovaPopupWindow.prototype._cleanup = function _cleanup() {
	        _Log2.default.info("CordovaPopupWindow._cleanup");
	
	        if (this._popup) {
	            this._popup.removeEventListener("exit", this._exitCallbackEvent, false);
	            this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, false);
	            this._popup.close();
	        }
	        this._popup = null;
	    };
	
	    _createClass(CordovaPopupWindow, [{
	        key: 'promise',
	        get: function get() {
	            return this._promise;
	        }
	    }]);
	
	    return CordovaPopupWindow;
	}();
	
	exports.default = CordovaPopupWindow;
	module.exports = exports['default'];

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _CordovaPopupWindow = __webpack_require__(39);
	
	var _CordovaPopupWindow2 = _interopRequireDefault(_CordovaPopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var CordovaIFrameNavigator = function () {
	    function CordovaIFrameNavigator() {
	        _classCallCheck(this, CordovaIFrameNavigator);
	    }
	
	    CordovaIFrameNavigator.prototype.prepare = function prepare(params) {
	        params.popupWindowFeatures = 'hidden=yes';
	        var popup = new _CordovaPopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    return CordovaIFrameNavigator;
	}();
	
	exports.default = CordovaIFrameNavigator;
	module.exports = exports['default'];

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _ElectronPopupWindow = __webpack_require__(42);
	
	var _ElectronPopupWindow2 = _interopRequireDefault(_ElectronPopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ElectronPopupNavigator = function () {
	    function ElectronPopupNavigator() {
	        _classCallCheck(this, ElectronPopupNavigator);
	    }
	
	    ElectronPopupNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _ElectronPopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    ElectronPopupNavigator.prototype.callback = function callback(url) {
	        _Log2.default.info("PopupNavigator.callback");
	
	        try {
	            _ElectronPopupWindow2.default.notifyOpener(url);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return ElectronPopupNavigator;
	}();
	
	exports.default = ElectronPopupNavigator;
	module.exports = exports['default'];

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CheckForPopupClosedInterval = 500;
	var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
	var DefaultPopupTarget = "_blank";
	
	var ElectronPopupWindow = function () {
	    function ElectronPopupWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, ElectronPopupWindow);
	
	        _Log2.default.info("ElectronPopupWindow.ctor");
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this.electron = __webpack_require__(43);
	        this.electronContainer = this.electron.remote;
	
	        this._popup = new this.electronContainer.BrowserWindow();
	        var popup = this._popup;
	
	        // this._boundMessageEvent = this._message.bind(this);
	        // window.on("message", this._boundMessageEvent, false);
	
	        //const {ipcMain} = require('electron');
	        var ipcMain = this.electronContainer.ipcMain;
	        if (ipcMain) {
	            _Log2.default.info("configuring electron receiver");
	            ipcMain.on('synchronous-message', function (event, arg) {
	                _Log2.default.info("receiving url");
	                _this._success({ url: arg });
	                popup.close();
	            });
	        }
	
	        if (this._popup) {
	            _Log2.default.info("popup successfully created");
	            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
	        }
	    }
	
	    ElectronPopupWindow.prototype.navigate = function navigate(params) {
	        _Log2.default.info("PopupWindow.navigate");
	
	        if (!this._popup) {
	            this._error("Error opening popup window");
	        } else if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            _Log2.default.info("Setting URL in popup");
	
	            this._popup.show();
	
	            // this._popup.webContents.on('did-finish-load', () => {
	            //     Log.info('did-finish-load!');
	            //     var urlLocation = this._popup.location.href;
	            //     this._success({ url: urlLocation });
	            // });
	
	            this._popup.loadURL(params.url);
	        }
	
	        return this.promise;
	    };
	
	    ElectronPopupWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log2.default.info("Successful response from popup window");
	        this._resolve(data);
	    };
	
	    ElectronPopupWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log2.default.error(message);
	        this._reject(new Error(message));
	    };
	
	    ElectronPopupWindow.prototype._cleanup = function _cleanup() {
	        _Log2.default.info("PopupWindow._cleanup");
	
	        //window.removeEventListener("message", this._boundMessageEvent, false);
	        window.clearInterval(this._checkForPopupClosedTimer);
	
	        this._checkForPopupClosedTimer = null;
	        this._boundMessageEventssage = null;
	
	        if (this._popup && !this._popup.isDestroyed()) {
	            this._popup.close();
	        }
	        this._popup = null;
	    };
	
	    ElectronPopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {
	        _Log2.default.info("PopupWindow._checkForPopupClosed");
	
	        if (!this._popup || this._popup.isDestroyed()) {
	            this._error("Popup window closed");
	        }
	    };
	
	    ElectronPopupWindow.prototype._message = function _message(e) {
	        _Log2.default.info("PopupWindow._message");
	
	        if (e.origin === this._origin && e.source === this._popup.window) {
	            _Log2.default.info("processing message");
	
	            var url = e.data || e.source.location.href; // for IE9
	
	            this._cleanup();
	
	            if (url) {
	                this._success({ url: url });
	            } else {
	                this._error("Invalid response from popup");
	            }
	        }
	    };
	
	    ElectronPopupWindow.notifyOpener = function notifyOpener(url) {
	        _Log2.default.info("PopupWindow.notifyOpener");
	
	        var electron = __webpack_require__(43);
	        var ipcRenderer = electron.ipcRenderer;
	        if (ipcRenderer) {
	            url = url || window.location.href;
	            _Log2.default.info("posting url message to opener");
	
	            ipcRenderer.send('synchronous-message', url);
	
	            var remote = electron.remote;
	            var window = remote.getCurrentWindow();
	            window.close();
	        }
	    };
	
	    _createClass(ElectronPopupWindow, [{
	        key: 'promise',
	        get: function get() {
	            return this._promise;
	        }
	    }, {
	        key: '_origin',
	        get: function get() {
	            return location.protocol + "//" + location.host;
	        }
	    }]);
	
	    return ElectronPopupWindow;
	}();
	
	exports.default = ElectronPopupWindow;
	module.exports = exports['default'];

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = require("electron");

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Log = __webpack_require__(1);
	
	var _Log2 = _interopRequireDefault(_Log);
	
	var _ElectronPopupWindow = __webpack_require__(42);
	
	var _ElectronPopupWindow2 = _interopRequireDefault(_ElectronPopupWindow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ElectronIFrameNavigator = function () {
	    function ElectronIFrameNavigator() {
	        _classCallCheck(this, ElectronIFrameNavigator);
	    }
	
	    ElectronIFrameNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _ElectronPopupWindow2.default(params);
	        return Promise.resolve(popup);
	    };
	
	    ElectronIFrameNavigator.prototype.callback = function callback(url) {
	        _Log2.default.info("PopupNavigator.callback");
	
	        try {
	            _ElectronPopupWindow2.default.notifyOpener(url);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return ElectronIFrameNavigator;
	}();
	
	exports.default = ElectronIFrameNavigator;
	module.exports = exports['default'];

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA1YzA2MjUxNGNhZjZjMjA2N2M3ZCIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9PaWRjQ2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9PaWRjQ2xpZW50U2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9HbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc3BvbnNlVmFsaWRhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9NZXRhZGF0YVNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pzb25TZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VySW5mb1NlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Vycm9yUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pvc2VVdGlsLmpzIiwid2VicGFjazovLy8uL34vanNyc2FzaWduL2xpYi9qc3JzYXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25pblJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VybFV0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25pblN0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmFuZG9tLmpzIiwid2VicGFjazovLy8uL3NyYy9TaWduaW5SZXNwb25zZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbm91dFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25vdXRSZXNwb25zZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSW5NZW1vcnlXZWJTdG9yYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VyTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlck1hbmFnZXJTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVkaXJlY3ROYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BvcHVwTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Qb3B1cFdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSUZyYW1lTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9JRnJhbWVXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJNYW5hZ2VyRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9BY2Nlc3NUb2tlbkV2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9TaWxlbnRSZW5ld1NlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Nlc3Npb25Nb25pdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rva2VuUmV2b2NhdGlvbkNsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YVBvcHVwTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Db3Jkb3ZhUG9wdXBXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvcmRvdmFJRnJhbWVOYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VsZWN0cm9uUG9wdXBOYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VsZWN0cm9uUG9wdXBXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZWxlY3Ryb25cIiIsIndlYnBhY2s6Ly8vLi9zcmMvRWxlY3Ryb25JRnJhbWVOYXZpZ2F0b3IuanMiXSwibmFtZXMiOlsiTG9nIiwicmVxdWlyZSIsIk9pZGNDbGllbnQiLCJPaWRjQ2xpZW50U2V0dGluZ3MiLCJXZWJTdG9yYWdlU3RhdGVTdG9yZSIsIkluTWVtb3J5V2ViU3RvcmFnZSIsIlVzZXJNYW5hZ2VyIiwiQWNjZXNzVG9rZW5FdmVudHMiLCJNZXRhZGF0YVNlcnZpY2UiLCJDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3IiLCJDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yIiwiRWxlY3Ryb25Qb3B1cE5hdmlnYXRvciIsIkVsZWN0cm9uSUZyYW1lTmF2aWdhdG9yIiwiQ2hlY2tTZXNzaW9uSUZyYW1lIiwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50Iiwibm9wTG9nZ2VyIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsIk5PTkUiLCJFUlJPUiIsIldBUk4iLCJJTkZPIiwibG9nZ2VyIiwibGV2ZWwiLCJyZXNldCIsImFyZ3MiLCJhcHBseSIsIkFycmF5IiwiZnJvbSIsInZhbHVlIiwiRXJyb3IiLCJzZXR0aW5ncyIsIl9zZXR0aW5ncyIsImNyZWF0ZVNpZ25pblJlcXVlc3QiLCJyZXNwb25zZV90eXBlIiwic2NvcGUiLCJyZWRpcmVjdF91cmkiLCJkYXRhIiwic3RhdGUiLCJwcm9tcHQiLCJkaXNwbGF5IiwibWF4X2FnZSIsInVpX2xvY2FsZXMiLCJpZF90b2tlbl9oaW50IiwibG9naW5faGludCIsImFjcl92YWx1ZXMiLCJyZXNvdXJjZSIsInN0YXRlU3RvcmUiLCJjbGllbnRfaWQiLCJhdXRob3JpdHkiLCJfbWV0YWRhdGFTZXJ2aWNlIiwiZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50IiwidGhlbiIsInVybCIsInJlcXVlc3QiLCJzaWduaW5TdGF0ZSIsIl9zdGF0ZVN0b3JlIiwic2V0IiwiaWQiLCJ0b1N0b3JhZ2VTdHJpbmciLCJwcm9jZXNzU2lnbmluUmVzcG9uc2UiLCJyZXNwb25zZSIsIlByb21pc2UiLCJyZWplY3QiLCJyZW1vdmUiLCJzdG9yZWRTdGF0ZVN0cmluZyIsImZyb21TdG9yYWdlU3RyaW5nIiwiX3ZhbGlkYXRvciIsInZhbGlkYXRlU2lnbmluUmVzcG9uc2UiLCJjcmVhdGVTaWdub3V0UmVxdWVzdCIsInBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsImdldEVuZFNlc3Npb25FbmRwb2ludCIsInNpZ25vdXRTdGF0ZSIsInByb2Nlc3NTaWdub3V0UmVzcG9uc2UiLCJyZXNvbHZlIiwic3RhdGVLZXkiLCJ2YWxpZGF0ZVNpZ25vdXRSZXNwb25zZSIsImNsZWFyU3RhbGVTdGF0ZSIsInN0YWxlU3RhdGVBZ2UiLCJ2YWxpZGF0b3IiLCJtZXRhZGF0YVNlcnZpY2UiLCJPaWRjTWV0YWRhdGFVcmxQYXRoIiwiRGVmYXVsdFJlc3BvbnNlVHlwZSIsIkRlZmF1bHRTY29wZSIsIkRlZmF1bHRTdGFsZVN0YXRlQWdlIiwiRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyIsIm1ldGFkYXRhVXJsIiwibWV0YWRhdGEiLCJzaWduaW5nS2V5cyIsImZpbHRlclByb3RvY29sQ2xhaW1zIiwibG9hZFVzZXJJbmZvIiwiY2xvY2tTa2V3IiwiUmVzcG9uc2VWYWxpZGF0b3JDdG9yIiwiTWV0YWRhdGFTZXJ2aWNlQ3RvciIsIl9hdXRob3JpdHkiLCJfbWV0YWRhdGFVcmwiLCJfbWV0YWRhdGEiLCJfc2lnbmluZ0tleXMiLCJfY2xpZW50X2lkIiwiX3Jlc3BvbnNlX3R5cGUiLCJfc2NvcGUiLCJfcmVkaXJlY3RfdXJpIiwiX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9wcm9tcHQiLCJfZGlzcGxheSIsIl9tYXhfYWdlIiwiX3VpX2xvY2FsZXMiLCJfYWNyX3ZhbHVlcyIsIl9yZXNvdXJjZSIsIl9maWx0ZXJQcm90b2NvbENsYWltcyIsIl9sb2FkVXNlckluZm8iLCJfc3RhbGVTdGF0ZUFnZSIsIl9jbG9ja1NrZXciLCJpbmRleE9mIiwibGVuZ3RoIiwicHJlZml4Iiwic3RvcmUiLCJsb2NhbFN0b3JhZ2UiLCJfc3RvcmUiLCJfcHJlZml4Iiwia2V5Iiwic2V0SXRlbSIsImdldCIsIml0ZW0iLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsImdldEFsbEtleXMiLCJrZXlzIiwiaW5kZXgiLCJwdXNoIiwic3Vic3RyIiwidGltZXIiLCJzZXRUaW1lb3V0IiwiY2IiLCJkdXJhdGlvbiIsImNsZWFyVGltZW91dCIsImhhbmRsZSIsInRlc3RpbmciLCJHbG9iYWwiLCJfdGVzdGluZyIsImxvY2F0aW9uIiwic2Vzc2lvblN0b3JhZ2UiLCJYTUxIdHRwUmVxdWVzdCIsIlByb3RvY29sQ2xhaW1zIiwiUmVzcG9uc2VWYWxpZGF0b3IiLCJVc2VySW5mb1NlcnZpY2VDdG9yIiwiam9zZVV0aWwiLCJfdXNlckluZm9TZXJ2aWNlIiwiX2pvc2VVdGlsIiwiX3Byb2Nlc3NTaWduaW5QYXJhbXMiLCJfdmFsaWRhdGVUb2tlbnMiLCJfcHJvY2Vzc0NsYWltcyIsIm5vbmNlIiwiaWRfdG9rZW4iLCJpc09wZW5JZENvbm5lY3QiLCJwcm9maWxlIiwiYWNjZXNzX3Rva2VuIiwiZ2V0Q2xhaW1zIiwiX21lcmdlQ2xhaW1zIiwiY2xhaW1zIiwiY2xhaW1zMSIsImNsYWltczIiLCJyZXN1bHQiLCJPYmplY3QiLCJhc3NpZ24iLCJuYW1lIiwidmFsdWVzIiwiaXNBcnJheSIsImZvckVhY2giLCJ0eXBlIiwiX3ZhbGlkYXRlSWRUb2tlbkFuZEFjY2Vzc1Rva2VuIiwiX3ZhbGlkYXRlSWRUb2tlbiIsIl92YWxpZGF0ZUFjY2Vzc1Rva2VuIiwiand0IiwicGFyc2VKd3QiLCJoZWFkZXIiLCJwYXlsb2FkIiwia2lkIiwiZ2V0SXNzdWVyIiwiZ2V0U2lnbmluZ0tleXMiLCJmaWx0ZXIiLCJhdWRpZW5jZSIsImNsb2NrU2tld0luU2Vjb25kcyIsInZhbGlkYXRlSnd0IiwiaXNzdWVyIiwiYXRfaGFzaCIsImhhc2hBbGciLCJhbGciLCJoYXNoQml0cyIsInBhcnNlSW50Iiwic2hhIiwiaGFzaCIsImhhc2hTdHJpbmciLCJsZWZ0IiwibGVmdF9iNjR1IiwiaGV4VG9CYXNlNjRVcmwiLCJKc29uU2VydmljZUN0b3IiLCJfanNvblNlcnZpY2UiLCJnZXRNZXRhZGF0YSIsImdldEpzb24iLCJfZ2V0TWV0YWRhdGFQcm9wZXJ0eSIsImdldFVzZXJJbmZvRW5kcG9pbnQiLCJnZXRDaGVja1Nlc3Npb25JZnJhbWUiLCJnZXRSZXZvY2F0aW9uRW5kcG9pbnQiLCJvcHRpb25hbCIsInVuZGVmaW5lZCIsImp3a3NfdXJpIiwia2V5U2V0IiwiZmlsdGVyZWRLZXlzIiwiX2ZpbHRlclNpZ25pbmdLZXlzIiwidXNlIiwiSnNvblNlcnZpY2UiLCJYTUxIdHRwUmVxdWVzdEN0b3IiLCJfWE1MSHR0cFJlcXVlc3QiLCJ0b2tlbiIsInJlcSIsIm9wZW4iLCJvbmxvYWQiLCJzdGF0dXMiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiVXNlckluZm9TZXJ2aWNlIiwiRXJyb3JSZXNwb25zZSIsImVycm9yX2Rlc2NyaXB0aW9uIiwiZXJyb3JfdXJpIiwiQWxsb3dlZFNpZ25pbmdBbGdzIiwiSm9zZVV0aWwiLCJKV1MiLCJoZWFkZXJPYmoiLCJwYXlsb2FkT2JqIiwiZSIsIm5vdyIsImt0eSIsIm4iLCJnZXRLZXkiLCJ4NWMiLCJnZXRQdWJsaWNLZXlGcm9tQ2VydFBFTSIsImNydiIsIngiLCJ5IiwiX3ZhbGlkYXRlSnd0IiwibWVzc2FnZSIsIkRhdGUiLCJpc3MiLCJhdWQiLCJsb3dlck5vdyIsInVwcGVyTm93IiwiaWF0IiwibmJmIiwiZXhwIiwidmVyaWZ5IiwiVXRpbCIsIlNpZ25pblJlcXVlc3QiLCJvaWRjIiwiaXNPaWRjIiwiYWRkUXVlcnlQYXJhbSIsInNwbGl0IiwiaXNPQXV0aCIsIlVybFV0aWxpdHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZVVybEZyYWdtZW50IiwiZGVsaW1pdGVyIiwiZ2xvYmFsIiwiaHJlZiIsImlkeCIsImxhc3RJbmRleE9mIiwicGFyYW1zIiwicmVnZXgiLCJtIiwiY291bnRlciIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwcm9wIiwiU2lnbmluU3RhdGUiLCJhcmd1bWVudHMiLCJfbm9uY2UiLCJzdHJpbmdpZnkiLCJjcmVhdGVkIiwic3RvcmFnZVN0cmluZyIsIlN0YXRlIiwiX2lkIiwiX2RhdGEiLCJfY3JlYXRlZCIsInN0b3JhZ2UiLCJhZ2UiLCJjdXRvZmYiLCJwcm9taXNlcyIsInAiLCJhbGwiLCJyYW5kb20iLCJndWlkSG9sZGVyIiwiaGV4IiwiciIsImd1aWRSZXNwb25zZSIsImkiLCJNYXRoIiwiT2lkY1Njb3BlIiwiU2lnbmluUmVzcG9uc2UiLCJzZXNzaW9uX3N0YXRlIiwidG9rZW5fdHlwZSIsImV4cGlyZXNfaW4iLCJleHBpcmVzX2F0Iiwic2NvcGVzIiwiU2lnbm91dFJlcXVlc3QiLCJTaWdub3V0UmVzcG9uc2UiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiU2lsZW50UmVuZXdTZXJ2aWNlQ3RvciIsIlNlc3Npb25Nb25pdG9yQ3RvciIsIlRva2VuUmV2b2NhdGlvbkNsaWVudEN0b3IiLCJfZXZlbnRzIiwiYXV0b21hdGljU2lsZW50UmVuZXciLCJfc2lsZW50UmVuZXdTZXJ2aWNlIiwibW9uaXRvclNlc3Npb24iLCJfc2Vzc2lvbk1vbml0b3IiLCJfdG9rZW5SZXZvY2F0aW9uQ2xpZW50IiwiZ2V0VXNlciIsIl9sb2FkVXNlciIsInVzZXIiLCJsb2FkIiwicmVtb3ZlVXNlciIsIl9zdG9yZVVzZXIiLCJ1bmxvYWQiLCJzaWduaW5Qb3B1cCIsInBvcHVwX3JlZGlyZWN0X3VyaSIsIl9zaWduaW4iLCJfcG9wdXBOYXZpZ2F0b3IiLCJzdGFydFVybCIsInBvcHVwV2luZG93RmVhdHVyZXMiLCJwb3B1cFdpbmRvd1RhcmdldCIsInNpZ25pblBvcHVwQ2FsbGJhY2siLCJfc2lnbmluQ2FsbGJhY2siLCJzaWduaW5TaWxlbnQiLCJzaWxlbnRfcmVkaXJlY3RfdXJpIiwic2V0SWRUb2tlbiIsIl9pZnJhbWVOYXZpZ2F0b3IiLCJzaWxlbnRSZXF1ZXN0VGltZW91dCIsInNpZ25pblNpbGVudENhbGxiYWNrIiwicXVlcnlTZXNzaW9uU3RhdHVzIiwiX3NpZ25pblN0YXJ0IiwibmF2UmVzcG9uc2UiLCJzaWduaW5SZXNwb25zZSIsInN1YiIsInNpZCIsInJldm9rZUFjY2Vzc1Rva2VuIiwiX3Jldm9rZUludGVybmFsIiwic3VjY2VzcyIsInJlcXVpcmVkIiwicmV2b2tlIiwibmF2aWdhdG9yIiwibmF2aWdhdG9yUGFyYW1zIiwiX3NpZ25pbkVuZCIsImNhbGxiYWNrIiwiX3NpZ25vdXQiLCJfc2lnbm91dFN0YXJ0IiwiX3NpZ25vdXRFbmQiLCJfc2lnbm91dENhbGxiYWNrIiwic2lnbmluUmVkaXJlY3QiLCJfcmVkaXJlY3ROYXZpZ2F0b3IiLCJzaWduaW5SZWRpcmVjdENhbGxiYWNrIiwic2lnbm91dFJlZGlyZWN0Iiwic2lnbm91dFBvcHVwIiwic2lnbm91dFJlZGlyZWN0Q2FsbGJhY2siLCJwcmVwYXJlIiwic2lnbmluUmVxdWVzdCIsIm5hdmlnYXRlIiwic2lnbm91dFJlcXVlc3QiLCJzaWdub3V0UmVzcG9uc2UiLCJfdXNlclN0b3JlIiwiX3VzZXJTdG9yZUtleSIsInJlZGlyZWN0TmF2aWdhdG9yIiwicG9wdXBOYXZpZ2F0b3IiLCJpZnJhbWVOYXZpZ2F0b3IiLCJ1c2VyU3RvcmUiLCJEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUiLCJVc2VyTWFuYWdlclNldHRpbmdzIiwiYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUiLCJfcG9wdXBfcmVkaXJlY3RfdXJpIiwiX3BvcHVwV2luZG93RmVhdHVyZXMiLCJfcG9wdXBXaW5kb3dUYXJnZXQiLCJfc2lsZW50X3JlZGlyZWN0X3VyaSIsIl9zaWxlbnRSZXF1ZXN0VGltZW91dCIsIl9hdXRvbWF0aWNTaWxlbnRSZW5ldyIsIl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSIsIl9tb25pdG9yU2Vzc2lvbiIsIlJlZGlyZWN0TmF2aWdhdG9yIiwid2luZG93IiwiUG9wdXBOYXZpZ2F0b3IiLCJwb3B1cCIsIm5vdGlmeU9wZW5lciIsIkNoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCIsIkRlZmF1bHRQb3B1cEZlYXR1cmVzIiwiRGVmYXVsdFBvcHVwVGFyZ2V0IiwiUG9wdXBXaW5kb3ciLCJfcHJvbWlzZSIsIl9yZXNvbHZlIiwiX3JlamVjdCIsIl9ib3VuZE1lc3NhZ2VFdmVudCIsIl9tZXNzYWdlIiwiYmluZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJmZWF0dXJlcyIsInRhcmdldCIsIl9wb3B1cCIsIl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIiLCJzZXRJbnRlcnZhbCIsIl9jaGVja0ZvclBvcHVwQ2xvc2VkIiwiX2Vycm9yIiwiZm9jdXMiLCJwcm9taXNlIiwiX3N1Y2Nlc3MiLCJfY2xlYW51cCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbGVhckludGVydmFsIiwiX2JvdW5kTWVzc2FnZUV2ZW50c3NhZ2UiLCJjbG9zZSIsImNsb3NlZCIsIm9yaWdpbiIsIl9vcmlnaW4iLCJzb3VyY2UiLCJvcGVuZXIiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsIklGcmFtZU5hdmlnYXRvciIsImZyYW1lIiwibm90aWZ5UGFyZW50IiwiRGVmYXVsdFRpbWVvdXQiLCJJRnJhbWVXaW5kb3ciLCJfZnJhbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInRpbWVvdXQiLCJfdGltZXIiLCJfdGltZW91dCIsInNyYyIsInJlbW92ZUNoaWxkIiwiY29udGVudFdpbmRvdyIsInBhcmVudCIsIlVzZXIiLCJVc2VyTWFuYWdlckV2ZW50cyIsIl91c2VyTG9hZGVkIiwiX3VzZXJVbmxvYWRlZCIsIl9zaWxlbnRSZW5ld0Vycm9yIiwiX3VzZXJTaWduZWRPdXQiLCJfdXNlclNlc3Npb25DaGFuZ2VkIiwicmFpc2VFdmVudCIsInJhaXNlIiwiYWRkVXNlckxvYWRlZCIsImFkZEhhbmRsZXIiLCJyZW1vdmVVc2VyTG9hZGVkIiwicmVtb3ZlSGFuZGxlciIsImFkZFVzZXJVbmxvYWRlZCIsInJlbW92ZVVzZXJVbmxvYWRlZCIsImFkZFNpbGVudFJlbmV3RXJyb3IiLCJyZW1vdmVTaWxlbnRSZW5ld0Vycm9yIiwiX3JhaXNlU2lsZW50UmVuZXdFcnJvciIsImFkZFVzZXJTaWduZWRPdXQiLCJyZW1vdmVVc2VyU2lnbmVkT3V0IiwiX3JhaXNlVXNlclNpZ25lZE91dCIsImFkZFVzZXJTZXNzaW9uQ2hhbmdlZCIsInJlbW92ZVVzZXJTZXNzaW9uQ2hhbmdlZCIsIl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCIsImFjY2Vzc1Rva2VuRXhwaXJpbmdUaW1lciIsImFjY2Vzc1Rva2VuRXhwaXJlZFRpbWVyIiwiX2FjY2Vzc1Rva2VuRXhwaXJpbmciLCJfYWNjZXNzVG9rZW5FeHBpcmVkIiwiY29udGFpbmVyIiwiX2NhbmNlbFRpbWVycyIsImV4cGlyaW5nIiwiaW5pdCIsImV4cGlyZWQiLCJjYW5jZWwiLCJhZGRBY2Nlc3NUb2tlbkV4cGlyaW5nIiwicmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyIsImFkZEFjY2Vzc1Rva2VuRXhwaXJlZCIsInJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJlZCIsIlRpbWVyIiwiX3RpbWVySGFuZGxlIiwiX2NhbGxiYWNrIiwiRXZlbnQiLCJfbmFtZSIsIl9jYWxsYmFja3MiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJTaWxlbnRSZW5ld1NlcnZpY2UiLCJ1c2VyTWFuYWdlciIsIl91c2VyTWFuYWdlciIsImV2ZW50cyIsIl90b2tlbkV4cGlyaW5nIiwiY2F0Y2giLCJlcnIiLCJTZXNzaW9uTW9uaXRvciIsIkNoZWNrU2Vzc2lvbklGcmFtZUN0b3IiLCJfQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciIsIl9zdGFydCIsIl9zdG9wIiwiX3N1YiIsIl9zaWQiLCJfY2hlY2tTZXNzaW9uSUZyYW1lIiwiaW50ZXJ2YWwiLCJfY2hlY2tTZXNzaW9uSW50ZXJ2YWwiLCJzdGFydCIsInN0b3AiLCJyYWlzZVVzZXJTaWduZWRPdXRFdmVudCIsInNlc3Npb24iLCJjaGVja1Nlc3Npb25JbnRlcnZhbCIsIkRlZmF1bHRJbnRlcnZhbCIsIl91cmwiLCJfaW50ZXJ2YWwiLCJfZnJhbWVfb3JpZ2luIiwiX3Nlc3Npb25fc3RhdGUiLCJBY2Nlc3NUb2tlblR5cGVIaW50IiwiX1hNTEh0dHBSZXF1ZXN0Q3RvciIsImFjY2Vzc1Rva2VuIiwiX3Jldm9rZSIsInhociIsIkNvcmRvdmFQb3B1cFdpbmRvdyIsIl9pc0luQXBwQnJvd3Nlckluc3RhbGxlZCIsImNvcmRvdmFNZXRhZGF0YSIsInNvbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImNvcmRvdmEiLCJJbkFwcEJyb3dzZXIiLCJfZXhpdENhbGxiYWNrRXZlbnQiLCJfZXhpdENhbGxiYWNrIiwiX2xvYWRTdGFydENhbGxiYWNrRXZlbnQiLCJfbG9hZFN0YXJ0Q2FsbGJhY2siLCJldmVudCIsIkVsZWN0cm9uUG9wdXBXaW5kb3ciLCJlbGVjdHJvbiIsImVsZWN0cm9uQ29udGFpbmVyIiwicmVtb3RlIiwiQnJvd3NlcldpbmRvdyIsImlwY01haW4iLCJvbiIsImFyZyIsInNob3ciLCJsb2FkVVJMIiwiaXNEZXN0cm95ZWQiLCJpcGNSZW5kZXJlciIsImdldEN1cnJlbnRXaW5kb3ciXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7O0FDdENBO0FBQ0E7O0FBRU8sS0FBTUEsb0JBQU0sbUJBQUFDLENBQVEsQ0FBUixDQUFaO0FBQ0EsS0FBTUMsa0NBQWEsbUJBQUFELENBQVEsQ0FBUixDQUFuQjtBQUNBLEtBQU1FLGtEQUFxQixtQkFBQUYsQ0FBUSxDQUFSLENBQTNCO0FBQ0EsS0FBTUcsc0RBQXVCLG1C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Qzs7Ozs7Ozs7Ozs7O0FDR0E7Ozs7QUFDQTs7Ozs7OzJKQUpBO0FBQ0E7O0tBS3FCN2dCLHVCOzs7Ozt1Q0FFakJvVyxPLG9CQUFRaEcsTSxFQUFRO0FBQ1osYUFBSXlILFFBQVEsa0NBQXdCekgsTUFBeEIsQ0FBWjtBQUNBLGdCQUFPak4sUUFBUVksT0FBUixDQUFnQjhULEtBQWhCLENBQVA7QUFDSCxNOzt1Q0FFRHBDLFEscUJBQVMvUyxHLEVBQUs7QUFDVix1QkFBSXRDLElBQUosQ0FBUyx5QkFBVDs7QUFFQSxhQUFJO0FBQ0EsMkNBQW9CMFgsWUFBcEIsQ0FBaUNwVixHQUFqQztBQUNBLG9CQUFPUyxRQUFRWSxPQUFSLEVBQVA7QUFDSCxVQUhELENBSUEsT0FBT2lLLENBQVAsRUFBVTtBQUNOLG9CQUFPN0ssUUFBUUMsTUFBUixDQUFlNEssQ0FBZixDQUFQO0FBQ0g7QUFDSixNOzs7OzttQkFqQmdCaE8sdUIiLCJmaWxlIjoib2lkYy1jbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJlbGVjdHJvblwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJlbGVjdHJvblwiXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZmFjdG9yeShyZXF1aXJlKFwiZWxlY3Ryb25cIikpIDogZmFjdG9yeShyb290W1wiZWxlY3Ryb25cIl0pO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV80M19fKSB7XG5yZXR1cm4gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCA1YzA2MjUxNGNhZjZjMjA2N2M3ZFxuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmV4cG9ydCBjb25zdCBMb2cgPSByZXF1aXJlKCcuL3NyYy9Mb2cnKTtcclxuZXhwb3J0IGNvbnN0IE9pZGNDbGllbnQgPSByZXF1aXJlKCcuL3NyYy9PaWRjQ2xpZW50Jyk7XHJcbmV4cG9ydCBjb25zdCBPaWRjQ2xpZW50U2V0dGluZ3MgPSByZXF1aXJlKCcuL3NyYy9PaWRjQ2xpZW50U2V0dGluZ3MnKTtcclxuZXhwb3J0IGNvbnN0IFdlYlN0b3JhZ2VTdGF0ZVN0b3JlID0gcmVxdWlyZSgnLi9zcmMvV2ViU3RvcmFnZVN0YXRlU3RvcmUnKTtcclxuZXhwb3J0IGNvbnN0IEluTWVtb3J5V2ViU3RvcmFnZSA9IHJlcXVpcmUoJy4vc3JjL0luTWVtb3J5V2ViU3RvcmFnZScpO1xyXG5leHBvcnQgY29uc3QgVXNlck1hbmFnZXIgPSByZXF1aXJlKCcuL3NyYy9Vc2VyTWFuYWdlcicpO1xyXG5leHBvcnQgY29uc3QgQWNjZXNzVG9rZW5FdmVudHMgPSByZXF1aXJlKCcuL3NyYy9BY2Nlc3NUb2tlbkV2ZW50cycpO1xyXG5leHBvcnQgY29uc3QgTWV0YWRhdGFTZXJ2aWNlID0gcmVxdWlyZSgnLi9zcmMvTWV0YWRhdGFTZXJ2aWNlJyk7XHJcbmV4cG9ydCBjb25zdCBDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3IgPSByZXF1aXJlKCcuL3NyYy9Db3Jkb3ZhUG9wdXBOYXZpZ2F0b3InKTtcclxuZXhwb3J0IGNvbnN0IENvcmRvdmFJRnJhbWVOYXZpZ2F0b3IgPSByZXF1aXJlKCcuL3NyYy9Db3Jkb3ZhSUZyYW1lTmF2aWdhdG9yJyk7XHJcbmV4cG9ydCBjb25zdCBFbGVjdHJvblBvcHVwTmF2aWdhdG9yID0gcmVxdWlyZSgnLi9zcmMvRWxlY3Ryb25Qb3B1cE5hdmlnYXRvcicpO1xyXG5leHBvcnQgY29uc3QgRWxlY3Ryb25JRnJhbWVOYXZpZ2F0b3IgPSByZXF1aXJlKCcuL3NyYy9FbGVjdHJvbklGcmFtZU5hdmlnYXRvcicpO1xyXG5leHBvcnQgY29uc3QgQ2hlY2tTZXNzaW9uSUZyYW1lID0gcmVxdWlyZSgnLi9zcmMvQ2hlY2tTZXNzaW9uSUZyYW1lJyk7XHJcbmV4cG9ydCBjb25zdCBUb2tlblJldm9jYXRpb25DbGllbnQgPSByZXF1aXJlKCcuL3NyYy9Ub2tlblJldm9jYXRpb25DbGllbnQnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIExvZyxcclxuICAgIE9pZGNDbGllbnQsXHJcbiAgICBPaWRjQ2xpZW50U2V0dGluZ3MsXHJcbiAgICBXZWJTdG9yYWdlU3RhdGVTdG9yZSxcclxuICAgIEluTWVtb3J5V2ViU3RvcmFnZSxcclxuICAgIFVzZXJNYW5hZ2VyLFxyXG4gICAgQWNjZXNzVG9rZW5FdmVudHMsXHJcbiAgICBNZXRhZGF0YVNlcnZpY2UsXHJcbiAgICBDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3IsXHJcbiAgICBDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yLFxyXG4gICAgRWxlY3Ryb25Qb3B1cE5hdmlnYXRvcixcclxuICAgIEVsZWN0cm9uSUZyYW1lTmF2aWdhdG9yLFxyXG4gICAgQ2hlY2tTZXNzaW9uSUZyYW1lLFxyXG4gICAgVG9rZW5SZXZvY2F0aW9uQ2xpZW50XHJcbn07XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vaW5kZXguanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5sZXQgbm9wTG9nZ2VyID0ge1xyXG4gICAgaW5mbygpe30sXHJcbiAgICB3YXJuKCl7fSxcclxuICAgIGVycm9yKCl7fVxyXG59O1xyXG5cclxuY29uc3QgTk9ORSA9IDA7XHJcbmNvbnN0IEVSUk9SID0gMTtcclxuY29uc3QgV0FSTiA9IDI7XHJcbmNvbnN0IElORk8gPSAzO1xyXG5cclxubGV0IGxvZ2dlcjtcclxubGV0IGxldmVsO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9nIHtcclxuICAgIHN0YXRpYyBnZXQgTk9ORSgpIHtyZXR1cm4gTk9ORX07XHJcbiAgICBzdGF0aWMgZ2V0IEVSUk9SKCkge3JldHVybiBFUlJPUn07XHJcbiAgICBzdGF0aWMgZ2V0IFdBUk4oKSB7cmV0dXJuIFdBUk59O1xyXG4gICAgc3RhdGljIGdldCBJTkZPKCkge3JldHVybiBJTkZPfTtcclxuICAgIFxyXG4gICAgc3RhdGljIHJlc2V0KCl7XHJcbiAgICAgICAgbGV2ZWwgPSBJTkZPO1xyXG4gICAgICAgIGxvZ2dlciA9IG5vcExvZ2dlcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIGdldCBsZXZlbCgpe1xyXG4gICAgICAgIHJldHVybiBsZXZlbDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzZXQgbGV2ZWwodmFsdWUpe1xyXG4gICAgICAgIGlmIChOT05FIDw9IHZhbHVlICYmIHZhbHVlIDw9IElORk8pe1xyXG4gICAgICAgICAgICBsZXZlbCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2cgbGV2ZWxcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgZ2V0IGxvZ2dlcigpe1xyXG4gICAgICAgIHJldHVybiBsb2dnZXI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc2V0IGxvZ2dlcih2YWx1ZSl7XHJcbiAgICAgICAgaWYgKHZhbHVlLmluZm8gJiYgdmFsdWUud2FybiAmJiB2YWx1ZS5lcnJvcil7XHJcbiAgICAgICAgICAgIGxvZ2dlciA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2dnZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgaW5mbyguLi5hcmdzKXtcclxuICAgICAgICBpZiAobGV2ZWwgPj0gSU5GTyl7XHJcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvLmFwcGx5KGxvZ2dlciwgQXJyYXkuZnJvbShhcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIHdhcm4oLi4uYXJncyl7XHJcbiAgICAgICAgaWYgKGxldmVsID49IFdBUk4pe1xyXG4gICAgICAgICAgICBsb2dnZXIud2Fybi5hcHBseShsb2dnZXIsIEFycmF5LmZyb20oYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBlcnJvciguLi5hcmdzKXtcclxuICAgICAgICBpZiAobGV2ZWwgPj0gRVJST1Ipe1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IuYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkxvZy5yZXNldCgpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0xvZy5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgT2lkY0NsaWVudFNldHRpbmdzIGZyb20gJy4vT2lkY0NsaWVudFNldHRpbmdzJztcclxuaW1wb3J0IEVycm9yUmVzcG9uc2UgZnJvbSAnLi9FcnJvclJlc3BvbnNlJztcclxuaW1wb3J0IFNpZ25pblJlcXVlc3QgZnJvbSAnLi9TaWduaW5SZXF1ZXN0JztcclxuaW1wb3J0IFNpZ25pblJlc3BvbnNlIGZyb20gJy4vU2lnbmluUmVzcG9uc2UnO1xyXG5pbXBvcnQgU2lnbm91dFJlcXVlc3QgZnJvbSAnLi9TaWdub3V0UmVxdWVzdCc7XHJcbmltcG9ydCBTaWdub3V0UmVzcG9uc2UgZnJvbSAnLi9TaWdub3V0UmVzcG9uc2UnO1xyXG5pbXBvcnQgU2lnbmluU3RhdGUgZnJvbSAnLi9TaWduaW5TdGF0ZSc7XHJcbmltcG9ydCBTdGF0ZSBmcm9tICcuL1N0YXRlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9pZGNDbGllbnQge1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MgPSB7fSkge1xyXG4gICAgICAgIGlmIChzZXR0aW5ncyBpbnN0YW5jZW9mIE9pZGNDbGllbnRTZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBuZXcgT2lkY0NsaWVudFNldHRpbmdzKHNldHRpbmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9zdGF0ZVN0b3JlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnN0YXRlU3RvcmU7XHJcbiAgICB9XHJcbiAgICBnZXQgX3ZhbGlkYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy52YWxpZGF0b3I7XHJcbiAgICB9XHJcbiAgICBnZXQgX21ldGFkYXRhU2VydmljZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5tZXRhZGF0YVNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNldHRpbmdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncztcclxuICAgIH1cclxuICAgIGdldCBtZXRhZGF0YVNlcnZpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTaWduaW5SZXF1ZXN0KHtcclxuICAgICAgICByZXNwb25zZV90eXBlLCBzY29wZSwgcmVkaXJlY3RfdXJpLCBcclxuICAgICAgICAvLyBkYXRhIHdhcyBtZWFudCB0byBiZSB0aGUgcGxhY2UgYSBjYWxsZXIgY291bGQgaW5kaWF0ZSB0aGUgZGF0YSB0byBcclxuICAgICAgICAvLyBoYXZlIHJvdW5kIHRyaXBwZWQsIGJ1dCBwZW9wbGUgd2VyZSBnZXR0aW5nIGNvbmZ1c2VkLCBzbyBpIGFkZGVkIHN0YXRlIChzaW5jZSB0aGF0IG1hdGNoZXMgdGhlIHNwZWMpIFxyXG4gICAgICAgIC8vIGFuZCBzbyBub3cgaWYgZGF0YSBpcyBub3QgcGFzc2VkLCBidXQgc3RhdGUgaXMgdGhlbiBzdGF0ZSB3aWxsIGJlIHVzZWRcclxuICAgICAgICBkYXRhLCBzdGF0ZSxcclxuICAgICAgICBwcm9tcHQsIGRpc3BsYXksIG1heF9hZ2UsIHVpX2xvY2FsZXMsIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQsIGFjcl92YWx1ZXMsIHJlc291cmNlfSA9IHt9LFxyXG4gICAgICAgIHN0YXRlU3RvcmVcclxuICAgICkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiT2lkY0NsaWVudC5jcmVhdGVTaWduaW5SZXF1ZXN0XCIpO1xyXG5cclxuICAgICAgICBsZXQgY2xpZW50X2lkID0gdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkO1xyXG4gICAgICAgIHJlc3BvbnNlX3R5cGUgPSByZXNwb25zZV90eXBlIHx8IHRoaXMuX3NldHRpbmdzLnJlc3BvbnNlX3R5cGU7XHJcbiAgICAgICAgc2NvcGUgPSBzY29wZSB8fCB0aGlzLl9zZXR0aW5ncy5zY29wZTtcclxuICAgICAgICByZWRpcmVjdF91cmkgPSByZWRpcmVjdF91cmkgfHwgdGhpcy5fc2V0dGluZ3MucmVkaXJlY3RfdXJpO1xyXG5cclxuICAgICAgICAvLyBpZF90b2tlbl9oaW50LCBsb2dpbl9oaW50IGFyZW4ndCBhbGxvd2VkIG9uIF9zZXR0aW5nc1xyXG4gICAgICAgIHByb21wdCA9IHByb21wdCB8fCB0aGlzLl9zZXR0aW5ncy5wcm9tcHQ7XHJcbiAgICAgICAgZGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5fc2V0dGluZ3MuZGlzcGxheTtcclxuICAgICAgICBtYXhfYWdlID0gbWF4X2FnZSB8fCB0aGlzLl9zZXR0aW5ncy5tYXhfYWdlO1xyXG4gICAgICAgIHVpX2xvY2FsZXMgPSB1aV9sb2NhbGVzIHx8IHRoaXMuX3NldHRpbmdzLnVpX2xvY2FsZXM7XHJcbiAgICAgICAgYWNyX3ZhbHVlcyA9IGFjcl92YWx1ZXMgfHwgdGhpcy5fc2V0dGluZ3MuYWNyX3ZhbHVlcztcclxuICAgICAgICByZXNvdXJjZSA9IHJlc291cmNlIHx8IHRoaXMuX3NldHRpbmdzLnJlc291cmNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBhdXRob3JpdHkgPSB0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50KCkudGhlbih1cmwgPT4ge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlJlY2VpdmVkIGF1dGhvcml6YXRpb24gZW5kcG9pbnRcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gbmV3IFNpZ25pblJlcXVlc3Qoe1xyXG4gICAgICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RfdXJpLFxyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfdHlwZSxcclxuICAgICAgICAgICAgICAgIHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSB8fCBzdGF0ZSxcclxuICAgICAgICAgICAgICAgIGF1dGhvcml0eSxcclxuICAgICAgICAgICAgICAgIHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcywgcmVzb3VyY2VcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2lnbmluU3RhdGUgPSByZXF1ZXN0LnN0YXRlO1xyXG4gICAgICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlU3RvcmUuc2V0KHNpZ25pblN0YXRlLmlkLCBzaWduaW5TdGF0ZS50b1N0b3JhZ2VTdHJpbmcoKSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvY2Vzc1NpZ25pblJlc3BvbnNlKHVybCwgc3RhdGVTdG9yZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgIHZhciByZXNwb25zZSA9IG5ldyBTaWduaW5SZXNwb25zZSh1cmwpO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIHN0YXRlIGluIHJlc3BvbnNlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc3RhdGUgaW4gcmVzcG9uc2VcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmUgfHwgdGhpcy5fc3RhdGVTdG9yZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0YXRlU3RvcmUucmVtb3ZlKHJlc3BvbnNlLnN0YXRlKS50aGVuKHN0b3JlZFN0YXRlU3RyaW5nID0+IHtcclxuICAgICAgICAgICAgaWYgKCFzdG9yZWRTdGF0ZVN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IFNpZ25pblN0YXRlLmZyb21TdG9yYWdlU3RyaW5nKHN0b3JlZFN0YXRlU3RyaW5nKTtcclxuXHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiUmVjZWl2ZWQgc3RhdGUgZnJvbSBzdG9yYWdlOyB2YWxpZGF0aW5nIHJlc3BvbnNlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTaWdub3V0UmVxdWVzdCh7aWRfdG9rZW5faGludCwgZGF0YSwgc3RhdGUsIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaX0gPSB7fSxcclxuICAgICAgICBzdGF0ZVN0b3JlXHJcbiAgICApIHtcclxuICAgICAgICBMb2cuaW5mbyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3RcIik7XHJcblxyXG4gICAgICAgIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSB8fCB0aGlzLl9zZXR0aW5ncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0RW5kU2Vzc2lvbkVuZHBvaW50KCkudGhlbih1cmwgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gZW5kIHNlc3Npb24gZW5kcG9pbnQgdXJsIHJldHVybmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gZW5kIHNlc3Npb24gZW5kcG9pbnRcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiUmVjZWl2ZWQgZW5kIHNlc3Npb24gZW5kcG9pbnRcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gbmV3IFNpZ25vdXRSZXF1ZXN0KHtcclxuICAgICAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgICAgIGlkX3Rva2VuX2hpbnQsXHJcbiAgICAgICAgICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhIHx8IHN0YXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNpZ25vdXRTdGF0ZSA9IHJlcXVlc3Quc3RhdGU7XHJcbiAgICAgICAgICAgIGlmIChzaWdub3V0U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiU2lnbm91dCByZXF1ZXN0IGhhcyBzdGF0ZSB0byBwZXJzaXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZVN0b3JlLnNldChzaWdub3V0U3RhdGUuaWQsIHNpZ25vdXRTdGF0ZS50b1N0b3JhZ2VTdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb2Nlc3NTaWdub3V0UmVzcG9uc2UodXJsLCBzdGF0ZVN0b3JlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgIHZhciByZXNwb25zZSA9IG5ldyBTaWdub3V0UmVzcG9uc2UodXJsKTtcclxuICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiTm8gc3RhdGUgaW4gcmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIExvZy53YXJuKFwiUmVzcG9uc2Ugd2FzIGVycm9yXCIsIHJlc3BvbnNlLmVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdGF0ZUtleSA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cclxuICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xyXG5cclxuICAgICAgICByZXR1cm4gc3RhdGVTdG9yZS5yZW1vdmUoc3RhdGVLZXkpLnRoZW4oc3RvcmVkU3RhdGVTdHJpbmcgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXN0b3JlZFN0YXRlU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXRlID0gU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmVkU3RhdGVTdHJpbmcpO1xyXG5cclxuICAgICAgICAgICAgTG9nLmluZm8oXCJSZWNlaXZlZCBzdGF0ZSBmcm9tIHN0b3JhZ2U7IHZhbGlkYXRpbmcgcmVzcG9uc2VcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclN0YWxlU3RhdGUoc3RhdGVTdG9yZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiT2lkY0NsaWVudC5jbGVhclN0YWxlU3RhdGVcIik7XHJcblxyXG4gICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcblxyXG4gICAgICAgIHJldHVybiBTdGF0ZS5jbGVhclN0YWxlU3RhdGUoc3RhdGVTdG9yZSwgdGhpcy5zZXR0aW5ncy5zdGFsZVN0YXRlQWdlKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9PaWRjQ2xpZW50LmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCBXZWJTdG9yYWdlU3RhdGVTdG9yZSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlJztcclxuaW1wb3J0IFJlc3BvbnNlVmFsaWRhdG9yIGZyb20gJy4vUmVzcG9uc2VWYWxpZGF0b3InO1xyXG5pbXBvcnQgTWV0YWRhdGFTZXJ2aWNlIGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlJztcclxuXHJcbmNvbnN0IE9pZGNNZXRhZGF0YVVybFBhdGggPSAnLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xyXG5cclxuY29uc3QgRGVmYXVsdFJlc3BvbnNlVHlwZSA9IFwiaWRfdG9rZW5cIjtcclxuY29uc3QgRGVmYXVsdFNjb3BlID0gXCJvcGVuaWRcIjtcclxuY29uc3QgRGVmYXVsdFN0YWxlU3RhdGVBZ2UgPSA2MDsgLy8gc2Vjb25kc1xyXG5jb25zdCBEZWZhdWx0Q2xvY2tTa2V3SW5TZWNvbmRzID0gNjAgKiA1O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2lkY0NsaWVudFNldHRpbmdzIHtcclxuICAgIGNvbnN0cnVjdG9yKHtcclxuICAgICAgICAvLyBtZXRhZGF0YSByZWxhdGVkXHJcbiAgICAgICAgYXV0aG9yaXR5LCBtZXRhZGF0YVVybCwgbWV0YWRhdGEsIHNpZ25pbmdLZXlzLFxyXG4gICAgICAgIC8vIGNsaWVudCByZWxhdGVkXHJcbiAgICAgICAgY2xpZW50X2lkLCByZXNwb25zZV90eXBlID0gRGVmYXVsdFJlc3BvbnNlVHlwZSwgc2NvcGUgPSBEZWZhdWx0U2NvcGUsXHJcbiAgICAgICAgcmVkaXJlY3RfdXJpLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXHJcbiAgICAgICAgLy8gb3B0aW9uYWwgcHJvdG9jb2xcclxuICAgICAgICBwcm9tcHQsIGRpc3BsYXksIG1heF9hZ2UsIHVpX2xvY2FsZXMsIGFjcl92YWx1ZXMsIHJlc291cmNlLFxyXG4gICAgICAgIC8vIGJlaGF2aW9yIGZsYWdzXHJcbiAgICAgICAgZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSB0cnVlLCBsb2FkVXNlckluZm8gPSB0cnVlLFxyXG4gICAgICAgIHN0YWxlU3RhdGVBZ2UgPSBEZWZhdWx0U3RhbGVTdGF0ZUFnZSwgY2xvY2tTa2V3ID0gRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyxcclxuICAgICAgICAvLyBvdGhlciBiZWhhdmlvclxyXG4gICAgICAgIHN0YXRlU3RvcmUgPSBuZXcgV2ViU3RvcmFnZVN0YXRlU3RvcmUoKSxcclxuICAgICAgICBSZXNwb25zZVZhbGlkYXRvckN0b3IgPSBSZXNwb25zZVZhbGlkYXRvcixcclxuICAgICAgICBNZXRhZGF0YVNlcnZpY2VDdG9yID0gTWV0YWRhdGFTZXJ2aWNlXHJcbiAgICB9ID0ge30pIHtcclxuXHJcbiAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gbWV0YWRhdGFVcmw7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuICAgICAgICB0aGlzLl9zaWduaW5nS2V5cyA9IHNpZ25pbmdLZXlzO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGllbnRfaWQgPSBjbGllbnRfaWQ7XHJcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGU7XHJcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBzY29wZTtcclxuICAgICAgICB0aGlzLl9yZWRpcmVjdF91cmkgPSByZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG5cclxuICAgICAgICB0aGlzLl9wcm9tcHQgPSBwcm9tcHQ7XHJcbiAgICAgICAgdGhpcy5fZGlzcGxheSA9IGRpc3BsYXk7XHJcbiAgICAgICAgdGhpcy5fbWF4X2FnZSA9IG1heF9hZ2U7XHJcbiAgICAgICAgdGhpcy5fdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXM7XHJcbiAgICAgICAgdGhpcy5fYWNyX3ZhbHVlcyA9IGFjcl92YWx1ZXM7XHJcbiAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSByZXNvdXJjZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSAhIWZpbHRlclByb3RvY29sQ2xhaW1zO1xyXG4gICAgICAgIHRoaXMuX2xvYWRVc2VySW5mbyA9ICEhbG9hZFVzZXJJbmZvO1xyXG4gICAgICAgIHRoaXMuX3N0YWxlU3RhdGVBZ2UgPSBzdGFsZVN0YXRlQWdlO1xyXG4gICAgICAgIHRoaXMuX2Nsb2NrU2tldyA9IGNsb2NrU2tldztcclxuXHJcbiAgICAgICAgdGhpcy5fc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmU7XHJcbiAgICAgICAgdGhpcy5fdmFsaWRhdG9yID0gbmV3IFJlc3BvbnNlVmFsaWRhdG9yQ3Rvcih0aGlzKTtcclxuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UgPSBuZXcgTWV0YWRhdGFTZXJ2aWNlQ3Rvcih0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjbGllbnQgY29uZmlnXHJcbiAgICBnZXQgY2xpZW50X2lkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgY2xpZW50X2lkKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jbGllbnRfaWQpIHtcclxuICAgICAgICAgICAgLy8gb25lLXRpbWUgc2V0IG9ubHlcclxuICAgICAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJjbGllbnRfaWQgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2xpZW50X2lkIGhhcyBhbHJlYWR5IGJlZW4gYXNzaWduZWQuXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IHJlc3BvbnNlX3R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlX3R5cGU7XHJcbiAgICB9XHJcbiAgICBnZXQgc2NvcGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlZGlyZWN0X3VyaSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3RfdXJpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBvcHRpb25hbCBwcm90b2NvbCBwYXJhbXNcclxuICAgIGdldCBwcm9tcHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21wdDtcclxuICAgIH1cclxuICAgIGdldCBkaXNwbGF5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5O1xyXG4gICAgfVxyXG4gICAgZ2V0IG1heF9hZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heF9hZ2U7XHJcbiAgICB9XHJcbiAgICBnZXQgdWlfbG9jYWxlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdWlfbG9jYWxlcztcclxuICAgIH1cclxuICAgIGdldCBhY3JfdmFsdWVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3JfdmFsdWVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlc291cmNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gbWV0YWRhdGFcclxuICAgIGdldCBhdXRob3JpdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dGhvcml0eTtcclxuICAgIH1cclxuICAgIHNldCBhdXRob3JpdHkodmFsdWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2F1dGhvcml0eSkge1xyXG4gICAgICAgICAgICAvLyBvbmUtdGltZSBzZXQgb25seVxyXG4gICAgICAgICAgICB0aGlzLl9hdXRob3JpdHkgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcImF1dGhvcml0eSBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhdXRob3JpdHkgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgbWV0YWRhdGFVcmwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9tZXRhZGF0YVVybCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCA9IHRoaXMuYXV0aG9yaXR5O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsICYmIHRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoT2lkY01ldGFkYXRhVXJsUGF0aCkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWV0YWRhdGFVcmxbdGhpcy5fbWV0YWRhdGFVcmwubGVuZ3RoIC0gMV0gIT09ICcvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsICs9ICcvJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsICs9IE9pZGNNZXRhZGF0YVVybFBhdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVVybDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzZXR0YWJsZS9jYWNoYWJsZSBtZXRhZGF0YSB2YWx1ZXNcclxuICAgIGdldCBtZXRhZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGE7XHJcbiAgICB9XHJcbiAgICBzZXQgbWV0YWRhdGEodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzaWduaW5nS2V5cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluZ0tleXM7XHJcbiAgICB9XHJcbiAgICBzZXQgc2lnbmluZ0tleXModmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9zaWduaW5nS2V5cyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGJlaGF2aW9yIGZsYWdzXHJcbiAgICBnZXQgZmlsdGVyUHJvdG9jb2xDbGFpbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlclByb3RvY29sQ2xhaW1zO1xyXG4gICAgfVxyXG4gICAgZ2V0IGxvYWRVc2VySW5mbygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXJJbmZvO1xyXG4gICAgfVxyXG4gICAgZ2V0IHN0YWxlU3RhdGVBZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YWxlU3RhdGVBZ2U7XHJcbiAgICB9XHJcbiAgICBnZXQgY2xvY2tTa2V3KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9ja1NrZXc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0YXRlU3RvcmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlU3RvcmU7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsaWRhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0b3I7XHJcbiAgICB9XHJcbiAgICBnZXQgbWV0YWRhdGFTZXJ2aWNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2U7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvT2lkY0NsaWVudFNldHRpbmdzLmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCBHbG9iYWwgZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViU3RvcmFnZVN0YXRlU3RvcmUge1xyXG4gICAgY29uc3RydWN0b3Ioe3ByZWZpeCA9IFwib2lkYy5cIiwgc3RvcmUgPSBHbG9iYWwubG9jYWxTdG9yYWdlfSA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy5fc3RvcmUgPSBzdG9yZTtcclxuICAgICAgICB0aGlzLl9wcmVmaXggPSBwcmVmaXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KGtleSwgdmFsdWUpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIldlYlN0b3JhZ2VTdGF0ZVN0b3JlLnNldFwiLCBrZXkpO1xyXG5cclxuICAgICAgICBrZXkgPSB0aGlzLl9wcmVmaXggKyBrZXk7XHJcblxyXG4gICAgICAgIHRoaXMuX3N0b3JlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIldlYlN0b3JhZ2VTdGF0ZVN0b3JlLmdldFwiLCBrZXkpO1xyXG5cclxuICAgICAgICBrZXkgPSB0aGlzLl9wcmVmaXggKyBrZXk7XHJcblxyXG4gICAgICAgIGxldCBpdGVtID0gdGhpcy5fc3RvcmUuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKGtleSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUucmVtb3ZlXCIsIGtleSk7XHJcblxyXG4gICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcclxuXHJcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9zdG9yZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmUucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWxsS2V5cygpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIldlYlN0b3JhZ2VTdGF0ZVN0b3JlLmdldEFsbEtleXNcIik7XHJcblxyXG4gICAgICAgIHZhciBrZXlzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9zdG9yZS5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgbGV0IGtleSA9IHRoaXMuX3N0b3JlLmtleShpbmRleCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YodGhpcy5fcHJlZml4KSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleS5zdWJzdHIodGhpcy5fcHJlZml4Lmxlbmd0aCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoa2V5cyk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvV2ViU3RvcmFnZVN0YXRlU3RvcmUuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5jb25zdCB0aW1lciA9IHtcclxuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChjYiwgZHVyYXRpb24pIHtcclxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChjYiwgZHVyYXRpb24pO1xyXG4gICAgfSxcclxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xyXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQoaGFuZGxlKTtcclxuICAgIH1cclxufTtcclxuXHJcbmxldCB0ZXN0aW5nID0gZmFsc2U7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHbG9iYWwge1xyXG5cclxuICAgIHN0YXRpYyBfdGVzdGluZygpIHtcclxuICAgICAgICB0ZXN0aW5nID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0IGxvY2F0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGVzdGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldCBsb2NhbFN0b3JhZ2UoKSB7XHJcbiAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldCBzZXNzaW9uU3RvcmFnZSgpIHtcclxuICAgICAgICBpZiAoIXRlc3RpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXQgWE1MSHR0cFJlcXVlc3QoKSB7XHJcbiAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBYTUxIdHRwUmVxdWVzdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0IHRpbWVyKCkge1xyXG4gICAgICAgIGlmICghdGVzdGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9HbG9iYWwuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuaW1wb3J0IE1ldGFkYXRhU2VydmljZSBmcm9tICcuL01ldGFkYXRhU2VydmljZSc7XHJcbmltcG9ydCBVc2VySW5mb1NlcnZpY2UgZnJvbSAnLi9Vc2VySW5mb1NlcnZpY2UnO1xyXG5pbXBvcnQgRXJyb3JSZXNwb25zZSBmcm9tICcuL0Vycm9yUmVzcG9uc2UnO1xyXG5pbXBvcnQgSm9zZVV0aWwgZnJvbSAnLi9Kb3NlVXRpbCc7XHJcblxyXG5jb25zdCBQcm90b2NvbENsYWltcyA9IFtcIm5vbmNlXCIsIFwiYXRfaGFzaFwiLCBcImlhdFwiLCBcIm5iZlwiLCBcImV4cFwiLCBcImF1ZFwiLCBcImlzc1wiLCBcImNfaGFzaFwiXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3BvbnNlVmFsaWRhdG9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IE1ldGFkYXRhU2VydmljZSwgVXNlckluZm9TZXJ2aWNlQ3RvciA9IFVzZXJJbmZvU2VydmljZSwgam9zZVV0aWwgPSBKb3NlVXRpbCkge1xyXG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gc2V0dGluZ3MgcGFzc2VkIHRvIFJlc3BvbnNlVmFsaWRhdG9yXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJJbmZvU2VydmljZSA9IG5ldyBVc2VySW5mb1NlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcclxuICAgICAgICB0aGlzLl9qb3NlVXRpbCA9IGpvc2VVdGlsO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlU2lnbmluUmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlXCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc1NpZ25pblBhcmFtcyhzdGF0ZSwgcmVzcG9uc2UpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcInN0YXRlIHByb2Nlc3NlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlVG9rZW5zKHN0YXRlLCByZXNwb25zZSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInRva2VucyB2YWxpZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0NsYWltcyhyZXNwb25zZSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJjbGFpbXMgcHJvY2Vzc2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZVNpZ25vdXRSZXNwb25zZShzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbm91dFJlc3BvbnNlXCIpO1xyXG5cclxuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlN0YXRlIGRvZXMgbm90IG1hdGNoXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcclxuICAgICAgICAvLyBhbmQgc2V0IGl0IGludG8gdGhlIHJlc3BvbnNlIHNvIGNhbGxlcnMgY2FuIGdldCB0aGVpciBzdGF0ZVxyXG4gICAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGZvciBib3RoIHN1Y2Nlc3MgJiBlcnJvciBvdXRjb21lc1xyXG4gICAgICAgIExvZy5pbmZvKFwic3RhdGUgdmFsaWRhdGVkXCIpO1xyXG4gICAgICAgIHJlc3BvbnNlLnN0YXRlID0gc3RhdGUuZGF0YTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIExvZy53YXJuKFwiUmVzcG9uc2Ugd2FzIGVycm9yXCIsIHJlc3BvbnNlLmVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfcHJvY2Vzc1NpZ25pblBhcmFtcyhzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zXCIpO1xyXG5cclxuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlN0YXRlIGRvZXMgbm90IG1hdGNoXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXN0YXRlLmNsaWVudF9pZCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBjbGllbnRfaWQgb24gc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBjbGllbnRfaWQgb24gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXN0YXRlLmF1dGhvcml0eSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBhdXRob3JpdHkgb24gc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBhdXRob3JpdHkgb24gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyB0aGlzIGFsbG93cyB0aGUgYXV0aG9yaXR5IHRvIGJlIGxvYWRlZCBmcm9tIHRoZSBzaWduaW4gc3RhdGVcclxuICAgICAgICBpZiAoIXRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkgPSBzdGF0ZS5hdXRob3JpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVuc3VyZSB3ZSdyZSB1c2luZyB0aGUgY29ycmVjdCBhdXRob3JpdHkgaWYgdGhlIGF1dGhvcml0eSBpcyBub3QgbG9hZGVkIGZyb20gc2lnbmluIHN0YXRlXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5ICYmIHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSAhPT0gc3RhdGUuYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcImF1dGhvcml0eSBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiYXV0aG9yaXR5IG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzIGFsbG93cyB0aGUgY2xpZW50X2lkIHRvIGJlIGxvYWRlZCBmcm9tIHRoZSBzaWduaW4gc3RhdGVcclxuICAgICAgICBpZiAoIXRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQgPSBzdGF0ZS5jbGllbnRfaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVuc3VyZSB3ZSdyZSB1c2luZyB0aGUgY29ycmVjdCBjbGllbnRfaWQgaWYgdGhlIGNsaWVudF9pZCBpcyBub3QgbG9hZGVkIGZyb20gc2lnbmluIHN0YXRlXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkICYmIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCAhPT0gc3RhdGUuY2xpZW50X2lkKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcImNsaWVudF9pZCBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiY2xpZW50X2lkIG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBub3cgdGhhdCB3ZSBrbm93IHRoZSBzdGF0ZSBtYXRjaGVzLCB0YWtlIHRoZSBzdG9yZWQgZGF0YVxyXG4gICAgICAgIC8vIGFuZCBzZXQgaXQgaW50byB0aGUgcmVzcG9uc2Ugc28gY2FsbGVycyBjYW4gZ2V0IHRoZWlyIHN0YXRlXHJcbiAgICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgZm9yIGJvdGggc3VjY2VzcyAmIGVycm9yIG91dGNvbWVzXHJcbiAgICAgICAgTG9nLmluZm8oXCJzdGF0ZSB2YWxpZGF0ZWRcIik7XHJcbiAgICAgICAgcmVzcG9uc2Uuc3RhdGUgPSBzdGF0ZS5kYXRhO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgTG9nLndhcm4oXCJSZXNwb25zZSB3YXMgZXJyb3JcIiwgcmVzcG9uc2UuZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdGF0ZS5ub25jZSAmJiAhcmVzcG9uc2UuaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiRXhwZWN0aW5nIGlkX3Rva2VuIGluIHJlc3BvbnNlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW4gaW4gcmVzcG9uc2VcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdGF0ZS5ub25jZSAmJiByZXNwb25zZS5pZF90b2tlbikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJOb3QgZXhwZWN0aW5nIGlkX3Rva2VuIGluIHJlc3BvbnNlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBpZF90b2tlbiBpbiByZXNwb25zZVwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfcHJvY2Vzc0NsYWltcyhyZXNwb25zZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXNcIik7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZS5pc09wZW5JZENvbm5lY3QpIHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJyZXNwb25zZSBpcyBPSURDLCBwcm9jZXNzaW5nIGNsYWltc1wiKTtcclxuXHJcbiAgICAgICAgICAgIHJlc3BvbnNlLnByb2ZpbGUgPSB0aGlzLl9maWx0ZXJQcm90b2NvbENsYWltcyhyZXNwb25zZS5wcm9maWxlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5sb2FkVXNlckluZm8gJiYgcmVzcG9uc2UuYWNjZXNzX3Rva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcImxvYWRpbmcgdXNlciBpbmZvXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mb1NlcnZpY2UuZ2V0Q2xhaW1zKHJlc3BvbnNlLmFjY2Vzc190b2tlbikudGhlbihjbGFpbXMgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5wcm9maWxlID0gdGhpcy5fbWVyZ2VDbGFpbXMocmVzcG9uc2UucHJvZmlsZSwgY2xhaW1zKTtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInVzZXIgaW5mbyBjbGFpbXMgcmVjZWl2ZWQsIHVwZGF0ZWQgcHJvZmlsZTpcIiwgcmVzcG9uc2UucHJvZmlsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJub3QgbG9hZGluZyB1c2VyIGluZm9cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwicmVzcG9uc2UgaXMgbm90IE9JREMsIG5vdCBwcm9jZXNzaW5nIGNsYWltc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIF9tZXJnZUNsYWltcyhjbGFpbXMxLCBjbGFpbXMyKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIGNsYWltczEpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIGNsYWltczIpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGNsYWltczJbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbdmFsdWVzXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdFtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHRbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtuYW1lXS5pbmRleE9mKHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdFtuYW1lXSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBbcmVzdWx0W25hbWVdLCB2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgX2ZpbHRlclByb3RvY29sQ2xhaW1zKGNsYWltcykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlclByb3RvY29sQ2xhaW1zLCBpbmNvbWluZyBjbGFpbXM6XCIsIGNsYWltcyk7XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjbGFpbXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuX2ZpbHRlclByb3RvY29sQ2xhaW1zKSB7XHJcbiAgICAgICAgICAgIFByb3RvY29sQ2xhaW1zLmZvckVhY2godHlwZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W3R5cGVdO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwicHJvdG9jb2wgY2xhaW1zIGZpbHRlcmVkXCIsIHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcInByb3RvY29sIGNsYWltcyBub3QgZmlsdGVyZWRcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgX3ZhbGlkYXRlVG9rZW5zKHN0YXRlLCByZXNwb25zZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zXCIpO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UuaWRfdG9rZW4pIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5hY2Nlc3NfdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVmFsaWRhdGluZyBpZF90b2tlbiBhbmQgYWNjZXNzX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbkFuZEFjY2Vzc1Rva2VuKHN0YXRlLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVmFsaWRhdGluZyBpZF90b2tlblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgTG9nLmluZm8oXCJObyBpZF90b2tlbiB0byB2YWxpZGF0ZVwiKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW5cIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZUlkVG9rZW4oc3RhdGUsIHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlQWNjZXNzVG9rZW4ocmVzcG9uc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF92YWxpZGF0ZUlkVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXN0YXRlLm5vbmNlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIG5vbmNlIG9uIHN0YXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gbm9uY2Ugb24gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsZXQgand0ID0gdGhpcy5fam9zZVV0aWwucGFyc2VKd3QocmVzcG9uc2UuaWRfdG9rZW4pO1xyXG4gICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyIHx8ICFqd3QucGF5bG9hZCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIiwgand0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhdGUubm9uY2UgIT09IGp3dC5wYXlsb2FkLm5vbmNlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBraWQgPSBqd3QuaGVhZGVyLmtpZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRJc3N1ZXIoKS50aGVuKGlzc3VlciA9PiB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiUmVjZWl2ZWQgaXNzdWVyXCIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5cygpLnRoZW4oa2V5cyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWtleXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lnbmluZyBrZXlzIGZyb20gbWV0YWRhdGFcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiUmVjZWl2ZWQgc2lnbmluZyBrZXlzXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFraWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIGtpZCBmb3VuZCBpbiBpZF90b2tlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGtpZCBmb3VuZCBpbiBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2lkIGlzIG1hbmRhdG9yeSBvbmx5IHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGtleXMgaW4gdGhlIHJlZmVyZW5jZWQgSldLIFNldCBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cDovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNTaWduaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpZCA9IGtleXNbMF0ua2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0ga2V5cy5maWx0ZXIoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5LmtpZCA9PT0ga2lkO1xyXG4gICAgICAgICAgICAgICAgfSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBrZXkgbWF0Y2hpbmcga2lkIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2V5IG1hdGNoaW5nIGtpZCBmb3VuZCBpbiBzaWduaW5nIGtleXNcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBhdWRpZW5jZSA9IHN0YXRlLmNsaWVudF9pZDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IGNsb2NrU2tld0luU2Vjb25kcyA9IHRoaXMuX3NldHRpbmdzLmNsb2NrU2tldztcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVmFsaWRhaW5nIEpXVDsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLCBjbG9ja1NrZXdJblNlY29uZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9qb3NlVXRpbC52YWxpZGF0ZUp3dChyZXNwb25zZS5pZF90b2tlbiwga2V5LCBpc3N1ZXIsIGF1ZGllbmNlLCBjbG9ja1NrZXdJblNlY29uZHMpLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIkpXVCB2YWxpZGF0aW9uIHN1Y2Nlc3NmdWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IGp3dC5wYXlsb2FkO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfdmFsaWRhdGVBY2Nlc3NUb2tlbihyZXNwb25zZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW5cIik7XHJcblxyXG4gICAgICAgIGlmICghcmVzcG9uc2UucHJvZmlsZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBwcm9maWxlIGxvYWRlZCBmcm9tIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcHJvZmlsZSBsb2FkZWQgZnJvbSBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBhdF9oYXNoIGluIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gYXRfaGFzaCBpbiBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLmlkX3Rva2VuKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW5cIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGp3dCA9IHRoaXMuX2pvc2VVdGlsLnBhcnNlSnd0KHJlc3BvbnNlLmlkX3Rva2VuKTtcclxuICAgICAgICBpZiAoIWp3dCB8fCAhand0LmhlYWRlcikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIiwgand0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaGFzaEFsZyA9IGp3dC5oZWFkZXIuYWxnO1xyXG4gICAgICAgIGlmICghaGFzaEFsZyB8fCBoYXNoQWxnLmxlbmd0aCAhPT0gNSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6XCIsIGhhc2hBbGcpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOiBcIiArIGhhc2hBbGcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBoYXNoQml0cyA9IGhhc2hBbGcuc3Vic3RyKDIsIDMpO1xyXG4gICAgICAgIGlmICghaGFzaEJpdHMpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOlwiLCBoYXNoQWxnLCBoYXNoQml0cyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiICsgaGFzaEFsZykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGFzaEJpdHMgPSBwYXJzZUludChoYXNoQml0cyk7XHJcbiAgICAgICAgaWYgKGhhc2hCaXRzICE9PSAyNTYgJiYgaGFzaEJpdHMgIT09IDM4NCAmJiBoYXNoQml0cyAhPT0gNTEyKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVuc3VwcG9ydGVkIGFsZzpcIiwgaGFzaEFsZywgaGFzaEJpdHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOiBcIiArIGhhc2hBbGcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzaGEgPSBcInNoYVwiICsgaGFzaEJpdHM7XHJcbiAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9qb3NlVXRpbC5oYXNoU3RyaW5nKHJlc3BvbnNlLmFjY2Vzc190b2tlbiwgc2hhKTtcclxuICAgICAgICBpZiAoIWhhc2gpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiYWNjZXNzX3Rva2VuIGhhc2ggZmFpbGVkOlwiLCBzaGEpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGxlZnQgPSBoYXNoLnN1YnN0cigwLCBoYXNoLmxlbmd0aCAvIDIpO1xyXG4gICAgICAgIHZhciBsZWZ0X2I2NHUgPSB0aGlzLl9qb3NlVXRpbC5oZXhUb0Jhc2U2NFVybChsZWZ0KTtcclxuICAgICAgICBpZiAobGVmdF9iNjR1ICE9PSByZXNwb25zZS5wcm9maWxlLmF0X2hhc2gpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIiwgbGVmdF9iNjR1LCByZXNwb25zZS5wcm9maWxlLmF0X2hhc2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICB9XHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9SZXNwb25zZVZhbGlkYXRvci5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgSnNvblNlcnZpY2UgZnJvbSAnLi9Kc29uU2VydmljZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXRhZGF0YVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBzZXR0aW5ncyBwYXNzZWQgdG8gTWV0YWRhdGFTZXJ2aWNlXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWV0YWRhdGEoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGFcIik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlJldHVybmluZyBtZXRhZGF0YSBmcm9tIHNldHRpbmdzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fc2V0dGluZ3MubWV0YWRhdGFVcmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gbWV0YWRhdGFVcmwgY29uZmlndXJlZCBvbiBzZXR0aW5nc1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIG1ldGFkYXRhVXJsIGNvbmZpZ3VyZWQgb24gc2V0dGluZ3NcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgTG9nLmluZm8oXCJnZXR0aW5nIG1ldGFkYXRhIGZyb21cIiwgdGhpcy5fc2V0dGluZ3MubWV0YWRhdGFVcmwpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YVVybClcclxuICAgICAgICAgICAgLnRoZW4obWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJqc29uIHJlY2VpdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MubWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldElzc3VlcigpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5nZXRJc3N1ZXJcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJpc3N1ZXJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50KCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiTWV0YWRhdGFTZXJ2aWNlLmdldEF1dGhvcml6YXRpb25FbmRwb2ludFwiKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImF1dGhvcml6YXRpb25fZW5kcG9pbnRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckluZm9FbmRwb2ludCgpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5nZXRVc2VySW5mb0VuZHBvaW50XCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidXNlcmluZm9fZW5kcG9pbnRcIik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldENoZWNrU2Vzc2lvbklmcmFtZSgpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5nZXRDaGVja1Nlc3Npb25JZnJhbWVcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJjaGVja19zZXNzaW9uX2lmcmFtZVwiLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbmRTZXNzaW9uRW5kcG9pbnQoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuZ2V0RW5kU2Vzc2lvbkVuZHBvaW50XCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiZW5kX3Nlc3Npb25fZW5kcG9pbnRcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmV2b2NhdGlvbkVuZHBvaW50KCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFJldm9jYXRpb25FbmRwb2ludFwiKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInJldm9jYXRpb25fZW5kcG9pbnRcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldE1ldGFkYXRhUHJvcGVydHkobmFtZSwgb3B0aW9uYWw9ZmFsc2UpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5fZ2V0TWV0YWRhdGFQcm9wZXJ0eVwiLCBuYW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWV0YWRhdGEoKS50aGVuKG1ldGFkYXRhID0+IHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJtZXRhZGF0YSByZWNpZXZlZFwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLndhcm4oXCJNZXRhZGF0YSBkb2VzIG5vdCBjb250YWluIG9wdGlvbmFsIHByb3BlcnR5IFwiICsgbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gcHJvcGVydHkgXCIgKyBuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBkb2VzIG5vdCBjb250YWluIHByb3BlcnR5IFwiICsgbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YVtuYW1lXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTaWduaW5nS2V5cygpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5c1wiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLnNpZ25pbmdLZXlzKSB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiUmV0dXJuaW5nIHNpZ25pbmdLZXlzIGZyb20gc2V0dGluZ3NcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJqd2tzX3VyaVwiKS50aGVuKGp3a3NfdXJpID0+IHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJqd2tzX3VyaSByZWNlaXZlZFwiLCBqd2tzX3VyaSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbihqd2tzX3VyaSkudGhlbihrZXlTZXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJrZXkgc2V0IHJlY2VpdmVkXCIsIGtleVNldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFrZXlTZXQua2V5cykge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBrZXlzIG9uIGtleXNldFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRLZXlzID0gdGhpcy5fZmlsdGVyU2lnbmluZ0tleXMoa2V5U2V0LmtleXMpO1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJmaWx0ZXJlZCBrZXlzXCIsIGZpbHRlcmVkS2V5cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMgPSBmaWx0ZXJlZEtleXM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9maWx0ZXJTaWduaW5nS2V5cyhrZXlzKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuX2ZpbHRlclNpZ25pbmdLZXlzXCIsIGtleXMpO1xyXG5cclxuICAgICAgICByZXR1cm4ga2V5cy5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnVzZSA9PT0gXCJzaWdcIjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9NZXRhZGF0YVNlcnZpY2UuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuaW1wb3J0IEdsb2JhbCBmcm9tICcuL0dsb2JhbCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKc29uU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihYTUxIdHRwUmVxdWVzdEN0b3IgPSBHbG9iYWwuWE1MSHR0cFJlcXVlc3QpIHtcclxuICAgICAgICB0aGlzLl9YTUxIdHRwUmVxdWVzdCA9IFhNTEh0dHBSZXF1ZXN0Q3RvcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0SnNvbih1cmwsIHRva2VuKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJKc29uU2VydmljZS5nZXRKc29uXCIsIHVybCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF1cmwpe1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyB1cmwgcGFzc2VkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1cmxcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgcmVxID0gbmV3IHRoaXMuX1hNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwpO1xyXG5cclxuICAgICAgICAgICAgcmVxLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVxLnN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKHJlcS5zdGF0dXNUZXh0ICsgXCIgKFwiICsgcmVxLnN0YXR1cyArIFwiKVwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwibmV0d29yayBlcnJvclwiKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInRva2VuIHBhc3NlZCwgc2V0dGluZyBBdXRob3JpemF0aW9uIGhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciBcIiArIHRva2VuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVxLnNlbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0pzb25TZXJ2aWNlLmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IEpzb25TZXJ2aWNlIGZyb20gJy4vSnNvblNlcnZpY2UnO1xyXG5pbXBvcnQgTWV0YWRhdGFTZXJ2aWNlIGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlJztcclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mb1NlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlLCBNZXRhZGF0YVNlcnZpY2VDdG9yID0gTWV0YWRhdGFTZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBzZXR0aW5ncyBwYXNzZWQgdG8gVXNlckluZm9TZXJ2aWNlXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKCk7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENsYWltcyh0b2tlbikge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltc1wiKTtcclxuXHJcbiAgICAgICAgaWYgKCF0b2tlbikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyB0b2tlbiBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIHRva2VuIGlzIHJlcXVpcmVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0VXNlckluZm9FbmRwb2ludCgpLnRoZW4odXJsID0+IHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJyZWNlaXZlZCB1c2VyaW5mbyB1cmxcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uU2VydmljZS5nZXRKc29uKHVybCwgdG9rZW4pLnRoZW4oY2xhaW1zID0+IHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiY2xhaW1zIHJlY2VpdmVkXCIsIGNsYWltcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9Vc2VySW5mb1NlcnZpY2UuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9yUmVzcG9uc2UgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7ZXJyb3IsIGVycm9yX2Rlc2NyaXB0aW9uLCBlcnJvcl91cmksIHN0YXRlfT17fVxyXG4gICAgKSB7XHJcbiAgICAgICAgIGlmICghZXJyb3Ipe1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBlcnJvciBwYXNzZWQgdG8gRXJyb3JSZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXJyb3JcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHN1cGVyKGVycm9yX2Rlc2NyaXB0aW9uIHx8IGVycm9yKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIkVycm9yUmVzcG9uc2VcIjsgXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSBlcnJvcl9kZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLmVycm9yX3VyaSA9IGVycm9yX3VyaTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvRXJyb3JSZXNwb25zZS5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IGp3cywgS0VZVVRJTCBhcyBLZXlVdGlsLCBYNTA5LCBjcnlwdG8sIGhleHRvYjY0dSB9IGZyb20gJ2pzcnNhc2lnbic7XHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5cclxuY29uc3QgQWxsb3dlZFNpZ25pbmdBbGdzID0gWydSUzI1NicsICdSUzM4NCcsICdSUzUxMicsICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicsICdFUzI1NicsICdFUzM4NCcsICdFUzUxMiddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSm9zZVV0aWwge1xyXG5cclxuICAgIHN0YXRpYyBwYXJzZUp3dChqd3QpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIkpvc2VVdGlsLnBhcnNlSnd0XCIpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IGp3cy5KV1MucGFyc2Uoand0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogdG9rZW4uaGVhZGVyT2JqLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogdG9rZW4ucGF5bG9hZE9ialxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHZhbGlkYXRlSnd0KGp3dCwga2V5LCBpc3N1ZXIsIGF1ZGllbmNlLCBjbG9ja1NrZXcsIG5vdykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiSm9zZVV0aWwudmFsaWRhdGVKd3RcIik7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkua3R5ID09PSBcIlJTQVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmUgJiYga2V5Lm4pIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBLZXlVdGlsLmdldEtleShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5Lng1YyAmJiBrZXkueDVjLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IEtleVV0aWwuZ2V0S2V5KFg1MDkuZ2V0UHVibGljS2V5RnJvbUNlcnRQRU0oa2V5Lng1Y1swXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiUlNBIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJSU0Ega2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkua3R5ID09PSBcIkVDXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkuY3J2ICYmIGtleS54ICYmIGtleS55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gS2V5VXRpbC5nZXRLZXkoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkVDIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJFQyBrZXkgbWlzc2luZyBrZXkgbWF0ZXJpYWxcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVW5zdXBwb3J0ZWQga2V5IHR5cGVcIiwga2V5ICYmIGtleS5rdHkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGtleSB0eXBlOiBcIiArIGtleSAmJiBrZXkua3R5KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBKb3NlVXRpbC5fdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKGUgJiYgZS5tZXNzYWdlIHx8IGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJKV1QgdmFsaWRhdGlvbiBmYWlsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBfdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93KSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3RcIik7XHJcblxyXG4gICAgICAgIGlmICghY2xvY2tTa2V3KSB7XHJcbiAgICAgICAgICAgIGNsb2NrU2tldyA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW5vdykge1xyXG4gICAgICAgICAgICBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcGF5bG9hZCA9IEpvc2VVdGlsLnBhcnNlSnd0KGp3dCkucGF5bG9hZDtcclxuXHJcbiAgICAgICAgaWYgKHBheWxvYWQuaXNzICE9PSBpc3N1ZXIpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSW52YWxpZCBpc3N1ZXIgaW4gdG9rZW5cIiwgcGF5bG9hZC5pc3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBpc3N1ZXIgaW4gdG9rZW46IFwiICsgcGF5bG9hZC5pc3MpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXlsb2FkLmF1ZCAhPT0gYXVkaWVuY2UpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSW52YWxpZCBhdWRpZW5jZSBpbiB0b2tlblwiLCBwYXlsb2FkLmF1ZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGF1ZGllbmNlIGluIHRva2VuOiBcIiArIHBheWxvYWQuYXVkKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbG93ZXJOb3cgPSBub3cgKyBjbG9ja1NrZXc7XHJcbiAgICAgICAgdmFyIHVwcGVyTm93ID0gbm93IC0gY2xvY2tTa2V3O1xyXG5cclxuICAgICAgICBpZiAobG93ZXJOb3cgPCBwYXlsb2FkLmlhdCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJpYXQgaXMgaW4gdGhlIGZ1dHVyZVwiLCBwYXlsb2FkLmlhdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpYXQgaXMgaW4gdGhlIGZ1dHVyZTogXCIgKyBwYXlsb2FkLmlhdCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxvd2VyTm93IDwgcGF5bG9hZC5uYmYpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwibmJmIGlzIGluIHRoZSBmdXR1cmVcIiwgcGF5bG9hZC5uYmYpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwibmJmIGlzIGluIHRoZSBmdXR1cmU6IFwiICsgcGF5bG9hZC5uYmYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXlsb2FkLmV4cCA8IHVwcGVyTm93KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcImV4cCBpcyBpbiB0aGUgcGFzdFwiLCBwYXlsb2FkLmV4cCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJleHAgaXMgaW4gdGhlIHBhc3Q6XCIgKyBwYXlsb2FkLmV4cCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKCFqd3MuSldTLnZlcmlmeShqd3QsIGtleSwgQWxsb3dlZFNpZ25pbmdBbGdzKSkge1xyXG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNpZ25hdHVyZSB2YWxpZGF0aW9uIGZhaWxlZFwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKGUgJiYgZS5tZXNzYWdlIHx8IGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGFzaFN0cmluZyh2YWx1ZSwgYWxnKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJKb3NlVXRpbC5oYXNoU3RyaW5nXCIsIHZhbHVlLCBhbGcpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG8uVXRpbC5oYXNoU3RyaW5nKHZhbHVlLCBhbGcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBoZXhUb0Jhc2U2NFVybCh2YWx1ZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiSm9zZVV0aWwuaGV4VG9CYXNlNjRVcmxcIiwgdmFsdWUpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoZXh0b2I2NHUodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0pvc2VVdGlsLmpzXG4gKiovIiwiXG52YXIgbmF2aWdhdG9yID0ge307XG5uYXZpZ2F0b3IudXNlckFnZW50ID0gZmFsc2U7XG5cbnZhciB3aW5kb3cgPSB7fTtcbi8qXG4gKiBqc3JzYXNpZ24gNi4xLjIgKDIwMTYtMTAtMDgpIChjKSAyMDEwLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xuXG4vKlxueWFob28tbWluLmpzXG5Db3B5cmlnaHQgKGMpIDIwMTEsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db2RlIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgTGljZW5zZTpcbmh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWxcbnZlcnNpb246IDIuOS4wXG4qL1xuaWYodHlwZW9mIFlBSE9PPT1cInVuZGVmaW5lZFwifHwhWUFIT08pe3ZhciBZQUhPTz17fTt9WUFIT08ubmFtZXNwYWNlPWZ1bmN0aW9uKCl7dmFyIGI9YXJndW1lbnRzLGc9bnVsbCxlLGMsZjtmb3IoZT0wO2U8Yi5sZW5ndGg7ZT1lKzEpe2Y9KFwiXCIrYltlXSkuc3BsaXQoXCIuXCIpO2c9WUFIT087Zm9yKGM9KGZbMF09PVwiWUFIT09cIik/MTowO2M8Zi5sZW5ndGg7Yz1jKzEpe2dbZltjXV09Z1tmW2NdXXx8e307Zz1nW2ZbY11dO319cmV0dXJuIGc7fTtZQUhPTy5sb2c9ZnVuY3Rpb24oZCxhLGMpe3ZhciBiPVlBSE9PLndpZGdldC5Mb2dnZXI7aWYoYiYmYi5sb2cpe3JldHVybiBiLmxvZyhkLGEsYyk7fWVsc2V7cmV0dXJuIGZhbHNlO319O1lBSE9PLnJlZ2lzdGVyPWZ1bmN0aW9uKGEsZixlKXt2YXIgaz1ZQUhPTy5lbnYubW9kdWxlcyxjLGosaCxnLGQ7aWYoIWtbYV0pe2tbYV09e3ZlcnNpb25zOltdLGJ1aWxkczpbXX07fWM9a1thXTtqPWUudmVyc2lvbjtoPWUuYnVpbGQ7Zz1ZQUhPTy5lbnYubGlzdGVuZXJzO2MubmFtZT1hO2MudmVyc2lvbj1qO2MuYnVpbGQ9aDtjLnZlcnNpb25zLnB1c2goaik7Yy5idWlsZHMucHVzaChoKTtjLm1haW5DbGFzcz1mO2ZvcihkPTA7ZDxnLmxlbmd0aDtkPWQrMSl7Z1tkXShjKTt9aWYoZil7Zi5WRVJTSU9OPWo7Zi5CVUlMRD1oO31lbHNle1lBSE9PLmxvZyhcIm1haW5DbGFzcyBpcyB1bmRlZmluZWQgZm9yIG1vZHVsZSBcIithLFwid2FyblwiKTt9fTtZQUhPTy5lbnY9WUFIT08uZW52fHx7bW9kdWxlczpbXSxsaXN0ZW5lcnM6W119O1lBSE9PLmVudi5nZXRWZXJzaW9uPWZ1bmN0aW9uKGEpe3JldHVybiBZQUhPTy5lbnYubW9kdWxlc1thXXx8bnVsbDt9O1lBSE9PLmVudi5wYXJzZVVBPWZ1bmN0aW9uKGQpe3ZhciBlPWZ1bmN0aW9uKGkpe3ZhciBqPTA7cmV0dXJuIHBhcnNlRmxvYXQoaS5yZXBsYWNlKC9cXC4vZyxmdW5jdGlvbigpe3JldHVybihqKys9PTEpP1wiXCI6XCIuXCI7fSkpO30saD1uYXZpZ2F0b3IsZz17aWU6MCxvcGVyYTowLGdlY2tvOjAsd2Via2l0OjAsY2hyb21lOjAsbW9iaWxlOm51bGwsYWlyOjAsaXBhZDowLGlwaG9uZTowLGlwb2Q6MCxpb3M6bnVsbCxhbmRyb2lkOjAsd2Vib3M6MCxjYWphOmgmJmguY2FqYVZlcnNpb24sc2VjdXJlOmZhbHNlLG9zOm51bGx9LGM9ZHx8KG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCksZj13aW5kb3cmJndpbmRvdy5sb2NhdGlvbixiPWYmJmYuaHJlZixhO2cuc2VjdXJlPWImJihiLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImh0dHBzXCIpPT09MCk7aWYoYyl7aWYoKC93aW5kb3dzfHdpbjMyL2kpLnRlc3QoYykpe2cub3M9XCJ3aW5kb3dzXCI7fWVsc2V7aWYoKC9tYWNpbnRvc2gvaSkudGVzdChjKSl7Zy5vcz1cIm1hY2ludG9zaFwiO31lbHNle2lmKCgvcmhpbm8vaSkudGVzdChjKSl7Zy5vcz1cInJoaW5vXCI7fX19aWYoKC9LSFRNTC8pLnRlc3QoYykpe2cud2Via2l0PTE7fWE9Yy5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oW15cXHNdKikvKTtpZihhJiZhWzFdKXtnLndlYmtpdD1lKGFbMV0pO2lmKC8gTW9iaWxlXFwvLy50ZXN0KGMpKXtnLm1vYmlsZT1cIkFwcGxlXCI7YT1jLm1hdGNoKC9PUyAoW15cXHNdKikvKTtpZihhJiZhWzFdKXthPWUoYVsxXS5yZXBsYWNlKFwiX1wiLFwiLlwiKSk7fWcuaW9zPWE7Zy5pcGFkPWcuaXBvZD1nLmlwaG9uZT0wO2E9Yy5tYXRjaCgvaVBhZHxpUG9kfGlQaG9uZS8pO2lmKGEmJmFbMF0pe2dbYVswXS50b0xvd2VyQ2FzZSgpXT1nLmlvczt9fWVsc2V7YT1jLm1hdGNoKC9Ob2tpYU5bXlxcL10qfEFuZHJvaWQgXFxkXFwuXFxkfHdlYk9TXFwvXFxkXFwuXFxkLyk7aWYoYSl7Zy5tb2JpbGU9YVswXTt9aWYoL3dlYk9TLy50ZXN0KGMpKXtnLm1vYmlsZT1cIldlYk9TXCI7YT1jLm1hdGNoKC93ZWJPU1xcLyhbXlxcc10qKTsvKTtpZihhJiZhWzFdKXtnLndlYm9zPWUoYVsxXSk7fX1pZigvIEFuZHJvaWQvLnRlc3QoYykpe2cubW9iaWxlPVwiQW5kcm9pZFwiO2E9Yy5tYXRjaCgvQW5kcm9pZCAoW15cXHNdKik7Lyk7aWYoYSYmYVsxXSl7Zy5hbmRyb2lkPWUoYVsxXSk7fX19YT1jLm1hdGNoKC9DaHJvbWVcXC8oW15cXHNdKikvKTtpZihhJiZhWzFdKXtnLmNocm9tZT1lKGFbMV0pO31lbHNle2E9Yy5tYXRjaCgvQWRvYmVBSVJcXC8oW15cXHNdKikvKTtpZihhKXtnLmFpcj1hWzBdO319fWlmKCFnLndlYmtpdCl7YT1jLm1hdGNoKC9PcGVyYVtcXHNcXC9dKFteXFxzXSopLyk7aWYoYSYmYVsxXSl7Zy5vcGVyYT1lKGFbMV0pO2E9Yy5tYXRjaCgvVmVyc2lvblxcLyhbXlxcc10qKS8pO2lmKGEmJmFbMV0pe2cub3BlcmE9ZShhWzFdKTt9YT1jLm1hdGNoKC9PcGVyYSBNaW5pW147XSovKTtpZihhKXtnLm1vYmlsZT1hWzBdO319ZWxzZXthPWMubWF0Y2goL01TSUVcXHMoW147XSopLyk7aWYoYSYmYVsxXSl7Zy5pZT1lKGFbMV0pO31lbHNle2E9Yy5tYXRjaCgvR2Vja29cXC8oW15cXHNdKikvKTtpZihhKXtnLmdlY2tvPTE7YT1jLm1hdGNoKC9ydjooW15cXHNcXCldKikvKTtpZihhJiZhWzFdKXtnLmdlY2tvPWUoYVsxXSk7fX19fX19cmV0dXJuIGc7fTtZQUhPTy5lbnYudWE9WUFIT08uZW52LnBhcnNlVUEoKTsoZnVuY3Rpb24oKXtZQUhPTy5uYW1lc3BhY2UoXCJ1dGlsXCIsXCJ3aWRnZXRcIixcImV4YW1wbGVcIik7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBZQUhPT19jb25maWcpe3ZhciBiPVlBSE9PX2NvbmZpZy5saXN0ZW5lcixhPVlBSE9PLmVudi5saXN0ZW5lcnMsZD10cnVlLGM7aWYoYil7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyl7aWYoYVtjXT09Yil7ZD1mYWxzZTticmVhazt9fWlmKGQpe2EucHVzaChiKTt9fX19KSgpO1lBSE9PLmxhbmc9WUFIT08ubGFuZ3x8e307KGZ1bmN0aW9uKCl7dmFyIGY9WUFIT08ubGFuZyxhPU9iamVjdC5wcm90b3R5cGUsYz1cIltvYmplY3QgQXJyYXldXCIsaD1cIltvYmplY3QgRnVuY3Rpb25dXCIsaT1cIltvYmplY3QgT2JqZWN0XVwiLGI9W10sZz17XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImcXVvdDtcIixcIidcIjpcIiYjeDI3O1wiLFwiL1wiOlwiJiN4MkY7XCIsXCJgXCI6XCImI3g2MDtcIn0sZD1bXCJ0b1N0cmluZ1wiLFwidmFsdWVPZlwiXSxlPXtpc0FycmF5OmZ1bmN0aW9uKGope3JldHVybiBhLnRvU3RyaW5nLmFwcGx5KGopPT09Yzt9LGlzQm9vbGVhbjpmdW5jdGlvbihqKXtyZXR1cm4gdHlwZW9mIGo9PT1cImJvb2xlYW5cIjt9LGlzRnVuY3Rpb246ZnVuY3Rpb24oail7cmV0dXJuKHR5cGVvZiBqPT09XCJmdW5jdGlvblwiKXx8YS50b1N0cmluZy5hcHBseShqKT09PWg7fSxpc051bGw6ZnVuY3Rpb24oail7cmV0dXJuIGo9PT1udWxsO30saXNOdW1iZXI6ZnVuY3Rpb24oail7cmV0dXJuIHR5cGVvZiBqPT09XCJudW1iZXJcIiYmaXNGaW5pdGUoaik7fSxpc09iamVjdDpmdW5jdGlvbihqKXtyZXR1cm4oaiYmKHR5cGVvZiBqPT09XCJvYmplY3RcInx8Zi5pc0Z1bmN0aW9uKGopKSl8fGZhbHNlO30saXNTdHJpbmc6ZnVuY3Rpb24oail7cmV0dXJuIHR5cGVvZiBqPT09XCJzdHJpbmdcIjt9LGlzVW5kZWZpbmVkOmZ1bmN0aW9uKGope3JldHVybiB0eXBlb2Ygaj09PVwidW5kZWZpbmVkXCI7fSxfSUVFbnVtRml4OihZQUhPTy5lbnYudWEuaWUpP2Z1bmN0aW9uKGwsayl7dmFyIGosbixtO2ZvcihqPTA7ajxkLmxlbmd0aDtqPWorMSl7bj1kW2pdO209a1tuXTtpZihmLmlzRnVuY3Rpb24obSkmJm0hPWFbbl0pe2xbbl09bTt9fX06ZnVuY3Rpb24oKXt9LGVzY2FwZUhUTUw6ZnVuY3Rpb24oail7cmV0dXJuIGoucmVwbGFjZSgvWyY8PlwiJ1xcL2BdL2csZnVuY3Rpb24oayl7cmV0dXJuIGdba107fSk7fSxleHRlbmQ6ZnVuY3Rpb24obSxuLGwpe2lmKCFufHwhbSl7dGhyb3cgbmV3IEVycm9yKFwiZXh0ZW5kIGZhaWxlZCwgcGxlYXNlIGNoZWNrIHRoYXQgXCIrXCJhbGwgZGVwZW5kZW5jaWVzIGFyZSBpbmNsdWRlZC5cIik7fXZhciBrPWZ1bmN0aW9uKCl7fSxqO2sucHJvdG90eXBlPW4ucHJvdG90eXBlO20ucHJvdG90eXBlPW5ldyBrKCk7bS5wcm90b3R5cGUuY29uc3RydWN0b3I9bTttLnN1cGVyY2xhc3M9bi5wcm90b3R5cGU7aWYobi5wcm90b3R5cGUuY29uc3RydWN0b3I9PWEuY29uc3RydWN0b3Ipe24ucHJvdG90eXBlLmNvbnN0cnVjdG9yPW47fWlmKGwpe2ZvcihqIGluIGwpe2lmKGYuaGFzT3duUHJvcGVydHkobCxqKSl7bS5wcm90b3R5cGVbal09bFtqXTt9fWYuX0lFRW51bUZpeChtLnByb3RvdHlwZSxsKTt9fSxhdWdtZW50T2JqZWN0OmZ1bmN0aW9uKG4sbSl7aWYoIW18fCFuKXt0aHJvdyBuZXcgRXJyb3IoXCJBYnNvcmIgZmFpbGVkLCB2ZXJpZnkgZGVwZW5kZW5jaWVzLlwiKTt9dmFyIGo9YXJndW1lbnRzLGwsbyxrPWpbMl07aWYoayYmayE9PXRydWUpe2ZvcihsPTI7bDxqLmxlbmd0aDtsPWwrMSl7bltqW2xdXT1tW2pbbF1dO319ZWxzZXtmb3IobyBpbiBtKXtpZihrfHwhKG8gaW4gbikpe25bb109bVtvXTt9fWYuX0lFRW51bUZpeChuLG0pO31yZXR1cm4gbjt9LGF1Z21lbnRQcm90bzpmdW5jdGlvbihtLGwpe2lmKCFsfHwhbSl7dGhyb3cgbmV3IEVycm9yKFwiQXVnbWVudCBmYWlsZWQsIHZlcmlmeSBkZXBlbmRlbmNpZXMuXCIpO312YXIgaj1bbS5wcm90b3R5cGUsbC5wcm90b3R5cGVdLGs7Zm9yKGs9MjtrPGFyZ3VtZW50cy5sZW5ndGg7az1rKzEpe2oucHVzaChhcmd1bWVudHNba10pO31mLmF1Z21lbnRPYmplY3QuYXBwbHkodGhpcyxqKTtyZXR1cm4gbTt9LGR1bXA6ZnVuY3Rpb24oaixwKXt2YXIgbCxuLHI9W10sdD1cInsuLi59XCIsaz1cImYoKXsuLi59XCIscT1cIiwgXCIsbT1cIiA9PiBcIjtpZighZi5pc09iamVjdChqKSl7cmV0dXJuIGorXCJcIjt9ZWxzZXtpZihqIGluc3RhbmNlb2YgRGF0ZXx8KFwibm9kZVR5cGVcIiBpbiBqJiZcInRhZ05hbWVcIiBpbiBqKSl7cmV0dXJuIGo7fWVsc2V7aWYoZi5pc0Z1bmN0aW9uKGopKXtyZXR1cm4gazt9fX1wPShmLmlzTnVtYmVyKHApKT9wOjM7aWYoZi5pc0FycmF5KGopKXtyLnB1c2goXCJbXCIpO2ZvcihsPTAsbj1qLmxlbmd0aDtsPG47bD1sKzEpe2lmKGYuaXNPYmplY3QoaltsXSkpe3IucHVzaCgocD4wKT9mLmR1bXAoaltsXSxwLTEpOnQpO31lbHNle3IucHVzaChqW2xdKTt9ci5wdXNoKHEpO31pZihyLmxlbmd0aD4xKXtyLnBvcCgpO31yLnB1c2goXCJdXCIpO31lbHNle3IucHVzaChcIntcIik7Zm9yKGwgaW4gail7aWYoZi5oYXNPd25Qcm9wZXJ0eShqLGwpKXtyLnB1c2gobCttKTtpZihmLmlzT2JqZWN0KGpbbF0pKXtyLnB1c2goKHA+MCk/Zi5kdW1wKGpbbF0scC0xKTp0KTt9ZWxzZXtyLnB1c2goaltsXSk7fXIucHVzaChxKTt9fWlmKHIubGVuZ3RoPjEpe3IucG9wKCk7fXIucHVzaChcIn1cIik7fXJldHVybiByLmpvaW4oXCJcIik7fSxzdWJzdGl0dXRlOmZ1bmN0aW9uKHgseSxFLGwpe3ZhciBELEMsQixHLHQsdSxGPVtdLHAsej14Lmxlbmd0aCxBPVwiZHVtcFwiLHI9XCIgXCIscT1cIntcIixtPVwifVwiLG4sdztmb3IoOzspe0Q9eC5sYXN0SW5kZXhPZihxLHopO2lmKEQ8MCl7YnJlYWs7fUM9eC5pbmRleE9mKG0sRCk7aWYoRCsxPkMpe2JyZWFrO31wPXguc3Vic3RyaW5nKEQrMSxDKTtHPXA7dT1udWxsO0I9Ry5pbmRleE9mKHIpO2lmKEI+LTEpe3U9Ry5zdWJzdHJpbmcoQisxKTtHPUcuc3Vic3RyaW5nKDAsQik7fXQ9eVtHXTtpZihFKXt0PUUoRyx0LHUpO31pZihmLmlzT2JqZWN0KHQpKXtpZihmLmlzQXJyYXkodCkpe3Q9Zi5kdW1wKHQscGFyc2VJbnQodSwxMCkpO31lbHNle3U9dXx8XCJcIjtuPXUuaW5kZXhPZihBKTtpZihuPi0xKXt1PXUuc3Vic3RyaW5nKDQpO313PXQudG9TdHJpbmcoKTtpZih3PT09aXx8bj4tMSl7dD1mLmR1bXAodCxwYXJzZUludCh1LDEwKSk7fWVsc2V7dD13O319fWVsc2V7aWYoIWYuaXNTdHJpbmcodCkmJiFmLmlzTnVtYmVyKHQpKXt0PVwifi1cIitGLmxlbmd0aCtcIi1+XCI7RltGLmxlbmd0aF09cDt9fXg9eC5zdWJzdHJpbmcoMCxEKSt0K3guc3Vic3RyaW5nKEMrMSk7aWYobD09PWZhbHNlKXt6PUQtMTt9fWZvcihEPUYubGVuZ3RoLTE7RD49MDtEPUQtMSl7eD14LnJlcGxhY2UobmV3IFJlZ0V4cChcIn4tXCIrRCtcIi1+XCIpLFwie1wiK0ZbRF0rXCJ9XCIsXCJnXCIpO31yZXR1cm4geDt9LHRyaW06ZnVuY3Rpb24oail7dHJ5e3JldHVybiBqLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIik7fWNhdGNoKGspe3JldHVybiBqO1xufX0sbWVyZ2U6ZnVuY3Rpb24oKXt2YXIgbj17fSxrPWFyZ3VtZW50cyxqPWsubGVuZ3RoLG07Zm9yKG09MDttPGo7bT1tKzEpe2YuYXVnbWVudE9iamVjdChuLGtbbV0sdHJ1ZSk7fXJldHVybiBuO30sbGF0ZXI6ZnVuY3Rpb24odCxrLHUsbixwKXt0PXR8fDA7az1rfHx7fTt2YXIgbD11LHM9bixxLGo7aWYoZi5pc1N0cmluZyh1KSl7bD1rW3VdO31pZighbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm1ldGhvZCB1bmRlZmluZWRcIik7fWlmKCFmLmlzVW5kZWZpbmVkKG4pJiYhZi5pc0FycmF5KHMpKXtzPVtuXTt9cT1mdW5jdGlvbigpe2wuYXBwbHkoayxzfHxiKTt9O2o9KHApP3NldEludGVydmFsKHEsdCk6c2V0VGltZW91dChxLHQpO3JldHVybntpbnRlcnZhbDpwLGNhbmNlbDpmdW5jdGlvbigpe2lmKHRoaXMuaW50ZXJ2YWwpe2NsZWFySW50ZXJ2YWwoaik7fWVsc2V7Y2xlYXJUaW1lb3V0KGopO319fTt9LGlzVmFsdWU6ZnVuY3Rpb24oail7cmV0dXJuKGYuaXNPYmplY3Qoail8fGYuaXNTdHJpbmcoail8fGYuaXNOdW1iZXIoail8fGYuaXNCb29sZWFuKGopKTt9fTtmLmhhc093blByb3BlcnR5PShhLmhhc093blByb3BlcnR5KT9mdW5jdGlvbihqLGspe3JldHVybiBqJiZqLmhhc093blByb3BlcnR5JiZqLmhhc093blByb3BlcnR5KGspO306ZnVuY3Rpb24oaixrKXtyZXR1cm4gIWYuaXNVbmRlZmluZWQoaltrXSkmJmouY29uc3RydWN0b3IucHJvdG90eXBlW2tdIT09altrXTt9O2UuYXVnbWVudE9iamVjdChmLGUsdHJ1ZSk7WUFIT08udXRpbC5MYW5nPWY7Zi5hdWdtZW50PWYuYXVnbWVudFByb3RvO1lBSE9PLmF1Z21lbnQ9Zi5hdWdtZW50UHJvdG87WUFIT08uZXh0ZW5kPWYuZXh0ZW5kO30pKCk7WUFIT08ucmVnaXN0ZXIoXCJ5YWhvb1wiLFlBSE9PLHt2ZXJzaW9uOlwiMi45LjBcIixidWlsZDpcIjI4MDBcIn0pO1xuXG4vKiEgQ3J5cHRvSlMgdjMuMS4yIGNvcmUtZml4LmpzXG4gKiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbiAqIChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuICogVEhJUyBJUyBGSVggb2YgJ2NvcmUuanMnIHRvIGZpeCBIbWFjIGlzc3VlLlxuICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvaXNzdWVzL2RldGFpbD9pZD04NFxuICogaHR0cHM6Ly9jcnlwdG8tanMuZ29vZ2xlY29kZS5jb20vc3ZuLWhpc3RvcnkvcjY2Ny9icmFuY2hlcy8zLngvc3JjL2NvcmUuanNcbiAqL1xudmFyIENyeXB0b0pTPUNyeXB0b0pTfHwoZnVuY3Rpb24oZSxnKXt2YXIgYT17fTt2YXIgYj1hLmxpYj17fTt2YXIgaj1iLkJhc2U9KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gbigpe31yZXR1cm57ZXh0ZW5kOmZ1bmN0aW9uKHApe24ucHJvdG90eXBlPXRoaXM7dmFyIG89bmV3IG4oKTtpZihwKXtvLm1peEluKHApfWlmKCFvLmhhc093blByb3BlcnR5KFwiaW5pdFwiKSl7by5pbml0PWZ1bmN0aW9uKCl7by4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fW8uaW5pdC5wcm90b3R5cGU9bztvLiRzdXBlcj10aGlzO3JldHVybiBvfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgbz10aGlzLmV4dGVuZCgpO28uaW5pdC5hcHBseShvLGFyZ3VtZW50cyk7cmV0dXJuIG99LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKHApe2Zvcih2YXIgbyBpbiBwKXtpZihwLmhhc093blByb3BlcnR5KG8pKXt0aGlzW29dPXBbb119fWlmKHAuaGFzT3duUHJvcGVydHkoXCJ0b1N0cmluZ1wiKSl7dGhpcy50b1N0cmluZz1wLnRvU3RyaW5nfX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyl9fX0oKSk7dmFyIGw9Yi5Xb3JkQXJyYXk9ai5leHRlbmQoe2luaXQ6ZnVuY3Rpb24obyxuKXtvPXRoaXMud29yZHM9b3x8W107aWYobiE9Zyl7dGhpcy5zaWdCeXRlcz1ufWVsc2V7dGhpcy5zaWdCeXRlcz1vLmxlbmd0aCo0fX0sdG9TdHJpbmc6ZnVuY3Rpb24obil7cmV0dXJuKG58fGgpLnN0cmluZ2lmeSh0aGlzKX0sY29uY2F0OmZ1bmN0aW9uKHQpe3ZhciBxPXRoaXMud29yZHM7dmFyIHA9dC53b3Jkczt2YXIgbj10aGlzLnNpZ0J5dGVzO3ZhciBzPXQuc2lnQnl0ZXM7dGhpcy5jbGFtcCgpO2lmKG4lNCl7Zm9yKHZhciByPTA7cjxzO3IrKyl7dmFyIG89KHBbcj4+PjJdPj4+KDI0LShyJTQpKjgpKSYyNTU7cVsobityKT4+PjJdfD1vPDwoMjQtKChuK3IpJTQpKjgpfX1lbHNle2Zvcih2YXIgcj0wO3I8cztyKz00KXtxWyhuK3IpPj4+Ml09cFtyPj4+Ml19fXRoaXMuc2lnQnl0ZXMrPXM7cmV0dXJuIHRoaXN9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIG89dGhpcy53b3Jkczt2YXIgbj10aGlzLnNpZ0J5dGVzO29bbj4+PjJdJj00Mjk0OTY3Mjk1PDwoMzItKG4lNCkqOCk7by5sZW5ndGg9ZS5jZWlsKG4vNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIG49ai5jbG9uZS5jYWxsKHRoaXMpO24ud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gbn0scmFuZG9tOmZ1bmN0aW9uKHApe3ZhciBvPVtdO2Zvcih2YXIgbj0wO248cDtuKz00KXtvLnB1c2goKGUucmFuZG9tKCkqNDI5NDk2NzI5Nil8MCl9cmV0dXJuIG5ldyBsLmluaXQobyxwKX19KTt2YXIgbT1hLmVuYz17fTt2YXIgaD1tLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKHApe3ZhciByPXAud29yZHM7dmFyIG89cC5zaWdCeXRlczt2YXIgcT1bXTtmb3IodmFyIG49MDtuPG87bisrKXt2YXIgcz0ocltuPj4+Ml0+Pj4oMjQtKG4lNCkqOCkpJjI1NTtxLnB1c2goKHM+Pj40KS50b1N0cmluZygxNikpO3EucHVzaCgocyYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gcS5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihwKXt2YXIgbj1wLmxlbmd0aDt2YXIgcT1bXTtmb3IodmFyIG89MDtvPG47bys9Mil7cVtvPj4+M118PXBhcnNlSW50KHAuc3Vic3RyKG8sMiksMTYpPDwoMjQtKG8lOCkqNCl9cmV0dXJuIG5ldyBsLmluaXQocSxuLzIpfX07dmFyIGQ9bS5MYXRpbjE9e3N0cmluZ2lmeTpmdW5jdGlvbihxKXt2YXIgcj1xLndvcmRzO3ZhciBwPXEuc2lnQnl0ZXM7dmFyIG49W107Zm9yKHZhciBvPTA7bzxwO28rKyl7dmFyIHM9KHJbbz4+PjJdPj4+KDI0LShvJTQpKjgpKSYyNTU7bi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUocykpfXJldHVybiBuLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uKHApe3ZhciBuPXAubGVuZ3RoO3ZhciBxPVtdO2Zvcih2YXIgbz0wO288bjtvKyspe3Fbbz4+PjJdfD0ocC5jaGFyQ29kZUF0KG8pJjI1NSk8PCgyNC0obyU0KSo4KX1yZXR1cm4gbmV3IGwuaW5pdChxLG4pfX07dmFyIGM9bS5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24obil7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGQuc3RyaW5naWZ5KG4pKSl9Y2F0Y2gobyl7dGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIFVURi04IGRhdGFcIil9fSxwYXJzZTpmdW5jdGlvbihuKXtyZXR1cm4gZC5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQobikpKX19O3ZhciBpPWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1qLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBsLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTB9LF9hcHBlbmQ6ZnVuY3Rpb24obil7aWYodHlwZW9mIG49PVwic3RyaW5nXCIpe249Yy5wYXJzZShuKX10aGlzLl9kYXRhLmNvbmNhdChuKTt0aGlzLl9uRGF0YUJ5dGVzKz1uLnNpZ0J5dGVzfSxfcHJvY2VzczpmdW5jdGlvbih3KXt2YXIgcT10aGlzLl9kYXRhO3ZhciB4PXEud29yZHM7dmFyIG49cS5zaWdCeXRlczt2YXIgdD10aGlzLmJsb2NrU2l6ZTt2YXIgdj10KjQ7dmFyIHU9bi92O2lmKHcpe3U9ZS5jZWlsKHUpfWVsc2V7dT1lLm1heCgodXwwKS10aGlzLl9taW5CdWZmZXJTaXplLDApfXZhciBzPXUqdDt2YXIgcj1lLm1pbihzKjQsbik7aWYocyl7Zm9yKHZhciBwPTA7cDxzO3ArPXQpe3RoaXMuX2RvUHJvY2Vzc0Jsb2NrKHgscCl9dmFyIG89eC5zcGxpY2UoMCxzKTtxLnNpZ0J5dGVzLT1yfXJldHVybiBuZXcgbC5pbml0KG8scil9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIG49ai5jbG9uZS5jYWxsKHRoaXMpO24uX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBufSxfbWluQnVmZmVyU2l6ZTowfSk7dmFyIGY9Yi5IYXNoZXI9aS5leHRlbmQoe2NmZzpqLmV4dGVuZCgpLGluaXQ6ZnVuY3Rpb24obil7dGhpcy5jZmc9dGhpcy5jZmcuZXh0ZW5kKG4pO3RoaXMucmVzZXQoKX0scmVzZXQ6ZnVuY3Rpb24oKXtpLnJlc2V0LmNhbGwodGhpcyk7dGhpcy5fZG9SZXNldCgpfSx1cGRhdGU6ZnVuY3Rpb24obil7dGhpcy5fYXBwZW5kKG4pO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpc30sZmluYWxpemU6ZnVuY3Rpb24obil7aWYobil7dGhpcy5fYXBwZW5kKG4pfXZhciBvPXRoaXMuX2RvRmluYWxpemUoKTtyZXR1cm4gb30sYmxvY2tTaXplOjUxMi8zMixfY3JlYXRlSGVscGVyOmZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihwLG8pe3JldHVybiBuZXcgbi5pbml0KG8pLmZpbmFsaXplKHApfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHAsbyl7cmV0dXJuIG5ldyBrLkhNQUMuaW5pdChuLG8pLmZpbmFsaXplKHApfX19KTt2YXIgaz1hLmFsZ289e307cmV0dXJuIGF9KE1hdGgpKTtcbi8qXG5DcnlwdG9KUyB2My4xLjIgeDY0LWNvcmUtbWluLmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbihnKXt2YXIgYT1DcnlwdG9KUyxmPWEubGliLGU9Zi5CYXNlLGg9Zi5Xb3JkQXJyYXksYT1hLng2ND17fTthLldvcmQ9ZS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oYixjKXt0aGlzLmhpZ2g9Yjt0aGlzLmxvdz1jfX0pO2EuV29yZEFycmF5PWUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGIsYyl7Yj10aGlzLndvcmRzPWJ8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9Zz9jOjgqYi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPXRoaXMud29yZHMsYz1iLmxlbmd0aCxhPVtdLGQ9MDtkPGM7ZCsrKXt2YXIgZT1iW2RdO2EucHVzaChlLmhpZ2gpO2EucHVzaChlLmxvdyl9cmV0dXJuIGguY3JlYXRlKGEsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPWUuY2xvbmUuY2FsbCh0aGlzKSxjPWIud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxhPWMubGVuZ3RoLGQ9MDtkPGE7ZCsrKWNbZF09Y1tkXS5jbG9uZSgpO3JldHVybiBifX0pfSkoKTtcblxuLypcbkNyeXB0b0pTIHYzLjEuMiBjaXBoZXItY29yZS5qc1xuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG5DcnlwdG9KUy5saWIuQ2lwaGVyfHxmdW5jdGlvbih1KXt2YXIgZz1DcnlwdG9KUyxmPWcubGliLGs9Zi5CYXNlLGw9Zi5Xb3JkQXJyYXkscT1mLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0scj1nLmVuYy5CYXNlNjQsdj1nLmFsZ28uRXZwS0RGLG49Zi5DaXBoZXI9cS5leHRlbmQoe2NmZzprLmV4dGVuZCgpLGNyZWF0ZUVuY3J5cHRvcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmNyZWF0ZSh0aGlzLl9FTkNfWEZPUk1fTU9ERSxhLGIpfSxjcmVhdGVEZWNyeXB0b3I6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fREVDX1hGT1JNX01PREUsYSxiKX0saW5pdDpmdW5jdGlvbihhLGIsYyl7dGhpcy5jZmc9dGhpcy5jZmcuZXh0ZW5kKGMpO3RoaXMuX3hmb3JtTW9kZT1hO3RoaXMuX2tleT1iO3RoaXMucmVzZXQoKX0scmVzZXQ6ZnVuY3Rpb24oKXtxLnJlc2V0LmNhbGwodGhpcyk7dGhpcy5fZG9SZXNldCgpfSxwcm9jZXNzOmZ1bmN0aW9uKGEpe3RoaXMuX2FwcGVuZChhKTtcbnJldHVybiB0aGlzLl9wcm9jZXNzKCl9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpfSxrZXlTaXplOjQsaXZTaXplOjQsX0VOQ19YRk9STV9NT0RFOjEsX0RFQ19YRk9STV9NT0RFOjIsX2NyZWF0ZUhlbHBlcjpmdW5jdGlvbihhKXtyZXR1cm57ZW5jcnlwdDpmdW5jdGlvbihiLGMsZCl7cmV0dXJuKFwic3RyaW5nXCI9PXR5cGVvZiBjP3M6aikuZW5jcnlwdChhLGIsYyxkKX0sZGVjcnlwdDpmdW5jdGlvbihiLGMsZCl7cmV0dXJuKFwic3RyaW5nXCI9PXR5cGVvZiBjP3M6aikuZGVjcnlwdChhLGIsYyxkKX19fX0pO2YuU3RyZWFtQ2lwaGVyPW4uZXh0ZW5kKHtfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9jZXNzKCEwKX0sYmxvY2tTaXplOjF9KTt2YXIgbT1nLm1vZGU9e30sdD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faXY7ZD90aGlzLl9pdj11OmQ9dGhpcy5fcHJldkJsb2NrO2Zvcih2YXIgZT1cbjA7ZTxjO2UrKylhW2IrZV1ePWRbZV19LGg9KGYuQmxvY2tDaXBoZXJNb2RlPWsuZXh0ZW5kKHtjcmVhdGVFbmNyeXB0b3I6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5FbmNyeXB0b3IuY3JlYXRlKGEsYil9LGNyZWF0ZURlY3J5cHRvcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLkRlY3J5cHRvci5jcmVhdGUoYSxiKX0saW5pdDpmdW5jdGlvbihhLGIpe3RoaXMuX2NpcGhlcj1hO3RoaXMuX2l2PWJ9fSkpLmV4dGVuZCgpO2guRW5jcnlwdG9yPWguZXh0ZW5kKHtwcm9jZXNzQmxvY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9jaXBoZXIsZD1jLmJsb2NrU2l6ZTt0LmNhbGwodGhpcyxhLGIsZCk7Yy5lbmNyeXB0QmxvY2soYSxiKTt0aGlzLl9wcmV2QmxvY2s9YS5zbGljZShiLGIrZCl9fSk7aC5EZWNyeXB0b3I9aC5leHRlbmQoe3Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2NpcGhlcixkPWMuYmxvY2tTaXplLGU9YS5zbGljZShiLGIrZCk7Yy5kZWNyeXB0QmxvY2soYSxcbmIpO3QuY2FsbCh0aGlzLGEsYixkKTt0aGlzLl9wcmV2QmxvY2s9ZX19KTttPW0uQ0JDPWg7aD0oZy5wYWQ9e30pLlBrY3M3PXtwYWQ6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9NCpiLGM9Yy1hLnNpZ0J5dGVzJWMsZD1jPDwyNHxjPDwxNnxjPDw4fGMsZT1bXSxmPTA7ZjxjO2YrPTQpZS5wdXNoKGQpO2M9bC5jcmVhdGUoZSxjKTthLmNvbmNhdChjKX0sdW5wYWQ6ZnVuY3Rpb24oYSl7YS5zaWdCeXRlcy09YS53b3Jkc1thLnNpZ0J5dGVzLTE+Pj4yXSYyNTV9fTtmLkJsb2NrQ2lwaGVyPW4uZXh0ZW5kKHtjZmc6bi5jZmcuZXh0ZW5kKHttb2RlOm0scGFkZGluZzpofSkscmVzZXQ6ZnVuY3Rpb24oKXtuLnJlc2V0LmNhbGwodGhpcyk7dmFyIGE9dGhpcy5jZmcsYj1hLml2LGE9YS5tb2RlO2lmKHRoaXMuX3hmb3JtTW9kZT09dGhpcy5fRU5DX1hGT1JNX01PREUpdmFyIGM9YS5jcmVhdGVFbmNyeXB0b3I7ZWxzZSBjPWEuY3JlYXRlRGVjcnlwdG9yLHRoaXMuX21pbkJ1ZmZlclNpemU9MTtcbnRoaXMuX21vZGU9Yy5jYWxsKGEsdGhpcyxiJiZiLndvcmRzKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGEsYil7dGhpcy5fbW9kZS5wcm9jZXNzQmxvY2soYSxiKX0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNmZy5wYWRkaW5nO2lmKHRoaXMuX3hmb3JtTW9kZT09dGhpcy5fRU5DX1hGT1JNX01PREUpe2EucGFkKHRoaXMuX2RhdGEsdGhpcy5ibG9ja1NpemUpO3ZhciBiPXRoaXMuX3Byb2Nlc3MoITApfWVsc2UgYj10aGlzLl9wcm9jZXNzKCEwKSxhLnVucGFkKGIpO3JldHVybiBifSxibG9ja1NpemU6NH0pO3ZhciBwPWYuQ2lwaGVyUGFyYW1zPWsuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEpe3RoaXMubWl4SW4oYSl9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHx0aGlzLmZvcm1hdHRlcikuc3RyaW5naWZ5KHRoaXMpfX0pLG09KGcuZm9ybWF0PXt9KS5PcGVuU1NMPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGI9YS5jaXBoZXJ0ZXh0O2E9YS5zYWx0O1xucmV0dXJuKGE/bC5jcmVhdGUoWzEzOTg4OTM2ODQsMTcwMTA3NjgzMV0pLmNvbmNhdChhKS5jb25jYXQoYik6YikudG9TdHJpbmcocil9LHBhcnNlOmZ1bmN0aW9uKGEpe2E9ci5wYXJzZShhKTt2YXIgYj1hLndvcmRzO2lmKDEzOTg4OTM2ODQ9PWJbMF0mJjE3MDEwNzY4MzE9PWJbMV0pe3ZhciBjPWwuY3JlYXRlKGIuc2xpY2UoMiw0KSk7Yi5zcGxpY2UoMCw0KTthLnNpZ0J5dGVzLT0xNn1yZXR1cm4gcC5jcmVhdGUoe2NpcGhlcnRleHQ6YSxzYWx0OmN9KX19LGo9Zi5TZXJpYWxpemFibGVDaXBoZXI9ay5leHRlbmQoe2NmZzprLmV4dGVuZCh7Zm9ybWF0Om19KSxlbmNyeXB0OmZ1bmN0aW9uKGEsYixjLGQpe2Q9dGhpcy5jZmcuZXh0ZW5kKGQpO3ZhciBlPWEuY3JlYXRlRW5jcnlwdG9yKGMsZCk7Yj1lLmZpbmFsaXplKGIpO2U9ZS5jZmc7cmV0dXJuIHAuY3JlYXRlKHtjaXBoZXJ0ZXh0OmIsa2V5OmMsaXY6ZS5pdixhbGdvcml0aG06YSxtb2RlOmUubW9kZSxwYWRkaW5nOmUucGFkZGluZyxcbmJsb2NrU2l6ZTphLmJsb2NrU2l6ZSxmb3JtYXR0ZXI6ZC5mb3JtYXR9KX0sZGVjcnlwdDpmdW5jdGlvbihhLGIsYyxkKXtkPXRoaXMuY2ZnLmV4dGVuZChkKTtiPXRoaXMuX3BhcnNlKGIsZC5mb3JtYXQpO3JldHVybiBhLmNyZWF0ZURlY3J5cHRvcihjLGQpLmZpbmFsaXplKGIuY2lwaGVydGV4dCl9LF9wYXJzZTpmdW5jdGlvbihhLGIpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhP2IucGFyc2UoYSx0aGlzKTphfX0pLGc9KGcua2RmPXt9KS5PcGVuU1NMPXtleGVjdXRlOmZ1bmN0aW9uKGEsYixjLGQpe2R8fChkPWwucmFuZG9tKDgpKTthPXYuY3JlYXRlKHtrZXlTaXplOmIrY30pLmNvbXB1dGUoYSxkKTtjPWwuY3JlYXRlKGEud29yZHMuc2xpY2UoYiksNCpjKTthLnNpZ0J5dGVzPTQqYjtyZXR1cm4gcC5jcmVhdGUoe2tleTphLGl2OmMsc2FsdDpkfSl9fSxzPWYuUGFzc3dvcmRCYXNlZENpcGhlcj1qLmV4dGVuZCh7Y2ZnOmouY2ZnLmV4dGVuZCh7a2RmOmd9KSxlbmNyeXB0OmZ1bmN0aW9uKGEsXG5iLGMsZCl7ZD10aGlzLmNmZy5leHRlbmQoZCk7Yz1kLmtkZi5leGVjdXRlKGMsYS5rZXlTaXplLGEuaXZTaXplKTtkLml2PWMuaXY7YT1qLmVuY3J5cHQuY2FsbCh0aGlzLGEsYixjLmtleSxkKTthLm1peEluKGMpO3JldHVybiBhfSxkZWNyeXB0OmZ1bmN0aW9uKGEsYixjLGQpe2Q9dGhpcy5jZmcuZXh0ZW5kKGQpO2I9dGhpcy5fcGFyc2UoYixkLmZvcm1hdCk7Yz1kLmtkZi5leGVjdXRlKGMsYS5rZXlTaXplLGEuaXZTaXplLGIuc2FsdCk7ZC5pdj1jLml2O3JldHVybiBqLmRlY3J5cHQuY2FsbCh0aGlzLGEsYixjLmtleSxkKX19KX0oKTtcblxuLypcbkNyeXB0b0pTIHYzLjEuMiBhZXMuanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7Zm9yKHZhciBxPUNyeXB0b0pTLHg9cS5saWIuQmxvY2tDaXBoZXIscj1xLmFsZ28saj1bXSx5PVtdLHo9W10sQT1bXSxCPVtdLEM9W10scz1bXSx1PVtdLHY9W10sdz1bXSxnPVtdLGs9MDsyNTY+aztrKyspZ1trXT0xMjg+az9rPDwxOms8PDFeMjgzO2Zvcih2YXIgbj0wLGw9MCxrPTA7MjU2Pms7aysrKXt2YXIgZj1sXmw8PDFebDw8Ml5sPDwzXmw8PDQsZj1mPj4+OF5mJjI1NV45OTtqW25dPWY7eVtmXT1uO3ZhciB0PWdbbl0sRD1nW3RdLEU9Z1tEXSxiPTI1NypnW2ZdXjE2ODQzMDA4KmY7eltuXT1iPDwyNHxiPj4+ODtBW25dPWI8PDE2fGI+Pj4xNjtCW25dPWI8PDh8Yj4+PjI0O0Nbbl09YjtiPTE2ODQzMDA5KkVeNjU1MzcqRF4yNTcqdF4xNjg0MzAwOCpuO3NbZl09Yjw8MjR8Yj4+Pjg7dVtmXT1iPDwxNnxiPj4+MTY7dltmXT1iPDw4fGI+Pj4yNDt3W2ZdPWI7bj8obj10XmdbZ1tnW0VedF1dXSxsXj1nW2dbbF1dKTpuPWw9MX12YXIgRj1bMCwxLDIsNCw4LFxuMTYsMzIsNjQsMTI4LDI3LDU0XSxyPXIuQUVTPXguZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYz10aGlzLl9rZXksZT1jLndvcmRzLGE9Yy5zaWdCeXRlcy80LGM9NCooKHRoaXMuX25Sb3VuZHM9YSs2KSsxKSxiPXRoaXMuX2tleVNjaGVkdWxlPVtdLGg9MDtoPGM7aCsrKWlmKGg8YSliW2hdPWVbaF07ZWxzZXt2YXIgZD1iW2gtMV07aCVhPzY8YSYmND09aCVhJiYoZD1qW2Q+Pj4yNF08PDI0fGpbZD4+PjE2JjI1NV08PDE2fGpbZD4+PjgmMjU1XTw8OHxqW2QmMjU1XSk6KGQ9ZDw8OHxkPj4+MjQsZD1qW2Q+Pj4yNF08PDI0fGpbZD4+PjE2JjI1NV08PDE2fGpbZD4+PjgmMjU1XTw8OHxqW2QmMjU1XSxkXj1GW2gvYXwwXTw8MjQpO2JbaF09YltoLWFdXmR9ZT10aGlzLl9pbnZLZXlTY2hlZHVsZT1bXTtmb3IoYT0wO2E8YzthKyspaD1jLWEsZD1hJTQ/YltoXTpiW2gtNF0sZVthXT00PmF8fDQ+PWg/ZDpzW2pbZD4+PjI0XV1edVtqW2Q+Pj4xNiYyNTVdXV52W2pbZD4+PlxuOCYyNTVdXV53W2pbZCYyNTVdXX0sZW5jcnlwdEJsb2NrOmZ1bmN0aW9uKGMsZSl7dGhpcy5fZG9DcnlwdEJsb2NrKGMsZSx0aGlzLl9rZXlTY2hlZHVsZSx6LEEsQixDLGopfSxkZWNyeXB0QmxvY2s6ZnVuY3Rpb24oYyxlKXt2YXIgYT1jW2UrMV07Y1tlKzFdPWNbZSszXTtjW2UrM109YTt0aGlzLl9kb0NyeXB0QmxvY2soYyxlLHRoaXMuX2ludktleVNjaGVkdWxlLHMsdSx2LHcseSk7YT1jW2UrMV07Y1tlKzFdPWNbZSszXTtjW2UrM109YX0sX2RvQ3J5cHRCbG9jazpmdW5jdGlvbihjLGUsYSxiLGgsZCxqLG0pe2Zvcih2YXIgbj10aGlzLl9uUm91bmRzLGY9Y1tlXV5hWzBdLGc9Y1tlKzFdXmFbMV0saz1jW2UrMl1eYVsyXSxwPWNbZSszXV5hWzNdLGw9NCx0PTE7dDxuO3QrKyl2YXIgcT1iW2Y+Pj4yNF1eaFtnPj4+MTYmMjU1XV5kW2s+Pj44JjI1NV1ealtwJjI1NV1eYVtsKytdLHI9YltnPj4+MjRdXmhbaz4+PjE2JjI1NV1eZFtwPj4+OCYyNTVdXmpbZiYyNTVdXmFbbCsrXSxzPVxuYltrPj4+MjRdXmhbcD4+PjE2JjI1NV1eZFtmPj4+OCYyNTVdXmpbZyYyNTVdXmFbbCsrXSxwPWJbcD4+PjI0XV5oW2Y+Pj4xNiYyNTVdXmRbZz4+PjgmMjU1XV5qW2smMjU1XV5hW2wrK10sZj1xLGc9cixrPXM7cT0obVtmPj4+MjRdPDwyNHxtW2c+Pj4xNiYyNTVdPDwxNnxtW2s+Pj44JjI1NV08PDh8bVtwJjI1NV0pXmFbbCsrXTtyPShtW2c+Pj4yNF08PDI0fG1baz4+PjE2JjI1NV08PDE2fG1bcD4+PjgmMjU1XTw8OHxtW2YmMjU1XSleYVtsKytdO3M9KG1baz4+PjI0XTw8MjR8bVtwPj4+MTYmMjU1XTw8MTZ8bVtmPj4+OCYyNTVdPDw4fG1bZyYyNTVdKV5hW2wrK107cD0obVtwPj4+MjRdPDwyNHxtW2Y+Pj4xNiYyNTVdPDwxNnxtW2c+Pj44JjI1NV08PDh8bVtrJjI1NV0pXmFbbCsrXTtjW2VdPXE7Y1tlKzFdPXI7Y1tlKzJdPXM7Y1tlKzNdPXB9LGtleVNpemU6OH0pO3EuQUVTPXguX2NyZWF0ZUhlbHBlcihyKX0pKCk7XG5cbi8qXG5DcnlwdG9KUyB2My4xLjIgdHJpcGxlZGVzLW1pbi5qc1xuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiBqKGIsYyl7dmFyIGE9KHRoaXMuX2xCbG9jaz4+PmJedGhpcy5fckJsb2NrKSZjO3RoaXMuX3JCbG9ja149YTt0aGlzLl9sQmxvY2tePWE8PGJ9ZnVuY3Rpb24gbChiLGMpe3ZhciBhPSh0aGlzLl9yQmxvY2s+Pj5iXnRoaXMuX2xCbG9jaykmYzt0aGlzLl9sQmxvY2tePWE7dGhpcy5fckJsb2NrXj1hPDxifXZhciBoPUNyeXB0b0pTLGU9aC5saWIsbj1lLldvcmRBcnJheSxlPWUuQmxvY2tDaXBoZXIsZz1oLmFsZ28scT1bNTcsNDksNDEsMzMsMjUsMTcsOSwxLDU4LDUwLDQyLDM0LDI2LDE4LDEwLDIsNTksNTEsNDMsMzUsMjcsMTksMTEsMyw2MCw1Miw0NCwzNiw2Myw1NSw0NywzOSwzMSwyMywxNSw3LDYyLDU0LDQ2LDM4LDMwLDIyLDE0LDYsNjEsNTMsNDUsMzcsMjksMjEsMTMsNSwyOCwyMCwxMiw0XSxwPVsxNCwxNywxMSwyNCwxLDUsMywyOCwxNSw2LDIxLDEwLDIzLDE5LDEyLDQsMjYsOCwxNiw3LDI3LDIwLDEzLDIsNDEsNTIsMzEsMzcsNDcsXG41NSwzMCw0MCw1MSw0NSwzMyw0OCw0NCw0OSwzOSw1NiwzNCw1Myw0Niw0Miw1MCwzNiwyOSwzMl0scj1bMSwyLDQsNiw4LDEwLDEyLDE0LDE1LDE3LDE5LDIxLDIzLDI1LDI3LDI4XSxzPVt7XCIwXCI6ODQyMTg4OCwyNjg0MzU0NTY6MzI3NjgsNTM2ODcwOTEyOjg0MjEzNzgsODA1MzA2MzY4OjIsMTA3Mzc0MTgyNDo1MTIsMTM0MjE3NzI4MDo4NDIxODkwLDE2MTA2MTI3MzY6ODM4OTEyMiwxODc5MDQ4MTkyOjgzODg2MDgsMjE0NzQ4MzY0ODo1MTQsMjQxNTkxOTEwNDo4Mzg5MTIwLDI2ODQzNTQ1NjA6MzMyODAsMjk1Mjc5MDAxNjo4NDIxMzc2LDMyMjEyMjU0NzI6MzI3NzAsMzQ4OTY2MDkyODo4Mzg4NjEwLDM3NTgwOTYzODQ6MCw0MDI2NTMxODQwOjMzMjgyLDEzNDIxNzcyODowLDQwMjY1MzE4NDo4NDIxODkwLDY3MTA4ODY0MDozMzI4Miw5Mzk1MjQwOTY6MzI3NjgsMTIwNzk1OTU1Mjo4NDIxODg4LDE0NzYzOTUwMDg6NTEyLDE3NDQ4MzA0NjQ6ODQyMTM3OCwyMDEzMjY1OTIwOjIsXG4yMjgxNzAxMzc2OjgzODkxMjAsMjU1MDEzNjgzMjozMzI4MCwyODE4NTcyMjg4Ojg0MjEzNzYsMzA4NzAwNzc0NDo4Mzg5MTIyLDMzNTU0NDMyMDA6ODM4ODYxMCwzNjIzODc4NjU2OjMyNzcwLDM4OTIzMTQxMTI6NTE0LDQxNjA3NDk1Njg6ODM4ODYwOCwxOjMyNzY4LDI2ODQzNTQ1NzoyLDUzNjg3MDkxMzo4NDIxODg4LDgwNTMwNjM2OTo4Mzg4NjA4LDEwNzM3NDE4MjU6ODQyMTM3OCwxMzQyMTc3MjgxOjMzMjgwLDE2MTA2MTI3Mzc6NTEyLDE4NzkwNDgxOTM6ODM4OTEyMiwyMTQ3NDgzNjQ5Ojg0MjE4OTAsMjQxNTkxOTEwNTo4NDIxMzc2LDI2ODQzNTQ1NjE6ODM4ODYxMCwyOTUyNzkwMDE3OjMzMjgyLDMyMjEyMjU0NzM6NTE0LDM0ODk2NjA5Mjk6ODM4OTEyMCwzNzU4MDk2Mzg1OjMyNzcwLDQwMjY1MzE4NDE6MCwxMzQyMTc3Mjk6ODQyMTg5MCw0MDI2NTMxODU6ODQyMTM3Niw2NzEwODg2NDE6ODM4ODYwOCw5Mzk1MjQwOTc6NTEyLDEyMDc5NTk1NTM6MzI3NjgsMTQ3NjM5NTAwOTo4Mzg4NjEwLFxuMTc0NDgzMDQ2NToyLDIwMTMyNjU5MjE6MzMyODIsMjI4MTcwMTM3NzozMjc3MCwyNTUwMTM2ODMzOjgzODkxMjIsMjgxODU3MjI4OTo1MTQsMzA4NzAwNzc0NTo4NDIxODg4LDMzNTU0NDMyMDE6ODM4OTEyMCwzNjIzODc4NjU3OjAsMzg5MjMxNDExMzozMzI4MCw0MTYwNzQ5NTY5Ojg0MjEzNzh9LHtcIjBcIjoxMDc0MjgyNTEyLDE2Nzc3MjE2OjE2Mzg0LDMzNTU0NDMyOjUyNDI4OCw1MDMzMTY0ODoxMDc0MjY2MTI4LDY3MTA4ODY0OjEwNzM3NDE4NDAsODM4ODYwODA6MTA3NDI4MjQ5NiwxMDA2NjMyOTY6MTA3Mzc1ODIwOCwxMTc0NDA1MTI6MTYsMTM0MjE3NzI4OjU0MDY3MiwxNTA5OTQ5NDQ6MTA3Mzc1ODIyNCwxNjc3NzIxNjA6MTA3Mzc0MTgyNCwxODQ1NDkzNzY6NTQwNjg4LDIwMTMyNjU5Mjo1MjQzMDQsMjE4MTAzODA4OjAsMjM0ODgxMDI0OjE2NDAwLDI1MTY1ODI0MDoxMDc0MjY2MTEyLDgzODg2MDg6MTA3Mzc1ODIwOCwyNTE2NTgyNDo1NDA2ODgsNDE5NDMwNDA6MTYsNTg3MjAyNTY6MTA3Mzc1ODIyNCxcbjc1NDk3NDcyOjEwNzQyODI1MTIsOTIyNzQ2ODg6MTA3Mzc0MTgyNCwxMDkwNTE5MDQ6NTI0Mjg4LDEyNTgyOTEyMDoxMDc0MjY2MTI4LDE0MjYwNjMzNjo1MjQzMDQsMTU5MzgzNTUyOjAsMTc2MTYwNzY4OjE2Mzg0LDE5MjkzNzk4NDoxMDc0MjY2MTEyLDIwOTcxNTIwMDoxMDczNzQxODQwLDIyNjQ5MjQxNjo1NDA2NzIsMjQzMjY5NjMyOjEwNzQyODI0OTYsMjYwMDQ2ODQ4OjE2NDAwLDI2ODQzNTQ1NjowLDI4NTIxMjY3MjoxMDc0MjY2MTI4LDMwMTk4OTg4ODoxMDczNzU4MjI0LDMxODc2NzEwNDoxMDc0MjgyNDk2LDMzNTU0NDMyMDoxMDc0MjY2MTEyLDM1MjMyMTUzNjoxNiwzNjkwOTg3NTI6NTQwNjg4LDM4NTg3NTk2ODoxNjM4NCw0MDI2NTMxODQ6MTY0MDAsNDE5NDMwNDAwOjUyNDI4OCw0MzYyMDc2MTY6NTI0MzA0LDQ1Mjk4NDgzMjoxMDczNzQxODQwLDQ2OTc2MjA0ODo1NDA2NzIsNDg2NTM5MjY0OjEwNzM3NTgyMDgsNTAzMzE2NDgwOjEwNzM3NDE4MjQsNTIwMDkzNjk2OjEwNzQyODI1MTIsXG4yNzY4MjQwNjQ6NTQwNjg4LDI5MzYwMTI4MDo1MjQyODgsMzEwMzc4NDk2OjEwNzQyNjYxMTIsMzI3MTU1NzEyOjE2Mzg0LDM0MzkzMjkyODoxMDczNzU4MjA4LDM2MDcxMDE0NDoxMDc0MjgyNTEyLDM3NzQ4NzM2MDoxNiwzOTQyNjQ1NzY6MTA3Mzc0MTgyNCw0MTEwNDE3OTI6MTA3NDI4MjQ5Niw0Mjc4MTkwMDg6MTA3Mzc0MTg0MCw0NDQ1OTYyMjQ6MTA3Mzc1ODIyNCw0NjEzNzM0NDA6NTI0MzA0LDQ3ODE1MDY1NjowLDQ5NDkyNzg3MjoxNjQwMCw1MTE3MDUwODg6MTA3NDI2NjEyOCw1Mjg0ODIzMDQ6NTQwNjcyfSx7XCIwXCI6MjYwLDEwNDg1NzY6MCwyMDk3MTUyOjY3MTA5MTIwLDMxNDU3Mjg6NjU3OTYsNDE5NDMwNDo2NTU0MCw1MjQyODgwOjY3MTA4ODY4LDYyOTE0NTY6NjcxNzQ2NjAsNzM0MDAzMjo2NzE3NDQwMCw4Mzg4NjA4OjY3MTA4ODY0LDk0MzcxODQ6NjcxNzQ2NTYsMTA0ODU3NjA6NjU3OTIsMTE1MzQzMzY6NjcxNzQ0MDQsMTI1ODI5MTI6NjcxMDkxMjQsMTM2MzE0ODg6NjU1MzYsXG4xNDY4MDA2NDo0LDE1NzI4NjQwOjI1Niw1MjQyODg6NjcxNzQ2NTYsMTU3Mjg2NDo2NzE3NDQwNCwyNjIxNDQwOjAsMzY3MDAxNjo2NzEwOTEyMCw0NzE4NTkyOjY3MTA4ODY4LDU3NjcxNjg6NjU1MzYsNjgxNTc0NDo2NTU0MCw3ODY0MzIwOjI2MCw4OTEyODk2OjQsOTk2MTQ3MjoyNTYsMTEwMTAwNDg6NjcxNzQ0MDAsMTIwNTg2MjQ6NjU3OTYsMTMxMDcyMDA6NjU3OTIsMTQxNTU3NzY6NjcxMDkxMjQsMTUyMDQzNTI6NjcxNzQ2NjAsMTYyNTI5Mjg6NjcxMDg4NjQsMTY3NzcyMTY6NjcxNzQ2NTYsMTc4MjU3OTI6NjU1NDAsMTg4NzQzNjg6NjU1MzYsMTk5MjI5NDQ6NjcxMDkxMjAsMjA5NzE1MjA6MjU2LDIyMDIwMDk2OjY3MTc0NjYwLDIzMDY4NjcyOjY3MTA4ODY4LDI0MTE3MjQ4OjAsMjUxNjU4MjQ6NjcxMDkxMjQsMjYyMTQ0MDA6NjcxMDg4NjQsMjcyNjI5NzY6NCwyODMxMTU1Mjo2NTc5MiwyOTM2MDEyODo2NzE3NDQwMCwzMDQwODcwNDoyNjAsMzE0NTcyODA6NjU3OTYsMzI1MDU4NTY6NjcxNzQ0MDQsXG4xNzMwMTUwNDo2NzEwODg2NCwxODM1MDA4MDoyNjAsMTkzOTg2NTY6NjcxNzQ2NTYsMjA0NDcyMzI6MCwyMTQ5NTgwODo2NTU0MCwyMjU0NDM4NDo2NzEwOTEyMCwyMzU5Mjk2MDoyNTYsMjQ2NDE1MzY6NjcxNzQ0MDQsMjU2OTAxMTI6NjU1MzYsMjY3Mzg2ODg6NjcxNzQ2NjAsMjc3ODcyNjQ6NjU3OTYsMjg4MzU4NDA6NjcxMDg4NjgsMjk4ODQ0MTY6NjcxMDkxMjQsMzA5MzI5OTI6NjcxNzQ0MDAsMzE5ODE1Njg6NCwzMzAzMDE0NDo2NTc5Mn0se1wiMFwiOjIxNTE2ODIwNDgsNjU1MzY6MjE0NzQ4NzgwOCwxMzEwNzI6NDE5ODQ2NCwxOTY2MDg6MjE1MTY3Nzk1MiwyNjIxNDQ6MCwzMjc2ODA6NDE5ODQwMCwzOTMyMTY6MjE0NzQ4MzcxMiw0NTg3NTI6NDE5NDM2OCw1MjQyODg6MjE0NzQ4MzY0OCw1ODk4MjQ6NDE5NDMwNCw2NTUzNjA6NjQsNzIwODk2OjIxNDc0ODc3NDQsNzg2NDMyOjIxNTE2NzgwMTYsODUxOTY4OjQxNjAsOTE3NTA0OjQwOTYsOTgzMDQwOjIxNTE2ODIxMTIsMzI3Njg6MjE0NzQ4NzgwOCxcbjk4MzA0OjY0LDE2Mzg0MDoyMTUxNjc4MDE2LDIyOTM3NjoyMTQ3NDg3NzQ0LDI5NDkxMjo0MTk4NDAwLDM2MDQ0ODoyMTUxNjgyMTEyLDQyNTk4NDowLDQ5MTUyMDoyMTUxNjc3OTUyLDU1NzA1Njo0MDk2LDYyMjU5MjoyMTUxNjgyMDQ4LDY4ODEyODo0MTk0MzA0LDc1MzY2NDo0MTYwLDgxOTIwMDoyMTQ3NDgzNjQ4LDg4NDczNjo0MTk0MzY4LDk1MDI3Mjo0MTk4NDY0LDEwMTU4MDg6MjE0NzQ4MzcxMiwxMDQ4NTc2OjQxOTQzNjgsMTExNDExMjo0MTk4NDAwLDExNzk2NDg6MjE0NzQ4MzcxMiwxMjQ1MTg0OjAsMTMxMDcyMDo0MTYwLDEzNzYyNTY6MjE1MTY3ODAxNiwxNDQxNzkyOjIxNTE2ODIwNDgsMTUwNzMyODoyMTQ3NDg3ODA4LDE1NzI4NjQ6MjE1MTY4MjExMiwxNjM4NDAwOjIxNDc0ODM2NDgsMTcwMzkzNjoyMTUxNjc3OTUyLDE3Njk0NzI6NDE5ODQ2NCwxODM1MDA4OjIxNDc0ODc3NDQsMTkwMDU0NDo0MTk0MzA0LDE5NjYwODA6NjQsMjAzMTYxNjo0MDk2LDEwODEzNDQ6MjE1MTY3Nzk1MixcbjExNDY4ODA6MjE1MTY4MjExMiwxMjEyNDE2OjAsMTI3Nzk1Mjo0MTk4NDAwLDEzNDM0ODg6NDE5NDM2OCwxNDA5MDI0OjIxNDc0ODM2NDgsMTQ3NDU2MDoyMTQ3NDg3ODA4LDE1NDAwOTY6NjQsMTYwNTYzMjoyMTQ3NDgzNzEyLDE2NzExNjg6NDA5NiwxNzM2NzA0OjIxNDc0ODc3NDQsMTgwMjI0MDoyMTUxNjc4MDE2LDE4Njc3NzY6NDE2MCwxOTMzMzEyOjIxNTE2ODIwNDgsMTk5ODg0ODo0MTk0MzA0LDIwNjQzODQ6NDE5ODQ2NH0se1wiMFwiOjEyOCw0MDk2OjE3MDM5MzYwLDgxOTI6MjYyMTQ0LDEyMjg4OjUzNjg3MDkxMiwxNjM4NDo1MzcxMzMxODQsMjA0ODA6MTY3NzczNDQsMjQ1NzY6NTUzNjQ4MjU2LDI4NjcyOjI2MjI3MiwzMjc2ODoxNjc3NzIxNiwzNjg2NDo1MzcxMzMwNTYsNDA5NjA6NTM2ODcxMDQwLDQ1MDU2OjU1MzkxMDQwMCw0OTE1Mjo1NTM5MTAyNzIsNTMyNDg6MCw1NzM0NDoxNzAzOTQ4OCw2MTQ0MDo1NTM2NDgxMjgsMjA0ODoxNzAzOTQ4OCw2MTQ0OjU1MzY0ODI1NixcbjEwMjQwOjEyOCwxNDMzNjoxNzAzOTM2MCwxODQzMjoyNjIxNDQsMjI1Mjg6NTM3MTMzMTg0LDI2NjI0OjU1MzkxMDI3MiwzMDcyMDo1MzY4NzA5MTIsMzQ4MTY6NTM3MTMzMDU2LDM4OTEyOjAsNDMwMDg6NTUzOTEwNDAwLDQ3MTA0OjE2Nzc3MzQ0LDUxMjAwOjUzNjg3MTA0MCw1NTI5Njo1NTM2NDgxMjgsNTkzOTI6MTY3NzcyMTYsNjM0ODg6MjYyMjcyLDY1NTM2OjI2MjE0NCw2OTYzMjoxMjgsNzM3Mjg6NTM2ODcwOTEyLDc3ODI0OjU1MzY0ODI1Niw4MTkyMDoxNjc3NzM0NCw4NjAxNjo1NTM5MTAyNzIsOTAxMTI6NTM3MTMzMTg0LDk0MjA4OjE2Nzc3MjE2LDk4MzA0OjU1MzkxMDQwMCwxMDI0MDA6NTUzNjQ4MTI4LDEwNjQ5NjoxNzAzOTM2MCwxMTA1OTI6NTM3MTMzMDU2LDExNDY4ODoyNjIyNzIsMTE4Nzg0OjUzNjg3MTA0MCwxMjI4ODA6MCwxMjY5NzY6MTcwMzk0ODgsNjc1ODQ6NTUzNjQ4MjU2LDcxNjgwOjE2Nzc3MjE2LDc1Nzc2OjE3MDM5MzYwLDc5ODcyOjUzNzEzMzE4NCxcbjgzOTY4OjUzNjg3MDkxMiw4ODA2NDoxNzAzOTQ4OCw5MjE2MDoxMjgsOTYyNTY6NTUzOTEwMjcyLDEwMDM1MjoyNjIyNzIsMTA0NDQ4OjU1MzkxMDQwMCwxMDg1NDQ6MCwxMTI2NDA6NTUzNjQ4MTI4LDExNjczNjoxNjc3NzM0NCwxMjA4MzI6MjYyMTQ0LDEyNDkyODo1MzcxMzMwNTYsMTI5MDI0OjUzNjg3MTA0MH0se1wiMFwiOjI2ODQzNTQ2NCwyNTY6ODE5Miw1MTI6MjcwNTMyNjA4LDc2ODoyNzA1NDA4MDgsMTAyNDoyNjg0NDM2NDgsMTI4MDoyMDk3MTUyLDE1MzY6MjA5NzE2MCwxNzkyOjI2ODQzNTQ1NiwyMDQ4OjAsMjMwNDoyNjg0NDM2NTYsMjU2MDoyMTA1MzQ0LDI4MTY6OCwzMDcyOjI3MDUzMjYxNiwzMzI4OjIxMDUzNTIsMzU4NDo4MjAwLDM4NDA6MjcwNTQwODAwLDEyODoyNzA1MzI2MDgsMzg0OjI3MDU0MDgwOCw2NDA6OCw4OTY6MjA5NzE1MiwxMTUyOjIxMDUzNTIsMTQwODoyNjg0MzU0NjQsMTY2NDoyNjg0NDM2NDgsMTkyMDo4MjAwLDIxNzY6MjA5NzE2MCwyNDMyOjgxOTIsXG4yNjg4OjI2ODQ0MzY1NiwyOTQ0OjI3MDUzMjYxNiwzMjAwOjAsMzQ1NjoyNzA1NDA4MDAsMzcxMjoyMTA1MzQ0LDM5Njg6MjY4NDM1NDU2LDQwOTY6MjY4NDQzNjQ4LDQzNTI6MjcwNTMyNjE2LDQ2MDg6MjcwNTQwODA4LDQ4NjQ6ODIwMCw1MTIwOjIwOTcxNTIsNTM3NjoyNjg0MzU0NTYsNTYzMjoyNjg0MzU0NjQsNTg4ODoyMTA1MzQ0LDYxNDQ6MjEwNTM1Miw2NDAwOjAsNjY1Njo4LDY5MTI6MjcwNTMyNjA4LDcxNjg6ODE5Miw3NDI0OjI2ODQ0MzY1Niw3NjgwOjI3MDU0MDgwMCw3OTM2OjIwOTcxNjAsNDIyNDo4LDQ0ODA6MjEwNTM0NCw0NzM2OjIwOTcxNTIsNDk5MjoyNjg0MzU0NjQsNTI0ODoyNjg0NDM2NDgsNTUwNDo4MjAwLDU3NjA6MjcwNTQwODA4LDYwMTY6MjcwNTMyNjA4LDYyNzI6MjcwNTQwODAwLDY1Mjg6MjcwNTMyNjE2LDY3ODQ6ODE5Miw3MDQwOjIxMDUzNTIsNzI5NjoyMDk3MTYwLDc1NTI6MCw3ODA4OjI2ODQzNTQ1Niw4MDY0OjI2ODQ0MzY1Nn0se1wiMFwiOjEwNDg1NzYsXG4xNjozMzU1NTQ1NywzMjoxMDI0LDQ4OjEwNDk2MDEsNjQ6MzQ2MDQwMzMsODA6MCw5NjoxLDExMjozNDYwMzAwOSwxMjg6MzM1NTU0NTYsMTQ0OjEwNDg1NzcsMTYwOjMzNTU0NDMzLDE3NjozNDYwNDAzMiwxOTI6MzQ2MDMwMDgsMjA4OjEwMjUsMjI0OjEwNDk2MDAsMjQwOjMzNTU0NDMyLDg6MzQ2MDMwMDksMjQ6MCw0MDozMzU1NTQ1Nyw1NjozNDYwNDAzMiw3MjoxMDQ4NTc2LDg4OjMzNTU0NDMzLDEwNDozMzU1NDQzMiwxMjA6MTAyNSwxMzY6MTA0OTYwMSwxNTI6MzM1NTU0NTYsMTY4OjM0NjAzMDA4LDE4NDoxMDQ4NTc3LDIwMDoxMDI0LDIxNjozNDYwNDAzMywyMzI6MSwyNDg6MTA0OTYwMCwyNTY6MzM1NTQ0MzIsMjcyOjEwNDg1NzYsMjg4OjMzNTU1NDU3LDMwNDozNDYwMzAwOSwzMjA6MTA0ODU3NywzMzY6MzM1NTU0NTYsMzUyOjM0NjA0MDMyLDM2ODoxMDQ5NjAxLDM4NDoxMDI1LDQwMDozNDYwNDAzMyw0MTY6MTA0OTYwMCw0MzI6MSw0NDg6MCw0NjQ6MzQ2MDMwMDgsNDgwOjMzNTU0NDMzLFxuNDk2OjEwMjQsMjY0OjEwNDk2MDAsMjgwOjMzNTU1NDU3LDI5NjozNDYwMzAwOSwzMTI6MSwzMjg6MzM1NTQ0MzIsMzQ0OjEwNDg1NzYsMzYwOjEwMjUsMzc2OjM0NjA0MDMyLDM5MjozMzU1NDQzMyw0MDg6MzQ2MDMwMDgsNDI0OjAsNDQwOjM0NjA0MDMzLDQ1NjoxMDQ5NjAxLDQ3MjoxMDI0LDQ4ODozMzU1NTQ1Niw1MDQ6MTA0ODU3N30se1wiMFwiOjEzNDIxOTgwOCwxOjEzMTA3MiwyOjEzNDIxNzcyOCwzOjMyLDQ6MTMxMTA0LDU6MTM0MzUwODgwLDY6MTM0MzUwODQ4LDc6MjA0OCw4OjEzNDM0ODgwMCw5OjEzNDIxOTc3NiwxMDoxMzMxMjAsMTE6MTM0MzQ4ODMyLDEyOjIwODAsMTM6MCwxNDoxMzQyMTc3NjAsMTU6MTMzMTUyLDIxNDc0ODM2NDg6MjA0OCwyMTQ3NDgzNjQ5OjEzNDM1MDg4MCwyMTQ3NDgzNjUwOjEzNDIxOTgwOCwyMTQ3NDgzNjUxOjEzNDIxNzcyOCwyMTQ3NDgzNjUyOjEzNDM0ODgwMCwyMTQ3NDgzNjUzOjEzMzEyMCwyMTQ3NDgzNjU0OjEzMzE1MiwyMTQ3NDgzNjU1OjMyLFxuMjE0NzQ4MzY1NjoxMzQyMTc3NjAsMjE0NzQ4MzY1NzoyMDgwLDIxNDc0ODM2NTg6MTMxMTA0LDIxNDc0ODM2NTk6MTM0MzUwODQ4LDIxNDc0ODM2NjA6MCwyMTQ3NDgzNjYxOjEzNDM0ODgzMiwyMTQ3NDgzNjYyOjEzNDIxOTc3NiwyMTQ3NDgzNjYzOjEzMTA3MiwxNjoxMzMxNTIsMTc6MTM0MzUwODQ4LDE4OjMyLDE5OjIwNDgsMjA6MTM0MjE5Nzc2LDIxOjEzNDIxNzc2MCwyMjoxMzQzNDg4MzIsMjM6MTMxMDcyLDI0OjAsMjU6MTMxMTA0LDI2OjEzNDM0ODgwMCwyNzoxMzQyMTk4MDgsMjg6MTM0MzUwODgwLDI5OjEzMzEyMCwzMDoyMDgwLDMxOjEzNDIxNzcyOCwyMTQ3NDgzNjY0OjEzMTA3MiwyMTQ3NDgzNjY1OjIwNDgsMjE0NzQ4MzY2NjoxMzQzNDg4MzIsMjE0NzQ4MzY2NzoxMzMxNTIsMjE0NzQ4MzY2ODozMiwyMTQ3NDgzNjY5OjEzNDM0ODgwMCwyMTQ3NDgzNjcwOjEzNDIxNzcyOCwyMTQ3NDgzNjcxOjEzNDIxOTgwOCwyMTQ3NDgzNjcyOjEzNDM1MDg4MCwyMTQ3NDgzNjczOjEzNDIxNzc2MCxcbjIxNDc0ODM2NzQ6MTM0MjE5Nzc2LDIxNDc0ODM2NzU6MCwyMTQ3NDgzNjc2OjEzMzEyMCwyMTQ3NDgzNjc3OjIwODAsMjE0NzQ4MzY3ODoxMzExMDQsMjE0NzQ4MzY3OToxMzQzNTA4NDh9XSx0PVs0MTYwNzQ5NTY5LDUyODQ4MjMwNCwzMzAzMDE0NCwyMDY0Mzg0LDEyOTAyNCw4MDY0LDUwNCwyMTQ3NDgzNjc5XSxtPWcuREVTPWUuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYj10aGlzLl9rZXkud29yZHMsYz1bXSxhPTA7NTY+YTthKyspe3ZhciBmPXFbYV0tMTtjW2FdPWJbZj4+PjVdPj4+MzEtZiUzMiYxfWI9dGhpcy5fc3ViS2V5cz1bXTtmb3IoZj0wOzE2PmY7ZisrKXtmb3IodmFyIGQ9YltmXT1bXSxlPXJbZl0sYT0wOzI0PmE7YSsrKWRbYS82fDBdfD1jWyhwW2FdLTErZSklMjhdPDwzMS1hJTYsZFs0KyhhLzZ8MCldfD1jWzI4KyhwW2ErMjRdLTErZSklMjhdPDwzMS1hJTY7ZFswXT1kWzBdPDwxfGRbMF0+Pj4zMTtmb3IoYT0xOzc+YTthKyspZFthXT4+Pj1cbjQqKGEtMSkrMztkWzddPWRbN108PDV8ZFs3XT4+PjI3fWM9dGhpcy5faW52U3ViS2V5cz1bXTtmb3IoYT0wOzE2PmE7YSsrKWNbYV09YlsxNS1hXX0sZW5jcnlwdEJsb2NrOmZ1bmN0aW9uKGIsYyl7dGhpcy5fZG9DcnlwdEJsb2NrKGIsYyx0aGlzLl9zdWJLZXlzKX0sZGVjcnlwdEJsb2NrOmZ1bmN0aW9uKGIsYyl7dGhpcy5fZG9DcnlwdEJsb2NrKGIsYyx0aGlzLl9pbnZTdWJLZXlzKX0sX2RvQ3J5cHRCbG9jazpmdW5jdGlvbihiLGMsYSl7dGhpcy5fbEJsb2NrPWJbY107dGhpcy5fckJsb2NrPWJbYysxXTtqLmNhbGwodGhpcyw0LDI1MjY0NTEzNSk7ai5jYWxsKHRoaXMsMTYsNjU1MzUpO2wuY2FsbCh0aGlzLDIsODU4OTkzNDU5KTtsLmNhbGwodGhpcyw4LDE2NzExOTM1KTtqLmNhbGwodGhpcywxLDE0MzE2NTU3NjUpO2Zvcih2YXIgZj0wOzE2PmY7ZisrKXtmb3IodmFyIGQ9YVtmXSxlPXRoaXMuX2xCbG9jayxoPXRoaXMuX3JCbG9jayxnPTAsaz0wOzg+aztrKyspZ3w9c1trXVsoKGheXG5kW2tdKSZ0W2tdKT4+PjBdO3RoaXMuX2xCbG9jaz1oO3RoaXMuX3JCbG9jaz1lXmd9YT10aGlzLl9sQmxvY2s7dGhpcy5fbEJsb2NrPXRoaXMuX3JCbG9jazt0aGlzLl9yQmxvY2s9YTtqLmNhbGwodGhpcywxLDE0MzE2NTU3NjUpO2wuY2FsbCh0aGlzLDgsMTY3MTE5MzUpO2wuY2FsbCh0aGlzLDIsODU4OTkzNDU5KTtqLmNhbGwodGhpcywxNiw2NTUzNSk7ai5jYWxsKHRoaXMsNCwyNTI2NDUxMzUpO2JbY109dGhpcy5fbEJsb2NrO2JbYysxXT10aGlzLl9yQmxvY2t9LGtleVNpemU6MixpdlNpemU6MixibG9ja1NpemU6Mn0pO2guREVTPWUuX2NyZWF0ZUhlbHBlcihtKTtnPWcuVHJpcGxlREVTPWUuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3ZhciBiPXRoaXMuX2tleS53b3Jkczt0aGlzLl9kZXMxPW0uY3JlYXRlRW5jcnlwdG9yKG4uY3JlYXRlKGIuc2xpY2UoMCwyKSkpO3RoaXMuX2RlczI9bS5jcmVhdGVFbmNyeXB0b3Iobi5jcmVhdGUoYi5zbGljZSgyLDQpKSk7dGhpcy5fZGVzMz1cbm0uY3JlYXRlRW5jcnlwdG9yKG4uY3JlYXRlKGIuc2xpY2UoNCw2KSkpfSxlbmNyeXB0QmxvY2s6ZnVuY3Rpb24oYixjKXt0aGlzLl9kZXMxLmVuY3J5cHRCbG9jayhiLGMpO3RoaXMuX2RlczIuZGVjcnlwdEJsb2NrKGIsYyk7dGhpcy5fZGVzMy5lbmNyeXB0QmxvY2soYixjKX0sZGVjcnlwdEJsb2NrOmZ1bmN0aW9uKGIsYyl7dGhpcy5fZGVzMy5kZWNyeXB0QmxvY2soYixjKTt0aGlzLl9kZXMyLmVuY3J5cHRCbG9jayhiLGMpO3RoaXMuX2RlczEuZGVjcnlwdEJsb2NrKGIsYyl9LGtleVNpemU6NixpdlNpemU6MixibG9ja1NpemU6Mn0pO2guVHJpcGxlREVTPWUuX2NyZWF0ZUhlbHBlcihnKX0pKCk7XG5cbi8qXG5DcnlwdG9KUyB2My4xLjIgZW5jLWJhc2U2NC5qc1xuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG4oZnVuY3Rpb24oKXt2YXIgaD1DcnlwdG9KUyxqPWgubGliLldvcmRBcnJheTtoLmVuYy5CYXNlNjQ9e3N0cmluZ2lmeTpmdW5jdGlvbihiKXt2YXIgZT1iLndvcmRzLGY9Yi5zaWdCeXRlcyxjPXRoaXMuX21hcDtiLmNsYW1wKCk7Yj1bXTtmb3IodmFyIGE9MDthPGY7YSs9Mylmb3IodmFyIGQ9KGVbYT4+PjJdPj4+MjQtOCooYSU0KSYyNTUpPDwxNnwoZVthKzE+Pj4yXT4+PjI0LTgqKChhKzEpJTQpJjI1NSk8PDh8ZVthKzI+Pj4yXT4+PjI0LTgqKChhKzIpJTQpJjI1NSxnPTA7ND5nJiZhKzAuNzUqZzxmO2crKyliLnB1c2goYy5jaGFyQXQoZD4+PjYqKDMtZykmNjMpKTtpZihlPWMuY2hhckF0KDY0KSlmb3IoO2IubGVuZ3RoJTQ7KWIucHVzaChlKTtyZXR1cm4gYi5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihiKXt2YXIgZT1iLmxlbmd0aCxmPXRoaXMuX21hcCxjPWYuY2hhckF0KDY0KTtjJiYoYz1iLmluZGV4T2YoYyksLTEhPWMmJihlPWMpKTtmb3IodmFyIGM9W10sYT0wLGQ9MDtkPFxuZTtkKyspaWYoZCU0KXt2YXIgZz1mLmluZGV4T2YoYi5jaGFyQXQoZC0xKSk8PDIqKGQlNCksaD1mLmluZGV4T2YoYi5jaGFyQXQoZCkpPj4+Ni0yKihkJTQpO2NbYT4+PjJdfD0oZ3xoKTw8MjQtOCooYSU0KTthKyt9cmV0dXJuIGouY3JlYXRlKGMsYSl9LF9tYXA6XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwifX0pKCk7XG5cbi8qXG5DcnlwdG9KUyB2My4xLjIgbWQ1LmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbihFKXtmdW5jdGlvbiBoKGEsZixnLGoscCxoLGspe2E9YSsoZiZnfH5mJmopK3AraztyZXR1cm4oYTw8aHxhPj4+MzItaCkrZn1mdW5jdGlvbiBrKGEsZixnLGoscCxoLGspe2E9YSsoZiZqfGcmfmopK3AraztyZXR1cm4oYTw8aHxhPj4+MzItaCkrZn1mdW5jdGlvbiBsKGEsZixnLGosaCxrLGwpe2E9YSsoZl5nXmopK2grbDtyZXR1cm4oYTw8a3xhPj4+MzItaykrZn1mdW5jdGlvbiBuKGEsZixnLGosaCxrLGwpe2E9YSsoZ14oZnx+aikpK2grbDtyZXR1cm4oYTw8a3xhPj4+MzItaykrZn1mb3IodmFyIHI9Q3J5cHRvSlMscT1yLmxpYixGPXEuV29yZEFycmF5LHM9cS5IYXNoZXIscT1yLmFsZ28sYT1bXSx0PTA7NjQ+dDt0KyspYVt0XT00Mjk0OTY3Mjk2KkUuYWJzKEUuc2luKHQrMSkpfDA7cT1xLk1ENT1zLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBGLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OF0pfSxcbl9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihtLGYpe2Zvcih2YXIgZz0wOzE2Pmc7ZysrKXt2YXIgaj1mK2cscD1tW2pdO21bal09KHA8PDh8cD4+PjI0KSYxNjcxMTkzNXwocDw8MjR8cD4+PjgpJjQyNzgyNTUzNjB9dmFyIGc9dGhpcy5faGFzaC53b3JkcyxqPW1bZiswXSxwPW1bZisxXSxxPW1bZisyXSxyPW1bZiszXSxzPW1bZis0XSx0PW1bZis1XSx1PW1bZis2XSx2PW1bZis3XSx3PW1bZis4XSx4PW1bZis5XSx5PW1bZisxMF0sej1tW2YrMTFdLEE9bVtmKzEyXSxCPW1bZisxM10sQz1tW2YrMTRdLEQ9bVtmKzE1XSxiPWdbMF0sYz1nWzFdLGQ9Z1syXSxlPWdbM10sYj1oKGIsYyxkLGUsaiw3LGFbMF0pLGU9aChlLGIsYyxkLHAsMTIsYVsxXSksZD1oKGQsZSxiLGMscSwxNyxhWzJdKSxjPWgoYyxkLGUsYixyLDIyLGFbM10pLGI9aChiLGMsZCxlLHMsNyxhWzRdKSxlPWgoZSxiLGMsZCx0LDEyLGFbNV0pLGQ9aChkLGUsYixjLHUsMTcsYVs2XSksYz1oKGMsZCxlLGIsdiwyMixhWzddKSxcbmI9aChiLGMsZCxlLHcsNyxhWzhdKSxlPWgoZSxiLGMsZCx4LDEyLGFbOV0pLGQ9aChkLGUsYixjLHksMTcsYVsxMF0pLGM9aChjLGQsZSxiLHosMjIsYVsxMV0pLGI9aChiLGMsZCxlLEEsNyxhWzEyXSksZT1oKGUsYixjLGQsQiwxMixhWzEzXSksZD1oKGQsZSxiLGMsQywxNyxhWzE0XSksYz1oKGMsZCxlLGIsRCwyMixhWzE1XSksYj1rKGIsYyxkLGUscCw1LGFbMTZdKSxlPWsoZSxiLGMsZCx1LDksYVsxN10pLGQ9ayhkLGUsYixjLHosMTQsYVsxOF0pLGM9ayhjLGQsZSxiLGosMjAsYVsxOV0pLGI9ayhiLGMsZCxlLHQsNSxhWzIwXSksZT1rKGUsYixjLGQseSw5LGFbMjFdKSxkPWsoZCxlLGIsYyxELDE0LGFbMjJdKSxjPWsoYyxkLGUsYixzLDIwLGFbMjNdKSxiPWsoYixjLGQsZSx4LDUsYVsyNF0pLGU9ayhlLGIsYyxkLEMsOSxhWzI1XSksZD1rKGQsZSxiLGMsciwxNCxhWzI2XSksYz1rKGMsZCxlLGIsdywyMCxhWzI3XSksYj1rKGIsYyxkLGUsQiw1LGFbMjhdKSxlPWsoZSxiLFxuYyxkLHEsOSxhWzI5XSksZD1rKGQsZSxiLGMsdiwxNCxhWzMwXSksYz1rKGMsZCxlLGIsQSwyMCxhWzMxXSksYj1sKGIsYyxkLGUsdCw0LGFbMzJdKSxlPWwoZSxiLGMsZCx3LDExLGFbMzNdKSxkPWwoZCxlLGIsYyx6LDE2LGFbMzRdKSxjPWwoYyxkLGUsYixDLDIzLGFbMzVdKSxiPWwoYixjLGQsZSxwLDQsYVszNl0pLGU9bChlLGIsYyxkLHMsMTEsYVszN10pLGQ9bChkLGUsYixjLHYsMTYsYVszOF0pLGM9bChjLGQsZSxiLHksMjMsYVszOV0pLGI9bChiLGMsZCxlLEIsNCxhWzQwXSksZT1sKGUsYixjLGQsaiwxMSxhWzQxXSksZD1sKGQsZSxiLGMsciwxNixhWzQyXSksYz1sKGMsZCxlLGIsdSwyMyxhWzQzXSksYj1sKGIsYyxkLGUseCw0LGFbNDRdKSxlPWwoZSxiLGMsZCxBLDExLGFbNDVdKSxkPWwoZCxlLGIsYyxELDE2LGFbNDZdKSxjPWwoYyxkLGUsYixxLDIzLGFbNDddKSxiPW4oYixjLGQsZSxqLDYsYVs0OF0pLGU9bihlLGIsYyxkLHYsMTAsYVs0OV0pLGQ9bihkLGUsYixjLFxuQywxNSxhWzUwXSksYz1uKGMsZCxlLGIsdCwyMSxhWzUxXSksYj1uKGIsYyxkLGUsQSw2LGFbNTJdKSxlPW4oZSxiLGMsZCxyLDEwLGFbNTNdKSxkPW4oZCxlLGIsYyx5LDE1LGFbNTRdKSxjPW4oYyxkLGUsYixwLDIxLGFbNTVdKSxiPW4oYixjLGQsZSx3LDYsYVs1Nl0pLGU9bihlLGIsYyxkLEQsMTAsYVs1N10pLGQ9bihkLGUsYixjLHUsMTUsYVs1OF0pLGM9bihjLGQsZSxiLEIsMjEsYVs1OV0pLGI9bihiLGMsZCxlLHMsNixhWzYwXSksZT1uKGUsYixjLGQseiwxMCxhWzYxXSksZD1uKGQsZSxiLGMscSwxNSxhWzYyXSksYz1uKGMsZCxlLGIseCwyMSxhWzYzXSk7Z1swXT1nWzBdK2J8MDtnWzFdPWdbMV0rY3wwO2dbMl09Z1syXStkfDA7Z1szXT1nWzNdK2V8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9kYXRhLGY9YS53b3JkcyxnPTgqdGhpcy5fbkRhdGFCeXRlcyxqPTgqYS5zaWdCeXRlcztmW2o+Pj41XXw9MTI4PDwyNC1qJTMyO3ZhciBoPUUuZmxvb3IoZy9cbjQyOTQ5NjcyOTYpO2ZbKGorNjQ+Pj45PDw0KSsxNV09KGg8PDh8aD4+PjI0KSYxNjcxMTkzNXwoaDw8MjR8aD4+PjgpJjQyNzgyNTUzNjA7Zlsoais2ND4+Pjk8PDQpKzE0XT0oZzw8OHxnPj4+MjQpJjE2NzExOTM1fChnPDwyNHxnPj4+OCkmNDI3ODI1NTM2MDthLnNpZ0J5dGVzPTQqKGYubGVuZ3RoKzEpO3RoaXMuX3Byb2Nlc3MoKTthPXRoaXMuX2hhc2g7Zj1hLndvcmRzO2ZvcihnPTA7ND5nO2crKylqPWZbZ10sZltnXT0oajw8OHxqPj4+MjQpJjE2NzExOTM1fChqPDwyNHxqPj4+OCkmNDI3ODI1NTM2MDtyZXR1cm4gYX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgYT1zLmNsb25lLmNhbGwodGhpcyk7YS5faGFzaD10aGlzLl9oYXNoLmNsb25lKCk7cmV0dXJuIGF9fSk7ci5NRDU9cy5fY3JlYXRlSGVscGVyKHEpO3IuSG1hY01ENT1zLl9jcmVhdGVIbWFjSGVscGVyKHEpfSkoTWF0aCk7XG5cbi8qXG5DcnlwdG9KUyB2My4xLjIgc2hhMS1taW4uanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7dmFyIGs9Q3J5cHRvSlMsYj1rLmxpYixtPWIuV29yZEFycmF5LGw9Yi5IYXNoZXIsZD1bXSxiPWsuYWxnby5TSEExPWwuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IG0uaW5pdChbMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4LDMyODUzNzc1MjBdKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKG4scCl7Zm9yKHZhciBhPXRoaXMuX2hhc2gud29yZHMsZT1hWzBdLGY9YVsxXSxoPWFbMl0saj1hWzNdLGI9YVs0XSxjPTA7ODA+YztjKyspe2lmKDE2PmMpZFtjXT1uW3ArY118MDtlbHNle3ZhciBnPWRbYy0zXV5kW2MtOF1eZFtjLTE0XV5kW2MtMTZdO2RbY109Zzw8MXxnPj4+MzF9Zz0oZTw8NXxlPj4+MjcpK2IrZFtjXTtnPTIwPmM/ZysoKGYmaHx+ZiZqKSsxNTE4NTAwMjQ5KTo0MD5jP2crKChmXmheaikrMTg1OTc3NTM5Myk6NjA+Yz9nKygoZiZofGYmanxoJmopLTE4OTQwMDc1ODgpOmcrKChmXmheXG5qKS04OTk0OTc1MTQpO2I9ajtqPWg7aD1mPDwzMHxmPj4+MjtmPWU7ZT1nfWFbMF09YVswXStlfDA7YVsxXT1hWzFdK2Z8MDthWzJdPWFbMl0raHwwO2FbM109YVszXStqfDA7YVs0XT1hWzRdK2J8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgYj10aGlzLl9kYXRhLGQ9Yi53b3JkcyxhPTgqdGhpcy5fbkRhdGFCeXRlcyxlPTgqYi5zaWdCeXRlcztkW2U+Pj41XXw9MTI4PDwyNC1lJTMyO2RbKGUrNjQ+Pj45PDw0KSsxNF09TWF0aC5mbG9vcihhLzQyOTQ5NjcyOTYpO2RbKGUrNjQ+Pj45PDw0KSsxNV09YTtiLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBiPWwuY2xvbmUuY2FsbCh0aGlzKTtiLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYn19KTtrLlNIQTE9bC5fY3JlYXRlSGVscGVyKGIpO2suSG1hY1NIQTE9bC5fY3JlYXRlSG1hY0hlbHBlcihiKX0pKCk7XG5cbi8qXG5DcnlwdG9KUyB2My4xLjIgc2hhMjU2LW1pbi5qc1xuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG4oZnVuY3Rpb24oayl7Zm9yKHZhciBnPUNyeXB0b0pTLGg9Zy5saWIsdj1oLldvcmRBcnJheSxqPWguSGFzaGVyLGg9Zy5hbGdvLHM9W10sdD1bXSx1PWZ1bmN0aW9uKHEpe3JldHVybiA0Mjk0OTY3Mjk2KihxLShxfDApKXwwfSxsPTIsYj0wOzY0PmI7KXt2YXIgZDthOntkPWw7Zm9yKHZhciB3PWsuc3FydChkKSxyPTI7cjw9dztyKyspaWYoIShkJXIpKXtkPSExO2JyZWFrIGF9ZD0hMH1kJiYoOD5iJiYoc1tiXT11KGsucG93KGwsMC41KSkpLHRbYl09dShrLnBvdyhsLDEvMykpLGIrKyk7bCsrfXZhciBuPVtdLGg9aC5TSEEyNTY9ai5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgdi5pbml0KHMuc2xpY2UoMCkpfSxfZG9Qcm9jZXNzQmxvY2s6ZnVuY3Rpb24ocSxoKXtmb3IodmFyIGE9dGhpcy5faGFzaC53b3JkcyxjPWFbMF0sZD1hWzFdLGI9YVsyXSxrPWFbM10sZj1hWzRdLGc9YVs1XSxqPWFbNl0sbD1hWzddLGU9MDs2ND5lO2UrKyl7aWYoMTY+ZSluW2VdPVxucVtoK2VdfDA7ZWxzZXt2YXIgbT1uW2UtMTVdLHA9bltlLTJdO25bZV09KChtPDwyNXxtPj4+NyleKG08PDE0fG0+Pj4xOClebT4+PjMpK25bZS03XSsoKHA8PDE1fHA+Pj4xNyleKHA8PDEzfHA+Pj4xOSlecD4+PjEwKStuW2UtMTZdfW09bCsoKGY8PDI2fGY+Pj42KV4oZjw8MjF8Zj4+PjExKV4oZjw8N3xmPj4+MjUpKSsoZiZnXn5mJmopK3RbZV0rbltlXTtwPSgoYzw8MzB8Yz4+PjIpXihjPDwxOXxjPj4+MTMpXihjPDwxMHxjPj4+MjIpKSsoYyZkXmMmYl5kJmIpO2w9ajtqPWc7Zz1mO2Y9ayttfDA7az1iO2I9ZDtkPWM7Yz1tK3B8MH1hWzBdPWFbMF0rY3wwO2FbMV09YVsxXStkfDA7YVsyXT1hWzJdK2J8MDthWzNdPWFbM10ra3wwO2FbNF09YVs0XStmfDA7YVs1XT1hWzVdK2d8MDthWzZdPWFbNl0ranwwO2FbN109YVs3XStsfDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5fZGF0YSxiPWQud29yZHMsYT04KnRoaXMuX25EYXRhQnl0ZXMsYz04KmQuc2lnQnl0ZXM7XG5iW2M+Pj41XXw9MTI4PDwyNC1jJTMyO2JbKGMrNjQ+Pj45PDw0KSsxNF09ay5mbG9vcihhLzQyOTQ5NjcyOTYpO2JbKGMrNjQ+Pj45PDw0KSsxNV09YTtkLnNpZ0J5dGVzPTQqYi5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBiPWouY2xvbmUuY2FsbCh0aGlzKTtiLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYn19KTtnLlNIQTI1Nj1qLl9jcmVhdGVIZWxwZXIoaCk7Zy5IbWFjU0hBMjU2PWouX2NyZWF0ZUhtYWNIZWxwZXIoaCl9KShNYXRoKTtcblxuLypcbkNyeXB0b0pTIHYzLjEuMiBzaGEyMjQtbWluLmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbigpe3ZhciBiPUNyeXB0b0pTLGQ9Yi5saWIuV29yZEFycmF5LGE9Yi5hbGdvLGM9YS5TSEEyNTYsYT1hLlNIQTIyND1jLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBkLmluaXQoWzMyMzgzNzEwMzIsOTE0MTUwNjYzLDgxMjcwMjk5OSw0MTQ0OTEyNjk3LDQyOTA3NzU4NTcsMTc1MDYwMzAyNSwxNjk0MDc2ODM5LDMyMDQwNzU0MjhdKX0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT1jLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7YS5zaWdCeXRlcy09NDtyZXR1cm4gYX19KTtiLlNIQTIyND1jLl9jcmVhdGVIZWxwZXIoYSk7Yi5IbWFjU0hBMjI0PWMuX2NyZWF0ZUhtYWNIZWxwZXIoYSl9KSgpO1xuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yIHNoYTUxMi1taW4uanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3JldHVybiBkLmNyZWF0ZS5hcHBseShkLGFyZ3VtZW50cyl9Zm9yKHZhciBuPUNyeXB0b0pTLHI9bi5saWIuSGFzaGVyLGU9bi54NjQsZD1lLldvcmQsVD1lLldvcmRBcnJheSxlPW4uYWxnbyxlYT1bYSgxMTE2MzUyNDA4LDM2MDk3Njc0NTgpLGEoMTg5OTQ0NzQ0MSw2MDI4OTE3MjUpLGEoMzA0OTMyMzQ3MSwzOTY0NDg0Mzk5KSxhKDM5MjEwMDk1NzMsMjE3MzI5NTU0OCksYSg5NjE5ODcxNjMsNDA4MTYyODQ3MiksYSgxNTA4OTcwOTkzLDMwNTM4MzQyNjUpLGEoMjQ1MzYzNTc0OCwyOTM3NjcxNTc5KSxhKDI4NzA3NjMyMjEsMzY2NDYwOTU2MCksYSgzNjI0MzgxMDgwLDI3MzQ4ODMzOTQpLGEoMzEwNTk4NDAxLDExNjQ5OTY1NDIpLGEoNjA3MjI1Mjc4LDEzMjM2MTA3NjQpLGEoMTQyNjg4MTk4NywzNTkwMzA0OTk0KSxhKDE5MjUwNzgzODgsNDA2ODE4MjM4MyksYSgyMTYyMDc4MjA2LDk5MTMzNjExMyksYSgyNjE0ODg4MTAzLDYzMzgwMzMxNyksXG5hKDMyNDgyMjI1ODAsMzQ3OTc3NDg2OCksYSgzODM1MzkwNDAxLDI2NjY2MTM0NTgpLGEoNDAyMjIyNDc3NCw5NDQ3MTExMzkpLGEoMjY0MzQ3MDc4LDIzNDEyNjI3NzMpLGEoNjA0ODA3NjI4LDIwMDc4MDA5MzMpLGEoNzcwMjU1OTgzLDE0OTU5OTA5MDEpLGEoMTI0OTE1MDEyMiwxODU2NDMxMjM1KSxhKDE1NTUwODE2OTIsMzE3NTIxODEzMiksYSgxOTk2MDY0OTg2LDIxOTg5NTA4MzcpLGEoMjU1NDIyMDg4MiwzOTk5NzE5MzM5KSxhKDI4MjE4MzQzNDksNzY2Nzg0MDE2KSxhKDI5NTI5OTY4MDgsMjU2NjU5NDg3OSksYSgzMjEwMzEzNjcxLDMyMDMzMzc5NTYpLGEoMzMzNjU3MTg5MSwxMDM0NDU3MDI2KSxhKDM1ODQ1Mjg3MTEsMjQ2Njk0ODkwMSksYSgxMTM5MjY5OTMsMzc1ODMyNjM4MyksYSgzMzgyNDE4OTUsMTY4NzE3OTM2KSxhKDY2NjMwNzIwNSwxMTg4MTc5OTY0KSxhKDc3MzUyOTkxMiwxNTQ2MDQ1NzM0KSxhKDEyOTQ3NTczNzIsMTUyMjgwNTQ4NSksYSgxMzk2MTgyMjkxLFxuMjY0MzgzMzgyMyksYSgxNjk1MTgzNzAwLDIzNDM1MjczOTApLGEoMTk4NjY2MTA1MSwxMDE0NDc3NDgwKSxhKDIxNzcwMjYzNTAsMTIwNjc1OTE0MiksYSgyNDU2OTU2MDM3LDM0NDA3NzYyNyksYSgyNzMwNDg1OTIxLDEyOTA4NjM0NjApLGEoMjgyMDMwMjQxMSwzMTU4NDU0MjczKSxhKDMyNTk3MzA4MDAsMzUwNTk1MjY1NyksYSgzMzQ1NzY0NzcxLDEwNjIxNzAwOCksYSgzNTE2MDY1ODE3LDM2MDYwMDgzNDQpLGEoMzYwMDM1MjgwNCwxNDMyNzI1Nzc2KSxhKDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCksYSgyNzU0MjMzNDQsODUxMTY5NzIwKSxhKDQzMDIyNzczNCwzMTAwODIzNzUyKSxhKDUwNjk0ODYxNiwxMzYzMjU4MTk1KSxhKDY1OTA2MDU1NiwzNzUwNjg1NTkzKSxhKDg4Mzk5Nzg3NywzNzg1MDUwMjgwKSxhKDk1ODEzOTU3MSwzMzE4MzA3NDI3KSxhKDEzMjI4MjIyMTgsMzgxMjcyMzQwMyksYSgxNTM3MDAyMDYzLDIwMDMwMzQ5OTUpLGEoMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5KSxcbmEoMTk1NTU2MjIyMiwxNTc1OTkwMDEyKSxhKDIwMjQxMDQ4MTUsMTEyNTU5MjkyOCksYSgyMjI3NzMwNDUyLDI3MTY5MDQzMDYpLGEoMjM2MTg1MjQyNCw0NDI3NzYwNDQpLGEoMjQyODQzNjQ3NCw1OTM2OTgzNDQpLGEoMjc1NjczNDE4NywzNzMzMTEwMjQ5KSxhKDMyMDQwMzE0NzksMjk5OTM1MTU3MyksYSgzMzI5MzI1Mjk4LDM4MTU5MjA0MjcpLGEoMzM5MTU2OTYxNCwzOTI4MzgzOTAwKSxhKDM1MTUyNjcyNzEsNTY2MjgwNzExKSxhKDM5NDAxODc2MDYsMzQ1NDA2OTUzNCksYSg0MTE4NjMwMjcxLDQwMDAyMzk5OTIpLGEoMTE2NDE4NDc0LDE5MTQxMzg1NTQpLGEoMTc0MjkyNDIxLDI3MzEwNTUyNzApLGEoMjg5MzgwMzU2LDMyMDM5OTMwMDYpLGEoNDYwMzkzMjY5LDMyMDYyMDMxNSksYSg2ODU0NzE3MzMsNTg3NDk2ODM2KSxhKDg1MjE0Mjk3MSwxMDg2NzkyODUxKSxhKDEwMTcwMzYyOTgsMzY1NTQzMTAwKSxhKDExMjYwMDA1ODAsMjYxODI5NzY3NiksYSgxMjg4MDMzNDcwLFxuMzQwOTg1NTE1OCksYSgxNTAxNTA1OTQ4LDQyMzQ1MDk4NjYpLGEoMTYwNzE2NzkxNSw5ODcxNjc0NjgpLGEoMTgxNjQwMjMxNiwxMjQ2MTg5NTkxKV0sdj1bXSx3PTA7ODA+dzt3Kyspdlt3XT1hKCk7ZT1lLlNIQTUxMj1yLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBULmluaXQoW25ldyBkLmluaXQoMTc3OTAzMzcwMyw0MDg5MjM1NzIwKSxuZXcgZC5pbml0KDMxNDQxMzQyNzcsMjIyNzg3MzU5NSksbmV3IGQuaW5pdCgxMDEzOTA0MjQyLDQyNzExNzU3MjMpLG5ldyBkLmluaXQoMjc3MzQ4MDc2MiwxNTk1NzUwMTI5KSxuZXcgZC5pbml0KDEzNTk4OTMxMTksMjkxNzU2NTEzNyksbmV3IGQuaW5pdCgyNjAwODIyOTI0LDcyNTUxMTE5OSksbmV3IGQuaW5pdCg1Mjg3MzQ2MzUsNDIxNTM4OTU0NyksbmV3IGQuaW5pdCgxNTQxNDU5MjI1LDMyNzAzMzIwOSldKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGEsZCl7Zm9yKHZhciBmPXRoaXMuX2hhc2gud29yZHMsXG5GPWZbMF0sZT1mWzFdLG49ZlsyXSxyPWZbM10sRz1mWzRdLEg9Zls1XSxJPWZbNl0sZj1mWzddLHc9Ri5oaWdoLEo9Ri5sb3csWD1lLmhpZ2gsSz1lLmxvdyxZPW4uaGlnaCxMPW4ubG93LFo9ci5oaWdoLE09ci5sb3csJD1HLmhpZ2gsTj1HLmxvdyxhYT1ILmhpZ2gsTz1ILmxvdyxiYT1JLmhpZ2gsUD1JLmxvdyxjYT1mLmhpZ2gsUT1mLmxvdyxrPXcsZz1KLHo9WCx4PUssQT1ZLHk9TCxVPVosQj1NLGw9JCxoPU4sUj1hYSxDPU8sUz1iYSxEPVAsVj1jYSxFPVEsbT0wOzgwPm07bSsrKXt2YXIgcz12W21dO2lmKDE2Pm0pdmFyIGo9cy5oaWdoPWFbZCsyKm1dfDAsYj1zLmxvdz1hW2QrMiptKzFdfDA7ZWxzZXt2YXIgaj12W20tMTVdLGI9ai5oaWdoLHA9ai5sb3csaj0oYj4+PjF8cDw8MzEpXihiPj4+OHxwPDwyNCleYj4+PjcscD0ocD4+PjF8Yjw8MzEpXihwPj4+OHxiPDwyNCleKHA+Pj43fGI8PDI1KSx1PXZbbS0yXSxiPXUuaGlnaCxjPXUubG93LHU9KGI+Pj4xOXxjPDwxMyleKGI8PFxuM3xjPj4+MjkpXmI+Pj42LGM9KGM+Pj4xOXxiPDwxMyleKGM8PDN8Yj4+PjI5KV4oYz4+PjZ8Yjw8MjYpLGI9dlttLTddLFc9Yi5oaWdoLHQ9dlttLTE2XSxxPXQuaGlnaCx0PXQubG93LGI9cCtiLmxvdyxqPWorVysoYj4+PjA8cD4+PjA/MTowKSxiPWIrYyxqPWordSsoYj4+PjA8Yz4+PjA/MTowKSxiPWIrdCxqPWorcSsoYj4+PjA8dD4+PjA/MTowKTtzLmhpZ2g9ajtzLmxvdz1ifXZhciBXPWwmUl5+bCZTLHQ9aCZDXn5oJkQscz1rJnpeayZBXnomQSxUPWcmeF5nJnleeCZ5LHA9KGs+Pj4yOHxnPDw0KV4oazw8MzB8Zz4+PjIpXihrPDwyNXxnPj4+NyksdT0oZz4+PjI4fGs8PDQpXihnPDwzMHxrPj4+MileKGc8PDI1fGs+Pj43KSxjPWVhW21dLGZhPWMuaGlnaCxkYT1jLmxvdyxjPUUrKChoPj4+MTR8bDw8MTgpXihoPj4+MTh8bDw8MTQpXihoPDwyM3xsPj4+OSkpLHE9VisoKGw+Pj4xNHxoPDwxOCleKGw+Pj4xOHxoPDwxNCleKGw8PDIzfGg+Pj45KSkrKGM+Pj4wPEU+Pj4wPzE6XG4wKSxjPWMrdCxxPXErVysoYz4+PjA8dD4+PjA/MTowKSxjPWMrZGEscT1xK2ZhKyhjPj4+MDxkYT4+PjA/MTowKSxjPWMrYixxPXEraisoYz4+PjA8Yj4+PjA/MTowKSxiPXUrVCxzPXArcysoYj4+PjA8dT4+PjA/MTowKSxWPVMsRT1ELFM9UixEPUMsUj1sLEM9aCxoPUIrY3wwLGw9VStxKyhoPj4+MDxCPj4+MD8xOjApfDAsVT1BLEI9eSxBPXoseT14LHo9ayx4PWcsZz1jK2J8MCxrPXErcysoZz4+PjA8Yz4+PjA/MTowKXwwfUo9Ri5sb3c9SitnO0YuaGlnaD13K2srKEo+Pj4wPGc+Pj4wPzE6MCk7Sz1lLmxvdz1LK3g7ZS5oaWdoPVgreisoSz4+PjA8eD4+PjA/MTowKTtMPW4ubG93PUwreTtuLmhpZ2g9WStBKyhMPj4+MDx5Pj4+MD8xOjApO009ci5sb3c9TStCO3IuaGlnaD1aK1UrKE0+Pj4wPEI+Pj4wPzE6MCk7Tj1HLmxvdz1OK2g7Ry5oaWdoPSQrbCsoTj4+PjA8aD4+PjA/MTowKTtPPUgubG93PU8rQztILmhpZ2g9YWErUisoTz4+PjA8Qz4+PjA/MTowKTtQPUkubG93PVArRDtcbkkuaGlnaD1iYStTKyhQPj4+MDxEPj4+MD8xOjApO1E9Zi5sb3c9UStFO2YuaGlnaD1jYStWKyhRPj4+MDxFPj4+MD8xOjApfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGY9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzO2RbZT4+PjVdfD0xMjg8PDI0LWUlMzI7ZFsoZSsxMjg+Pj4xMDw8NSkrMzBdPU1hdGguZmxvb3IoZi80Mjk0OTY3Mjk2KTtkWyhlKzEyOD4+PjEwPDw1KSszMV09ZjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNoLnRvWDMyKCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9ci5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhfSxibG9ja1NpemU6MzJ9KTtuLlNIQTUxMj1yLl9jcmVhdGVIZWxwZXIoZSk7bi5IbWFjU0hBNTEyPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZSl9KSgpO1xuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yIHNoYTM4NC1taW4uanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7dmFyIGM9Q3J5cHRvSlMsYT1jLng2NCxiPWEuV29yZCxlPWEuV29yZEFycmF5LGE9Yy5hbGdvLGQ9YS5TSEE1MTIsYT1hLlNIQTM4ND1kLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBlLmluaXQoW25ldyBiLmluaXQoMzQxODA3MDM2NSwzMjM4MzcxMDMyKSxuZXcgYi5pbml0KDE2NTQyNzAyNTAsOTE0MTUwNjYzKSxuZXcgYi5pbml0KDI0Mzg1MjkzNzAsODEyNzAyOTk5KSxuZXcgYi5pbml0KDM1NTQ2MjM2MCw0MTQ0OTEyNjk3KSxuZXcgYi5pbml0KDE3MzE0MDU0MTUsNDI5MDc3NTg1NyksbmV3IGIuaW5pdCgyMzk0MTgwMjMxLDE3NTA2MDMwMjUpLG5ldyBiLmluaXQoMzY3NTAwODUyNSwxNjk0MDc2ODM5KSxuZXcgYi5pbml0KDEyMDMwNjI4MTMsMzIwNDA3NTQyOCldKX0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT1kLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7YS5zaWdCeXRlcy09MTY7cmV0dXJuIGF9fSk7Yy5TSEEzODQ9XG5kLl9jcmVhdGVIZWxwZXIoYSk7Yy5IbWFjU0hBMzg0PWQuX2NyZWF0ZUhtYWNIZWxwZXIoYSl9KSgpO1xuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yIHJpcGVtZDE2MC1taW4uanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuLypcblxuKGMpIDIwMTIgYnkgQ2VkcmljIE1lc25pbC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gICAgLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gICAgLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cblRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG4oZnVuY3Rpb24oKXt2YXIgcT1DcnlwdG9KUyxkPXEubGliLG49ZC5Xb3JkQXJyYXkscD1kLkhhc2hlcixkPXEuYWxnbyx4PW4uY3JlYXRlKFswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDcsNCwxMywxLDEwLDYsMTUsMywxMiwwLDksNSwyLDE0LDExLDgsMywxMCwxNCw0LDksMTUsOCwxLDIsNywwLDYsMTMsMTEsNSwxMiwxLDksMTEsMTAsMCw4LDEyLDQsMTMsMyw3LDE1LDE0LDUsNiwyLDQsMCw1LDksNywxMiwyLDEwLDE0LDEsMyw4LDExLDYsMTUsMTNdKSx5PW4uY3JlYXRlKFs1LDE0LDcsMCw5LDIsMTEsNCwxMyw2LDE1LDgsMSwxMCwzLDEyLDYsMTEsMyw3LDAsMTMsNSwxMCwxNCwxNSw4LDEyLDQsOSwxLDIsMTUsNSwxLDMsNywxNCw2LDksMTEsOCwxMiwyLDEwLDAsNCwxMyw4LDYsNCwxLDMsMTEsMTUsMCw1LDEyLDIsMTMsOSw3LDEwLDE0LDEyLDE1LDEwLDQsMSw1LDgsNyw2LDIsMTMsMTQsMCwzLDksMTFdKSx6PW4uY3JlYXRlKFsxMSwxNCwxNSwxMixcbjUsOCw3LDksMTEsMTMsMTQsMTUsNiw3LDksOCw3LDYsOCwxMywxMSw5LDcsMTUsNywxMiwxNSw5LDExLDcsMTMsMTIsMTEsMTMsNiw3LDE0LDksMTMsMTUsMTQsOCwxMyw2LDUsMTIsNyw1LDExLDEyLDE0LDE1LDE0LDE1LDksOCw5LDE0LDUsNiw4LDYsNSwxMiw5LDE1LDUsMTEsNiw4LDEzLDEyLDUsMTIsMTMsMTQsMTEsOCw1LDZdKSxBPW4uY3JlYXRlKFs4LDksOSwxMSwxMywxNSwxNSw1LDcsNyw4LDExLDE0LDE0LDEyLDYsOSwxMywxNSw3LDEyLDgsOSwxMSw3LDcsMTIsNyw2LDE1LDEzLDExLDksNywxNSwxMSw4LDYsNiwxNCwxMiwxMyw1LDE0LDEzLDEzLDcsNSwxNSw1LDgsMTEsMTQsMTQsNiwxNCw2LDksMTIsOSwxMiw1LDE1LDgsOCw1LDEyLDksMTIsNSwxNCw2LDgsMTMsNiw1LDE1LDEzLDExLDExXSksQj1uLmNyZWF0ZShbMCwxNTE4NTAwMjQ5LDE4NTk3NzUzOTMsMjQwMDk1OTcwOCwyODQwODUzODM4XSksQz1uLmNyZWF0ZShbMTM1MjgyOTkyNiwxNTQ4NjAzNjg0LDE4MzYwNzI2OTEsXG4yMDUzOTk0MjE3LDBdKSxkPWQuUklQRU1EMTYwPXAuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bi5jcmVhdGUoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLHYpe2Zvcih2YXIgYj0wOzE2PmI7YisrKXt2YXIgYz12K2IsZj1lW2NdO2VbY109KGY8PDh8Zj4+PjI0KSYxNjcxMTkzNXwoZjw8MjR8Zj4+PjgpJjQyNzgyNTUzNjB9dmFyIGM9dGhpcy5faGFzaC53b3JkcyxmPUIud29yZHMsZD1DLndvcmRzLG49eC53b3JkcyxxPXkud29yZHMscD16LndvcmRzLHc9QS53b3Jkcyx0LGcsaCxqLHIsdSxrLGwsbSxzO3U9dD1jWzBdO2s9Zz1jWzFdO2w9aD1jWzJdO209aj1jWzNdO3M9cj1jWzRdO2Zvcih2YXIgYSxiPTA7ODA+YjtiKz0xKWE9dCtlW3YrbltiXV18MCxhPTE2PmI/YSsoKGdeaF5qKStmWzBdKTozMj5iP2ErKChnJmh8fmcmaikrZlsxXSk6NDg+Yj9cbmErKCgoZ3x+aCleaikrZlsyXSk6NjQ+Yj9hKygoZyZqfGgmfmopK2ZbM10pOmErKChnXihofH5qKSkrZls0XSksYXw9MCxhPWE8PHBbYl18YT4+PjMyLXBbYl0sYT1hK3J8MCx0PXIscj1qLGo9aDw8MTB8aD4+PjIyLGg9ZyxnPWEsYT11K2VbditxW2JdXXwwLGE9MTY+Yj9hKygoa14obHx+bSkpK2RbMF0pOjMyPmI/YSsoKGsmbXxsJn5tKStkWzFdKTo0OD5iP2ErKCgoa3x+bClebSkrZFsyXSk6NjQ+Yj9hKygoayZsfH5rJm0pK2RbM10pOmErKChrXmxebSkrZFs0XSksYXw9MCxhPWE8PHdbYl18YT4+PjMyLXdbYl0sYT1hK3N8MCx1PXMscz1tLG09bDw8MTB8bD4+PjIyLGw9ayxrPWE7YT1jWzFdK2grbXwwO2NbMV09Y1syXStqK3N8MDtjWzJdPWNbM10rcit1fDA7Y1szXT1jWzRdK3Qra3wwO2NbNF09Y1swXStnK2x8MDtjWzBdPWF9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fZGF0YSxkPWUud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsYz04KmUuc2lnQnl0ZXM7XG5kW2M+Pj41XXw9MTI4PDwyNC1jJTMyO2RbKGMrNjQ+Pj45PDw0KSsxNF09KGI8PDh8Yj4+PjI0KSYxNjcxMTkzNXwoYjw8MjR8Yj4+PjgpJjQyNzgyNTUzNjA7ZS5zaWdCeXRlcz00KihkLmxlbmd0aCsxKTt0aGlzLl9wcm9jZXNzKCk7ZT10aGlzLl9oYXNoO2Q9ZS53b3Jkcztmb3IoYj0wOzU+YjtiKyspYz1kW2JdLGRbYl09KGM8PDh8Yz4+PjI0KSYxNjcxMTkzNXwoYzw8MjR8Yz4+PjgpJjQyNzgyNTUzNjA7cmV0dXJuIGV9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGQ9cC5jbG9uZS5jYWxsKHRoaXMpO2QuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBkfX0pO3EuUklQRU1EMTYwPXAuX2NyZWF0ZUhlbHBlcihkKTtxLkhtYWNSSVBFTUQxNjA9cC5fY3JlYXRlSG1hY0hlbHBlcihkKX0pKE1hdGgpO1xuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yIGhtYWMuanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7dmFyIGM9Q3J5cHRvSlMsaz1jLmVuYy5VdGY4O2MuYWxnby5ITUFDPWMubGliLkJhc2UuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYil7YT10aGlzLl9oYXNoZXI9bmV3IGEuaW5pdDtcInN0cmluZ1wiPT10eXBlb2YgYiYmKGI9ay5wYXJzZShiKSk7dmFyIGM9YS5ibG9ja1NpemUsZT00KmM7Yi5zaWdCeXRlcz5lJiYoYj1hLmZpbmFsaXplKGIpKTtiLmNsYW1wKCk7Zm9yKHZhciBmPXRoaXMuX29LZXk9Yi5jbG9uZSgpLGc9dGhpcy5faUtleT1iLmNsb25lKCksaD1mLndvcmRzLGo9Zy53b3JkcyxkPTA7ZDxjO2QrKyloW2RdXj0xNTQ5NTU2ODI4LGpbZF1ePTkwOTUyMjQ4NjtmLnNpZ0J5dGVzPWcuc2lnQnl0ZXM9ZTt0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faGFzaGVyO2EucmVzZXQoKTthLnVwZGF0ZSh0aGlzLl9pS2V5KX0sdXBkYXRlOmZ1bmN0aW9uKGEpe3RoaXMuX2hhc2hlci51cGRhdGUoYSk7cmV0dXJuIHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe3ZhciBiPVxudGhpcy5faGFzaGVyO2E9Yi5maW5hbGl6ZShhKTtiLnJlc2V0KCk7cmV0dXJuIGIuZmluYWxpemUodGhpcy5fb0tleS5jbG9uZSgpLmNvbmNhdChhKSl9fSl9KSgpO1xuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yIHBia2RmMi1taW4uanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7dmFyIGI9Q3J5cHRvSlMsYT1iLmxpYixkPWEuQmFzZSxtPWEuV29yZEFycmF5LGE9Yi5hbGdvLHE9YS5ITUFDLGw9YS5QQktERjI9ZC5leHRlbmQoe2NmZzpkLmV4dGVuZCh7a2V5U2l6ZTo0LGhhc2hlcjphLlNIQTEsaXRlcmF0aW9uczoxfSksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSl9LGNvbXB1dGU6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5jZmcsZj1xLmNyZWF0ZShjLmhhc2hlcixhKSxnPW0uY3JlYXRlKCksZD1tLmNyZWF0ZShbMV0pLGw9Zy53b3JkcyxyPWQud29yZHMsbj1jLmtleVNpemUsYz1jLml0ZXJhdGlvbnM7bC5sZW5ndGg8bjspe3ZhciBoPWYudXBkYXRlKGIpLmZpbmFsaXplKGQpO2YucmVzZXQoKTtmb3IodmFyIGo9aC53b3JkcyxzPWoubGVuZ3RoLGs9aCxwPTE7cDxjO3ArKyl7az1mLmZpbmFsaXplKGspO2YucmVzZXQoKTtmb3IodmFyIHQ9ay53b3JkcyxlPTA7ZTxzO2UrKylqW2VdXj10W2VdfWcuY29uY2F0KGgpO1xuclswXSsrfWcuc2lnQnl0ZXM9NCpuO3JldHVybiBnfX0pO2IuUEJLREYyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbC5jcmVhdGUoYykuY29tcHV0ZShhLGIpfX0pKCk7XG5cbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuICovXG52YXIgYjY0bWFwPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO3ZhciBiNjRwYWQ9XCI9XCI7ZnVuY3Rpb24gaGV4MmI2NChkKXt2YXIgYjt2YXIgZTt2YXIgYT1cIlwiO2ZvcihiPTA7YiszPD1kLmxlbmd0aDtiKz0zKXtlPXBhcnNlSW50KGQuc3Vic3RyaW5nKGIsYiszKSwxNik7YSs9YjY0bWFwLmNoYXJBdChlPj42KStiNjRtYXAuY2hhckF0KGUmNjMpfWlmKGIrMT09ZC5sZW5ndGgpe2U9cGFyc2VJbnQoZC5zdWJzdHJpbmcoYixiKzEpLDE2KTthKz1iNjRtYXAuY2hhckF0KGU8PDIpfWVsc2V7aWYoYisyPT1kLmxlbmd0aCl7ZT1wYXJzZUludChkLnN1YnN0cmluZyhiLGIrMiksMTYpO2ErPWI2NG1hcC5jaGFyQXQoZT4+MikrYjY0bWFwLmNoYXJBdCgoZSYzKTw8NCl9fWlmKGI2NHBhZCl7d2hpbGUoKGEubGVuZ3RoJjMpPjApe2ErPWI2NHBhZH19cmV0dXJuIGF9ZnVuY3Rpb24gYjY0dG9oZXgoZil7dmFyIGQ9XCJcIjt2YXIgZTt2YXIgYj0wO3ZhciBjO3ZhciBhO2ZvcihlPTA7ZTxmLmxlbmd0aDsrK2Upe2lmKGYuY2hhckF0KGUpPT1iNjRwYWQpe2JyZWFrfWE9YjY0bWFwLmluZGV4T2YoZi5jaGFyQXQoZSkpO2lmKGE8MCl7Y29udGludWV9aWYoYj09MCl7ZCs9aW50MmNoYXIoYT4+Mik7Yz1hJjM7Yj0xfWVsc2V7aWYoYj09MSl7ZCs9aW50MmNoYXIoKGM8PDIpfChhPj40KSk7Yz1hJjE1O2I9Mn1lbHNle2lmKGI9PTIpe2QrPWludDJjaGFyKGMpO2QrPWludDJjaGFyKGE+PjIpO2M9YSYzO2I9M31lbHNle2QrPWludDJjaGFyKChjPDwyKXwoYT4+NCkpO2QrPWludDJjaGFyKGEmMTUpO2I9MH19fX1pZihiPT0xKXtkKz1pbnQyY2hhcihjPDwyKX1yZXR1cm4gZH1mdW5jdGlvbiBiNjR0b0JBKGUpe3ZhciBkPWI2NHRvaGV4KGUpO3ZhciBjO3ZhciBiPW5ldyBBcnJheSgpO2ZvcihjPTA7MipjPGQubGVuZ3RoOysrYyl7YltjXT1wYXJzZUludChkLnN1YnN0cmluZygyKmMsMipjKzIpLDE2KX1yZXR1cm4gYn07XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xudmFyIGRiaXRzO3ZhciBjYW5hcnk9MjQ0ODM3ODE0MDk0NTkwO3ZhciBqX2xtPSgoY2FuYXJ5JjE2Nzc3MjE1KT09MTU3MTUwNzApO2Z1bmN0aW9uIEJpZ0ludGVnZXIoZSxkLGYpe2lmKGUhPW51bGwpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXt0aGlzLmZyb21OdW1iZXIoZSxkLGYpfWVsc2V7aWYoZD09bnVsbCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpe3RoaXMuZnJvbVN0cmluZyhlLDI1Nil9ZWxzZXt0aGlzLmZyb21TdHJpbmcoZSxkKX19fX1mdW5jdGlvbiBuYmkoKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIobnVsbCl9ZnVuY3Rpb24gYW0xKGYsYSxiLGUsaCxnKXt3aGlsZSgtLWc+PTApe3ZhciBkPWEqdGhpc1tmKytdK2JbZV0raDtoPU1hdGguZmxvb3IoZC82NzEwODg2NCk7YltlKytdPWQmNjcxMDg4NjN9cmV0dXJuIGh9ZnVuY3Rpb24gYW0yKGYscSxyLGUsbyxhKXt2YXIgaz1xJjMyNzY3LHA9cT4+MTU7d2hpbGUoLS1hPj0wKXt2YXIgZD10aGlzW2ZdJjMyNzY3O3ZhciBnPXRoaXNbZisrXT4+MTU7dmFyIGI9cCpkK2cqaztkPWsqZCsoKGImMzI3NjcpPDwxNSkrcltlXSsobyYxMDczNzQxODIzKTtvPShkPj4+MzApKyhiPj4+MTUpK3AqZysobz4+PjMwKTtyW2UrK109ZCYxMDczNzQxODIzfXJldHVybiBvfWZ1bmN0aW9uIGFtMyhmLHEscixlLG8sYSl7dmFyIGs9cSYxNjM4MyxwPXE+PjE0O3doaWxlKC0tYT49MCl7dmFyIGQ9dGhpc1tmXSYxNjM4Mzt2YXIgZz10aGlzW2YrK10+PjE0O3ZhciBiPXAqZCtnKms7ZD1rKmQrKChiJjE2MzgzKTw8MTQpK3JbZV0rbztvPShkPj4yOCkrKGI+PjE0KStwKmc7cltlKytdPWQmMjY4NDM1NDU1fXJldHVybiBvfWlmKGpfbG0mJihuYXZpZ2F0b3IuYXBwTmFtZT09XCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIikpe0JpZ0ludGVnZXIucHJvdG90eXBlLmFtPWFtMjtkYml0cz0zMH1lbHNle2lmKGpfbG0mJihuYXZpZ2F0b3IuYXBwTmFtZSE9XCJOZXRzY2FwZVwiKSl7QmlnSW50ZWdlci5wcm90b3R5cGUuYW09YW0xO2RiaXRzPTI2fWVsc2V7QmlnSW50ZWdlci5wcm90b3R5cGUuYW09YW0zO2RiaXRzPTI4fX1CaWdJbnRlZ2VyLnByb3RvdHlwZS5EQj1kYml0cztCaWdJbnRlZ2VyLnByb3RvdHlwZS5ETT0oKDE8PGRiaXRzKS0xKTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5EVj0oMTw8ZGJpdHMpO3ZhciBCSV9GUD01MjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5GVj1NYXRoLnBvdygyLEJJX0ZQKTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMT1CSV9GUC1kYml0cztCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMj0yKmRiaXRzLUJJX0ZQO3ZhciBCSV9STT1cIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO3ZhciBCSV9SQz1uZXcgQXJyYXkoKTt2YXIgcnIsdnY7cnI9XCIwXCIuY2hhckNvZGVBdCgwKTtmb3IodnY9MDt2djw9OTsrK3Z2KXtCSV9SQ1tycisrXT12dn1ycj1cImFcIi5jaGFyQ29kZUF0KDApO2Zvcih2dj0xMDt2djwzNjsrK3Z2KXtCSV9SQ1tycisrXT12dn1ycj1cIkFcIi5jaGFyQ29kZUF0KDApO2Zvcih2dj0xMDt2djwzNjsrK3Z2KXtCSV9SQ1tycisrXT12dn1mdW5jdGlvbiBpbnQyY2hhcihhKXtyZXR1cm4gQklfUk0uY2hhckF0KGEpfWZ1bmN0aW9uIGludEF0KGIsYSl7dmFyIGQ9QklfUkNbYi5jaGFyQ29kZUF0KGEpXTtyZXR1cm4oZD09bnVsbCk/LTE6ZH1mdW5jdGlvbiBibnBDb3B5VG8oYil7Zm9yKHZhciBhPXRoaXMudC0xO2E+PTA7LS1hKXtiW2FdPXRoaXNbYV19Yi50PXRoaXMudDtiLnM9dGhpcy5zfWZ1bmN0aW9uIGJucEZyb21JbnQoYSl7dGhpcy50PTE7dGhpcy5zPShhPDApPy0xOjA7aWYoYT4wKXt0aGlzWzBdPWF9ZWxzZXtpZihhPC0xKXt0aGlzWzBdPWErdGhpcy5EVn1lbHNle3RoaXMudD0wfX19ZnVuY3Rpb24gbmJ2KGEpe3ZhciBiPW5iaSgpO2IuZnJvbUludChhKTtyZXR1cm4gYn1mdW5jdGlvbiBibnBGcm9tU3RyaW5nKGgsYyl7dmFyIGU7aWYoYz09MTYpe2U9NH1lbHNle2lmKGM9PTgpe2U9M31lbHNle2lmKGM9PTI1Nil7ZT04fWVsc2V7aWYoYz09Mil7ZT0xfWVsc2V7aWYoYz09MzIpe2U9NX1lbHNle2lmKGM9PTQpe2U9Mn1lbHNle3RoaXMuZnJvbVJhZGl4KGgsYyk7cmV0dXJufX19fX19dGhpcy50PTA7dGhpcy5zPTA7dmFyIGc9aC5sZW5ndGgsZD1mYWxzZSxmPTA7d2hpbGUoLS1nPj0wKXt2YXIgYT0oZT09OCk/aFtnXSYyNTU6aW50QXQoaCxnKTtpZihhPDApe2lmKGguY2hhckF0KGcpPT1cIi1cIil7ZD10cnVlfWNvbnRpbnVlfWQ9ZmFsc2U7aWYoZj09MCl7dGhpc1t0aGlzLnQrK109YX1lbHNle2lmKGYrZT50aGlzLkRCKXt0aGlzW3RoaXMudC0xXXw9KGEmKCgxPDwodGhpcy5EQi1mKSktMSkpPDxmO3RoaXNbdGhpcy50KytdPShhPj4odGhpcy5EQi1mKSl9ZWxzZXt0aGlzW3RoaXMudC0xXXw9YTw8Zn19Zis9ZTtpZihmPj10aGlzLkRCKXtmLT10aGlzLkRCfX1pZihlPT04JiYoaFswXSYxMjgpIT0wKXt0aGlzLnM9LTE7aWYoZj4wKXt0aGlzW3RoaXMudC0xXXw9KCgxPDwodGhpcy5EQi1mKSktMSk8PGZ9fXRoaXMuY2xhbXAoKTtpZihkKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyx0aGlzKX19ZnVuY3Rpb24gYm5wQ2xhbXAoKXt2YXIgYT10aGlzLnMmdGhpcy5ETTt3aGlsZSh0aGlzLnQ+MCYmdGhpc1t0aGlzLnQtMV09PWEpey0tdGhpcy50fX1mdW5jdGlvbiBiblRvU3RyaW5nKGMpe2lmKHRoaXMuczwwKXtyZXR1cm5cIi1cIit0aGlzLm5lZ2F0ZSgpLnRvU3RyaW5nKGMpfXZhciBlO2lmKGM9PTE2KXtlPTR9ZWxzZXtpZihjPT04KXtlPTN9ZWxzZXtpZihjPT0yKXtlPTF9ZWxzZXtpZihjPT0zMil7ZT01fWVsc2V7aWYoYz09NCl7ZT0yfWVsc2V7cmV0dXJuIHRoaXMudG9SYWRpeChjKX19fX19dmFyIGc9KDE8PGUpLTEsbCxhPWZhbHNlLGg9XCJcIixmPXRoaXMudDt2YXIgaj10aGlzLkRCLShmKnRoaXMuREIpJWU7aWYoZi0tPjApe2lmKGo8dGhpcy5EQiYmKGw9dGhpc1tmXT4+aik+MCl7YT10cnVlO2g9aW50MmNoYXIobCl9d2hpbGUoZj49MCl7aWYoajxlKXtsPSh0aGlzW2ZdJigoMTw8aiktMSkpPDwoZS1qKTtsfD10aGlzWy0tZl0+PihqKz10aGlzLkRCLWUpfWVsc2V7bD0odGhpc1tmXT4+KGotPWUpKSZnO2lmKGo8PTApe2orPXRoaXMuREI7LS1mfX1pZihsPjApe2E9dHJ1ZX1pZihhKXtoKz1pbnQyY2hhcihsKX19fXJldHVybiBhP2g6XCIwXCJ9ZnVuY3Rpb24gYm5OZWdhdGUoKXt2YXIgYT1uYmkoKTtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyxhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkFicygpe3JldHVybih0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzfWZ1bmN0aW9uIGJuQ29tcGFyZVRvKGIpe3ZhciBkPXRoaXMucy1iLnM7aWYoZCE9MCl7cmV0dXJuIGR9dmFyIGM9dGhpcy50O2Q9Yy1iLnQ7aWYoZCE9MCl7cmV0dXJuKHRoaXMuczwwKT8tZDpkfXdoaWxlKC0tYz49MCl7aWYoKGQ9dGhpc1tjXS1iW2NdKSE9MCl7cmV0dXJuIGR9fXJldHVybiAwfWZ1bmN0aW9uIG5iaXRzKGEpe3ZhciBjPTEsYjtpZigoYj1hPj4+MTYpIT0wKXthPWI7Yys9MTZ9aWYoKGI9YT4+OCkhPTApe2E9YjtjKz04fWlmKChiPWE+PjQpIT0wKXthPWI7Yys9NH1pZigoYj1hPj4yKSE9MCl7YT1iO2MrPTJ9aWYoKGI9YT4+MSkhPTApe2E9YjtjKz0xfXJldHVybiBjfWZ1bmN0aW9uIGJuQml0TGVuZ3RoKCl7aWYodGhpcy50PD0wKXtyZXR1cm4gMH1yZXR1cm4gdGhpcy5EQioodGhpcy50LTEpK25iaXRzKHRoaXNbdGhpcy50LTFdXih0aGlzLnMmdGhpcy5ETSkpfWZ1bmN0aW9uIGJucERMU2hpZnRUbyhjLGIpe3ZhciBhO2ZvcihhPXRoaXMudC0xO2E+PTA7LS1hKXtiW2ErY109dGhpc1thXX1mb3IoYT1jLTE7YT49MDstLWEpe2JbYV09MH1iLnQ9dGhpcy50K2M7Yi5zPXRoaXMuc31mdW5jdGlvbiBibnBEUlNoaWZ0VG8oYyxiKXtmb3IodmFyIGE9YzthPHRoaXMudDsrK2Epe2JbYS1jXT10aGlzW2FdfWIudD1NYXRoLm1heCh0aGlzLnQtYywwKTtiLnM9dGhpcy5zfWZ1bmN0aW9uIGJucExTaGlmdFRvKGosZSl7dmFyIGI9aiV0aGlzLkRCO3ZhciBhPXRoaXMuREItYjt2YXIgZz0oMTw8YSktMTt2YXIgZj1NYXRoLmZsb29yKGovdGhpcy5EQiksaD0odGhpcy5zPDxiKSZ0aGlzLkRNLGQ7Zm9yKGQ9dGhpcy50LTE7ZD49MDstLWQpe2VbZCtmKzFdPSh0aGlzW2RdPj5hKXxoO2g9KHRoaXNbZF0mZyk8PGJ9Zm9yKGQ9Zi0xO2Q+PTA7LS1kKXtlW2RdPTB9ZVtmXT1oO2UudD10aGlzLnQrZisxO2Uucz10aGlzLnM7ZS5jbGFtcCgpfWZ1bmN0aW9uIGJucFJTaGlmdFRvKGcsZCl7ZC5zPXRoaXMuczt2YXIgZT1NYXRoLmZsb29yKGcvdGhpcy5EQik7aWYoZT49dGhpcy50KXtkLnQ9MDtyZXR1cm59dmFyIGI9ZyV0aGlzLkRCO3ZhciBhPXRoaXMuREItYjt2YXIgZj0oMTw8YiktMTtkWzBdPXRoaXNbZV0+PmI7Zm9yKHZhciBjPWUrMTtjPHRoaXMudDsrK2Mpe2RbYy1lLTFdfD0odGhpc1tjXSZmKTw8YTtkW2MtZV09dGhpc1tjXT4+Yn1pZihiPjApe2RbdGhpcy50LWUtMV18PSh0aGlzLnMmZik8PGF9ZC50PXRoaXMudC1lO2QuY2xhbXAoKX1mdW5jdGlvbiBibnBTdWJUbyhkLGYpe3ZhciBlPTAsZz0wLGI9TWF0aC5taW4oZC50LHRoaXMudCk7d2hpbGUoZTxiKXtnKz10aGlzW2VdLWRbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1pZihkLnQ8dGhpcy50KXtnLT1kLnM7d2hpbGUoZTx0aGlzLnQpe2crPXRoaXNbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nKz10aGlzLnN9ZWxzZXtnKz10aGlzLnM7d2hpbGUoZTxkLnQpe2ctPWRbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nLT1kLnN9Zi5zPShnPDApPy0xOjA7aWYoZzwtMSl7ZltlKytdPXRoaXMuRFYrZ31lbHNle2lmKGc+MCl7ZltlKytdPWd9fWYudD1lO2YuY2xhbXAoKX1mdW5jdGlvbiBibnBNdWx0aXBseVRvKGMsZSl7dmFyIGI9dGhpcy5hYnMoKSxmPWMuYWJzKCk7dmFyIGQ9Yi50O2UudD1kK2YudDt3aGlsZSgtLWQ+PTApe2VbZF09MH1mb3IoZD0wO2Q8Zi50OysrZCl7ZVtkK2IudF09Yi5hbSgwLGZbZF0sZSxkLDAsYi50KX1lLnM9MDtlLmNsYW1wKCk7aWYodGhpcy5zIT1jLnMpe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyhlLGUpfX1mdW5jdGlvbiBibnBTcXVhcmVUbyhkKXt2YXIgYT10aGlzLmFicygpO3ZhciBiPWQudD0yKmEudDt3aGlsZSgtLWI+PTApe2RbYl09MH1mb3IoYj0wO2I8YS50LTE7KytiKXt2YXIgZT1hLmFtKGIsYVtiXSxkLDIqYiwwLDEpO2lmKChkW2IrYS50XSs9YS5hbShiKzEsMiphW2JdLGQsMipiKzEsZSxhLnQtYi0xKSk+PWEuRFYpe2RbYithLnRdLT1hLkRWO2RbYithLnQrMV09MX19aWYoZC50PjApe2RbZC50LTFdKz1hLmFtKGIsYVtiXSxkLDIqYiwwLDEpfWQucz0wO2QuY2xhbXAoKX1mdW5jdGlvbiBibnBEaXZSZW1UbyhuLGgsZyl7dmFyIHc9bi5hYnMoKTtpZih3LnQ8PTApe3JldHVybn12YXIgaz10aGlzLmFicygpO2lmKGsudDx3LnQpe2lmKGghPW51bGwpe2guZnJvbUludCgwKX1pZihnIT1udWxsKXt0aGlzLmNvcHlUbyhnKX1yZXR1cm59aWYoZz09bnVsbCl7Zz1uYmkoKX12YXIgZD1uYmkoKSxhPXRoaXMucyxsPW4uczt2YXIgdj10aGlzLkRCLW5iaXRzKHdbdy50LTFdKTtpZih2PjApe3cubFNoaWZ0VG8odixkKTtrLmxTaGlmdFRvKHYsZyl9ZWxzZXt3LmNvcHlUbyhkKTtrLmNvcHlUbyhnKX12YXIgcD1kLnQ7dmFyIGI9ZFtwLTFdO2lmKGI9PTApe3JldHVybn12YXIgbz1iKigxPDx0aGlzLkYxKSsoKHA+MSk/ZFtwLTJdPj50aGlzLkYyOjApO3ZhciBBPXRoaXMuRlYvbyx6PSgxPDx0aGlzLkYxKS9vLHg9MTw8dGhpcy5GMjt2YXIgdT1nLnQscz11LXAsZj0oaD09bnVsbCk/bmJpKCk6aDtkLmRsU2hpZnRUbyhzLGYpO2lmKGcuY29tcGFyZVRvKGYpPj0wKXtnW2cudCsrXT0xO2cuc3ViVG8oZixnKX1CaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8ocCxmKTtmLnN1YlRvKGQsZCk7d2hpbGUoZC50PHApe2RbZC50KytdPTB9d2hpbGUoLS1zPj0wKXt2YXIgYz0oZ1stLXVdPT1iKT90aGlzLkRNOk1hdGguZmxvb3IoZ1t1XSpBKyhnW3UtMV0reCkqeik7aWYoKGdbdV0rPWQuYW0oMCxjLGcscywwLHApKTxjKXtkLmRsU2hpZnRUbyhzLGYpO2cuc3ViVG8oZixnKTt3aGlsZShnW3VdPC0tYyl7Zy5zdWJUbyhmLGcpfX19aWYoaCE9bnVsbCl7Zy5kclNoaWZ0VG8ocCxoKTtpZihhIT1sKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oaCxoKX19Zy50PXA7Zy5jbGFtcCgpO2lmKHY+MCl7Zy5yU2hpZnRUbyh2LGcpfWlmKGE8MCl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKGcsZyl9fWZ1bmN0aW9uIGJuTW9kKGIpe3ZhciBjPW5iaSgpO3RoaXMuYWJzKCkuZGl2UmVtVG8oYixudWxsLGMpO2lmKHRoaXMuczwwJiZjLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPjApe2Iuc3ViVG8oYyxjKX1yZXR1cm4gY31mdW5jdGlvbiBDbGFzc2ljKGEpe3RoaXMubT1hfWZ1bmN0aW9uIGNDb252ZXJ0KGEpe2lmKGEuczwwfHxhLmNvbXBhcmVUbyh0aGlzLm0pPj0wKXtyZXR1cm4gYS5tb2QodGhpcy5tKX1lbHNle3JldHVybiBhfX1mdW5jdGlvbiBjUmV2ZXJ0KGEpe3JldHVybiBhfWZ1bmN0aW9uIGNSZWR1Y2UoYSl7YS5kaXZSZW1Ubyh0aGlzLm0sbnVsbCxhKX1mdW5jdGlvbiBjTXVsVG8oYSxjLGIpe2EubXVsdGlwbHlUbyhjLGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIGNTcXJUbyhhLGIpe2Euc3F1YXJlVG8oYik7dGhpcy5yZWR1Y2UoYil9Q2xhc3NpYy5wcm90b3R5cGUuY29udmVydD1jQ29udmVydDtDbGFzc2ljLnByb3RvdHlwZS5yZXZlcnQ9Y1JldmVydDtDbGFzc2ljLnByb3RvdHlwZS5yZWR1Y2U9Y1JlZHVjZTtDbGFzc2ljLnByb3RvdHlwZS5tdWxUbz1jTXVsVG87Q2xhc3NpYy5wcm90b3R5cGUuc3FyVG89Y1NxclRvO2Z1bmN0aW9uIGJucEludkRpZ2l0KCl7aWYodGhpcy50PDEpe3JldHVybiAwfXZhciBhPXRoaXNbMF07aWYoKGEmMSk9PTApe3JldHVybiAwfXZhciBiPWEmMztiPShiKigyLShhJjE1KSpiKSkmMTU7Yj0oYiooMi0oYSYyNTUpKmIpKSYyNTU7Yj0oYiooMi0oKChhJjY1NTM1KSpiKSY2NTUzNSkpKSY2NTUzNTtiPShiKigyLWEqYiV0aGlzLkRWKSkldGhpcy5EVjtyZXR1cm4oYj4wKT90aGlzLkRWLWI6LWJ9ZnVuY3Rpb24gTW9udGdvbWVyeShhKXt0aGlzLm09YTt0aGlzLm1wPWEuaW52RGlnaXQoKTt0aGlzLm1wbD10aGlzLm1wJjMyNzY3O3RoaXMubXBoPXRoaXMubXA+PjE1O3RoaXMudW09KDE8PChhLkRCLTE1KSktMTt0aGlzLm10Mj0yKmEudH1mdW5jdGlvbiBtb250Q29udmVydChhKXt2YXIgYj1uYmkoKTthLmFicygpLmRsU2hpZnRUbyh0aGlzLm0udCxiKTtiLmRpdlJlbVRvKHRoaXMubSxudWxsLGIpO2lmKGEuczwwJiZiLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPjApe3RoaXMubS5zdWJUbyhiLGIpfXJldHVybiBifWZ1bmN0aW9uIG1vbnRSZXZlcnQoYSl7dmFyIGI9bmJpKCk7YS5jb3B5VG8oYik7dGhpcy5yZWR1Y2UoYik7cmV0dXJuIGJ9ZnVuY3Rpb24gbW9udFJlZHVjZShhKXt3aGlsZShhLnQ8PXRoaXMubXQyKXthW2EudCsrXT0wfWZvcih2YXIgYz0wO2M8dGhpcy5tLnQ7KytjKXt2YXIgYj1hW2NdJjMyNzY3O3ZhciBkPShiKnRoaXMubXBsKygoKGIqdGhpcy5tcGgrKGFbY10+PjE1KSp0aGlzLm1wbCkmdGhpcy51bSk8PDE1KSkmYS5ETTtiPWMrdGhpcy5tLnQ7YVtiXSs9dGhpcy5tLmFtKDAsZCxhLGMsMCx0aGlzLm0udCk7d2hpbGUoYVtiXT49YS5EVil7YVtiXS09YS5EVjthWysrYl0rK319YS5jbGFtcCgpO2EuZHJTaGlmdFRvKHRoaXMubS50LGEpO2lmKGEuY29tcGFyZVRvKHRoaXMubSk+PTApe2Euc3ViVG8odGhpcy5tLGEpfX1mdW5jdGlvbiBtb250U3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIG1vbnRNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9TW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydD1tb250Q29udmVydDtNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQ9bW9udFJldmVydDtNb250Z29tZXJ5LnByb3RvdHlwZS5yZWR1Y2U9bW9udFJlZHVjZTtNb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbz1tb250TXVsVG87TW9udGdvbWVyeS5wcm90b3R5cGUuc3FyVG89bW9udFNxclRvO2Z1bmN0aW9uIGJucElzRXZlbigpe3JldHVybigodGhpcy50PjApPyh0aGlzWzBdJjEpOnRoaXMucyk9PTB9ZnVuY3Rpb24gYm5wRXhwKGgsail7aWYoaD40Mjk0OTY3Mjk1fHxoPDEpe3JldHVybiBCaWdJbnRlZ2VyLk9ORX12YXIgZj1uYmkoKSxhPW5iaSgpLGQ9ai5jb252ZXJ0KHRoaXMpLGM9bmJpdHMoaCktMTtkLmNvcHlUbyhmKTt3aGlsZSgtLWM+PTApe2ouc3FyVG8oZixhKTtpZigoaCYoMTw8YykpPjApe2oubXVsVG8oYSxkLGYpfWVsc2V7dmFyIGI9ZjtmPWE7YT1ifX1yZXR1cm4gai5yZXZlcnQoZil9ZnVuY3Rpb24gYm5Nb2RQb3dJbnQoYixhKXt2YXIgYztpZihiPDI1Nnx8YS5pc0V2ZW4oKSl7Yz1uZXcgQ2xhc3NpYyhhKX1lbHNle2M9bmV3IE1vbnRnb21lcnkoYSl9cmV0dXJuIHRoaXMuZXhwKGIsYyl9QmlnSW50ZWdlci5wcm90b3R5cGUuY29weVRvPWJucENvcHlUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50PWJucEZyb21JbnQ7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVN0cmluZz1ibnBGcm9tU3RyaW5nO0JpZ0ludGVnZXIucHJvdG90eXBlLmNsYW1wPWJucENsYW1wO0JpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbz1ibnBETFNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvPWJucERSU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5sU2hpZnRUbz1ibnBMU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbz1ibnBSU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbz1ibnBTdWJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvPWJucE11bHRpcGx5VG87QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG89Ym5wU3F1YXJlVG87QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2UmVtVG89Ym5wRGl2UmVtVG87QmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQ9Ym5wSW52RGlnaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuPWJucElzRXZlbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHA9Ym5wRXhwO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nPWJuVG9TdHJpbmc7QmlnSW50ZWdlci5wcm90b3R5cGUubmVnYXRlPWJuTmVnYXRlO0JpZ0ludGVnZXIucHJvdG90eXBlLmFicz1ibkFicztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG89Ym5Db21wYXJlVG87QmlnSW50ZWdlci5wcm90b3R5cGUuYml0TGVuZ3RoPWJuQml0TGVuZ3RoO0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZD1ibk1vZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3dJbnQ9Ym5Nb2RQb3dJbnQ7QmlnSW50ZWdlci5aRVJPPW5idigwKTtCaWdJbnRlZ2VyLk9ORT1uYnYoMSk7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xuZnVuY3Rpb24gYm5DbG9uZSgpe3ZhciBhPW5iaSgpO3RoaXMuY29weVRvKGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuSW50VmFsdWUoKXtpZih0aGlzLnM8MCl7aWYodGhpcy50PT0xKXtyZXR1cm4gdGhpc1swXS10aGlzLkRWfWVsc2V7aWYodGhpcy50PT0wKXtyZXR1cm4gLTF9fX1lbHNle2lmKHRoaXMudD09MSl7cmV0dXJuIHRoaXNbMF19ZWxzZXtpZih0aGlzLnQ9PTApe3JldHVybiAwfX19cmV0dXJuKCh0aGlzWzFdJigoMTw8KDMyLXRoaXMuREIpKS0xKSk8PHRoaXMuREIpfHRoaXNbMF19ZnVuY3Rpb24gYm5CeXRlVmFsdWUoKXtyZXR1cm4odGhpcy50PT0wKT90aGlzLnM6KHRoaXNbMF08PDI0KT4+MjR9ZnVuY3Rpb24gYm5TaG9ydFZhbHVlKCl7cmV0dXJuKHRoaXMudD09MCk/dGhpcy5zOih0aGlzWzBdPDwxNik+PjE2fWZ1bmN0aW9uIGJucENodW5rU2l6ZShhKXtyZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMip0aGlzLkRCL01hdGgubG9nKGEpKX1mdW5jdGlvbiBiblNpZ051bSgpe2lmKHRoaXMuczwwKXtyZXR1cm4gLTF9ZWxzZXtpZih0aGlzLnQ8PTB8fCh0aGlzLnQ9PTEmJnRoaXNbMF08PTApKXtyZXR1cm4gMH1lbHNle3JldHVybiAxfX19ZnVuY3Rpb24gYm5wVG9SYWRpeChjKXtpZihjPT1udWxsKXtjPTEwfWlmKHRoaXMuc2lnbnVtKCk9PTB8fGM8Mnx8Yz4zNil7cmV0dXJuXCIwXCJ9dmFyIGY9dGhpcy5jaHVua1NpemUoYyk7dmFyIGU9TWF0aC5wb3coYyxmKTt2YXIgaT1uYnYoZSksaj1uYmkoKSxoPW5iaSgpLGc9XCJcIjt0aGlzLmRpdlJlbVRvKGksaixoKTt3aGlsZShqLnNpZ251bSgpPjApe2c9KGUraC5pbnRWYWx1ZSgpKS50b1N0cmluZyhjKS5zdWJzdHIoMSkrZztqLmRpdlJlbVRvKGksaixoKX1yZXR1cm4gaC5pbnRWYWx1ZSgpLnRvU3RyaW5nKGMpK2d9ZnVuY3Rpb24gYm5wRnJvbVJhZGl4KG0saCl7dGhpcy5mcm9tSW50KDApO2lmKGg9PW51bGwpe2g9MTB9dmFyIGY9dGhpcy5jaHVua1NpemUoaCk7dmFyIGc9TWF0aC5wb3coaCxmKSxlPWZhbHNlLGE9MCxsPTA7Zm9yKHZhciBjPTA7YzxtLmxlbmd0aDsrK2Mpe3ZhciBrPWludEF0KG0sYyk7aWYoazwwKXtpZihtLmNoYXJBdChjKT09XCItXCImJnRoaXMuc2lnbnVtKCk9PTApe2U9dHJ1ZX1jb250aW51ZX1sPWgqbCtrO2lmKCsrYT49Zil7dGhpcy5kTXVsdGlwbHkoZyk7dGhpcy5kQWRkT2Zmc2V0KGwsMCk7YT0wO2w9MH19aWYoYT4wKXt0aGlzLmRNdWx0aXBseShNYXRoLnBvdyhoLGEpKTt0aGlzLmRBZGRPZmZzZXQobCwwKX1pZihlKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyx0aGlzKX19ZnVuY3Rpb24gYm5wRnJvbU51bWJlcihmLGUsaCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpe2lmKGY8Mil7dGhpcy5mcm9tSW50KDEpfWVsc2V7dGhpcy5mcm9tTnVtYmVyKGYsaCk7aWYoIXRoaXMudGVzdEJpdChmLTEpKXt0aGlzLmJpdHdpc2VUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoZi0xKSxvcF9vcix0aGlzKX1pZih0aGlzLmlzRXZlbigpKXt0aGlzLmRBZGRPZmZzZXQoMSwwKX13aGlsZSghdGhpcy5pc1Byb2JhYmxlUHJpbWUoZSkpe3RoaXMuZEFkZE9mZnNldCgyLDApO2lmKHRoaXMuYml0TGVuZ3RoKCk+Zil7dGhpcy5zdWJUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoZi0xKSx0aGlzKX19fX1lbHNle3ZhciBkPW5ldyBBcnJheSgpLGc9ZiY3O2QubGVuZ3RoPShmPj4zKSsxO2UubmV4dEJ5dGVzKGQpO2lmKGc+MCl7ZFswXSY9KCgxPDxnKS0xKX1lbHNle2RbMF09MH10aGlzLmZyb21TdHJpbmcoZCwyNTYpfX1mdW5jdGlvbiBiblRvQnl0ZUFycmF5KCl7dmFyIGI9dGhpcy50LGM9bmV3IEFycmF5KCk7Y1swXT10aGlzLnM7dmFyIGU9dGhpcy5EQi0oYip0aGlzLkRCKSU4LGYsYT0wO2lmKGItLT4wKXtpZihlPHRoaXMuREImJihmPXRoaXNbYl0+PmUpIT0odGhpcy5zJnRoaXMuRE0pPj5lKXtjW2ErK109ZnwodGhpcy5zPDwodGhpcy5EQi1lKSl9d2hpbGUoYj49MCl7aWYoZTw4KXtmPSh0aGlzW2JdJigoMTw8ZSktMSkpPDwoOC1lKTtmfD10aGlzWy0tYl0+PihlKz10aGlzLkRCLTgpfWVsc2V7Zj0odGhpc1tiXT4+KGUtPTgpKSYyNTU7aWYoZTw9MCl7ZSs9dGhpcy5EQjstLWJ9fWlmKChmJjEyOCkhPTApe2Z8PS0yNTZ9aWYoYT09MCYmKHRoaXMucyYxMjgpIT0oZiYxMjgpKXsrK2F9aWYoYT4wfHxmIT10aGlzLnMpe2NbYSsrXT1mfX19cmV0dXJuIGN9ZnVuY3Rpb24gYm5FcXVhbHMoYil7cmV0dXJuKHRoaXMuY29tcGFyZVRvKGIpPT0wKX1mdW5jdGlvbiBibk1pbihiKXtyZXR1cm4odGhpcy5jb21wYXJlVG8oYik8MCk/dGhpczpifWZ1bmN0aW9uIGJuTWF4KGIpe3JldHVybih0aGlzLmNvbXBhcmVUbyhiKT4wKT90aGlzOmJ9ZnVuY3Rpb24gYm5wQml0d2lzZVRvKGMsaCxlKXt2YXIgZCxnLGI9TWF0aC5taW4oYy50LHRoaXMudCk7Zm9yKGQ9MDtkPGI7KytkKXtlW2RdPWgodGhpc1tkXSxjW2RdKX1pZihjLnQ8dGhpcy50KXtnPWMucyZ0aGlzLkRNO2ZvcihkPWI7ZDx0aGlzLnQ7KytkKXtlW2RdPWgodGhpc1tkXSxnKX1lLnQ9dGhpcy50fWVsc2V7Zz10aGlzLnMmdGhpcy5ETTtmb3IoZD1iO2Q8Yy50OysrZCl7ZVtkXT1oKGcsY1tkXSl9ZS50PWMudH1lLnM9aCh0aGlzLnMsYy5zKTtlLmNsYW1wKCl9ZnVuY3Rpb24gb3BfYW5kKGEsYil7cmV0dXJuIGEmYn1mdW5jdGlvbiBibkFuZChiKXt2YXIgYz1uYmkoKTt0aGlzLmJpdHdpc2VUbyhiLG9wX2FuZCxjKTtyZXR1cm4gY31mdW5jdGlvbiBvcF9vcihhLGIpe3JldHVybiBhfGJ9ZnVuY3Rpb24gYm5PcihiKXt2YXIgYz1uYmkoKTt0aGlzLmJpdHdpc2VUbyhiLG9wX29yLGMpO3JldHVybiBjfWZ1bmN0aW9uIG9wX3hvcihhLGIpe3JldHVybiBhXmJ9ZnVuY3Rpb24gYm5Yb3IoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF94b3IsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gb3BfYW5kbm90KGEsYil7cmV0dXJuIGEmfmJ9ZnVuY3Rpb24gYm5BbmROb3QoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9hbmRub3QsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5Ob3QoKXt2YXIgYj1uYmkoKTtmb3IodmFyIGE9MDthPHRoaXMudDsrK2Epe2JbYV09dGhpcy5ETSZ+dGhpc1thXX1iLnQ9dGhpcy50O2Iucz1+dGhpcy5zO3JldHVybiBifWZ1bmN0aW9uIGJuU2hpZnRMZWZ0KGIpe3ZhciBhPW5iaSgpO2lmKGI8MCl7dGhpcy5yU2hpZnRUbygtYixhKX1lbHNle3RoaXMubFNoaWZ0VG8oYixhKX1yZXR1cm4gYX1mdW5jdGlvbiBiblNoaWZ0UmlnaHQoYil7dmFyIGE9bmJpKCk7aWYoYjwwKXt0aGlzLmxTaGlmdFRvKC1iLGEpfWVsc2V7dGhpcy5yU2hpZnRUbyhiLGEpfXJldHVybiBhfWZ1bmN0aW9uIGxiaXQoYSl7aWYoYT09MCl7cmV0dXJuIC0xfXZhciBiPTA7aWYoKGEmNjU1MzUpPT0wKXthPj49MTY7Yis9MTZ9aWYoKGEmMjU1KT09MCl7YT4+PTg7Yis9OH1pZigoYSYxNSk9PTApe2E+Pj00O2IrPTR9aWYoKGEmMyk9PTApe2E+Pj0yO2IrPTJ9aWYoKGEmMSk9PTApeysrYn1yZXR1cm4gYn1mdW5jdGlvbiBibkdldExvd2VzdFNldEJpdCgpe2Zvcih2YXIgYT0wO2E8dGhpcy50OysrYSl7aWYodGhpc1thXSE9MCl7cmV0dXJuIGEqdGhpcy5EQitsYml0KHRoaXNbYV0pfX1pZih0aGlzLnM8MCl7cmV0dXJuIHRoaXMudCp0aGlzLkRCfXJldHVybiAtMX1mdW5jdGlvbiBjYml0KGEpe3ZhciBiPTA7d2hpbGUoYSE9MCl7YSY9YS0xOysrYn1yZXR1cm4gYn1mdW5jdGlvbiBibkJpdENvdW50KCl7dmFyIGM9MCxhPXRoaXMucyZ0aGlzLkRNO2Zvcih2YXIgYj0wO2I8dGhpcy50OysrYil7Yys9Y2JpdCh0aGlzW2JdXmEpfXJldHVybiBjfWZ1bmN0aW9uIGJuVGVzdEJpdChiKXt2YXIgYT1NYXRoLmZsb29yKGIvdGhpcy5EQik7aWYoYT49dGhpcy50KXtyZXR1cm4odGhpcy5zIT0wKX1yZXR1cm4oKHRoaXNbYV0mKDE8PChiJXRoaXMuREIpKSkhPTApfWZ1bmN0aW9uIGJucENoYW5nZUJpdChjLGIpe3ZhciBhPUJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChjKTt0aGlzLmJpdHdpc2VUbyhhLGIsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYm5TZXRCaXQoYSl7cmV0dXJuIHRoaXMuY2hhbmdlQml0KGEsb3Bfb3IpfWZ1bmN0aW9uIGJuQ2xlYXJCaXQoYSl7cmV0dXJuIHRoaXMuY2hhbmdlQml0KGEsb3BfYW5kbm90KX1mdW5jdGlvbiBibkZsaXBCaXQoYSl7cmV0dXJuIHRoaXMuY2hhbmdlQml0KGEsb3BfeG9yKX1mdW5jdGlvbiBibnBBZGRUbyhkLGYpe3ZhciBlPTAsZz0wLGI9TWF0aC5taW4oZC50LHRoaXMudCk7d2hpbGUoZTxiKXtnKz10aGlzW2VdK2RbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1pZihkLnQ8dGhpcy50KXtnKz1kLnM7d2hpbGUoZTx0aGlzLnQpe2crPXRoaXNbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nKz10aGlzLnN9ZWxzZXtnKz10aGlzLnM7d2hpbGUoZTxkLnQpe2crPWRbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nKz1kLnN9Zi5zPShnPDApPy0xOjA7aWYoZz4wKXtmW2UrK109Z31lbHNle2lmKGc8LTEpe2ZbZSsrXT10aGlzLkRWK2d9fWYudD1lO2YuY2xhbXAoKX1mdW5jdGlvbiBibkFkZChiKXt2YXIgYz1uYmkoKTt0aGlzLmFkZFRvKGIsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5TdWJ0cmFjdChiKXt2YXIgYz1uYmkoKTt0aGlzLnN1YlRvKGIsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5NdWx0aXBseShiKXt2YXIgYz1uYmkoKTt0aGlzLm11bHRpcGx5VG8oYixjKTtyZXR1cm4gY31mdW5jdGlvbiBiblNxdWFyZSgpe3ZhciBhPW5iaSgpO3RoaXMuc3F1YXJlVG8oYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYm5EaXZpZGUoYil7dmFyIGM9bmJpKCk7dGhpcy5kaXZSZW1UbyhiLGMsbnVsbCk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5SZW1haW5kZXIoYil7dmFyIGM9bmJpKCk7dGhpcy5kaXZSZW1UbyhiLG51bGwsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5EaXZpZGVBbmRSZW1haW5kZXIoYil7dmFyIGQ9bmJpKCksYz1uYmkoKTt0aGlzLmRpdlJlbVRvKGIsZCxjKTtyZXR1cm4gbmV3IEFycmF5KGQsYyl9ZnVuY3Rpb24gYm5wRE11bHRpcGx5KGEpe3RoaXNbdGhpcy50XT10aGlzLmFtKDAsYS0xLHRoaXMsMCwwLHRoaXMudCk7Kyt0aGlzLnQ7dGhpcy5jbGFtcCgpfWZ1bmN0aW9uIGJucERBZGRPZmZzZXQoYixhKXtpZihiPT0wKXtyZXR1cm59d2hpbGUodGhpcy50PD1hKXt0aGlzW3RoaXMudCsrXT0wfXRoaXNbYV0rPWI7d2hpbGUodGhpc1thXT49dGhpcy5EVil7dGhpc1thXS09dGhpcy5EVjtpZigrK2E+PXRoaXMudCl7dGhpc1t0aGlzLnQrK109MH0rK3RoaXNbYV19fWZ1bmN0aW9uIE51bGxFeHAoKXt9ZnVuY3Rpb24gbk5vcChhKXtyZXR1cm4gYX1mdW5jdGlvbiBuTXVsVG8oYSxjLGIpe2EubXVsdGlwbHlUbyhjLGIpfWZ1bmN0aW9uIG5TcXJUbyhhLGIpe2Euc3F1YXJlVG8oYil9TnVsbEV4cC5wcm90b3R5cGUuY29udmVydD1uTm9wO051bGxFeHAucHJvdG90eXBlLnJldmVydD1uTm9wO051bGxFeHAucHJvdG90eXBlLm11bFRvPW5NdWxUbztOdWxsRXhwLnByb3RvdHlwZS5zcXJUbz1uU3FyVG87ZnVuY3Rpb24gYm5Qb3coYSl7cmV0dXJuIHRoaXMuZXhwKGEsbmV3IE51bGxFeHAoKSl9ZnVuY3Rpb24gYm5wTXVsdGlwbHlMb3dlclRvKGIsZixlKXt2YXIgZD1NYXRoLm1pbih0aGlzLnQrYi50LGYpO2Uucz0wO2UudD1kO3doaWxlKGQ+MCl7ZVstLWRdPTB9dmFyIGM7Zm9yKGM9ZS50LXRoaXMudDtkPGM7KytkKXtlW2QrdGhpcy50XT10aGlzLmFtKDAsYltkXSxlLGQsMCx0aGlzLnQpfWZvcihjPU1hdGgubWluKGIudCxmKTtkPGM7KytkKXt0aGlzLmFtKDAsYltkXSxlLGQsMCxmLWQpfWUuY2xhbXAoKX1mdW5jdGlvbiBibnBNdWx0aXBseVVwcGVyVG8oYixlLGQpey0tZTt2YXIgYz1kLnQ9dGhpcy50K2IudC1lO2Qucz0wO3doaWxlKC0tYz49MCl7ZFtjXT0wfWZvcihjPU1hdGgubWF4KGUtdGhpcy50LDApO2M8Yi50OysrYyl7ZFt0aGlzLnQrYy1lXT10aGlzLmFtKGUtYyxiW2NdLGQsMCwwLHRoaXMudCtjLWUpfWQuY2xhbXAoKTtkLmRyU2hpZnRUbygxLGQpfWZ1bmN0aW9uIEJhcnJldHQoYSl7dGhpcy5yMj1uYmkoKTt0aGlzLnEzPW5iaSgpO0JpZ0ludGVnZXIuT05FLmRsU2hpZnRUbygyKmEudCx0aGlzLnIyKTt0aGlzLm11PXRoaXMucjIuZGl2aWRlKGEpO3RoaXMubT1hfWZ1bmN0aW9uIGJhcnJldHRDb252ZXJ0KGEpe2lmKGEuczwwfHxhLnQ+Mip0aGlzLm0udCl7cmV0dXJuIGEubW9kKHRoaXMubSl9ZWxzZXtpZihhLmNvbXBhcmVUbyh0aGlzLm0pPDApe3JldHVybiBhfWVsc2V7dmFyIGI9bmJpKCk7YS5jb3B5VG8oYik7dGhpcy5yZWR1Y2UoYik7cmV0dXJuIGJ9fX1mdW5jdGlvbiBiYXJyZXR0UmV2ZXJ0KGEpe3JldHVybiBhfWZ1bmN0aW9uIGJhcnJldHRSZWR1Y2UoYSl7YS5kclNoaWZ0VG8odGhpcy5tLnQtMSx0aGlzLnIyKTtpZihhLnQ+dGhpcy5tLnQrMSl7YS50PXRoaXMubS50KzE7YS5jbGFtcCgpfXRoaXMubXUubXVsdGlwbHlVcHBlclRvKHRoaXMucjIsdGhpcy5tLnQrMSx0aGlzLnEzKTt0aGlzLm0ubXVsdGlwbHlMb3dlclRvKHRoaXMucTMsdGhpcy5tLnQrMSx0aGlzLnIyKTt3aGlsZShhLmNvbXBhcmVUbyh0aGlzLnIyKTwwKXthLmRBZGRPZmZzZXQoMSx0aGlzLm0udCsxKX1hLnN1YlRvKHRoaXMucjIsYSk7d2hpbGUoYS5jb21wYXJlVG8odGhpcy5tKT49MCl7YS5zdWJUbyh0aGlzLm0sYSl9fWZ1bmN0aW9uIGJhcnJldHRTcXJUbyhhLGIpe2Euc3F1YXJlVG8oYik7dGhpcy5yZWR1Y2UoYil9ZnVuY3Rpb24gYmFycmV0dE11bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKTt0aGlzLnJlZHVjZShiKX1CYXJyZXR0LnByb3RvdHlwZS5jb252ZXJ0PWJhcnJldHRDb252ZXJ0O0JhcnJldHQucHJvdG90eXBlLnJldmVydD1iYXJyZXR0UmV2ZXJ0O0JhcnJldHQucHJvdG90eXBlLnJlZHVjZT1iYXJyZXR0UmVkdWNlO0JhcnJldHQucHJvdG90eXBlLm11bFRvPWJhcnJldHRNdWxUbztCYXJyZXR0LnByb3RvdHlwZS5zcXJUbz1iYXJyZXR0U3FyVG87ZnVuY3Rpb24gYm5Nb2RQb3cocSxmKXt2YXIgbz1xLmJpdExlbmd0aCgpLGgsYj1uYnYoMSksdjtpZihvPD0wKXtyZXR1cm4gYn1lbHNle2lmKG88MTgpe2g9MX1lbHNle2lmKG88NDgpe2g9M31lbHNle2lmKG88MTQ0KXtoPTR9ZWxzZXtpZihvPDc2OCl7aD01fWVsc2V7aD02fX19fX1pZihvPDgpe3Y9bmV3IENsYXNzaWMoZil9ZWxzZXtpZihmLmlzRXZlbigpKXt2PW5ldyBCYXJyZXR0KGYpfWVsc2V7dj1uZXcgTW9udGdvbWVyeShmKX19dmFyIHA9bmV3IEFycmF5KCksZD0zLHM9aC0xLGE9KDE8PGgpLTE7cFsxXT12LmNvbnZlcnQodGhpcyk7aWYoaD4xKXt2YXIgQT1uYmkoKTt2LnNxclRvKHBbMV0sQSk7d2hpbGUoZDw9YSl7cFtkXT1uYmkoKTt2Lm11bFRvKEEscFtkLTJdLHBbZF0pO2QrPTJ9fXZhciBsPXEudC0xLHgsdT10cnVlLGM9bmJpKCkseTtvPW5iaXRzKHFbbF0pLTE7d2hpbGUobD49MCl7aWYobz49cyl7eD0ocVtsXT4+KG8tcykpJmF9ZWxzZXt4PShxW2xdJigoMTw8KG8rMSkpLTEpKTw8KHMtbyk7aWYobD4wKXt4fD1xW2wtMV0+Pih0aGlzLkRCK28tcyl9fWQ9aDt3aGlsZSgoeCYxKT09MCl7eD4+PTE7LS1kfWlmKChvLT1kKTwwKXtvKz10aGlzLkRCOy0tbH1pZih1KXtwW3hdLmNvcHlUbyhiKTt1PWZhbHNlfWVsc2V7d2hpbGUoZD4xKXt2LnNxclRvKGIsYyk7di5zcXJUbyhjLGIpO2QtPTJ9aWYoZD4wKXt2LnNxclRvKGIsYyl9ZWxzZXt5PWI7Yj1jO2M9eX12Lm11bFRvKGMscFt4XSxiKX13aGlsZShsPj0wJiYocVtsXSYoMTw8bykpPT0wKXt2LnNxclRvKGIsYyk7eT1iO2I9YztjPXk7aWYoLS1vPDApe289dGhpcy5EQi0xOy0tbH19fXJldHVybiB2LnJldmVydChiKX1mdW5jdGlvbiBibkdDRChjKXt2YXIgYj0odGhpcy5zPDApP3RoaXMubmVnYXRlKCk6dGhpcy5jbG9uZSgpO3ZhciBoPShjLnM8MCk/Yy5uZWdhdGUoKTpjLmNsb25lKCk7aWYoYi5jb21wYXJlVG8oaCk8MCl7dmFyIGU9YjtiPWg7aD1lfXZhciBkPWIuZ2V0TG93ZXN0U2V0Qml0KCksZj1oLmdldExvd2VzdFNldEJpdCgpO2lmKGY8MCl7cmV0dXJuIGJ9aWYoZDxmKXtmPWR9aWYoZj4wKXtiLnJTaGlmdFRvKGYsYik7aC5yU2hpZnRUbyhmLGgpfXdoaWxlKGIuc2lnbnVtKCk+MCl7aWYoKGQ9Yi5nZXRMb3dlc3RTZXRCaXQoKSk+MCl7Yi5yU2hpZnRUbyhkLGIpfWlmKChkPWguZ2V0TG93ZXN0U2V0Qml0KCkpPjApe2guclNoaWZ0VG8oZCxoKX1pZihiLmNvbXBhcmVUbyhoKT49MCl7Yi5zdWJUbyhoLGIpO2IuclNoaWZ0VG8oMSxiKX1lbHNle2guc3ViVG8oYixoKTtoLnJTaGlmdFRvKDEsaCl9fWlmKGY+MCl7aC5sU2hpZnRUbyhmLGgpfXJldHVybiBofWZ1bmN0aW9uIGJucE1vZEludChlKXtpZihlPD0wKXtyZXR1cm4gMH12YXIgYz10aGlzLkRWJWUsYj0odGhpcy5zPDApP2UtMTowO2lmKHRoaXMudD4wKXtpZihjPT0wKXtiPXRoaXNbMF0lZX1lbHNle2Zvcih2YXIgYT10aGlzLnQtMTthPj0wOy0tYSl7Yj0oYypiK3RoaXNbYV0pJWV9fX1yZXR1cm4gYn1mdW5jdGlvbiBibk1vZEludmVyc2UoZil7dmFyIGo9Zi5pc0V2ZW4oKTtpZigodGhpcy5pc0V2ZW4oKSYmail8fGYuc2lnbnVtKCk9PTApe3JldHVybiBCaWdJbnRlZ2VyLlpFUk99dmFyIGk9Zi5jbG9uZSgpLGg9dGhpcy5jbG9uZSgpO3ZhciBnPW5idigxKSxlPW5idigwKSxsPW5idigwKSxrPW5idigxKTt3aGlsZShpLnNpZ251bSgpIT0wKXt3aGlsZShpLmlzRXZlbigpKXtpLnJTaGlmdFRvKDEsaSk7aWYoail7aWYoIWcuaXNFdmVuKCl8fCFlLmlzRXZlbigpKXtnLmFkZFRvKHRoaXMsZyk7ZS5zdWJUbyhmLGUpfWcuclNoaWZ0VG8oMSxnKX1lbHNle2lmKCFlLmlzRXZlbigpKXtlLnN1YlRvKGYsZSl9fWUuclNoaWZ0VG8oMSxlKX13aGlsZShoLmlzRXZlbigpKXtoLnJTaGlmdFRvKDEsaCk7aWYoail7aWYoIWwuaXNFdmVuKCl8fCFrLmlzRXZlbigpKXtsLmFkZFRvKHRoaXMsbCk7ay5zdWJUbyhmLGspfWwuclNoaWZ0VG8oMSxsKX1lbHNle2lmKCFrLmlzRXZlbigpKXtrLnN1YlRvKGYsayl9fWsuclNoaWZ0VG8oMSxrKX1pZihpLmNvbXBhcmVUbyhoKT49MCl7aS5zdWJUbyhoLGkpO2lmKGope2cuc3ViVG8obCxnKX1lLnN1YlRvKGssZSl9ZWxzZXtoLnN1YlRvKGksaCk7aWYoail7bC5zdWJUbyhnLGwpfWsuc3ViVG8oZSxrKX19aWYoaC5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpIT0wKXtyZXR1cm4gQmlnSW50ZWdlci5aRVJPfWlmKGsuY29tcGFyZVRvKGYpPj0wKXtyZXR1cm4gay5zdWJ0cmFjdChmKX1pZihrLnNpZ251bSgpPDApe2suYWRkVG8oZixrKX1lbHNle3JldHVybiBrfWlmKGsuc2lnbnVtKCk8MCl7cmV0dXJuIGsuYWRkKGYpfWVsc2V7cmV0dXJuIGt9fXZhciBsb3dwcmltZXM9WzIsMyw1LDcsMTEsMTMsMTcsMTksMjMsMjksMzEsMzcsNDEsNDMsNDcsNTMsNTksNjEsNjcsNzEsNzMsNzksODMsODksOTcsMTAxLDEwMywxMDcsMTA5LDExMywxMjcsMTMxLDEzNywxMzksMTQ5LDE1MSwxNTcsMTYzLDE2NywxNzMsMTc5LDE4MSwxOTEsMTkzLDE5NywxOTksMjExLDIyMywyMjcsMjI5LDIzMywyMzksMjQxLDI1MSwyNTcsMjYzLDI2OSwyNzEsMjc3LDI4MSwyODMsMjkzLDMwNywzMTEsMzEzLDMxNywzMzEsMzM3LDM0NywzNDksMzUzLDM1OSwzNjcsMzczLDM3OSwzODMsMzg5LDM5Nyw0MDEsNDA5LDQxOSw0MjEsNDMxLDQzMyw0MzksNDQzLDQ0OSw0NTcsNDYxLDQ2Myw0NjcsNDc5LDQ4Nyw0OTEsNDk5LDUwMyw1MDksNTIxLDUyMyw1NDEsNTQ3LDU1Nyw1NjMsNTY5LDU3MSw1NzcsNTg3LDU5Myw1OTksNjAxLDYwNyw2MTMsNjE3LDYxOSw2MzEsNjQxLDY0Myw2NDcsNjUzLDY1OSw2NjEsNjczLDY3Nyw2ODMsNjkxLDcwMSw3MDksNzE5LDcyNyw3MzMsNzM5LDc0Myw3NTEsNzU3LDc2MSw3NjksNzczLDc4Nyw3OTcsODA5LDgxMSw4MjEsODIzLDgyNyw4MjksODM5LDg1Myw4NTcsODU5LDg2Myw4NzcsODgxLDg4Myw4ODcsOTA3LDkxMSw5MTksOTI5LDkzNyw5NDEsOTQ3LDk1Myw5NjcsOTcxLDk3Nyw5ODMsOTkxLDk5N107dmFyIGxwbGltPSgxPDwyNikvbG93cHJpbWVzW2xvd3ByaW1lcy5sZW5ndGgtMV07ZnVuY3Rpb24gYm5Jc1Byb2JhYmxlUHJpbWUoZSl7dmFyIGQsYj10aGlzLmFicygpO2lmKGIudD09MSYmYlswXTw9bG93cHJpbWVzW2xvd3ByaW1lcy5sZW5ndGgtMV0pe2ZvcihkPTA7ZDxsb3dwcmltZXMubGVuZ3RoOysrZCl7aWYoYlswXT09bG93cHJpbWVzW2RdKXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfWlmKGIuaXNFdmVuKCkpe3JldHVybiBmYWxzZX1kPTE7d2hpbGUoZDxsb3dwcmltZXMubGVuZ3RoKXt2YXIgYT1sb3dwcmltZXNbZF0sYz1kKzE7d2hpbGUoYzxsb3dwcmltZXMubGVuZ3RoJiZhPGxwbGltKXthKj1sb3dwcmltZXNbYysrXX1hPWIubW9kSW50KGEpO3doaWxlKGQ8Yyl7aWYoYSVsb3dwcmltZXNbZCsrXT09MCl7cmV0dXJuIGZhbHNlfX19cmV0dXJuIGIubWlsbGVyUmFiaW4oZSl9ZnVuY3Rpb24gYm5wTWlsbGVyUmFiaW4oZil7dmFyIGc9dGhpcy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7dmFyIGM9Zy5nZXRMb3dlc3RTZXRCaXQoKTtpZihjPD0wKXtyZXR1cm4gZmFsc2V9dmFyIGg9Zy5zaGlmdFJpZ2h0KGMpO2Y9KGYrMSk+PjE7aWYoZj5sb3dwcmltZXMubGVuZ3RoKXtmPWxvd3ByaW1lcy5sZW5ndGh9dmFyIGI9bmJpKCk7Zm9yKHZhciBlPTA7ZTxmOysrZSl7Yi5mcm9tSW50KGxvd3ByaW1lc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbG93cHJpbWVzLmxlbmd0aCldKTt2YXIgbD1iLm1vZFBvdyhoLHRoaXMpO2lmKGwuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSE9MCYmbC5jb21wYXJlVG8oZykhPTApe3ZhciBkPTE7d2hpbGUoZCsrPGMmJmwuY29tcGFyZVRvKGcpIT0wKXtsPWwubW9kUG93SW50KDIsdGhpcyk7aWYobC5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPT0wKXtyZXR1cm4gZmFsc2V9fWlmKGwuY29tcGFyZVRvKGcpIT0wKXtyZXR1cm4gZmFsc2V9fX1yZXR1cm4gdHJ1ZX1CaWdJbnRlZ2VyLnByb3RvdHlwZS5jaHVua1NpemU9Ym5wQ2h1bmtTaXplO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvUmFkaXg9Ym5wVG9SYWRpeDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tUmFkaXg9Ym5wRnJvbVJhZGl4O0JpZ0ludGVnZXIucHJvdG90eXBlLmZyb21OdW1iZXI9Ym5wRnJvbU51bWJlcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXR3aXNlVG89Ym5wQml0d2lzZVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmNoYW5nZUJpdD1ibnBDaGFuZ2VCaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuYWRkVG89Ym5wQWRkVG87QmlnSW50ZWdlci5wcm90b3R5cGUuZE11bHRpcGx5PWJucERNdWx0aXBseTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kQWRkT2Zmc2V0PWJucERBZGRPZmZzZXQ7QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlMb3dlclRvPWJucE11bHRpcGx5TG93ZXJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVVwcGVyVG89Ym5wTXVsdGlwbHlVcHBlclRvO0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludD1ibnBNb2RJbnQ7QmlnSW50ZWdlci5wcm90b3R5cGUubWlsbGVyUmFiaW49Ym5wTWlsbGVyUmFiaW47QmlnSW50ZWdlci5wcm90b3R5cGUuY2xvbmU9Ym5DbG9uZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZT1ibkludFZhbHVlO0JpZ0ludGVnZXIucHJvdG90eXBlLmJ5dGVWYWx1ZT1ibkJ5dGVWYWx1ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaG9ydFZhbHVlPWJuU2hvcnRWYWx1ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaWdudW09Ym5TaWdOdW07QmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXk9Ym5Ub0J5dGVBcnJheTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5lcXVhbHM9Ym5FcXVhbHM7QmlnSW50ZWdlci5wcm90b3R5cGUubWluPWJuTWluO0JpZ0ludGVnZXIucHJvdG90eXBlLm1heD1ibk1heDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbmQ9Ym5BbmQ7QmlnSW50ZWdlci5wcm90b3R5cGUub3I9Ym5PcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS54b3I9Ym5Yb3I7QmlnSW50ZWdlci5wcm90b3R5cGUuYW5kTm90PWJuQW5kTm90O0JpZ0ludGVnZXIucHJvdG90eXBlLm5vdD1ibk5vdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdExlZnQ9Ym5TaGlmdExlZnQ7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRSaWdodD1iblNoaWZ0UmlnaHQ7QmlnSW50ZWdlci5wcm90b3R5cGUuZ2V0TG93ZXN0U2V0Qml0PWJuR2V0TG93ZXN0U2V0Qml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmJpdENvdW50PWJuQml0Q291bnQ7QmlnSW50ZWdlci5wcm90b3R5cGUudGVzdEJpdD1iblRlc3RCaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuc2V0Qml0PWJuU2V0Qml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0PWJuQ2xlYXJCaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuZmxpcEJpdD1ibkZsaXBCaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuYWRkPWJuQWRkO0JpZ0ludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0PWJuU3VidHJhY3Q7QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHk9Ym5NdWx0aXBseTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGU9Ym5EaXZpZGU7QmlnSW50ZWdlci5wcm90b3R5cGUucmVtYWluZGVyPWJuUmVtYWluZGVyO0JpZ0ludGVnZXIucHJvdG90eXBlLmRpdmlkZUFuZFJlbWFpbmRlcj1ibkRpdmlkZUFuZFJlbWFpbmRlcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3c9Ym5Nb2RQb3c7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW52ZXJzZT1ibk1vZEludmVyc2U7QmlnSW50ZWdlci5wcm90b3R5cGUucG93PWJuUG93O0JpZ0ludGVnZXIucHJvdG90eXBlLmdjZD1ibkdDRDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWU9Ym5Jc1Byb2JhYmxlUHJpbWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlPWJuU3F1YXJlO1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbmZ1bmN0aW9uIEFyY2ZvdXIoKXt0aGlzLmk9MDt0aGlzLmo9MDt0aGlzLlM9bmV3IEFycmF5KCl9ZnVuY3Rpb24gQVJDNGluaXQoZCl7dmFyIGMsYSxiO2ZvcihjPTA7YzwyNTY7KytjKXt0aGlzLlNbY109Y31hPTA7Zm9yKGM9MDtjPDI1NjsrK2Mpe2E9KGErdGhpcy5TW2NdK2RbYyVkLmxlbmd0aF0pJjI1NTtiPXRoaXMuU1tjXTt0aGlzLlNbY109dGhpcy5TW2FdO3RoaXMuU1thXT1ifXRoaXMuaT0wO3RoaXMuaj0wfWZ1bmN0aW9uIEFSQzRuZXh0KCl7dmFyIGE7dGhpcy5pPSh0aGlzLmkrMSkmMjU1O3RoaXMuaj0odGhpcy5qK3RoaXMuU1t0aGlzLmldKSYyNTU7YT10aGlzLlNbdGhpcy5pXTt0aGlzLlNbdGhpcy5pXT10aGlzLlNbdGhpcy5qXTt0aGlzLlNbdGhpcy5qXT1hO3JldHVybiB0aGlzLlNbKGErdGhpcy5TW3RoaXMuaV0pJjI1NV19QXJjZm91ci5wcm90b3R5cGUuaW5pdD1BUkM0aW5pdDtBcmNmb3VyLnByb3RvdHlwZS5uZXh0PUFSQzRuZXh0O2Z1bmN0aW9uIHBybmdfbmV3c3RhdGUoKXtyZXR1cm4gbmV3IEFyY2ZvdXIoKX12YXIgcm5nX3BzaXplPTI1Njtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuICovXG52YXIgcm5nX3N0YXRlO3ZhciBybmdfcG9vbDt2YXIgcm5nX3BwdHI7ZnVuY3Rpb24gcm5nX3NlZWRfaW50KGEpe3JuZ19wb29sW3JuZ19wcHRyKytdXj1hJjI1NTtybmdfcG9vbFtybmdfcHB0cisrXV49KGE+PjgpJjI1NTtybmdfcG9vbFtybmdfcHB0cisrXV49KGE+PjE2KSYyNTU7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePShhPj4yNCkmMjU1O2lmKHJuZ19wcHRyPj1ybmdfcHNpemUpe3JuZ19wcHRyLT1ybmdfcHNpemV9fWZ1bmN0aW9uIHJuZ19zZWVkX3RpbWUoKXtybmdfc2VlZF9pbnQobmV3IERhdGUoKS5nZXRUaW1lKCkpfWlmKHJuZ19wb29sPT1udWxsKXtybmdfcG9vbD1uZXcgQXJyYXkoKTtybmdfcHB0cj0wO3ZhciB0O2lmKHdpbmRvdy5jcnlwdG8mJndpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKXt2YXIgdWE9bmV3IFVpbnQ4QXJyYXkoMzIpO3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVhKTtmb3IodD0wO3Q8MzI7Kyt0KXtybmdfcG9vbFtybmdfcHB0cisrXT11YVt0XX19aWYobmF2aWdhdG9yLmFwcE5hbWU9PVwiTmV0c2NhcGVcIiYmbmF2aWdhdG9yLmFwcFZlcnNpb248XCI1XCImJndpbmRvdy5jcnlwdG8pe3ZhciB6PXdpbmRvdy5jcnlwdG8ucmFuZG9tKDMyKTtmb3IodD0wO3Q8ei5sZW5ndGg7Kyt0KXtybmdfcG9vbFtybmdfcHB0cisrXT16LmNoYXJDb2RlQXQodCkmMjU1fX13aGlsZShybmdfcHB0cjxybmdfcHNpemUpe3Q9TWF0aC5mbG9vcig2NTUzNipNYXRoLnJhbmRvbSgpKTtybmdfcG9vbFtybmdfcHB0cisrXT10Pj4+ODtybmdfcG9vbFtybmdfcHB0cisrXT10JjI1NX1ybmdfcHB0cj0wO3JuZ19zZWVkX3RpbWUoKX1mdW5jdGlvbiBybmdfZ2V0X2J5dGUoKXtpZihybmdfc3RhdGU9PW51bGwpe3JuZ19zZWVkX3RpbWUoKTtybmdfc3RhdGU9cHJuZ19uZXdzdGF0ZSgpO3JuZ19zdGF0ZS5pbml0KHJuZ19wb29sKTtmb3Iocm5nX3BwdHI9MDtybmdfcHB0cjxybmdfcG9vbC5sZW5ndGg7KytybmdfcHB0cil7cm5nX3Bvb2xbcm5nX3BwdHJdPTB9cm5nX3BwdHI9MH1yZXR1cm4gcm5nX3N0YXRlLm5leHQoKX1mdW5jdGlvbiBybmdfZ2V0X2J5dGVzKGIpe3ZhciBhO2ZvcihhPTA7YTxiLmxlbmd0aDsrK2Epe2JbYV09cm5nX2dldF9ieXRlKCl9fWZ1bmN0aW9uIFNlY3VyZVJhbmRvbSgpe31TZWN1cmVSYW5kb20ucHJvdG90eXBlLm5leHRCeXRlcz1ybmdfZ2V0X2J5dGVzO1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQmlnSW50KGIsYSl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGIsYSl9ZnVuY3Rpb24gbGluZWJyayhjLGQpe3ZhciBhPVwiXCI7dmFyIGI9MDt3aGlsZShiK2Q8Yy5sZW5ndGgpe2ErPWMuc3Vic3RyaW5nKGIsYitkKStcIlxcblwiO2IrPWR9cmV0dXJuIGErYy5zdWJzdHJpbmcoYixjLmxlbmd0aCl9ZnVuY3Rpb24gYnl0ZTJIZXgoYSl7aWYoYTwxNil7cmV0dXJuXCIwXCIrYS50b1N0cmluZygxNil9ZWxzZXtyZXR1cm4gYS50b1N0cmluZygxNil9fWZ1bmN0aW9uIHBrY3MxcGFkMihlLGgpe2lmKGg8ZS5sZW5ndGgrMTEpe2FsZXJ0KFwiTWVzc2FnZSB0b28gbG9uZyBmb3IgUlNBXCIpO3JldHVybiBudWxsfXZhciBnPW5ldyBBcnJheSgpO3ZhciBkPWUubGVuZ3RoLTE7d2hpbGUoZD49MCYmaD4wKXt2YXIgZj1lLmNoYXJDb2RlQXQoZC0tKTtpZihmPDEyOCl7Z1stLWhdPWZ9ZWxzZXtpZigoZj4xMjcpJiYoZjwyMDQ4KSl7Z1stLWhdPShmJjYzKXwxMjg7Z1stLWhdPShmPj42KXwxOTJ9ZWxzZXtnWy0taF09KGYmNjMpfDEyODtnWy0taF09KChmPj42KSY2Myl8MTI4O2dbLS1oXT0oZj4+MTIpfDIyNH19fWdbLS1oXT0wO3ZhciBiPW5ldyBTZWN1cmVSYW5kb20oKTt2YXIgYT1uZXcgQXJyYXkoKTt3aGlsZShoPjIpe2FbMF09MDt3aGlsZShhWzBdPT0wKXtiLm5leHRCeXRlcyhhKX1nWy0taF09YVswXX1nWy0taF09MjtnWy0taF09MDtyZXR1cm4gbmV3IEJpZ0ludGVnZXIoZyl9ZnVuY3Rpb24gb2FlcF9tZ2YxX2FycihjLGEsZSl7dmFyIGI9XCJcIixkPTA7d2hpbGUoYi5sZW5ndGg8YSl7Yis9ZShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxjLmNvbmNhdChbKGQmNDI3ODE5MDA4MCk+PjI0LChkJjE2NzExNjgwKT4+MTYsKGQmNjUyODApPj44LGQmMjU1XSkpKTtkKz0xfXJldHVybiBifXZhciBTSEExX1NJWkU9MjA7ZnVuY3Rpb24gb2FlcF9wYWQobCxhLGMpe2lmKGwubGVuZ3RoKzIqU0hBMV9TSVpFKzI+YSl7dGhyb3dcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwifXZhciBoPVwiXCIsZDtmb3IoZD0wO2Q8YS1sLmxlbmd0aC0yKlNIQTFfU0laRS0yO2QrPTEpe2grPVwiXFx4MDBcIn12YXIgZT1yc3RyX3NoYTEoXCJcIikraCtcIlxceDAxXCIrbDt2YXIgZj1uZXcgQXJyYXkoU0hBMV9TSVpFKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGYpO3ZhciBnPW9hZXBfbWdmMV9hcnIoZixlLmxlbmd0aCxjfHxyc3RyX3NoYTEpO3ZhciBrPVtdO2ZvcihkPTA7ZDxlLmxlbmd0aDtkKz0xKXtrW2RdPWUuY2hhckNvZGVBdChkKV5nLmNoYXJDb2RlQXQoZCl9dmFyIGo9b2FlcF9tZ2YxX2FycihrLGYubGVuZ3RoLHJzdHJfc2hhMSk7dmFyIGI9WzBdO2ZvcihkPTA7ZDxmLmxlbmd0aDtkKz0xKXtiW2QrMV09ZltkXV5qLmNoYXJDb2RlQXQoZCl9cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGIuY29uY2F0KGspKX1mdW5jdGlvbiBSU0FLZXkoKXt0aGlzLm49bnVsbDt0aGlzLmU9MDt0aGlzLmQ9bnVsbDt0aGlzLnA9bnVsbDt0aGlzLnE9bnVsbDt0aGlzLmRtcDE9bnVsbDt0aGlzLmRtcTE9bnVsbDt0aGlzLmNvZWZmPW51bGx9ZnVuY3Rpb24gUlNBU2V0UHVibGljKGIsYSl7dGhpcy5pc1B1YmxpYz10cnVlO2lmKHR5cGVvZiBiIT09XCJzdHJpbmdcIil7dGhpcy5uPWI7dGhpcy5lPWF9ZWxzZXtpZihiIT1udWxsJiZhIT1udWxsJiZiLmxlbmd0aD4wJiZhLmxlbmd0aD4wKXt0aGlzLm49cGFyc2VCaWdJbnQoYiwxNik7dGhpcy5lPXBhcnNlSW50KGEsMTYpfWVsc2V7YWxlcnQoXCJJbnZhbGlkIFJTQSBwdWJsaWMga2V5XCIpfX19ZnVuY3Rpb24gUlNBRG9QdWJsaWMoYSl7cmV0dXJuIGEubW9kUG93SW50KHRoaXMuZSx0aGlzLm4pfWZ1bmN0aW9uIFJTQUVuY3J5cHQoZCl7dmFyIGE9cGtjczFwYWQyKGQsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+Myk7aWYoYT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGU9dGhpcy5kb1B1YmxpYyhhKTtpZihlPT1udWxsKXtyZXR1cm4gbnVsbH12YXIgYj1lLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGgmMSk9PTApe3JldHVybiBifWVsc2V7cmV0dXJuXCIwXCIrYn19ZnVuY3Rpb24gUlNBRW5jcnlwdE9BRVAoZSxkKXt2YXIgYT1vYWVwX3BhZChlLCh0aGlzLm4uYml0TGVuZ3RoKCkrNyk+PjMsZCk7aWYoYT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGY9dGhpcy5kb1B1YmxpYyhhKTtpZihmPT1udWxsKXtyZXR1cm4gbnVsbH12YXIgYj1mLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGgmMSk9PTApe3JldHVybiBifWVsc2V7cmV0dXJuXCIwXCIrYn19UlNBS2V5LnByb3RvdHlwZS5kb1B1YmxpYz1SU0FEb1B1YmxpYztSU0FLZXkucHJvdG90eXBlLnNldFB1YmxpYz1SU0FTZXRQdWJsaWM7UlNBS2V5LnByb3RvdHlwZS5lbmNyeXB0PVJTQUVuY3J5cHQ7UlNBS2V5LnByb3RvdHlwZS5lbmNyeXB0T0FFUD1SU0FFbmNyeXB0T0FFUDtSU0FLZXkucHJvdG90eXBlLnR5cGU9XCJSU0FcIjtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuICovXG5mdW5jdGlvbiBwa2NzMXVucGFkMihnLGope3ZhciBhPWcudG9CeXRlQXJyYXkoKTt2YXIgZj0wO3doaWxlKGY8YS5sZW5ndGgmJmFbZl09PTApeysrZn1pZihhLmxlbmd0aC1mIT1qLTF8fGFbZl0hPTIpe3JldHVybiBudWxsfSsrZjt3aGlsZShhW2ZdIT0wKXtpZigrK2Y+PWEubGVuZ3RoKXtyZXR1cm4gbnVsbH19dmFyIGU9XCJcIjt3aGlsZSgrK2Y8YS5sZW5ndGgpe3ZhciBoPWFbZl0mMjU1O2lmKGg8MTI4KXtlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGgpfWVsc2V7aWYoKGg+MTkxKSYmKGg8MjI0KSl7ZSs9U3RyaW5nLmZyb21DaGFyQ29kZSgoKGgmMzEpPDw2KXwoYVtmKzFdJjYzKSk7KytmfWVsc2V7ZSs9U3RyaW5nLmZyb21DaGFyQ29kZSgoKGgmMTUpPDwxMil8KChhW2YrMV0mNjMpPDw2KXwoYVtmKzJdJjYzKSk7Zis9Mn19fXJldHVybiBlfWZ1bmN0aW9uIG9hZXBfbWdmMV9zdHIoYyxhLGUpe3ZhciBiPVwiXCIsZD0wO3doaWxlKGIubGVuZ3RoPGEpe2IrPWUoYytTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxbKGQmNDI3ODE5MDA4MCk+PjI0LChkJjE2NzExNjgwKT4+MTYsKGQmNjUyODApPj44LGQmMjU1XSkpO2QrPTF9cmV0dXJuIGJ9dmFyIFNIQTFfU0laRT0yMDtmdW5jdGlvbiBvYWVwX3VucGFkKGwsYixlKXtsPWwudG9CeXRlQXJyYXkoKTt2YXIgZjtmb3IoZj0wO2Y8bC5sZW5ndGg7Zis9MSl7bFtmXSY9MjU1fXdoaWxlKGwubGVuZ3RoPGIpe2wudW5zaGlmdCgwKX1sPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGwpO2lmKGwubGVuZ3RoPDIqU0hBMV9TSVpFKzIpe3Rocm93XCJDaXBoZXIgdG9vIHNob3J0XCJ9dmFyIGM9bC5zdWJzdHIoMSxTSEExX1NJWkUpO3ZhciBvPWwuc3Vic3RyKFNIQTFfU0laRSsxKTt2YXIgbT1vYWVwX21nZjFfc3RyKG8sU0hBMV9TSVpFLGV8fHJzdHJfc2hhMSk7dmFyIGg9W10sZjtmb3IoZj0wO2Y8Yy5sZW5ndGg7Zis9MSl7aFtmXT1jLmNoYXJDb2RlQXQoZilebS5jaGFyQ29kZUF0KGYpfXZhciBqPW9hZXBfbWdmMV9zdHIoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsaCksbC5sZW5ndGgtU0hBMV9TSVpFLHJzdHJfc2hhMSk7dmFyIGc9W107Zm9yKGY9MDtmPG8ubGVuZ3RoO2YrPTEpe2dbZl09by5jaGFyQ29kZUF0KGYpXmouY2hhckNvZGVBdChmKX1nPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGcpO2lmKGcuc3Vic3RyKDAsU0hBMV9TSVpFKSE9PXJzdHJfc2hhMShcIlwiKSl7dGhyb3dcIkhhc2ggbWlzbWF0Y2hcIn1nPWcuc3Vic3RyKFNIQTFfU0laRSk7dmFyIGE9Zy5pbmRleE9mKFwiXFx4MDFcIik7dmFyIGs9KGEhPS0xKT9nLnN1YnN0cigwLGEpLmxhc3RJbmRleE9mKFwiXFx4MDBcIik6LTE7aWYoaysxIT1hKXt0aHJvd1wiTWFsZm9ybWVkIGRhdGFcIn1yZXR1cm4gZy5zdWJzdHIoYSsxKX1mdW5jdGlvbiBSU0FTZXRQcml2YXRlKGMsYSxiKXt0aGlzLmlzUHJpdmF0ZT10cnVlO2lmKHR5cGVvZiBjIT09XCJzdHJpbmdcIil7dGhpcy5uPWM7dGhpcy5lPWE7dGhpcy5kPWJ9ZWxzZXtpZihjIT1udWxsJiZhIT1udWxsJiZjLmxlbmd0aD4wJiZhLmxlbmd0aD4wKXt0aGlzLm49cGFyc2VCaWdJbnQoYywxNik7dGhpcy5lPXBhcnNlSW50KGEsMTYpO3RoaXMuZD1wYXJzZUJpZ0ludChiLDE2KX1lbHNle2FsZXJ0KFwiSW52YWxpZCBSU0EgcHJpdmF0ZSBrZXlcIil9fX1mdW5jdGlvbiBSU0FTZXRQcml2YXRlRXgoZyxkLGUsYyxiLGEsaCxmKXt0aGlzLmlzUHJpdmF0ZT10cnVlO2lmKGc9PW51bGwpe3Rocm93XCJSU0FTZXRQcml2YXRlRXggTiA9PSBudWxsXCJ9aWYoZD09bnVsbCl7dGhyb3dcIlJTQVNldFByaXZhdGVFeCBFID09IG51bGxcIn1pZihnLmxlbmd0aD09MCl7dGhyb3dcIlJTQVNldFByaXZhdGVFeCBOLmxlbmd0aCA9PSAwXCJ9aWYoZC5sZW5ndGg9PTApe3Rocm93XCJSU0FTZXRQcml2YXRlRXggRS5sZW5ndGggPT0gMFwifWlmKGchPW51bGwmJmQhPW51bGwmJmcubGVuZ3RoPjAmJmQubGVuZ3RoPjApe3RoaXMubj1wYXJzZUJpZ0ludChnLDE2KTt0aGlzLmU9cGFyc2VJbnQoZCwxNik7dGhpcy5kPXBhcnNlQmlnSW50KGUsMTYpO3RoaXMucD1wYXJzZUJpZ0ludChjLDE2KTt0aGlzLnE9cGFyc2VCaWdJbnQoYiwxNik7dGhpcy5kbXAxPXBhcnNlQmlnSW50KGEsMTYpO3RoaXMuZG1xMT1wYXJzZUJpZ0ludChoLDE2KTt0aGlzLmNvZWZmPXBhcnNlQmlnSW50KGYsMTYpfWVsc2V7YWxlcnQoXCJJbnZhbGlkIFJTQSBwcml2YXRlIGtleSBpbiBSU0FTZXRQcml2YXRlRXhcIil9fWZ1bmN0aW9uIFJTQUdlbmVyYXRlKGIsaSl7dmFyIGE9bmV3IFNlY3VyZVJhbmRvbSgpO3ZhciBmPWI+PjE7dGhpcy5lPXBhcnNlSW50KGksMTYpO3ZhciBjPW5ldyBCaWdJbnRlZ2VyKGksMTYpO2Zvcig7Oyl7Zm9yKDs7KXt0aGlzLnA9bmV3IEJpZ0ludGVnZXIoYi1mLDEsYSk7aWYodGhpcy5wLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKS5nY2QoYykuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKT09MCYmdGhpcy5wLmlzUHJvYmFibGVQcmltZSgxMCkpe2JyZWFrfX1mb3IoOzspe3RoaXMucT1uZXcgQmlnSW50ZWdlcihmLDEsYSk7aWYodGhpcy5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKS5nY2QoYykuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKT09MCYmdGhpcy5xLmlzUHJvYmFibGVQcmltZSgxMCkpe2JyZWFrfX1pZih0aGlzLnAuY29tcGFyZVRvKHRoaXMucSk8PTApe3ZhciBoPXRoaXMucDt0aGlzLnA9dGhpcy5xO3RoaXMucT1ofXZhciBnPXRoaXMucC5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7dmFyIGQ9dGhpcy5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTt2YXIgZT1nLm11bHRpcGx5KGQpO2lmKGUuZ2NkKGMpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk9PTApe3RoaXMubj10aGlzLnAubXVsdGlwbHkodGhpcy5xKTt0aGlzLmQ9Yy5tb2RJbnZlcnNlKGUpO3RoaXMuZG1wMT10aGlzLmQubW9kKGcpO3RoaXMuZG1xMT10aGlzLmQubW9kKGQpO3RoaXMuY29lZmY9dGhpcy5xLm1vZEludmVyc2UodGhpcy5wKTticmVha319fWZ1bmN0aW9uIFJTQURvUHJpdmF0ZShhKXtpZih0aGlzLnA9PW51bGx8fHRoaXMucT09bnVsbCl7cmV0dXJuIGEubW9kUG93KHRoaXMuZCx0aGlzLm4pfXZhciBjPWEubW9kKHRoaXMucCkubW9kUG93KHRoaXMuZG1wMSx0aGlzLnApO3ZhciBiPWEubW9kKHRoaXMucSkubW9kUG93KHRoaXMuZG1xMSx0aGlzLnEpO3doaWxlKGMuY29tcGFyZVRvKGIpPDApe2M9Yy5hZGQodGhpcy5wKX1yZXR1cm4gYy5zdWJ0cmFjdChiKS5tdWx0aXBseSh0aGlzLmNvZWZmKS5tb2QodGhpcy5wKS5tdWx0aXBseSh0aGlzLnEpLmFkZChiKX1mdW5jdGlvbiBSU0FEZWNyeXB0KGIpe3ZhciBkPXBhcnNlQmlnSW50KGIsMTYpO3ZhciBhPXRoaXMuZG9Qcml2YXRlKGQpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXJldHVybiBwa2NzMXVucGFkMihhLCh0aGlzLm4uYml0TGVuZ3RoKCkrNyk+PjMpfWZ1bmN0aW9uIFJTQURlY3J5cHRPQUVQKGQsYil7dmFyIGU9cGFyc2VCaWdJbnQoZCwxNik7dmFyIGE9dGhpcy5kb1ByaXZhdGUoZSk7aWYoYT09bnVsbCl7cmV0dXJuIG51bGx9cmV0dXJuIG9hZXBfdW5wYWQoYSwodGhpcy5uLmJpdExlbmd0aCgpKzcpPj4zLGIpfVJTQUtleS5wcm90b3R5cGUuZG9Qcml2YXRlPVJTQURvUHJpdmF0ZTtSU0FLZXkucHJvdG90eXBlLnNldFByaXZhdGU9UlNBU2V0UHJpdmF0ZTtSU0FLZXkucHJvdG90eXBlLnNldFByaXZhdGVFeD1SU0FTZXRQcml2YXRlRXg7UlNBS2V5LnByb3RvdHlwZS5nZW5lcmF0ZT1SU0FHZW5lcmF0ZTtSU0FLZXkucHJvdG90eXBlLmRlY3J5cHQ9UlNBRGVjcnlwdDtSU0FLZXkucHJvdG90eXBlLmRlY3J5cHRPQUVQPVJTQURlY3J5cHRPQUVQO1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbmZ1bmN0aW9uIEVDRmllbGRFbGVtZW50RnAoYixhKXt0aGlzLng9YTt0aGlzLnE9Yn1mdW5jdGlvbiBmZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMueC5lcXVhbHMoYS54KSl9ZnVuY3Rpb24gZmVGcFRvQmlnSW50ZWdlcigpe3JldHVybiB0aGlzLnh9ZnVuY3Rpb24gZmVGcE5lZ2F0ZSgpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54Lm5lZ2F0ZSgpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwQWRkKGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LmFkZChhLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcFN1YnRyYWN0KGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LnN1YnRyYWN0KGEudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwTXVsdGlwbHkoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubXVsdGlwbHkoYS50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBTcXVhcmUoKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5zcXVhcmUoKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcERpdmlkZShhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5tdWx0aXBseShhLnRvQmlnSW50ZWdlcigpLm1vZEludmVyc2UodGhpcy5xKSkubW9kKHRoaXMucSkpfUVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmVxdWFscz1mZUZwRXF1YWxzO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnRvQmlnSW50ZWdlcj1mZUZwVG9CaWdJbnRlZ2VyO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm5lZ2F0ZT1mZUZwTmVnYXRlO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmFkZD1mZUZwQWRkO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnN1YnRyYWN0PWZlRnBTdWJ0cmFjdDtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5tdWx0aXBseT1mZUZwTXVsdGlwbHk7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuc3F1YXJlPWZlRnBTcXVhcmU7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZGl2aWRlPWZlRnBEaXZpZGU7ZnVuY3Rpb24gRUNQb2ludEZwKGMsYSxkLGIpe3RoaXMuY3VydmU9Yzt0aGlzLng9YTt0aGlzLnk9ZDtpZihiPT1udWxsKXt0aGlzLno9QmlnSW50ZWdlci5PTkV9ZWxzZXt0aGlzLno9Yn10aGlzLnppbnY9bnVsbH1mdW5jdGlvbiBwb2ludEZwR2V0WCgpe2lmKHRoaXMuemludj09bnVsbCl7dGhpcy56aW52PXRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSl9cmV0dXJuIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludikubW9kKHRoaXMuY3VydmUucSkpfWZ1bmN0aW9uIHBvaW50RnBHZXRZKCl7aWYodGhpcy56aW52PT1udWxsKXt0aGlzLnppbnY9dGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKX1yZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KS5tb2QodGhpcy5jdXJ2ZS5xKSl9ZnVuY3Rpb24gcG9pbnRGcEVxdWFscyhhKXtpZihhPT10aGlzKXtyZXR1cm4gdHJ1ZX1pZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIGEuaXNJbmZpbml0eSgpfWlmKGEuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCl9dmFyIGMsYjtjPWEueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShhLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZighYy5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSl7cmV0dXJuIGZhbHNlfWI9YS54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGEueikpLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBiLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBJc0luZmluaXR5KCl7aWYoKHRoaXMueD09bnVsbCkmJih0aGlzLnk9PW51bGwpKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gdGhpcy56LmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pJiYhdGhpcy55LnRvQmlnSW50ZWdlcigpLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBOZWdhdGUoKXtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMueCx0aGlzLnkubmVnYXRlKCksdGhpcy56KX1mdW5jdGlvbiBwb2ludEZwQWRkKGwpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gbH1pZihsLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9dmFyIHA9bC55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGwueikpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBvPWwueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShsLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKG8pKXtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKHApKXtyZXR1cm4gdGhpcy50d2ljZSgpfXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGo9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBlPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgbj10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGM9bC54LnRvQmlnSW50ZWdlcigpO3ZhciBrPWwueS50b0JpZ0ludGVnZXIoKTt2YXIgbT1vLnNxdWFyZSgpO3ZhciBpPW0ubXVsdGlwbHkobyk7dmFyIGQ9ZS5tdWx0aXBseShtKTt2YXIgZz1wLnNxdWFyZSgpLm11bHRpcGx5KHRoaXMueik7dmFyIGE9Zy5zdWJ0cmFjdChkLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkobC56KS5zdWJ0cmFjdChpKS5tdWx0aXBseShvKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgaD1kLm11bHRpcGx5KGopLm11bHRpcGx5KHApLnN1YnRyYWN0KG4ubXVsdGlwbHkoaSkpLnN1YnRyYWN0KGcubXVsdGlwbHkocCkpLm11bHRpcGx5KGwueikuYWRkKHAubXVsdGlwbHkoaSkpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWkubXVsdGlwbHkodGhpcy56KS5tdWx0aXBseShsLnopLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihhKSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGgpLGYpfWZ1bmN0aW9uIHBvaW50RnBUd2ljZSgpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZih0aGlzLnkudG9CaWdJbnRlZ2VyKCkuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBjPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgaD10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGU9aC5tdWx0aXBseSh0aGlzLnopO3ZhciBqPWUubXVsdGlwbHkoaCkubW9kKHRoaXMuY3VydmUucSk7dmFyIGk9dGhpcy5jdXJ2ZS5hLnRvQmlnSW50ZWdlcigpO3ZhciBrPWMuc3F1YXJlKCkubXVsdGlwbHkoZyk7aWYoIUJpZ0ludGVnZXIuWkVSTy5lcXVhbHMoaSkpe2s9ay5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KGkpKX1rPWsubW9kKHRoaXMuY3VydmUucSk7dmFyIGI9ay5zcXVhcmUoKS5zdWJ0cmFjdChjLnNoaWZ0TGVmdCgzKS5tdWx0aXBseShqKSkuc2hpZnRMZWZ0KDEpLm11bHRpcGx5KGUpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWsubXVsdGlwbHkoZykubXVsdGlwbHkoYykuc3VidHJhY3Qoai5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseShqKS5zdWJ0cmFjdChrLnNxdWFyZSgpLm11bHRpcGx5KGspKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgZD1lLnNxdWFyZSgpLm11bHRpcGx5KGUpLnNoaWZ0TGVmdCgzKS5tb2QodGhpcy5jdXJ2ZS5xKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoYiksdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihmKSxkKX1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHkoYil7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKGIuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9Yjt2YXIgZj1nLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7dmFyIGw9dGhpcy5uZWdhdGUoKTt2YXIgZD10aGlzO3ZhciBjO2ZvcihjPWYuYml0TGVuZ3RoKCktMjtjPjA7LS1jKXtkPWQudHdpY2UoKTt2YXIgYT1mLnRlc3RCaXQoYyk7dmFyIGo9Zy50ZXN0Qml0KGMpO2lmKGEhPWope2Q9ZC5hZGQoYT90aGlzOmwpfX1yZXR1cm4gZH1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHlUd28oYyxhLGIpe3ZhciBkO2lmKGMuYml0TGVuZ3RoKCk+Yi5iaXRMZW5ndGgoKSl7ZD1jLmJpdExlbmd0aCgpLTF9ZWxzZXtkPWIuYml0TGVuZ3RoKCktMX12YXIgZj10aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIGU9dGhpcy5hZGQoYSk7d2hpbGUoZD49MCl7Zj1mLnR3aWNlKCk7aWYoYy50ZXN0Qml0KGQpKXtpZihiLnRlc3RCaXQoZCkpe2Y9Zi5hZGQoZSl9ZWxzZXtmPWYuYWRkKHRoaXMpfX1lbHNle2lmKGIudGVzdEJpdChkKSl7Zj1mLmFkZChhKX19LS1kfXJldHVybiBmfUVDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WD1wb2ludEZwR2V0WDtFQ1BvaW50RnAucHJvdG90eXBlLmdldFk9cG9pbnRGcEdldFk7RUNQb2ludEZwLnByb3RvdHlwZS5lcXVhbHM9cG9pbnRGcEVxdWFscztFQ1BvaW50RnAucHJvdG90eXBlLmlzSW5maW5pdHk9cG9pbnRGcElzSW5maW5pdHk7RUNQb2ludEZwLnByb3RvdHlwZS5uZWdhdGU9cG9pbnRGcE5lZ2F0ZTtFQ1BvaW50RnAucHJvdG90eXBlLmFkZD1wb2ludEZwQWRkO0VDUG9pbnRGcC5wcm90b3R5cGUudHdpY2U9cG9pbnRGcFR3aWNlO0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHk9cG9pbnRGcE11bHRpcGx5O0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHlUd289cG9pbnRGcE11bHRpcGx5VHdvO2Z1bmN0aW9uIEVDQ3VydmVGcChlLGQsYyl7dGhpcy5xPWU7dGhpcy5hPXRoaXMuZnJvbUJpZ0ludGVnZXIoZCk7dGhpcy5iPXRoaXMuZnJvbUJpZ0ludGVnZXIoYyk7dGhpcy5pbmZpbml0eT1uZXcgRUNQb2ludEZwKHRoaXMsbnVsbCxudWxsKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0USgpe3JldHVybiB0aGlzLnF9ZnVuY3Rpb24gY3VydmVGcEdldEEoKXtyZXR1cm4gdGhpcy5hfWZ1bmN0aW9uIGN1cnZlRnBHZXRCKCl7cmV0dXJuIHRoaXMuYn1mdW5jdGlvbiBjdXJ2ZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMuYS5lcXVhbHMoYS5hKSYmdGhpcy5iLmVxdWFscyhhLmIpKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0SW5maW5pdHkoKXtyZXR1cm4gdGhpcy5pbmZpbml0eX1mdW5jdGlvbiBjdXJ2ZUZwRnJvbUJpZ0ludGVnZXIoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSxhKX1mdW5jdGlvbiBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXgoZCl7c3dpdGNoKHBhcnNlSW50KGQuc3Vic3RyKDAsMiksMTYpKXtjYXNlIDA6cmV0dXJuIHRoaXMuaW5maW5pdHk7Y2FzZSAyOmNhc2UgMzpyZXR1cm4gbnVsbDtjYXNlIDQ6Y2FzZSA2OmNhc2UgNzp2YXIgYT0oZC5sZW5ndGgtMikvMjt2YXIgYz1kLnN1YnN0cigyLGEpO3ZhciBiPWQuc3Vic3RyKGErMixhKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYywxNikpLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYiwxNikpKTtkZWZhdWx0OnJldHVybiBudWxsfX1FQ0N1cnZlRnAucHJvdG90eXBlLmdldFE9Y3VydmVGcEdldFE7RUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRBPWN1cnZlRnBHZXRBO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0Qj1jdXJ2ZUZwR2V0QjtFQ0N1cnZlRnAucHJvdG90eXBlLmVxdWFscz1jdXJ2ZUZwRXF1YWxzO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0SW5maW5pdHk9Y3VydmVGcEdldEluZmluaXR5O0VDQ3VydmVGcC5wcm90b3R5cGUuZnJvbUJpZ0ludGVnZXI9Y3VydmVGcEZyb21CaWdJbnRlZ2VyO0VDQ3VydmVGcC5wcm90b3R5cGUuZGVjb2RlUG9pbnRIZXg9Y3VydmVGcERlY29kZVBvaW50SGV4O1xuLyohIChjKSBTdGVmYW4gVGhvbWFzIHwgaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliXG4gKi9cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmdldEJ5dGVMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcigodGhpcy50b0JpZ0ludGVnZXIoKS5iaXRMZW5ndGgoKSs3KS84KX07RUNQb2ludEZwLnByb3RvdHlwZS5nZXRFbmNvZGVkPWZ1bmN0aW9uKGMpe3ZhciBkPWZ1bmN0aW9uKGgsZil7dmFyIGc9aC50b0J5dGVBcnJheVVuc2lnbmVkKCk7aWYoZjxnLmxlbmd0aCl7Zz1nLnNsaWNlKGcubGVuZ3RoLWYpfWVsc2V7d2hpbGUoZj5nLmxlbmd0aCl7Zy51bnNoaWZ0KDApfX1yZXR1cm4gZ307dmFyIGE9dGhpcy5nZXRYKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGU9dGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGI9ZChhLDMyKTtpZihjKXtpZihlLmlzRXZlbigpKXtiLnVuc2hpZnQoMil9ZWxzZXtiLnVuc2hpZnQoMyl9fWVsc2V7Yi51bnNoaWZ0KDQpO2I9Yi5jb25jYXQoZChlLDMyKSl9cmV0dXJuIGJ9O0VDUG9pbnRGcC5kZWNvZGVGcm9tPWZ1bmN0aW9uKGcsYyl7dmFyIGY9Y1swXTt2YXIgZT1jLmxlbmd0aC0xO3ZhciBkPWMuc2xpY2UoMSwxK2UvMik7dmFyIGI9Yy5zbGljZSgxK2UvMiwxK2UpO2QudW5zaGlmdCgwKTtiLnVuc2hpZnQoMCk7dmFyIGE9bmV3IEJpZ0ludGVnZXIoZCk7dmFyIGg9bmV3IEJpZ0ludGVnZXIoYik7cmV0dXJuIG5ldyBFQ1BvaW50RnAoZyxnLmZyb21CaWdJbnRlZ2VyKGEpLGcuZnJvbUJpZ0ludGVnZXIoaCkpfTtFQ1BvaW50RnAuZGVjb2RlRnJvbUhleD1mdW5jdGlvbihnLGMpe3ZhciBmPWMuc3Vic3RyKDAsMik7dmFyIGU9Yy5sZW5ndGgtMjt2YXIgZD1jLnN1YnN0cigyLGUvMik7dmFyIGI9Yy5zdWJzdHIoMitlLzIsZS8yKTt2YXIgYT1uZXcgQmlnSW50ZWdlcihkLDE2KTt2YXIgaD1uZXcgQmlnSW50ZWdlcihiLDE2KTtyZXR1cm4gbmV3IEVDUG9pbnRGcChnLGcuZnJvbUJpZ0ludGVnZXIoYSksZy5mcm9tQmlnSW50ZWdlcihoKSl9O0VDUG9pbnRGcC5wcm90b3R5cGUuYWRkMkQ9ZnVuY3Rpb24oYyl7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiBjfWlmKGMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZih0aGlzLnguZXF1YWxzKGMueCkpe2lmKHRoaXMueS5lcXVhbHMoYy55KSl7cmV0dXJuIHRoaXMudHdpY2UoKX1yZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpfXZhciBnPWMueC5zdWJ0cmFjdCh0aGlzLngpO3ZhciBlPWMueS5zdWJ0cmFjdCh0aGlzLnkpO3ZhciBhPWUuZGl2aWRlKGcpO3ZhciBkPWEuc3F1YXJlKCkuc3VidHJhY3QodGhpcy54KS5zdWJ0cmFjdChjLngpO3ZhciBmPWEubXVsdGlwbHkodGhpcy54LnN1YnRyYWN0KGQpKS5zdWJ0cmFjdCh0aGlzLnkpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsZCxmKX07RUNQb2ludEZwLnByb3RvdHlwZS50d2ljZTJEPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKHRoaXMueS50b0JpZ0ludGVnZXIoKS5zaWdudW0oKT09MCl7cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKX12YXIgYj10aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKEJpZ0ludGVnZXIudmFsdWVPZigyKSk7dmFyIGU9dGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihCaWdJbnRlZ2VyLnZhbHVlT2YoMykpO3ZhciBhPXRoaXMueC5zcXVhcmUoKS5tdWx0aXBseShlKS5hZGQodGhpcy5jdXJ2ZS5hKS5kaXZpZGUodGhpcy55Lm11bHRpcGx5KGIpKTt2YXIgYz1hLnNxdWFyZSgpLnN1YnRyYWN0KHRoaXMueC5tdWx0aXBseShiKSk7dmFyIGQ9YS5tdWx0aXBseSh0aGlzLnguc3VidHJhY3QoYykpLnN1YnRyYWN0KHRoaXMueSk7cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSxjLGQpfTtFQ1BvaW50RnAucHJvdG90eXBlLm11bHRpcGx5MkQ9ZnVuY3Rpb24oYil7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKGIuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9Yjt2YXIgZj1nLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7dmFyIGw9dGhpcy5uZWdhdGUoKTt2YXIgZD10aGlzO3ZhciBjO2ZvcihjPWYuYml0TGVuZ3RoKCktMjtjPjA7LS1jKXtkPWQudHdpY2UoKTt2YXIgYT1mLnRlc3RCaXQoYyk7dmFyIGo9Zy50ZXN0Qml0KGMpO2lmKGEhPWope2Q9ZC5hZGQyRChhP3RoaXM6bCl9fXJldHVybiBkfTtFQ1BvaW50RnAucHJvdG90eXBlLmlzT25DdXJ2ZT1mdW5jdGlvbigpe3ZhciBkPXRoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpO3ZhciBpPXRoaXMuZ2V0WSgpLnRvQmlnSW50ZWdlcigpO3ZhciBmPXRoaXMuY3VydmUuZ2V0QSgpLnRvQmlnSW50ZWdlcigpO3ZhciBjPXRoaXMuY3VydmUuZ2V0QigpLnRvQmlnSW50ZWdlcigpO3ZhciBoPXRoaXMuY3VydmUuZ2V0USgpO3ZhciBlPWkubXVsdGlwbHkoaSkubW9kKGgpO3ZhciBnPWQubXVsdGlwbHkoZCkubXVsdGlwbHkoZCkuYWRkKGYubXVsdGlwbHkoZCkpLmFkZChjKS5tb2QoaCk7cmV0dXJuIGUuZXF1YWxzKGcpfTtFQ1BvaW50RnAucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIoXCIrdGhpcy5nZXRYKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoKStcIixcIit0aGlzLmdldFkoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygpK1wiKVwifTtFQ1BvaW50RnAucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uKCl7dmFyIGM9dGhpcy5jdXJ2ZS5nZXRRKCk7aWYodGhpcy5pc0luZmluaXR5KCkpe3Rocm93IG5ldyBFcnJvcihcIlBvaW50IGlzIGF0IGluZmluaXR5LlwiKX12YXIgYT10aGlzLmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgYj10aGlzLmdldFkoKS50b0JpZ0ludGVnZXIoKTtpZihhLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk8MHx8YS5jb21wYXJlVG8oYy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpPjApe3Rocm93IG5ldyBFcnJvcihcInggY29vcmRpbmF0ZSBvdXQgb2YgYm91bmRzXCIpfWlmKGIuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKTwwfHxiLmNvbXBhcmVUbyhjLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKSk+MCl7dGhyb3cgbmV3IEVycm9yKFwieSBjb29yZGluYXRlIG91dCBvZiBib3VuZHNcIil9aWYoIXRoaXMuaXNPbkN1cnZlKCkpe3Rocm93IG5ldyBFcnJvcihcIlBvaW50IGlzIG5vdCBvbiB0aGUgY3VydmUuXCIpfWlmKHRoaXMubXVsdGlwbHkoYykuaXNJbmZpbml0eSgpKXt0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBpcyBub3QgYSBzY2FsYXIgbXVsdGlwbGUgb2YgRy5cIil9cmV0dXJuIHRydWV9O1xuLyohIE1pa2UgU2FtdWVsIChjKSAyMDA5IHwgY29kZS5nb29nbGUuY29tL3AvanNvbi1zYW5zLWV2YWxcbiAqL1xudmFyIGpzb25QYXJzZT0oZnVuY3Rpb24oKXt2YXIgZT1cIig/Oi0/XFxcXGIoPzowfFsxLTldWzAtOV0qKSg/OlxcXFwuWzAtOV0rKT8oPzpbZUVdWystXT9bMC05XSspP1xcXFxiKVwiO3ZhciBqPScoPzpbXlxcXFwwLVxcXFx4MDhcXFxceDBhLVxcXFx4MWZcIlxcXFxcXFxcXXxcXFxcXFxcXCg/OltcIi9cXFxcXFxcXGJmbnJ0XXx1WzAtOUEtRmEtZl17NH0pKSc7dmFyIGk9Jyg/OlwiJytqKycqXCIpJzt2YXIgZD1uZXcgUmVnRXhwKFwiKD86ZmFsc2V8dHJ1ZXxudWxsfFtcXFxce1xcXFx9XFxcXFtcXFxcXV18XCIrZStcInxcIitpK1wiKVwiLFwiZ1wiKTt2YXIgaz1uZXcgUmVnRXhwKFwiXFxcXFxcXFwoPzooW151XSl8dSguezR9KSlcIixcImdcIik7dmFyIGc9eydcIic6J1wiJyxcIi9cIjpcIi9cIixcIlxcXFxcIjpcIlxcXFxcIixiOlwiXFxiXCIsZjpcIlxcZlwiLG46XCJcXG5cIixyOlwiXFxyXCIsdDpcIlxcdFwifTtmdW5jdGlvbiBoKGwsbSxuKXtyZXR1cm4gbT9nW21dOlN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobiwxNikpfXZhciBjPW5ldyBTdHJpbmcoXCJcIik7dmFyIGE9XCJcXFxcXCI7dmFyIGY9e1wie1wiOk9iamVjdCxcIltcIjpBcnJheX07dmFyIGI9T2JqZWN0Lmhhc093blByb3BlcnR5O3JldHVybiBmdW5jdGlvbih1LHEpe3ZhciBwPXUubWF0Y2goZCk7dmFyIHg7dmFyIHY9cFswXTt2YXIgbD1mYWxzZTtpZihcIntcIj09PXYpe3g9e319ZWxzZXtpZihcIltcIj09PXYpe3g9W119ZWxzZXt4PVtdO2w9dHJ1ZX19dmFyIHQ7dmFyIHI9W3hdO2Zvcih2YXIgbz0xLWwsbT1wLmxlbmd0aDtvPG07KytvKXt2PXBbb107dmFyIHc7c3dpdGNoKHYuY2hhckNvZGVBdCgwKSl7ZGVmYXVsdDp3PXJbMF07d1t0fHx3Lmxlbmd0aF09Kyh2KTt0PXZvaWQgMDticmVhaztjYXNlIDM0OnY9di5zdWJzdHJpbmcoMSx2Lmxlbmd0aC0xKTtpZih2LmluZGV4T2YoYSkhPT0tMSl7dj12LnJlcGxhY2UoayxoKX13PXJbMF07aWYoIXQpe2lmKHcgaW5zdGFuY2VvZiBBcnJheSl7dD13Lmxlbmd0aH1lbHNle3Q9dnx8YzticmVha319d1t0XT12O3Q9dm9pZCAwO2JyZWFrO2Nhc2UgOTE6dz1yWzBdO3IudW5zaGlmdCh3W3R8fHcubGVuZ3RoXT1bXSk7dD12b2lkIDA7YnJlYWs7Y2FzZSA5MzpyLnNoaWZ0KCk7YnJlYWs7Y2FzZSAxMDI6dz1yWzBdO3dbdHx8dy5sZW5ndGhdPWZhbHNlO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTEwOnc9clswXTt3W3R8fHcubGVuZ3RoXT1udWxsO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTE2Onc9clswXTt3W3R8fHcubGVuZ3RoXT10cnVlO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTIzOnc9clswXTtyLnVuc2hpZnQod1t0fHx3Lmxlbmd0aF09e30pO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTI1OnIuc2hpZnQoKTticmVha319aWYobCl7aWYoci5sZW5ndGghPT0xKXt0aHJvdyBuZXcgRXJyb3IoKX14PXhbMF19ZWxzZXtpZihyLmxlbmd0aCl7dGhyb3cgbmV3IEVycm9yKCl9fWlmKHEpe3ZhciBzPWZ1bmN0aW9uKEMsQil7dmFyIEQ9Q1tCXTtpZihEJiZ0eXBlb2YgRD09PVwib2JqZWN0XCIpe3ZhciBuPW51bGw7Zm9yKHZhciB6IGluIEQpe2lmKGIuY2FsbChELHopJiZEIT09Qyl7dmFyIHk9cyhELHopO2lmKHkhPT12b2lkIDApe0Rbel09eX1lbHNle2lmKCFuKXtuPVtdfW4ucHVzaCh6KX19fWlmKG4pe2Zvcih2YXIgQT1uLmxlbmd0aDstLUE+PTA7KXtkZWxldGUgRFtuW0FdXX19fXJldHVybiBxLmNhbGwoQyxCLEQpfTt4PXMoe1wiXCI6eH0sXCJcIil9cmV0dXJuIHh9fSkoKTtcbi8qISBhc24xLTEuMC4xMS5qcyAoYykgMjAxMy0yMDE2IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5hc24xPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xKXtLSlVSLmFzbjE9e319S0pVUi5hc24xLkFTTjFVdGlsPW5ldyBmdW5jdGlvbigpe3RoaXMuaW50ZWdlclRvQnl0ZUhleD1mdW5jdGlvbihhKXt2YXIgYj1hLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGglMik9PTEpe2I9XCIwXCIrYn1yZXR1cm4gYn07dGhpcy5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleD1mdW5jdGlvbihqKXt2YXIgZj1qLnRvU3RyaW5nKDE2KTtpZihmLnN1YnN0cigwLDEpIT1cIi1cIil7aWYoZi5sZW5ndGglMj09MSl7Zj1cIjBcIitmfWVsc2V7aWYoIWYubWF0Y2goL15bMC03XS8pKXtmPVwiMDBcIitmfX19ZWxzZXt2YXIgYT1mLnN1YnN0cigxKTt2YXIgZT1hLmxlbmd0aDtpZihlJTI9PTEpe2UrPTF9ZWxzZXtpZighZi5tYXRjaCgvXlswLTddLykpe2UrPTJ9fXZhciBnPVwiXCI7Zm9yKHZhciBkPTA7ZDxlO2QrKyl7Zys9XCJmXCJ9dmFyIGM9bmV3IEJpZ0ludGVnZXIoZywxNik7dmFyIGI9Yy54b3IoaikuYWRkKEJpZ0ludGVnZXIuT05FKTtmPWIudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14tLyxcIlwiKX1yZXR1cm4gZn07dGhpcy5nZXRQRU1TdHJpbmdGcm9tSGV4PWZ1bmN0aW9uKGEsYil7dmFyIGM9aGV4dG9iNjQoYSk7dmFyIGQ9Yy5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTtkPWQucmVwbGFjZSgvXFxyXFxuJC8sXCJcIik7cmV0dXJuXCItLS0tLUJFR0lOIFwiK2IrXCItLS0tLVxcclxcblwiK2QrXCJcXHJcXG4tLS0tLUVORCBcIitiK1wiLS0tLS1cXHJcXG5cIn07dGhpcy5uZXdPYmplY3Q9ZnVuY3Rpb24oYil7dmFyIGc9S0pVUi5hc24xO3ZhciBrPU9iamVjdC5rZXlzKGIpO2lmKGsubGVuZ3RoIT0xKXt0aHJvd1wia2V5IG9mIHBhcmFtIHNoYWxsIGJlIG9ubHkgb25lLlwifXZhciBqPWtbMF07aWYoXCI6Ym9vbDppbnQ6Yml0c3RyOm9jdHN0cjpudWxsOm9pZDplbnVtOnV0ZjhzdHI6bnVtc3RyOnBybnN0cjp0ZWxzdHI6aWE1c3RyOnV0Y3RpbWU6Z2VudGltZTpzZXE6c2V0OnRhZzpcIi5pbmRleE9mKFwiOlwiK2orXCI6XCIpPT0tMSl7dGhyb3dcInVuZGVmaW5lZCBrZXk6IFwiK2p9aWYoaj09XCJib29sXCIpe3JldHVybiBuZXcgZy5ERVJCb29sZWFuKGJbal0pfWlmKGo9PVwiaW50XCIpe3JldHVybiBuZXcgZy5ERVJJbnRlZ2VyKGJbal0pfWlmKGo9PVwiYml0c3RyXCIpe3JldHVybiBuZXcgZy5ERVJCaXRTdHJpbmcoYltqXSl9aWYoaj09XCJvY3RzdHJcIil7cmV0dXJuIG5ldyBnLkRFUk9jdGV0U3RyaW5nKGJbal0pfWlmKGo9PVwibnVsbFwiKXtyZXR1cm4gbmV3IGcuREVSTnVsbChiW2pdKX1pZihqPT1cIm9pZFwiKXtyZXR1cm4gbmV3IGcuREVST2JqZWN0SWRlbnRpZmllcihiW2pdKX1pZihqPT1cImVudW1cIil7cmV0dXJuIG5ldyBnLkRFUkVudW1lcmF0ZWQoYltqXSl9aWYoaj09XCJ1dGY4c3RyXCIpe3JldHVybiBuZXcgZy5ERVJVVEY4U3RyaW5nKGJbal0pfWlmKGo9PVwibnVtc3RyXCIpe3JldHVybiBuZXcgZy5ERVJOdW1lcmljU3RyaW5nKGJbal0pfWlmKGo9PVwicHJuc3RyXCIpe3JldHVybiBuZXcgZy5ERVJQcmludGFibGVTdHJpbmcoYltqXSl9aWYoaj09XCJ0ZWxzdHJcIil7cmV0dXJuIG5ldyBnLkRFUlRlbGV0ZXhTdHJpbmcoYltqXSl9aWYoaj09XCJpYTVzdHJcIil7cmV0dXJuIG5ldyBnLkRFUklBNVN0cmluZyhiW2pdKX1pZihqPT1cInV0Y3RpbWVcIil7cmV0dXJuIG5ldyBnLkRFUlVUQ1RpbWUoYltqXSl9aWYoaj09XCJnZW50aW1lXCIpe3JldHVybiBuZXcgZy5ERVJHZW5lcmFsaXplZFRpbWUoYltqXSl9aWYoaj09XCJzZXFcIil7dmFyIG09YltqXTt2YXIgaD1bXTtmb3IodmFyIGU9MDtlPG0ubGVuZ3RoO2UrKyl7dmFyIGw9Zy5BU04xVXRpbC5uZXdPYmplY3QobVtlXSk7aC5wdXNoKGwpfXJldHVybiBuZXcgZy5ERVJTZXF1ZW5jZSh7YXJyYXk6aH0pfWlmKGo9PVwic2V0XCIpe3ZhciBtPWJbal07dmFyIGg9W107Zm9yKHZhciBlPTA7ZTxtLmxlbmd0aDtlKyspe3ZhciBsPWcuQVNOMVV0aWwubmV3T2JqZWN0KG1bZV0pO2gucHVzaChsKX1yZXR1cm4gbmV3IGcuREVSU2V0KHthcnJheTpofSl9aWYoaj09XCJ0YWdcIil7dmFyIGM9YltqXTtpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYyk9PT1cIltvYmplY3QgQXJyYXldXCImJmMubGVuZ3RoPT0zKXt2YXIgZD1nLkFTTjFVdGlsLm5ld09iamVjdChjWzJdKTtyZXR1cm4gbmV3IGcuREVSVGFnZ2VkT2JqZWN0KHt0YWc6Y1swXSxleHBsaWNpdDpjWzFdLG9iajpkfSl9ZWxzZXt2YXIgZj17fTtpZihjLmV4cGxpY2l0IT09dW5kZWZpbmVkKXtmLmV4cGxpY2l0PWMuZXhwbGljaXR9aWYoYy50YWchPT11bmRlZmluZWQpe2YudGFnPWMudGFnfWlmKGMub2JqPT09dW5kZWZpbmVkKXt0aHJvd1wib2JqIHNoYWxsIGJlIHNwZWNpZmllZCBmb3IgJ3RhZycuXCJ9Zi5vYmo9Zy5BU04xVXRpbC5uZXdPYmplY3QoYy5vYmopO3JldHVybiBuZXcgZy5ERVJUYWdnZWRPYmplY3QoZil9fX07dGhpcy5qc29uVG9BU04xSEVYPWZ1bmN0aW9uKGIpe3ZhciBhPXRoaXMubmV3T2JqZWN0KGIpO3JldHVybiBhLmdldEVuY29kZWRIZXgoKX19O0tKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludD1mdW5jdGlvbihhKXt2YXIgaj1cIlwiO3ZhciBrPXBhcnNlSW50KGEuc3Vic3RyKDAsMiksMTYpO3ZhciBkPU1hdGguZmxvb3Ioay80MCk7dmFyIGM9ayU0MDt2YXIgaj1kK1wiLlwiK2M7dmFyIGU9XCJcIjtmb3IodmFyIGY9MjtmPGEubGVuZ3RoO2YrPTIpe3ZhciBnPXBhcnNlSW50KGEuc3Vic3RyKGYsMiksMTYpO3ZhciBoPShcIjAwMDAwMDAwXCIrZy50b1N0cmluZygyKSkuc2xpY2UoLTgpO2U9ZStoLnN1YnN0cigxLDcpO2lmKGguc3Vic3RyKDAsMSk9PVwiMFwiKXt2YXIgYj1uZXcgQmlnSW50ZWdlcihlLDIpO2o9aitcIi5cIitiLnRvU3RyaW5nKDEwKTtlPVwiXCJ9fXJldHVybiBqfTtLSlVSLmFzbjEuQVNOMVV0aWwub2lkSW50VG9IZXg9ZnVuY3Rpb24oZil7dmFyIGU9ZnVuY3Rpb24oYSl7dmFyIGs9YS50b1N0cmluZygxNik7aWYoay5sZW5ndGg9PTEpe2s9XCIwXCIra31yZXR1cm4ga307dmFyIGQ9ZnVuY3Rpb24obyl7dmFyIG49XCJcIjt2YXIgaz1uZXcgQmlnSW50ZWdlcihvLDEwKTt2YXIgYT1rLnRvU3RyaW5nKDIpO3ZhciBsPTctYS5sZW5ndGglNztpZihsPT03KXtsPTB9dmFyIHE9XCJcIjtmb3IodmFyIG09MDttPGw7bSsrKXtxKz1cIjBcIn1hPXErYTtmb3IodmFyIG09MDttPGEubGVuZ3RoLTE7bSs9Nyl7dmFyIHA9YS5zdWJzdHIobSw3KTtpZihtIT1hLmxlbmd0aC03KXtwPVwiMVwiK3B9bis9ZShwYXJzZUludChwLDIpKX1yZXR1cm4gbn07aWYoIWYubWF0Y2goL15bMC05Ll0rJC8pKXt0aHJvd1wibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiK2Z9dmFyIGc9XCJcIjt2YXIgYj1mLnNwbGl0KFwiLlwiKTt2YXIgaj1wYXJzZUludChiWzBdKSo0MCtwYXJzZUludChiWzFdKTtnKz1lKGopO2Iuc3BsaWNlKDAsMik7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe2crPWQoYltjXSl9cmV0dXJuIGd9O0tKVVIuYXNuMS5BU04xT2JqZWN0PWZ1bmN0aW9uKCl7dmFyIGM9dHJ1ZTt2YXIgYj1udWxsO3ZhciBkPVwiMDBcIjt2YXIgZT1cIjAwXCI7dmFyIGE9XCJcIjt0aGlzLmdldExlbmd0aEhleEZyb21WYWx1ZT1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhWPT1cInVuZGVmaW5lZFwifHx0aGlzLmhWPT1udWxsKXt0aHJvd1widGhpcy5oViBpcyBudWxsIG9yIHVuZGVmaW5lZC5cIn1pZih0aGlzLmhWLmxlbmd0aCUyPT0xKXt0aHJvd1widmFsdWUgaGV4IG11c3QgYmUgZXZlbiBsZW5ndGg6IG49XCIrYS5sZW5ndGgrXCIsdj1cIit0aGlzLmhWfXZhciBpPXRoaXMuaFYubGVuZ3RoLzI7dmFyIGg9aS50b1N0cmluZygxNik7aWYoaC5sZW5ndGglMj09MSl7aD1cIjBcIitofWlmKGk8MTI4KXtyZXR1cm4gaH1lbHNle3ZhciBnPWgubGVuZ3RoLzI7aWYoZz4xNSl7dGhyb3dcIkFTTi4xIGxlbmd0aCB0b28gbG9uZyB0byByZXByZXNlbnQgYnkgOHg6IG4gPSBcIitpLnRvU3RyaW5nKDE2KX12YXIgZj0xMjgrZztyZXR1cm4gZi50b1N0cmluZygxNikraH19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaFRMVj09bnVsbHx8dGhpcy5pc01vZGlmaWVkKXt0aGlzLmhWPXRoaXMuZ2V0RnJlc2hWYWx1ZUhleCgpO3RoaXMuaEw9dGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKTt0aGlzLmhUTFY9dGhpcy5oVCt0aGlzLmhMK3RoaXMuaFY7dGhpcy5pc01vZGlmaWVkPWZhbHNlfXJldHVybiB0aGlzLmhUTFZ9O3RoaXMuZ2V0VmFsdWVIZXg9ZnVuY3Rpb24oKXt0aGlzLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVn07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn19O0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZz1mdW5jdGlvbihjKXtLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGw7dmFyIGE9bnVsbDt0aGlzLmdldFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN9O3RoaXMuc2V0U3RyaW5nPWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1kO3RoaXMuaFY9c3RvaGV4KHRoaXMucyl9O3RoaXMuc2V0U3RyaW5nSGV4PWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1udWxsO3RoaXMuaFY9ZH07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYz09XCJzdHJpbmdcIil7dGhpcy5zZXRTdHJpbmcoYyl9ZWxzZXtpZih0eXBlb2YgYy5zdHIhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0U3RyaW5nKGMuc3RyKX1lbHNle2lmKHR5cGVvZiBjLmhleCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRTdHJpbmdIZXgoYy5oZXgpfX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGw7dmFyIGE9bnVsbDt0aGlzLmxvY2FsRGF0ZVRvVVRDPWZ1bmN0aW9uKGYpe3V0Yz1mLmdldFRpbWUoKSsoZi5nZXRUaW1lem9uZU9mZnNldCgpKjYwMDAwKTt2YXIgZT1uZXcgRGF0ZSh1dGMpO3JldHVybiBlfTt0aGlzLmZvcm1hdERhdGU9ZnVuY3Rpb24obSxvLGUpe3ZhciBnPXRoaXMuemVyb1BhZGRpbmc7dmFyIG49dGhpcy5sb2NhbERhdGVUb1VUQyhtKTt2YXIgcD1TdHJpbmcobi5nZXRGdWxsWWVhcigpKTtpZihvPT1cInV0Y1wiKXtwPXAuc3Vic3RyKDIsMil9dmFyIGw9ZyhTdHJpbmcobi5nZXRNb250aCgpKzEpLDIpO3ZhciBxPWcoU3RyaW5nKG4uZ2V0RGF0ZSgpKSwyKTt2YXIgaD1nKFN0cmluZyhuLmdldEhvdXJzKCkpLDIpO3ZhciBpPWcoU3RyaW5nKG4uZ2V0TWludXRlcygpKSwyKTt2YXIgaj1nKFN0cmluZyhuLmdldFNlY29uZHMoKSksMik7dmFyIHI9cCtsK3EraCtpK2o7aWYoZT09PXRydWUpe3ZhciBmPW4uZ2V0TWlsbGlzZWNvbmRzKCk7aWYoZiE9MCl7dmFyIGs9ZyhTdHJpbmcoZiksMyk7az1rLnJlcGxhY2UoL1swXSskLyxcIlwiKTtyPXIrXCIuXCIra319cmV0dXJuIHIrXCJaXCJ9O3RoaXMuemVyb1BhZGRpbmc9ZnVuY3Rpb24oZSxkKXtpZihlLmxlbmd0aD49ZCl7cmV0dXJuIGV9cmV0dXJuIG5ldyBBcnJheShkLWUubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2V9O3RoaXMuZ2V0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc307dGhpcy5zZXRTdHJpbmc9ZnVuY3Rpb24oZCl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5zPWQ7dGhpcy5oVj1zdG9oZXgoZCl9O3RoaXMuc2V0QnlEYXRlVmFsdWU9ZnVuY3Rpb24oaCxqLGUsZCxmLGcpe3ZhciBpPW5ldyBEYXRlKERhdGUuVVRDKGgsai0xLGUsZCxmLGcsMCkpO3RoaXMuc2V0QnlEYXRlKGkpfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQ9ZnVuY3Rpb24oYil7S0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1udWxsO3RoaXMuc2V0QnlBU04xT2JqZWN0QXJyYXk9ZnVuY3Rpb24oYyl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5hc24xQXJyYXk9Y307dGhpcy5hcHBlbmRBU04xT2JqZWN0PWZ1bmN0aW9uKGMpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuYXNuMUFycmF5LnB1c2goYyl9O3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xQXJyYXk9Yi5hcnJheX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQm9vbGVhbj1mdW5jdGlvbigpe0tKVVIuYXNuMS5ERVJCb29sZWFuLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDFcIjt0aGlzLmhUTFY9XCIwMTAxZmZcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkJvb2xlYW4sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJJbnRlZ2VyPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJJbnRlZ2VyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDJcIjt0aGlzLnNldEJ5QmlnSW50ZWdlcj1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPUtKVVIuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleChiKX07dGhpcy5zZXRCeUludGVnZXI9ZnVuY3Rpb24oYyl7dmFyIGI9bmV3IEJpZ0ludGVnZXIoU3RyaW5nKGMpLDEwKTt0aGlzLnNldEJ5QmlnSW50ZWdlcihiKX07dGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihiKXt0aGlzLmhWPWJ9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGEuYmlnaW50IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5QmlnSW50ZWdlcihhLmJpZ2ludCl9ZWxzZXtpZih0eXBlb2YgYVtcImludFwiXSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUludGVnZXIoYVtcImludFwiXSl9ZWxzZXtpZih0eXBlb2YgYT09XCJudW1iZXJcIil7dGhpcy5zZXRCeUludGVnZXIoYSl9ZWxzZXtpZih0eXBlb2YgYS5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0VmFsdWVIZXgoYS5oZXgpfX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJJbnRlZ2VyLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQml0U3RyaW5nPWZ1bmN0aW9uKGIpe2lmKGIhPT11bmRlZmluZWQmJnR5cGVvZiBiLm9iaiE9PVwidW5kZWZpbmVkXCIpe3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QoYi5vYmopO2IuaGV4PVwiMDBcIithLmdldEVuY29kZWRIZXgoKX1LSlVSLmFzbjEuREVSQml0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDNcIjt0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cz1mdW5jdGlvbihjKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPWN9O3RoaXMuc2V0VW51c2VkQml0c0FuZEhleFZhbHVlPWZ1bmN0aW9uKGMsZSl7aWYoYzwwfHw3PGMpe3Rocm93XCJ1bnVzZWQgYml0cyBzaGFsbCBiZSBmcm9tIDAgdG8gNzogdSA9IFwiK2N9dmFyIGQ9XCIwXCIrYzt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPWQrZX07dGhpcy5zZXRCeUJpbmFyeVN0cmluZz1mdW5jdGlvbihlKXtlPWUucmVwbGFjZSgvMCskLyxcIlwiKTt2YXIgZj04LWUubGVuZ3RoJTg7aWYoZj09OCl7Zj0wfWZvcih2YXIgZz0wO2c8PWY7ZysrKXtlKz1cIjBcIn12YXIgaj1cIlwiO2Zvcih2YXIgZz0wO2c8ZS5sZW5ndGgtMTtnKz04KXt2YXIgZD1lLnN1YnN0cihnLDgpO3ZhciBjPXBhcnNlSW50KGQsMikudG9TdHJpbmcoMTYpO2lmKGMubGVuZ3RoPT0xKXtjPVwiMFwiK2N9ais9Y310aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPVwiMFwiK2Yran07dGhpcy5zZXRCeUJvb2xlYW5BcnJheT1mdW5jdGlvbihlKXt2YXIgZD1cIlwiO2Zvcih2YXIgYz0wO2M8ZS5sZW5ndGg7YysrKXtpZihlW2NdPT10cnVlKXtkKz1cIjFcIn1lbHNle2QrPVwiMFwifX10aGlzLnNldEJ5QmluYXJ5U3RyaW5nKGQpfTt0aGlzLm5ld0ZhbHNlQXJyYXk9ZnVuY3Rpb24oZSl7dmFyIGM9bmV3IEFycmF5KGUpO2Zvcih2YXIgZD0wO2Q8ZTtkKyspe2NbZF09ZmFsc2V9cmV0dXJuIGN9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGI9PVwic3RyaW5nXCImJmIudG9Mb3dlckNhc2UoKS5tYXRjaCgvXlswLTlhLWZdKyQvKSl7dGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHMoYil9ZWxzZXtpZih0eXBlb2YgYi5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKGIuaGV4KX1lbHNle2lmKHR5cGVvZiBiLmJpbiE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUJpbmFyeVN0cmluZyhiLmJpbil9ZWxzZXtpZih0eXBlb2YgYi5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUJvb2xlYW5BcnJheShiLmFycmF5KX19fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSQml0U3RyaW5nLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmc9ZnVuY3Rpb24oYil7aWYoYiE9PXVuZGVmaW5lZCYmdHlwZW9mIGIub2JqIT09XCJ1bmRlZmluZWRcIil7dmFyIGE9S0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdChiLm9iaik7Yi5oZXg9YS5nZXRFbmNvZGVkSGV4KCl9S0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGIpO3RoaXMuaFQ9XCIwNFwifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSTnVsbD1mdW5jdGlvbigpe0tKVVIuYXNuMS5ERVJOdWxsLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDVcIjt0aGlzLmhUTFY9XCIwNTAwXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJOdWxsLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcj1mdW5jdGlvbihjKXt2YXIgYj1mdW5jdGlvbihkKXt2YXIgZT1kLnRvU3RyaW5nKDE2KTtpZihlLmxlbmd0aD09MSl7ZT1cIjBcIitlfXJldHVybiBlfTt2YXIgYT1mdW5jdGlvbihrKXt2YXIgaj1cIlwiO3ZhciBlPW5ldyBCaWdJbnRlZ2VyKGssMTApO3ZhciBkPWUudG9TdHJpbmcoMik7dmFyIGY9Ny1kLmxlbmd0aCU3O2lmKGY9PTcpe2Y9MH12YXIgbT1cIlwiO2Zvcih2YXIgZz0wO2c8ZjtnKyspe20rPVwiMFwifWQ9bStkO2Zvcih2YXIgZz0wO2c8ZC5sZW5ndGgtMTtnKz03KXt2YXIgbD1kLnN1YnN0cihnLDcpO2lmKGchPWQubGVuZ3RoLTcpe2w9XCIxXCIrbH1qKz1iKHBhcnNlSW50KGwsMikpfXJldHVybiBqfTtLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjA2XCI7dGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihkKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLnM9bnVsbDt0aGlzLmhWPWR9O3RoaXMuc2V0VmFsdWVPaWRTdHJpbmc9ZnVuY3Rpb24oZil7aWYoIWYubWF0Y2goL15bMC05Ll0rJC8pKXt0aHJvd1wibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiK2Z9dmFyIGc9XCJcIjt2YXIgZD1mLnNwbGl0KFwiLlwiKTt2YXIgaj1wYXJzZUludChkWzBdKSo0MCtwYXJzZUludChkWzFdKTtnKz1iKGopO2Quc3BsaWNlKDAsMik7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe2crPWEoZFtlXSl9dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5zPW51bGw7dGhpcy5oVj1nfTt0aGlzLnNldFZhbHVlTmFtZT1mdW5jdGlvbihlKXtpZih0eXBlb2YgS0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkTGlzdFtlXSE9XCJ1bmRlZmluZWRcIil7dmFyIGQ9S0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkTGlzdFtlXTt0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGQpfWVsc2V7dGhyb3dcIkRFUk9iamVjdElkZW50aWZpZXIgb2lkTmFtZSB1bmRlZmluZWQ6IFwiK2V9fTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjPT1cInN0cmluZ1wiJiZjLm1hdGNoKC9eWzAtMl0uWzAtOS5dKyQvKSl7dGhpcy5zZXRWYWx1ZU9pZFN0cmluZyhjKX1lbHNle2lmKEtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZExpc3RbY10hPT11bmRlZmluZWQpe3RoaXMuc2V0VmFsdWVPaWRTdHJpbmcoS0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkTGlzdFtjXSl9ZWxzZXtpZih0eXBlb2YgYy5vaWQhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0VmFsdWVPaWRTdHJpbmcoYy5vaWQpfWVsc2V7aWYodHlwZW9mIGMuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFZhbHVlSGV4KGMuaGV4KX1lbHNle2lmKHR5cGVvZiBjLm5hbWUhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0VmFsdWVOYW1lKGMubmFtZSl9fX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSRW51bWVyYXRlZD1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSRW51bWVyYXRlZC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjBhXCI7dGhpcy5zZXRCeUJpZ0ludGVnZXI9ZnVuY3Rpb24oYil7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1LSlVSLmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgoYil9O3RoaXMuc2V0QnlJbnRlZ2VyPWZ1bmN0aW9uKGMpe3ZhciBiPW5ldyBCaWdJbnRlZ2VyKFN0cmluZyhjKSwxMCk7dGhpcy5zZXRCeUJpZ0ludGVnZXIoYil9O3RoaXMuc2V0VmFsdWVIZXg9ZnVuY3Rpb24oYil7dGhpcy5oVj1ifTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhW1wiaW50XCJdIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5SW50ZWdlcihhW1wiaW50XCJdKX1lbHNle2lmKHR5cGVvZiBhPT1cIm51bWJlclwiKXt0aGlzLnNldEJ5SW50ZWdlcihhKX1lbHNle2lmKHR5cGVvZiBhLmhleCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRWYWx1ZUhleChhLmhleCl9fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSRW51bWVyYXRlZCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUlVURjhTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlVURjhTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjBjXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJVVEY4U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjEyXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxM1wifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjE0XCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUklBNVN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSSUE1U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxNlwifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSSUE1U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUlVUQ1RpbWU9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlVUQ1RpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjE3XCI7dGhpcy5zZXRCeURhdGU9ZnVuY3Rpb24oYil7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5kYXRlPWI7dGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJ1dGNcIik7dGhpcy5oVj1zdG9oZXgodGhpcy5zKX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7aWYodHlwZW9mIHRoaXMuZGF0ZT09XCJ1bmRlZmluZWRcIiYmdHlwZW9mIHRoaXMucz09XCJ1bmRlZmluZWRcIil7dGhpcy5kYXRlPW5ldyBEYXRlKCk7dGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJ1dGNcIik7dGhpcy5oVj1zdG9oZXgodGhpcy5zKX1yZXR1cm4gdGhpcy5oVn07aWYoYSE9PXVuZGVmaW5lZCl7aWYoYS5zdHIhPT11bmRlZmluZWQpe3RoaXMuc2V0U3RyaW5nKGEuc3RyKX1lbHNle2lmKHR5cGVvZiBhPT1cInN0cmluZ1wiJiZhLm1hdGNoKC9eWzAtOV17MTJ9WiQvKSl7dGhpcy5zZXRTdHJpbmcoYSl9ZWxzZXtpZihhLmhleCE9PXVuZGVmaW5lZCl7dGhpcy5zZXRTdHJpbmdIZXgoYS5oZXgpfWVsc2V7aWYoYS5kYXRlIT09dW5kZWZpbmVkKXt0aGlzLnNldEJ5RGF0ZShhLmRhdGUpfX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJVVENUaW1lLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUpO0tKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWU9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMThcIjt0aGlzLndpdGhNaWxsaXM9ZmFsc2U7dGhpcy5zZXRCeURhdGU9ZnVuY3Rpb24oYil7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5kYXRlPWI7dGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJnZW5cIix0aGlzLndpdGhNaWxsaXMpO3RoaXMuaFY9c3RvaGV4KHRoaXMucyl9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe2lmKHRoaXMuZGF0ZT09PXVuZGVmaW5lZCYmdGhpcy5zPT09dW5kZWZpbmVkKXt0aGlzLmRhdGU9bmV3IERhdGUoKTt0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcImdlblwiLHRoaXMud2l0aE1pbGxpcyk7dGhpcy5oVj1zdG9oZXgodGhpcy5zKX1yZXR1cm4gdGhpcy5oVn07aWYoYSE9PXVuZGVmaW5lZCl7aWYoYS5zdHIhPT11bmRlZmluZWQpe3RoaXMuc2V0U3RyaW5nKGEuc3RyKX1lbHNle2lmKHR5cGVvZiBhPT1cInN0cmluZ1wiJiZhLm1hdGNoKC9eWzAtOV17MTR9WiQvKSl7dGhpcy5zZXRTdHJpbmcoYSl9ZWxzZXtpZihhLmhleCE9PXVuZGVmaW5lZCl7dGhpcy5zZXRTdHJpbmdIZXgoYS5oZXgpfWVsc2V7aWYoYS5kYXRlIT09dW5kZWZpbmVkKXt0aGlzLnNldEJ5RGF0ZShhLmRhdGUpfX19fWlmKGEubWlsbGlzPT09dHJ1ZSl7dGhpcy53aXRoTWlsbGlzPXRydWV9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZSxLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lKTtLSlVSLmFzbjEuREVSU2VxdWVuY2U9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlNlcXVlbmNlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIzMFwiO3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3ZhciBjPVwiXCI7Zm9yKHZhciBiPTA7Yjx0aGlzLmFzbjFBcnJheS5sZW5ndGg7YisrKXt2YXIgZD10aGlzLmFzbjFBcnJheVtiXTtjKz1kLmdldEVuY29kZWRIZXgoKX10aGlzLmhWPWM7cmV0dXJuIHRoaXMuaFZ9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSU2VxdWVuY2UsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCk7S0pVUi5hc24xLkRFUlNldD1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSU2V0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIzMVwiO3RoaXMuc29ydEZsYWc9dHJ1ZTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXt2YXIgYj1uZXcgQXJyYXkoKTtmb3IodmFyIGM9MDtjPHRoaXMuYXNuMUFycmF5Lmxlbmd0aDtjKyspe3ZhciBkPXRoaXMuYXNuMUFycmF5W2NdO2IucHVzaChkLmdldEVuY29kZWRIZXgoKSl9aWYodGhpcy5zb3J0RmxhZz09dHJ1ZSl7Yi5zb3J0KCl9dGhpcy5oVj1iLmpvaW4oXCJcIik7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5zb3J0ZmxhZyE9XCJ1bmRlZmluZWRcIiYmYS5zb3J0ZmxhZz09ZmFsc2Upe3RoaXMuc29ydEZsYWc9ZmFsc2V9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlNldCxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkKTtLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0PWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Quc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuaFQ9XCJhMFwiO3RoaXMuaFY9XCJcIjt0aGlzLmlzRXhwbGljaXQ9dHJ1ZTt0aGlzLmFzbjFPYmplY3Q9bnVsbDt0aGlzLnNldEFTTjFPYmplY3Q9ZnVuY3Rpb24oYixjLGQpe3RoaXMuaFQ9Yzt0aGlzLmlzRXhwbGljaXQ9Yjt0aGlzLmFzbjFPYmplY3Q9ZDtpZih0aGlzLmlzRXhwbGljaXQpe3RoaXMuaFY9dGhpcy5hc24xT2JqZWN0LmdldEVuY29kZWRIZXgoKTt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZX1lbHNle3RoaXMuaFY9bnVsbDt0aGlzLmhUTFY9ZC5nZXRFbmNvZGVkSGV4KCk7dGhpcy5oVExWPXRoaXMuaFRMVi5yZXBsYWNlKC9eLi4vLGMpO3RoaXMuaXNNb2RpZmllZD1mYWxzZX19O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGEudGFnIT1cInVuZGVmaW5lZFwiKXt0aGlzLmhUPWEudGFnfWlmKHR5cGVvZiBhLmV4cGxpY2l0IT1cInVuZGVmaW5lZFwiKXt0aGlzLmlzRXhwbGljaXQ9YS5leHBsaWNpdH1pZih0eXBlb2YgYS5vYmohPVwidW5kZWZpbmVkXCIpe3RoaXMuYXNuMU9iamVjdD1hLm9iajt0aGlzLnNldEFTTjFPYmplY3QodGhpcy5pc0V4cGxpY2l0LHRoaXMuaFQsdGhpcy5hc24xT2JqZWN0KX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtcbi8qISBhc24xaGV4LTEuMS43LmpzIChjKSAyMDEyLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xudmFyIEFTTjFIRVg9bmV3IGZ1bmN0aW9uKCl7fTtBU04xSEVYLmdldEJ5dGVMZW5ndGhPZkxfQXRPYmo9ZnVuY3Rpb24oYixjKXtpZihiLnN1YnN0cmluZyhjKzIsYyszKSE9XCI4XCIpe3JldHVybiAxfXZhciBhPXBhcnNlSW50KGIuc3Vic3RyaW5nKGMrMyxjKzQpKTtpZihhPT0wKXtyZXR1cm4gLTF9aWYoMDxhJiZhPDEwKXtyZXR1cm4gYSsxfXJldHVybiAtMn07QVNOMUhFWC5nZXRIZXhPZkxfQXRPYmo9ZnVuY3Rpb24oYixjKXt2YXIgYT1BU04xSEVYLmdldEJ5dGVMZW5ndGhPZkxfQXRPYmooYixjKTtpZihhPDEpe3JldHVyblwiXCJ9cmV0dXJuIGIuc3Vic3RyaW5nKGMrMixjKzIrYSoyKX07QVNOMUhFWC5nZXRJbnRPZkxfQXRPYmo9ZnVuY3Rpb24oYyxkKXt2YXIgYj1BU04xSEVYLmdldEhleE9mTF9BdE9iaihjLGQpO2lmKGI9PVwiXCIpe3JldHVybiAtMX12YXIgYTtpZihwYXJzZUludChiLnN1YnN0cmluZygwLDEpKTw4KXthPW5ldyBCaWdJbnRlZ2VyKGIsMTYpfWVsc2V7YT1uZXcgQmlnSW50ZWdlcihiLnN1YnN0cmluZygyKSwxNil9cmV0dXJuIGEuaW50VmFsdWUoKX07QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaj1mdW5jdGlvbihiLGMpe3ZhciBhPUFTTjFIRVguZ2V0Qnl0ZUxlbmd0aE9mTF9BdE9iaihiLGMpO2lmKGE8MCl7cmV0dXJuIGF9cmV0dXJuIGMrKGErMSkqMn07QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmo9ZnVuY3Rpb24oYyxkKXt2YXIgYj1BU04xSEVYLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKGMsZCk7dmFyIGE9QVNOMUhFWC5nZXRJbnRPZkxfQXRPYmooYyxkKTtyZXR1cm4gYy5zdWJzdHJpbmcoYixiK2EqMil9O0FTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmo9ZnVuY3Rpb24oYyxlKXt2YXIgYj1jLnN1YnN0cihlLDIpO3ZhciBkPUFTTjFIRVguZ2V0SGV4T2ZMX0F0T2JqKGMsZSk7dmFyIGE9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooYyxlKTtyZXR1cm4gYitkK2F9O0FTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaj1mdW5jdGlvbihjLGQpe3ZhciBiPUFTTjFIRVguZ2V0U3RhcnRQb3NPZlZfQXRPYmooYyxkKTt2YXIgYT1BU04xSEVYLmdldEludE9mTF9BdE9iaihjLGQpO3JldHVybiBiK2EqMn07QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmo9ZnVuY3Rpb24oZixqKXt2YXIgYz1uZXcgQXJyYXkoKTt2YXIgaT1BU04xSEVYLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKGYsaik7aWYoZi5zdWJzdHIoaiwyKT09XCIwM1wiKXtjLnB1c2goaSsyKX1lbHNle2MucHVzaChpKX12YXIgYj1BU04xSEVYLmdldEludE9mTF9BdE9iaihmLGopO3ZhciBnPWk7dmFyIGQ9MDt3aGlsZSgxKXt2YXIgZT1BU04xSEVYLmdldFBvc09mTmV4dFNpYmxpbmdfQXRPYmooZixnKTtpZihlPT1udWxsfHwoZS1pPj0oYioyKSkpe2JyZWFrfWlmKGQ+PTIwMCl7YnJlYWt9Yy5wdXNoKGUpO2c9ZTtkKyt9cmV0dXJuIGN9O0FTTjFIRVguZ2V0TnRoQ2hpbGRJbmRleF9BdE9iaj1mdW5jdGlvbihkLGIsZSl7dmFyIGM9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZCxiKTtyZXR1cm4gY1tlXX07QVNOMUhFWC5nZXREZWNlbmRhbnRJbmRleEJ5TnRoTGlzdD1mdW5jdGlvbihlLGQsYyl7aWYoYy5sZW5ndGg9PTApe3JldHVybiBkfXZhciBmPWMuc2hpZnQoKTt2YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihlLGQpO3JldHVybiBBU04xSEVYLmdldERlY2VuZGFudEluZGV4QnlOdGhMaXN0KGUsYltmXSxjKX07QVNOMUhFWC5nZXREZWNlbmRhbnRIZXhUTFZCeU50aExpc3Q9ZnVuY3Rpb24oZCxjLGIpe3ZhciBhPUFTTjFIRVguZ2V0RGVjZW5kYW50SW5kZXhCeU50aExpc3QoZCxjLGIpO3JldHVybiBBU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsYSl9O0FTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdD1mdW5jdGlvbihkLGMsYil7dmFyIGE9QVNOMUhFWC5nZXREZWNlbmRhbnRJbmRleEJ5TnRoTGlzdChkLGMsYik7cmV0dXJuIEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGQsYSl9O0FTTjFIRVguZ2V0VmJ5TGlzdD1mdW5jdGlvbihkLGMsYixlKXt2YXIgYT1BU04xSEVYLmdldERlY2VuZGFudEluZGV4QnlOdGhMaXN0KGQsYyxiKTtpZihhPT09dW5kZWZpbmVkKXt0aHJvd1wiY2FuJ3QgZmluZCBudGhMaXN0IG9iamVjdFwifWlmKGUhPT11bmRlZmluZWQpe2lmKGQuc3Vic3RyKGEsMikhPWUpe3Rocm93XCJjaGVja2luZyB0YWcgZG9lc24ndCBtYXRjaDogXCIrZC5zdWJzdHIoYSwyKStcIiE9XCIrZX19cmV0dXJuIEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGQsYSl9O0FTTjFIRVguaGV4dG9vaWRzdHI9ZnVuY3Rpb24oZSl7dmFyIGg9ZnVuY3Rpb24oYixhKXtpZihiLmxlbmd0aD49YSl7cmV0dXJuIGJ9cmV0dXJuIG5ldyBBcnJheShhLWIubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2J9O3ZhciBsPVtdO3ZhciBvPWUuc3Vic3RyKDAsMik7dmFyIGY9cGFyc2VJbnQobywxNik7bFswXT1uZXcgU3RyaW5nKE1hdGguZmxvb3IoZi80MCkpO2xbMV09bmV3IFN0cmluZyhmJTQwKTt2YXIgbT1lLnN1YnN0cigyKTt2YXIgaz1bXTtmb3IodmFyIGc9MDtnPG0ubGVuZ3RoLzI7ZysrKXtrLnB1c2gocGFyc2VJbnQobS5zdWJzdHIoZyoyLDIpLDE2KSl9dmFyIGo9W107dmFyIGQ9XCJcIjtmb3IodmFyIGc9MDtnPGsubGVuZ3RoO2crKyl7aWYoa1tnXSYxMjgpe2Q9ZCtoKChrW2ddJjEyNykudG9TdHJpbmcoMiksNyl9ZWxzZXtkPWQraCgoa1tnXSYxMjcpLnRvU3RyaW5nKDIpLDcpO2oucHVzaChuZXcgU3RyaW5nKHBhcnNlSW50KGQsMikpKTtkPVwiXCJ9fXZhciBuPWwuam9pbihcIi5cIik7aWYoai5sZW5ndGg+MCl7bj1uK1wiLlwiK2ouam9pbihcIi5cIil9cmV0dXJuIG59O0FTTjFIRVguZHVtcD1mdW5jdGlvbihlLGMsayxnKXt2YXIgbz1mdW5jdGlvbih3LGkpe2lmKHcubGVuZ3RoPD1pKjIpe3JldHVybiB3fWVsc2V7dmFyIHY9dy5zdWJzdHIoMCxpKStcIi4uKHRvdGFsIFwiK3cubGVuZ3RoLzIrXCJieXRlcykuLlwiK3cuc3Vic3RyKHcubGVuZ3RoLWksaSk7cmV0dXJuIHZ9fTtpZihjPT09dW5kZWZpbmVkKXtjPXtvbW1pdF9sb25nX29jdGV0OjMyfX1pZihrPT09dW5kZWZpbmVkKXtrPTB9aWYoZz09PXVuZGVmaW5lZCl7Zz1cIlwifXZhciByPWMub21taXRfbG9uZ19vY3RldDtpZihlLnN1YnN0cihrLDIpPT1cIjAxXCIpe3ZhciBoPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsayk7aWYoaD09XCIwMFwiKXtyZXR1cm4gZytcIkJPT0xFQU4gRkFMU0VcXG5cIn1lbHNle3JldHVybiBnK1wiQk9PTEVBTiBUUlVFXFxuXCJ9fWlmKGUuc3Vic3RyKGssMik9PVwiMDJcIil7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKTtyZXR1cm4gZytcIklOVEVHRVIgXCIrbyhoLHIpK1wiXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIwM1wiKXt2YXIgaD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihlLGspO3JldHVybiBnK1wiQklUU1RSSU5HIFwiK28oaCxyKStcIlxcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMDRcIil7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKTtpZihBU04xSEVYLmlzQVNOMUhFWChoKSl7dmFyIGo9ZytcIk9DVEVUU1RSSU5HLCBlbmNhcHN1bGF0ZXNcXG5cIjtqPWorQVNOMUhFWC5kdW1wKGgsYywwLGcrXCIgIFwiKTtyZXR1cm4gan1lbHNle3JldHVybiBnK1wiT0NURVRTVFJJTkcgXCIrbyhoLHIpK1wiXFxuXCJ9fWlmKGUuc3Vic3RyKGssMik9PVwiMDVcIil7cmV0dXJuIGcrXCJOVUxMXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIwNlwiKXt2YXIgbD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihlLGspO3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChsKTt2YXIgbj1LSlVSLmFzbjEueDUwOS5PSUQub2lkMm5hbWUoYSk7dmFyIGI9YS5yZXBsYWNlKC9cXC4vZyxcIiBcIik7aWYobiE9XCJcIil7cmV0dXJuIGcrXCJPYmplY3RJZGVudGlmaWVyIFwiK24rXCIgKFwiK2IrXCIpXFxuXCJ9ZWxzZXtyZXR1cm4gZytcIk9iamVjdElkZW50aWZpZXIgKFwiK2IrXCIpXFxuXCJ9fWlmKGUuc3Vic3RyKGssMik9PVwiMGNcIil7cmV0dXJuIGcrXCJVVEY4U3RyaW5nICdcIitoZXh0b3V0ZjgoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKSkrXCInXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIxM1wiKXtyZXR1cm4gZytcIlByaW50YWJsZVN0cmluZyAnXCIraGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsaykpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMTRcIil7cmV0dXJuIGcrXCJUZWxldGV4U3RyaW5nICdcIitoZXh0b3V0ZjgoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKSkrXCInXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIxNlwiKXtyZXR1cm4gZytcIklBNVN0cmluZyAnXCIraGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsaykpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMTdcIil7cmV0dXJuIGcrXCJVVENUaW1lIFwiK2hleHRvdXRmOChBU04xSEVYLmdldEhleE9mVl9BdE9iaihlLGspKStcIlxcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMThcIil7cmV0dXJuIGcrXCJHZW5lcmFsaXplZFRpbWUgXCIraGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsaykpK1wiXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIzMFwiKXtpZihlLnN1YnN0cihrLDQpPT1cIjMwMDBcIil7cmV0dXJuIGcrXCJTRVFVRU5DRSB7fVxcblwifXZhciBqPWcrXCJTRVFVRU5DRVxcblwiO3ZhciBkPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGUsayk7dmFyIGY9YztpZigoZC5sZW5ndGg9PTJ8fGQubGVuZ3RoPT0zKSYmZS5zdWJzdHIoZFswXSwyKT09XCIwNlwiJiZlLnN1YnN0cihkW2QubGVuZ3RoLTFdLDIpPT1cIjA0XCIpe3ZhciB0PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsZFswXSk7dmFyIGE9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KHQpO3ZhciBuPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShhKTt2YXIgcD1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtwLng1MDlFeHROYW1lPW47Zj1wfWZvcih2YXIgcT0wO3E8ZC5sZW5ndGg7cSsrKXtqPWorQVNOMUhFWC5kdW1wKGUsZixkW3FdLGcrXCIgIFwiKX1yZXR1cm4gan1pZihlLnN1YnN0cihrLDIpPT1cIjMxXCIpe3ZhciBqPWcrXCJTRVRcXG5cIjt2YXIgZD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihlLGspO2Zvcih2YXIgcT0wO3E8ZC5sZW5ndGg7cSsrKXtqPWorQVNOMUhFWC5kdW1wKGUsYyxkW3FdLGcrXCIgIFwiKX1yZXR1cm4gan12YXIgdT1wYXJzZUludChlLnN1YnN0cihrLDIpLDE2KTtpZigodSYxMjgpIT0wKXt2YXIgbT11JjMxO2lmKCh1JjMyKSE9MCl7dmFyIGo9ZytcIltcIittK1wiXVxcblwiO3ZhciBkPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGUsayk7Zm9yKHZhciBxPTA7cTxkLmxlbmd0aDtxKyspe2o9aitBU04xSEVYLmR1bXAoZSxjLGRbcV0sZytcIiAgXCIpfXJldHVybiBqfWVsc2V7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKTtpZihoLnN1YnN0cigwLDgpPT1cIjY4NzQ3NDcwXCIpe2g9aGV4dG91dGY4KGgpfWlmKGMueDUwOUV4dE5hbWU9PT1cInN1YmplY3RBbHROYW1lXCImJm09PTIpe2g9aGV4dG91dGY4KGgpfXZhciBqPWcrXCJbXCIrbStcIl0gXCIraCtcIlxcblwiO3JldHVybiBqfX1yZXR1cm4gZytcIlVOS05PV04oXCIrZS5zdWJzdHIoaywyKStcIikgXCIrQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKStcIlxcblwifTtBU04xSEVYLmlzQVNOMUhFWD1mdW5jdGlvbihkKXtpZihkLmxlbmd0aCUyPT0xKXtyZXR1cm4gZmFsc2V9dmFyIGM9QVNOMUhFWC5nZXRJbnRPZkxfQXRPYmooZCwwKTt2YXIgYj1kLnN1YnN0cigwLDIpO3ZhciBlPUFTTjFIRVguZ2V0SGV4T2ZMX0F0T2JqKGQsMCk7dmFyIGE9ZC5sZW5ndGgtYi5sZW5ndGgtZS5sZW5ndGg7aWYoYT09YyoyKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gZmFsc2V9O1xuLyohIGFzbjF4NTA5LTEuMC4xNS5qcyAoYykgMjAxMy0yMDE2IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5hc24xPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xKXtLSlVSLmFzbjE9e319aWYodHlwZW9mIEtKVVIuYXNuMS54NTA5PT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xLng1MDkpe0tKVVIuYXNuMS54NTA5PXt9fUtKVVIuYXNuMS54NTA5LkNlcnRpZmljYXRlPWZ1bmN0aW9uKGcpe0tKVVIuYXNuMS54NTA5LkNlcnRpZmljYXRlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYj1udWxsO3ZhciBkPW51bGw7dmFyIGY9bnVsbDt2YXIgYz1udWxsO3ZhciBhPW51bGw7dmFyIGU9bnVsbDt0aGlzLnNldFJzYVBydktleUJ5UEVNYW5kUGFzcz1mdW5jdGlvbihpLGspe3ZhciBoPVBLQ1M1UEtFWS5nZXREZWNyeXB0ZWRLZXlIZXgoaSxrKTt2YXIgaj1uZXcgUlNBS2V5KCk7ai5yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKGgpO3RoaXMucHJ2S2V5PWp9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0LmFzbjFTaWduYXR1cmVBbGc7c2lnPW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzpcIlNIQTF3aXRoUlNBXCJ9KTtzaWcuaW5pdCh0aGlzLnBydktleSk7c2lnLnVwZGF0ZUhleCh0aGlzLmFzbjFUQlNDZXJ0LmdldEVuY29kZWRIZXgoKSk7dGhpcy5oZXhTaWc9c2lnLnNpZ24oKTt0aGlzLmFzbjFTaWc9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrdGhpcy5oZXhTaWd9KTt2YXIgaD1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5hc24xVEJTQ2VydCx0aGlzLmFzbjFTaWduYXR1cmVBbGcsdGhpcy5hc24xU2lnXX0pO3RoaXMuaFRMVj1oLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9O3RoaXMuc2V0U2lnbmF0dXJlSGV4PWZ1bmN0aW9uKGgpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0LmFzbjFTaWduYXR1cmVBbGc7dGhpcy5oZXhTaWc9aDt0aGlzLmFzbjFTaWc9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrdGhpcy5oZXhTaWd9KTt2YXIgaT1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5hc24xVEJTQ2VydCx0aGlzLmFzbjFTaWduYXR1cmVBbGcsdGhpcy5hc24xU2lnXX0pO3RoaXMuaFRMVj1pLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaXNNb2RpZmllZD09ZmFsc2UmJnRoaXMuaFRMViE9bnVsbCl7cmV0dXJuIHRoaXMuaFRMVn10aHJvd1wibm90IHNpZ25lZCB5ZXRcIn07dGhpcy5nZXRQRU1TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgaj10aGlzLmdldEVuY29kZWRIZXgoKTt2YXIgaD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGopO3ZhciBpPUNyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KGgpO3ZhciBrPWkucmVwbGFjZSgvKC57NjR9KS9nLFwiJDFcXHJcXG5cIik7cmV0dXJuXCItLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS1cXHJcXG5cIitrK1wiXFxyXFxuLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLVxcclxcblwifTtpZih0eXBlb2YgZyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGcudGJzY2VydG9iaiE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xVEJTQ2VydD1nLnRic2NlcnRvYmp9aWYodHlwZW9mIGcucHJ2a2V5b2JqIT1cInVuZGVmaW5lZFwiKXt0aGlzLnBydktleT1nLnBydmtleW9ian1lbHNle2lmKHR5cGVvZiBnLnJzYXBydmtleSE9XCJ1bmRlZmluZWRcIil7dGhpcy5wcnZLZXk9Zy5yc2FwcnZrZXl9ZWxzZXtpZigodHlwZW9mIGcucnNhcHJ2cGVtIT1cInVuZGVmaW5lZFwiKSYmKHR5cGVvZiBnLnJzYXBydnBhcyE9XCJ1bmRlZmluZWRcIikpe3RoaXMuc2V0UnNhUHJ2S2V5QnlQRU1hbmRQYXNzKGcucnNhcHJ2cGVtLGcucnNhcHJ2cGFzKX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkNlcnRpZmljYXRlLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0aWZpY2F0ZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0aWZpY2F0ZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5faW5pdGlhbGl6ZT1mdW5jdGlvbigpe3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO3RoaXMuYXNuMVZlcnNpb249bmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe29iajpuZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe1wiaW50XCI6Mn0pfSk7dGhpcy5hc24xU2VyaWFsTnVtYmVyPW51bGw7dGhpcy5hc24xU2lnbmF0dXJlQWxnPW51bGw7dGhpcy5hc24xSXNzdWVyPW51bGw7dGhpcy5hc24xTm90QmVmb3JlPW51bGw7dGhpcy5hc24xTm90QWZ0ZXI9bnVsbDt0aGlzLmFzbjFTdWJqZWN0PW51bGw7dGhpcy5hc24xU3VialBLZXk9bnVsbDt0aGlzLmV4dGVuc2lvbnNBcnJheT1uZXcgQXJyYXkoKX07dGhpcy5zZXRTZXJpYWxOdW1iZXJCeVBhcmFtPWZ1bmN0aW9uKGIpe3RoaXMuYXNuMVNlcmlhbE51bWJlcj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoYil9O3RoaXMuc2V0U2lnbmF0dXJlQWxnQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFTaWduYXR1cmVBbGc9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoYil9O3RoaXMuc2V0SXNzdWVyQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFJc3N1ZXI9bmV3IEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lKGIpfTt0aGlzLnNldE5vdEJlZm9yZUJ5UGFyYW09ZnVuY3Rpb24oYil7dGhpcy5hc24xTm90QmVmb3JlPW5ldyBLSlVSLmFzbjEueDUwOS5UaW1lKGIpfTt0aGlzLnNldE5vdEFmdGVyQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFOb3RBZnRlcj1uZXcgS0pVUi5hc24xLng1MDkuVGltZShiKX07dGhpcy5zZXRTdWJqZWN0QnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFTdWJqZWN0PW5ldyBLSlVSLmFzbjEueDUwOS5YNTAwTmFtZShiKX07dGhpcy5zZXRTdWJqZWN0UHVibGljS2V5QnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFTdWJqUEtleT1uZXcgS0pVUi5hc24xLng1MDkuU3ViamVjdFB1YmxpY0tleUluZm8oYil9O3RoaXMuc2V0U3ViamVjdFB1YmxpY0tleUJ5R2V0S2V5PWZ1bmN0aW9uKGMpe3ZhciBiPUtFWVVUSUwuZ2V0S2V5KGMpO3RoaXMuYXNuMVN1YmpQS2V5PW5ldyBLSlVSLmFzbjEueDUwOS5TdWJqZWN0UHVibGljS2V5SW5mbyhiKX07dGhpcy5hcHBlbmRFeHRlbnNpb249ZnVuY3Rpb24oYil7dGhpcy5leHRlbnNpb25zQXJyYXkucHVzaChiKX07dGhpcy5hcHBlbmRFeHRlbnNpb25CeU5hbWU9ZnVuY3Rpb24oZCxiKXtpZihkLnRvTG93ZXJDYXNlKCk9PVwiYmFzaWNjb25zdHJhaW50c1wiKXt2YXIgYz1uZXcgS0pVUi5hc24xLng1MDkuQmFzaWNDb25zdHJhaW50cyhiKTt0aGlzLmFwcGVuZEV4dGVuc2lvbihjKX1lbHNle2lmKGQudG9Mb3dlckNhc2UoKT09XCJrZXl1c2FnZVwiKXt2YXIgYz1uZXcgS0pVUi5hc24xLng1MDkuS2V5VXNhZ2UoYik7dGhpcy5hcHBlbmRFeHRlbnNpb24oYyl9ZWxzZXtpZihkLnRvTG93ZXJDYXNlKCk9PVwiY3JsZGlzdHJpYnV0aW9ucG9pbnRzXCIpe3ZhciBjPW5ldyBLSlVSLmFzbjEueDUwOS5DUkxEaXN0cmlidXRpb25Qb2ludHMoYik7dGhpcy5hcHBlbmRFeHRlbnNpb24oYyl9ZWxzZXtpZihkLnRvTG93ZXJDYXNlKCk9PVwiZXh0a2V5dXNhZ2VcIil7dmFyIGM9bmV3IEtKVVIuYXNuMS54NTA5LkV4dEtleVVzYWdlKGIpO3RoaXMuYXBwZW5kRXh0ZW5zaW9uKGMpfWVsc2V7aWYoZC50b0xvd2VyQ2FzZSgpPT1cImF1dGhvcml0eWtleWlkZW50aWZpZXJcIil7dmFyIGM9bmV3IEtKVVIuYXNuMS54NTA5LkF1dGhvcml0eUtleUlkZW50aWZpZXIoYik7dGhpcy5hcHBlbmRFeHRlbnNpb24oYyl9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgZXh0ZW5zaW9uIG5hbWU6IFwiK2R9fX19fX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5hc24xTm90QmVmb3JlPT1udWxsfHx0aGlzLmFzbjFOb3RBZnRlcj09bnVsbCl7dGhyb3dcIm5vdEJlZm9yZSBhbmQvb3Igbm90QWZ0ZXIgbm90IHNldFwifXZhciBjPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmFzbjFOb3RCZWZvcmUsdGhpcy5hc24xTm90QWZ0ZXJdfSk7dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFWZXJzaW9uKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVNlcmlhbE51bWJlcik7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTaWduYXR1cmVBbGcpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xSXNzdWVyKTt0aGlzLmFzbjFBcnJheS5wdXNoKGMpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xU3ViamVjdCk7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTdWJqUEtleSk7aWYodGhpcy5leHRlbnNpb25zQXJyYXkubGVuZ3RoPjApe3ZhciBkPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OnRoaXMuZXh0ZW5zaW9uc0FycmF5fSk7dmFyIGI9bmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OnRydWUsdGFnOlwiYTNcIixvYmo6ZH0pO3RoaXMuYXNuMUFycmF5LnB1c2goYil9dmFyIGU9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6dGhpcy5hc24xQXJyYXl9KTt0aGlzLmhUTFY9ZS5nZXRFbmNvZGVkSGV4KCk7dGhpcy5pc01vZGlmaWVkPWZhbHNlO3JldHVybiB0aGlzLmhUTFZ9O3RoaXMuX2luaXRpYWxpemUoKX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuVEJTQ2VydGlmaWNhdGUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkV4dGVuc2lvbj1mdW5jdGlvbihiKXtLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGY9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6dGhpcy5vaWR9KTt2YXIgZT1uZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtoZXg6dGhpcy5nZXRFeHRuVmFsdWVIZXgoKX0pO3ZhciBkPW5ldyBBcnJheSgpO2QucHVzaChmKTtpZih0aGlzLmNyaXRpY2FsKXtkLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJCb29sZWFuKCkpfWQucHVzaChlKTt2YXIgYz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpkfSk7cmV0dXJuIGMuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLmNyaXRpY2FsPWZhbHNlO2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5jcml0aWNhbCE9XCJ1bmRlZmluZWRcIil7dGhpcy5jcml0aWNhbD1iLmNyaXRpY2FsfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkV4dGVuc2lvbixLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuS2V5VXNhZ2U9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLng1MDkuS2V5VXNhZ2Uuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hc24xRXh0blZhbHVlLmdldEVuY29kZWRIZXgoKX07dGhpcy5vaWQ9XCIyLjUuMjkuMTVcIjtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGEuYmluIT1cInVuZGVmaW5lZFwiKXt0aGlzLmFzbjFFeHRuVmFsdWU9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoYSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuS2V5VXNhZ2UsS0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uKTtLSlVSLmFzbjEueDUwOS5CYXNpY0NvbnN0cmFpbnRzPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS54NTA5LkJhc2ljQ29uc3RyYWludHMuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYyk7dmFyIGE9ZmFsc2U7dmFyIGI9LTE7dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgQXJyYXkoKTtpZih0aGlzLmNBKXtlLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJCb29sZWFuKCkpfWlmKHRoaXMucGF0aExlbj4tMSl7ZS5wdXNoKG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7XCJpbnRcIjp0aGlzLnBhdGhMZW59KSl9dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZX0pO3RoaXMuYXNuMUV4dG5WYWx1ZT1kO3JldHVybiB0aGlzLmFzbjFFeHRuVmFsdWUuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLm9pZD1cIjIuNS4yOS4xOVwiO3RoaXMuY0E9ZmFsc2U7dGhpcy5wYXRoTGVuPS0xO2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYy5jQSE9XCJ1bmRlZmluZWRcIil7dGhpcy5jQT1jLmNBfWlmKHR5cGVvZiBjLnBhdGhMZW4hPVwidW5kZWZpbmVkXCIpe3RoaXMucGF0aExlbj1jLnBhdGhMZW59fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuQmFzaWNDb25zdHJhaW50cyxLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24pO0tKVVIuYXNuMS54NTA5LkNSTERpc3RyaWJ1dGlvblBvaW50cz1mdW5jdGlvbihhKXtLSlVSLmFzbjEueDUwOS5DUkxEaXN0cmlidXRpb25Qb2ludHMuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hc24xRXh0blZhbHVlLmdldEVuY29kZWRIZXgoKX07dGhpcy5zZXRCeURQQXJyYXk9ZnVuY3Rpb24oYil7dGhpcy5hc24xRXh0blZhbHVlPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OmJ9KX07dGhpcy5zZXRCeU9uZVVSST1mdW5jdGlvbihlKXt2YXIgYj1uZXcgS0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWVzKFt7dXJpOmV9XSk7dmFyIGQ9bmV3IEtKVVIuYXNuMS54NTA5LkRpc3RyaWJ1dGlvblBvaW50TmFtZShiKTt2YXIgYz1uZXcgS0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnQoe2Rwb2JqOmR9KTt0aGlzLnNldEJ5RFBBcnJheShbY10pfTt0aGlzLm9pZD1cIjIuNS4yOS4zMVwiO2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeURQQXJyYXkoYS5hcnJheSl9ZWxzZXtpZih0eXBlb2YgYS51cmkhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlPbmVVUkkoYS51cmkpfX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5DUkxEaXN0cmlidXRpb25Qb2ludHMsS0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uKTtLSlVSLmFzbjEueDUwOS5FeHRLZXlVc2FnZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEueDUwOS5FeHRLZXlVc2FnZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLnNldFB1cnBvc2VBcnJheT1mdW5jdGlvbihiKXt0aGlzLmFzbjFFeHRuVmFsdWU9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSgpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1uZXcgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIoYltjXSk7dGhpcy5hc24xRXh0blZhbHVlLmFwcGVuZEFTTjFPYmplY3QoZCl9fTt0aGlzLmdldEV4dG5WYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzbjFFeHRuVmFsdWUuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLm9pZD1cIjIuNS4yOS4zN1wiO2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRQdXJwb3NlQXJyYXkoYS5hcnJheSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuRXh0S2V5VXNhZ2UsS0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uKTtLSlVSLmFzbjEueDUwOS5BdXRob3JpdHlLZXlJZGVudGlmaWVyPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS54NTA5LkF1dGhvcml0eUtleUlkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5hc24xS0lEPW51bGw7dGhpcy5hc24xQ2VydElzc3Vlcj1udWxsO3RoaXMuYXNuMUNlcnRTTj1udWxsO3RoaXMuZ2V0RXh0blZhbHVlSGV4PWZ1bmN0aW9uKCl7dmFyIGM9bmV3IEFycmF5KCk7aWYodGhpcy5hc24xS0lEKXtjLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OmZhbHNlLHRhZzpcIjgwXCIsb2JqOnRoaXMuYXNuMUtJRH0pKX1pZih0aGlzLmFzbjFDZXJ0SXNzdWVyKXtjLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OmZhbHNlLHRhZzpcImExXCIsb2JqOnRoaXMuYXNuMUNlcnRJc3N1ZXJ9KSl9aWYodGhpcy5hc24xQ2VydFNOKXtjLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OmZhbHNlLHRhZzpcIjgyXCIsb2JqOnRoaXMuYXNuMUNlcnRTTn0pKX12YXIgYj1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpjfSk7dGhpcy5hc24xRXh0blZhbHVlPWI7cmV0dXJuIHRoaXMuYXNuMUV4dG5WYWx1ZS5nZXRFbmNvZGVkSGV4KCl9O3RoaXMuc2V0S0lEQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFLSUQ9bmV3IEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZyhiKX07dGhpcy5zZXRDZXJ0SXNzdWVyQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFDZXJ0SXNzdWVyPW5ldyBLSlVSLmFzbjEueDUwOS5YNTAwTmFtZShiKX07dGhpcy5zZXRDZXJ0U05CeVBhcmFtPWZ1bmN0aW9uKGIpe3RoaXMuYXNuMUNlcnRTTj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoYil9O3RoaXMub2lkPVwiMi41LjI5LjM1XCI7aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLmtpZCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRLSURCeVBhcmFtKGEua2lkKX1pZih0eXBlb2YgYS5pc3N1ZXIhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0Q2VydElzc3VlckJ5UGFyYW0oYS5pc3N1ZXIpfWlmKHR5cGVvZiBhLnNuIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldENlcnRTTkJ5UGFyYW0oYS5zbil9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuQXV0aG9yaXR5S2V5SWRlbnRpZmllcixLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24pO0tKVVIuYXNuMS54NTA5LkNSTD1mdW5jdGlvbihmKXtLSlVSLmFzbjEueDUwOS5DUkwuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGw7dmFyIGM9bnVsbDt2YXIgZT1udWxsO3ZhciBiPW51bGw7dmFyIGQ9bnVsbDt0aGlzLnNldFJzYVBydktleUJ5UEVNYW5kUGFzcz1mdW5jdGlvbihoLGope3ZhciBnPVBLQ1M1UEtFWS5nZXREZWNyeXB0ZWRLZXlIZXgoaCxqKTt2YXIgaT1uZXcgUlNBS2V5KCk7aS5yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKGcpO3RoaXMucnNhUHJ2S2V5PWl9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0TGlzdC5hc24xU2lnbmF0dXJlQWxnO3NpZz1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6XCJTSEExd2l0aFJTQVwiLHByb3Y6XCJjcnlwdG9qcy9qc3JzYVwifSk7c2lnLmluaXRTaWduKHRoaXMucnNhUHJ2S2V5KTtzaWcudXBkYXRlSGV4KHRoaXMuYXNuMVRCU0NlcnRMaXN0LmdldEVuY29kZWRIZXgoKSk7dGhpcy5oZXhTaWc9c2lnLnNpZ24oKTt0aGlzLmFzbjFTaWc9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrdGhpcy5oZXhTaWd9KTt2YXIgZz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5hc24xVEJTQ2VydExpc3QsdGhpcy5hc24xU2lnbmF0dXJlQWxnLHRoaXMuYXNuMVNpZ119KTt0aGlzLmhUTFY9Zy5nZXRFbmNvZGVkSGV4KCk7dGhpcy5pc01vZGlmaWVkPWZhbHNlfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmlzTW9kaWZpZWQ9PWZhbHNlJiZ0aGlzLmhUTFYhPW51bGwpe3JldHVybiB0aGlzLmhUTFZ9dGhyb3dcIm5vdCBzaWduZWQgeWV0XCJ9O3RoaXMuZ2V0UEVNU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcy5nZXRFbmNvZGVkSGV4KCk7dmFyIGc9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShpKTt2YXIgaD1DcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShnKTt2YXIgaj1oLnJlcGxhY2UoLyguezY0fSkvZyxcIiQxXFxyXFxuXCIpO3JldHVyblwiLS0tLS1CRUdJTiBYNTA5IENSTC0tLS0tXFxyXFxuXCIraitcIlxcclxcbi0tLS0tRU5EIFg1MDkgQ1JMLS0tLS1cXHJcXG5cIn07aWYodHlwZW9mIGYhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBmLnRic29iaiE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xVEJTQ2VydExpc3Q9Zi50YnNvYmp9aWYodHlwZW9mIGYucnNhcHJ2a2V5IT1cInVuZGVmaW5lZFwiKXt0aGlzLnJzYVBydktleT1mLnJzYXBydmtleX1pZigodHlwZW9mIGYucnNhcHJ2cGVtIT1cInVuZGVmaW5lZFwiKSYmKHR5cGVvZiBmLnJzYXBydnBhcyE9XCJ1bmRlZmluZWRcIikpe3RoaXMuc2V0UnNhUHJ2S2V5QnlQRU1hbmRQYXNzKGYucnNhcHJ2cGVtLGYucnNhcHJ2cGFzKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5DUkwsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LlRCU0NlcnRMaXN0PWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS54NTA5LlRCU0NlcnRMaXN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1udWxsO3RoaXMuc2V0U2lnbmF0dXJlQWxnQnlQYXJhbT1mdW5jdGlvbihjKXt0aGlzLmFzbjFTaWduYXR1cmVBbGc9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoYyl9O3RoaXMuc2V0SXNzdWVyQnlQYXJhbT1mdW5jdGlvbihjKXt0aGlzLmFzbjFJc3N1ZXI9bmV3IEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lKGMpfTt0aGlzLnNldFRoaXNVcGRhdGVCeVBhcmFtPWZ1bmN0aW9uKGMpe3RoaXMuYXNuMVRoaXNVcGRhdGU9bmV3IEtKVVIuYXNuMS54NTA5LlRpbWUoYyl9O3RoaXMuc2V0TmV4dFVwZGF0ZUJ5UGFyYW09ZnVuY3Rpb24oYyl7dGhpcy5hc24xTmV4dFVwZGF0ZT1uZXcgS0pVUi5hc24xLng1MDkuVGltZShjKX07dGhpcy5hZGRSZXZva2VkQ2VydD1mdW5jdGlvbihjLGQpe3ZhciBmPXt9O2lmKGMhPXVuZGVmaW5lZCYmYyE9bnVsbCl7Zi5zbj1jfWlmKGQhPXVuZGVmaW5lZCYmZCE9bnVsbCl7Zi50aW1lPWR9dmFyIGU9bmV3IEtKVVIuYXNuMS54NTA5LkNSTEVudHJ5KGYpO3RoaXMuYVJldm9rZWRDZXJ0LnB1c2goZSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO2lmKHRoaXMuYXNuMVZlcnNpb24hPW51bGwpe3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xVmVyc2lvbil9dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTaWduYXR1cmVBbGcpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xSXNzdWVyKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVRoaXNVcGRhdGUpO2lmKHRoaXMuYXNuMU5leHRVcGRhdGUhPW51bGwpe3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xTmV4dFVwZGF0ZSl9aWYodGhpcy5hUmV2b2tlZENlcnQubGVuZ3RoPjApe3ZhciBjPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OnRoaXMuYVJldm9rZWRDZXJ0fSk7dGhpcy5hc24xQXJyYXkucHVzaChjKX12YXIgZD1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTp0aGlzLmFzbjFBcnJheX0pO3RoaXMuaFRMVj1kLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2U7cmV0dXJuIHRoaXMuaFRMVn07dGhpcy5faW5pdGlhbGl6ZT1mdW5jdGlvbigpe3RoaXMuYXNuMVZlcnNpb249bnVsbDt0aGlzLmFzbjFTaWduYXR1cmVBbGc9bnVsbDt0aGlzLmFzbjFJc3N1ZXI9bnVsbDt0aGlzLmFzbjFUaGlzVXBkYXRlPW51bGw7dGhpcy5hc24xTmV4dFVwZGF0ZT1udWxsO3RoaXMuYVJldm9rZWRDZXJ0PW5ldyBBcnJheSgpfTt0aGlzLl9pbml0aWFsaXplKCl9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LlRCU0NlcnRMaXN0LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5DUkxFbnRyeT1mdW5jdGlvbihjKXtLSlVSLmFzbjEueDUwOS5DUkxFbnRyeS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3RoaXMuc2V0Q2VydFNlcmlhbD1mdW5jdGlvbihkKXt0aGlzLnNuPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcihkKX07dGhpcy5zZXRSZXZvY2F0aW9uRGF0ZT1mdW5jdGlvbihkKXt0aGlzLnRpbWU9bmV3IEtKVVIuYXNuMS54NTA5LlRpbWUoZCl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBkPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLnNuLHRoaXMudGltZV19KTt0aGlzLlRMVj1kLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5UTFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYy50aW1lIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFJldm9jYXRpb25EYXRlKGMudGltZSl9aWYodHlwZW9mIGMuc24hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0Q2VydFNlcmlhbChjLnNuKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5DUkxFbnRyeSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuWDUwME5hbWU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLng1MDkuWDUwME5hbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO3RoaXMuc2V0QnlTdHJpbmc9ZnVuY3Rpb24oYyl7dmFyIGQ9Yy5zcGxpdChcIi9cIik7ZC5zaGlmdCgpO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXt0aGlzLmFzbjFBcnJheS5wdXNoKG5ldyBLSlVSLmFzbjEueDUwOS5SRE4oe3N0cjpkW2VdfSkpfX07dGhpcy5zZXRCeU9iamVjdD1mdW5jdGlvbihlKXtmb3IodmFyIGMgaW4gZSl7aWYoZS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9bmV3IEtKVVIuYXNuMS54NTA5LlJETih7c3RyOmMrXCI9XCIrZVtjXX0pO3RoaXMuYXNuMUFycmF5P3RoaXMuYXNuMUFycmF5LnB1c2goZCk6dGhpcy5hc24xQXJyYXk9W2RdfX19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhUTFY9PVwic3RyaW5nXCIpe3JldHVybiB0aGlzLmhUTFZ9dmFyIGM9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6dGhpcy5hc24xQXJyYXl9KTt0aGlzLmhUTFY9Yy5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLnN0ciE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeVN0cmluZyhiLnN0cil9ZWxzZXtpZih0eXBlb2YgYj09PVwib2JqZWN0XCIpe3RoaXMuc2V0QnlPYmplY3QoYil9fWlmKHR5cGVvZiBiLmNlcnRpc3N1ZXIhPVwidW5kZWZpbmVkXCIpe3ZhciBhPW5ldyBYNTA5KCk7YS5oZXg9WDUwOS5wZW1Ub0hleChiLmNlcnRpc3N1ZXIpO3RoaXMuaFRMVj1hLmdldElzc3VlckhleCgpfWlmKHR5cGVvZiBiLmNlcnRzdWJqZWN0IT1cInVuZGVmaW5lZFwiKXt2YXIgYT1uZXcgWDUwOSgpO2EuaGV4PVg1MDkucGVtVG9IZXgoYi5jZXJ0c3ViamVjdCk7dGhpcy5oVExWPWEuZ2V0U3ViamVjdEhleCgpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5SRE49ZnVuY3Rpb24oYSl7S0pVUi5hc24xLng1MDkuUkROLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXkoKTt0aGlzLmFkZEJ5U3RyaW5nPWZ1bmN0aW9uKGIpe3RoaXMuYXNuMUFycmF5LnB1c2gobmV3IEtKVVIuYXNuMS54NTA5LkF0dHJpYnV0ZVR5cGVBbmRWYWx1ZSh7c3RyOmJ9KSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBiPW5ldyBLSlVSLmFzbjEuREVSU2V0KHthcnJheTp0aGlzLmFzbjFBcnJheX0pO3RoaXMuVExWPWIuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLlRMVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLnN0ciE9XCJ1bmRlZmluZWRcIil7dGhpcy5hZGRCeVN0cmluZyhhLnN0cil9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuUkROLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5BdHRyaWJ1dGVUeXBlQW5kVmFsdWU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLng1MDkuQXR0cmlidXRlVHlwZUFuZFZhbHVlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgZD1udWxsO3ZhciBjPW51bGw7dmFyIGE9XCJ1dGY4XCI7dGhpcy5zZXRCeVN0cmluZz1mdW5jdGlvbihmKXt2YXIgZT1mLm1hdGNoKC9eKFtePV0rKT0oLispJC8pO2lmKGUpe3RoaXMuc2V0QnlBdHRyVHlwZUFuZFZhbHVlU3RyKGVbMV0sZVsyXSl9ZWxzZXt0aHJvd1wibWFsZm9ybWVkIGF0dHJUeXBlQW5kVmFsdWVTdHI6IFwiK2Z9fTt0aGlzLnNldEJ5QXR0clR5cGVBbmRWYWx1ZVN0cj1mdW5jdGlvbihnLGYpe3RoaXMudHlwZU9iaj1LSlVSLmFzbjEueDUwOS5PSUQuYXR5cGUyb2JqKGcpO3ZhciBlPWE7aWYoZz09XCJDXCIpe2U9XCJwcm5cIn10aGlzLnZhbHVlT2JqPXRoaXMuZ2V0VmFsdWVPYmooZSxmKX07dGhpcy5nZXRWYWx1ZU9iaj1mdW5jdGlvbihmLGUpe2lmKGY9PVwidXRmOFwiKXtyZXR1cm4gbmV3IEtKVVIuYXNuMS5ERVJVVEY4U3RyaW5nKHtzdHI6ZX0pfWlmKGY9PVwicHJuXCIpe3JldHVybiBuZXcgS0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZyh7c3RyOmV9KX1pZihmPT1cInRlbFwiKXtyZXR1cm4gbmV3IEtKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nKHtzdHI6ZX0pfWlmKGY9PVwiaWE1XCIpe3JldHVybiBuZXcgS0pVUi5hc24xLkRFUklBNVN0cmluZyh7c3RyOmV9KX10aHJvd1widW5zdXBwb3J0ZWQgZGlyZWN0b3J5IHN0cmluZyB0eXBlOiB0eXBlPVwiK2YrXCIgdmFsdWU9XCIrZX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMudHlwZU9iaix0aGlzLnZhbHVlT2JqXX0pO3RoaXMuVExWPWUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLlRMVn07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLnN0ciE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeVN0cmluZyhiLnN0cil9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuQXR0cmlidXRlVHlwZUFuZFZhbHVlLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5TdWJqZWN0UHVibGljS2V5SW5mbz1mdW5jdGlvbihkKXtLSlVSLmFzbjEueDUwOS5TdWJqZWN0UHVibGljS2V5SW5mby5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9bnVsbDt2YXIgYz1udWxsO3ZhciBhPW51bGw7dGhpcy5zZXRSU0FLZXk9ZnVuY3Rpb24oZSl7aWYoIVJTQUtleS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihlKSl7dGhyb3dcImFyZ3VtZW50IGlzIG5vdCBSU0FLZXkgaW5zdGFuY2VcIn10aGlzLnJzYUtleT1lO3ZhciBnPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OmUubn0pO3ZhciBmPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7XCJpbnRcIjplLmV9KTt2YXIgaT1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbZyxmXX0pO3ZhciBoPWkuZ2V0RW5jb2RlZEhleCgpO3RoaXMuYXNuMUFsZ0lkPW5ldyBLSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyKHtuYW1lOlwicnNhRW5jcnlwdGlvblwifSk7dGhpcy5hc24xU3VialBLZXk9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIraH0pfTt0aGlzLnNldFJTQVBFTT1mdW5jdGlvbihnKXtpZihnLm1hdGNoKC8tLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLS8pKXt2YXIgbj1nO249bi5yZXBsYWNlKC9eLS0tLS1bXi1dKy0tLS0tLyxcIlwiKTtuPW4ucmVwbGFjZSgvLS0tLS1bXi1dKy0tLS0tXFxzKiQvLFwiXCIpO3ZhciBtPW4ucmVwbGFjZSgvXFxzKy9nLFwiXCIpO3ZhciBmPUNyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UobSk7dmFyIGk9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkoZik7dmFyIGs9X3JzYXBlbV9nZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXgoaSk7dmFyIGg9a1sxXTt2YXIgbD1oLnN1YnN0cigyKTt2YXIgZT1fcnNhcGVtX2dldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleChsKTt2YXIgaj1uZXcgUlNBS2V5KCk7ai5zZXRQdWJsaWMoZVswXSxlWzFdKTt0aGlzLnNldFJTQUtleShqKX1lbHNle3Rocm93XCJrZXkgbm90IHN1cHBvcnRlZFwifX07dGhpcy5nZXRBU04xT2JqZWN0PWZ1bmN0aW9uKCl7aWYodGhpcy5hc24xQWxnSWQ9PW51bGx8fHRoaXMuYXNuMVN1YmpQS2V5PT1udWxsKXt0aHJvd1wiYWxnSWQgYW5kL29yIHN1YmpQdWJLZXkgbm90IHNldFwifXZhciBlPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmFzbjFBbGdJZCx0aGlzLmFzbjFTdWJqUEtleV19KTtyZXR1cm4gZX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRBU04xT2JqZWN0KCk7dGhpcy5oVExWPWUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O3RoaXMuX3NldFJTQUtleT1mdW5jdGlvbihlKXt2YXIgZz1LSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHtzZXE6W3tcImludFwiOntiaWdpbnQ6ZS5ufX0se1wiaW50XCI6e1wiaW50XCI6ZS5lfX1dfSk7dmFyIGY9Zy5nZXRFbmNvZGVkSGV4KCk7dGhpcy5hc24xQWxnSWQ9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6XCJyc2FFbmNyeXB0aW9uXCJ9KTt0aGlzLmFzbjFTdWJqUEtleT1uZXcgS0pVUi5hc24xLkRFUkJpdFN0cmluZyh7aGV4OlwiMDBcIitmfSl9O3RoaXMuX3NldEVDPWZ1bmN0aW9uKGUpe3ZhciBmPW5ldyBLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcih7bmFtZTplLmN1cnZlTmFtZX0pO3RoaXMuYXNuMUFsZ0lkPW5ldyBLSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyKHtuYW1lOlwiZWNQdWJsaWNLZXlcIixhc24xcGFyYW1zOmZ9KTt0aGlzLmFzbjFTdWJqUEtleT1uZXcgS0pVUi5hc24xLkRFUkJpdFN0cmluZyh7aGV4OlwiMDBcIitlLnB1YktleUhleH0pfTt0aGlzLl9zZXREU0E9ZnVuY3Rpb24oZSl7dmFyIGY9bmV3IEtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3Qoe3NlcTpbe1wiaW50XCI6e2JpZ2ludDplLnB9fSx7XCJpbnRcIjp7YmlnaW50OmUucX19LHtcImludFwiOntiaWdpbnQ6ZS5nfX1dfSk7dGhpcy5hc24xQWxnSWQ9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6XCJkc2FcIixhc24xcGFyYW1zOmZ9KTt2YXIgZz1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDplLnl9KTt0aGlzLmFzbjFTdWJqUEtleT1uZXcgS0pVUi5hc24xLkRFUkJpdFN0cmluZyh7aGV4OlwiMDBcIitnLmdldEVuY29kZWRIZXgoKX0pfTtpZih0eXBlb2YgZCE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIFJTQUtleSE9XCJ1bmRlZmluZWRcIiYmZCBpbnN0YW5jZW9mIFJTQUtleSl7dGhpcy5fc2V0UlNBS2V5KGQpfWVsc2V7aWYodHlwZW9mIEtKVVIuY3J5cHRvLkVDRFNBIT1cInVuZGVmaW5lZFwiJiZkIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3RoaXMuX3NldEVDKGQpfWVsc2V7aWYodHlwZW9mIEtKVVIuY3J5cHRvLkRTQSE9XCJ1bmRlZmluZWRcIiYmZCBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSl7dGhpcy5fc2V0RFNBKGQpfWVsc2V7aWYodHlwZW9mIGQucnNha2V5IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFJTQUtleShkLnJzYWtleSl9ZWxzZXtpZih0eXBlb2YgZC5yc2FwZW0hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0UlNBUEVNKGQucnNhcGVtKX19fX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuU3ViamVjdFB1YmxpY0tleUluZm8sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LlRpbWU9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLng1MDkuVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3RoaXMuc2V0VGltZVBhcmFtcz1mdW5jdGlvbihkKXt0aGlzLnRpbWVQYXJhbXM9ZH07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGQ9bnVsbDtpZih0aGlzLnRpbWVQYXJhbXMhPW51bGwpe2lmKHRoaXMudHlwZT09XCJ1dGNcIil7ZD1uZXcgS0pVUi5hc24xLkRFUlVUQ1RpbWUodGhpcy50aW1lUGFyYW1zKX1lbHNle2Q9bmV3IEtKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUodGhpcy50aW1lUGFyYW1zKX19ZWxzZXtpZih0aGlzLnR5cGU9PVwidXRjXCIpe2Q9bmV3IEtKVVIuYXNuMS5ERVJVVENUaW1lKCl9ZWxzZXtkPW5ldyBLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lKCl9fXRoaXMuVExWPWQuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLlRMVn07dGhpcy50eXBlPVwidXRjXCI7aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjLnR5cGUhPVwidW5kZWZpbmVkXCIpe3RoaXMudHlwZT1jLnR5cGV9ZWxzZXtpZih0eXBlb2YgYy5zdHIhPVwidW5kZWZpbmVkXCIpe2lmKGMuc3RyLm1hdGNoKC9eWzAtOV17MTJ9WiQvKSl7dGhpcy50eXBlPVwidXRjXCJ9aWYoYy5zdHIubWF0Y2goL15bMC05XXsxNH1aJC8pKXt0aGlzLnR5cGU9XCJnZW5cIn19fXRoaXMudGltZVBhcmFtcz1jfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuVGltZSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllcj1mdW5jdGlvbihlKXtLSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1udWxsO3ZhciBkPW51bGw7dmFyIGI9bnVsbDt2YXIgYz1mYWxzZTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLm5hbWVBbGc9PW51bGwmJnRoaXMuYXNuMUFsZz09bnVsbCl7dGhyb3dcImFsZ29yaXRobSBub3Qgc3BlY2lmaWVkXCJ9aWYodGhpcy5uYW1lQWxnIT1udWxsJiZ0aGlzLmFzbjFBbGc9PW51bGwpe3RoaXMuYXNuMUFsZz1LSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvYmoodGhpcy5uYW1lQWxnKX12YXIgZj1bdGhpcy5hc24xQWxnXTtpZighdGhpcy5wYXJhbUVtcHR5KXtmLnB1c2godGhpcy5hc24xUGFyYW1zKX12YXIgZz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpmfSk7dGhpcy5oVExWPWcuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBlIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgZS5uYW1lIT1cInVuZGVmaW5lZFwiKXt0aGlzLm5hbWVBbGc9ZS5uYW1lfWlmKHR5cGVvZiBlLmFzbjFwYXJhbXMhPVwidW5kZWZpbmVkXCIpe3RoaXMuYXNuMVBhcmFtcz1lLmFzbjFwYXJhbXN9aWYodHlwZW9mIGUucGFyYW1lbXB0eSE9XCJ1bmRlZmluZWRcIil7dGhpcy5wYXJhbUVtcHR5PWUucGFyYW1lbXB0eX19aWYodGhpcy5hc24xUGFyYW1zPT1udWxsKXt0aGlzLmFzbjFQYXJhbXM9bmV3IEtKVVIuYXNuMS5ERVJOdWxsKCl9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZT1mdW5jdGlvbihkKXtLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGM9bnVsbDt2YXIgYj1udWxsO3ZhciBhPXtyZmM4MjI6XCI4MVwiLGRuczpcIjgyXCIsZG46XCJhNFwiLHVyaTpcIjg2XCJ9O3RoaXMuZXhwbGljaXQ9ZmFsc2U7dGhpcy5zZXRCeVBhcmFtPWZ1bmN0aW9uKGspe3ZhciBqPW51bGw7dmFyIGc9bnVsbDtpZih0eXBlb2Ygaz09XCJ1bmRlZmluZWRcIil7cmV0dXJufWlmKHR5cGVvZiBrLnJmYzgyMiE9XCJ1bmRlZmluZWRcIil7dGhpcy50eXBlPVwicmZjODIyXCI7Zz1uZXcgS0pVUi5hc24xLkRFUklBNVN0cmluZyh7c3RyOmtbdGhpcy50eXBlXX0pfWlmKHR5cGVvZiBrLmRucyE9XCJ1bmRlZmluZWRcIil7dGhpcy50eXBlPVwiZG5zXCI7Zz1uZXcgS0pVUi5hc24xLkRFUklBNVN0cmluZyh7c3RyOmtbdGhpcy50eXBlXX0pfWlmKHR5cGVvZiBrLnVyaSE9XCJ1bmRlZmluZWRcIil7dGhpcy50eXBlPVwidXJpXCI7Zz1uZXcgS0pVUi5hc24xLkRFUklBNVN0cmluZyh7c3RyOmtbdGhpcy50eXBlXX0pfWlmKHR5cGVvZiBrLmNlcnRpc3N1ZXIhPVwidW5kZWZpbmVkXCIpe3RoaXMudHlwZT1cImRuXCI7dGhpcy5leHBsaWNpdD10cnVlO3ZhciBoPWsuY2VydGlzc3Vlcjt2YXIgZj1udWxsO2lmKGgubWF0Y2goL15bMC05QS1GYS1mXSskLykpe2Y9PWh9aWYoaC5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIikhPS0xKXtmPVg1MDkucGVtVG9IZXgoaCl9aWYoZj09bnVsbCl7dGhyb3dcImNlcnRpc3N1ZXIgcGFyYW0gbm90IGNlcnRcIn12YXIgZT1uZXcgWDUwOSgpO2UuaGV4PWY7dmFyIGk9ZS5nZXRJc3N1ZXJIZXgoKTtnPW5ldyBLSlVSLmFzbjEuQVNOMU9iamVjdCgpO2cuaFRMVj1pfWlmKHR5cGVvZiBrLmNlcnRzdWJqIT1cInVuZGVmaW5lZFwiKXt0aGlzLnR5cGU9XCJkblwiO3RoaXMuZXhwbGljaXQ9dHJ1ZTt2YXIgaD1rLmNlcnRzdWJqO3ZhciBmPW51bGw7aWYoaC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7Zj09aH1pZihoLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKSE9LTEpe2Y9WDUwOS5wZW1Ub0hleChoKX1pZihmPT1udWxsKXt0aHJvd1wiY2VydHN1YmogcGFyYW0gbm90IGNlcnRcIn12YXIgZT1uZXcgWDUwOSgpO2UuaGV4PWY7dmFyIGk9ZS5nZXRTdWJqZWN0SGV4KCk7Zz1uZXcgS0pVUi5hc24xLkFTTjFPYmplY3QoKTtnLmhUTFY9aX1pZih0aGlzLnR5cGU9PW51bGwpe3Rocm93XCJ1bnN1cHBvcnRlZCB0eXBlIGluIHBhcmFtcz1cIitrfXRoaXMuYXNuMU9iaj1uZXcgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdCh7ZXhwbGljaXQ6dGhpcy5leHBsaWNpdCx0YWc6YVt0aGlzLnR5cGVdLG9iajpnfSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzbjFPYmouZ2V0RW5jb2RlZEhleCgpfTtpZih0eXBlb2YgZCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeVBhcmFtKGQpfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkdlbmVyYWxOYW1lcz1mdW5jdGlvbihiKXtLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZXMuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGw7dGhpcy5zZXRCeVBhcmFtQXJyYXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciBjPTA7YzxlLmxlbmd0aDtjKyspe3ZhciBkPW5ldyBLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZShlW2NdKTt0aGlzLmFzbjFBcnJheS5wdXNoKGQpfX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGM9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6dGhpcy5hc24xQXJyYXl9KTtyZXR1cm4gYy5nZXRFbmNvZGVkSGV4KCl9O3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5UGFyYW1BcnJheShiKX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkdlbmVyYWxOYW1lcyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnROYW1lPWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS54NTA5LkRpc3RyaWJ1dGlvblBvaW50TmFtZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGU9bnVsbDt2YXIgYz1udWxsO3ZhciBhPW51bGw7dmFyIGQ9bnVsbDt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLnR5cGUhPVwiZnVsbFwiKXt0aHJvd1wiY3VycmVudGx5IHR5cGUgc2hhbGwgYmUgJ2Z1bGwnOiBcIit0aGlzLnR5cGV9dGhpcy5hc24xT2JqPW5ldyBLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0KHtleHBsaWNpdDpmYWxzZSx0YWc6dGhpcy50YWcsb2JqOnRoaXMuYXNuMVZ9KTt0aGlzLmhUTFY9dGhpcy5hc24xT2JqLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYoS0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWVzLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGIpKXt0aGlzLnR5cGU9XCJmdWxsXCI7dGhpcy50YWc9XCJhMFwiO3RoaXMuYXNuMVY9Yn1lbHNle3Rocm93XCJUaGlzIGNsYXNzIHN1cHBvcnRzIEdlbmVyYWxOYW1lcyBvbmx5IGFzIGFyZ3VtZW50XCJ9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnROYW1lLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5EaXN0cmlidXRpb25Qb2ludD1mdW5jdGlvbihiKXtLSlVSLmFzbjEueDUwOS5EaXN0cmlidXRpb25Qb2ludC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9bnVsbDt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgYz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKCk7aWYodGhpcy5hc24xRFAhPW51bGwpe3ZhciBkPW5ldyBLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0KHtleHBsaWNpdDp0cnVlLHRhZzpcImEwXCIsb2JqOnRoaXMuYXNuMURQfSk7Yy5hcHBlbmRBU04xT2JqZWN0KGQpfXRoaXMuaFRMVj1jLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGIuZHBvYmohPVwidW5kZWZpbmVkXCIpe3RoaXMuYXNuMURQPWIuZHBvYmp9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnQsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5Lk9JRD1uZXcgZnVuY3Rpb24oYSl7dGhpcy5hdHlwZTJvaWRMaXN0PXtDOlwiMi41LjQuNlwiLE86XCIyLjUuNC4xMFwiLE9VOlwiMi41LjQuMTFcIixTVDpcIjIuNS40LjhcIixMOlwiMi41LjQuN1wiLENOOlwiMi41LjQuM1wiLFNOOlwiMi41LjQuNFwiLEROOlwiMi41LjQuNDlcIixEQzpcIjAuOS4yMzQyLjE5MjAwMzAwLjEwMC4xLjI1XCIsfTt0aGlzLm5hbWUyb2lkTGlzdD17c2hhMTpcIjEuMy4xNC4zLjIuMjZcIixzaGEyNTY6XCIyLjE2Ljg0MC4xLjEwMS4zLjQuMi4xXCIsc2hhMzg0OlwiMi4xNi44NDAuMS4xMDEuMy40LjIuMlwiLHNoYTUxMjpcIjIuMTYuODQwLjEuMTAxLjMuNC4yLjNcIixzaGEyMjQ6XCIyLjE2Ljg0MC4xLjEwMS4zLjQuMi40XCIsbWQ1OlwiMS4yLjg0MC4xMTM1NDkuMi41XCIsbWQyOlwiMS4zLjE0LjcuMi4yLjFcIixyaXBlbWQxNjA6XCIxLjMuMzYuMy4yLjFcIixNRDJ3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjJcIixNRDR3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjNcIixNRDV3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjRcIixTSEExd2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS41XCIsU0hBMjI0d2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS4xNFwiLFNIQTI1NndpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuMTFcIixTSEEzODR3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjEyXCIsU0hBNTEyd2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS4xM1wiLFNIQTF3aXRoRUNEU0E6XCIxLjIuODQwLjEwMDQ1LjQuMVwiLFNIQTIyNHdpdGhFQ0RTQTpcIjEuMi44NDAuMTAwNDUuNC4zLjFcIixTSEEyNTZ3aXRoRUNEU0E6XCIxLjIuODQwLjEwMDQ1LjQuMy4yXCIsU0hBMzg0d2l0aEVDRFNBOlwiMS4yLjg0MC4xMDA0NS40LjMuM1wiLFNIQTUxMndpdGhFQ0RTQTpcIjEuMi44NDAuMTAwNDUuNC4zLjRcIixkc2E6XCIxLjIuODQwLjEwMDQwLjQuMVwiLFNIQTF3aXRoRFNBOlwiMS4yLjg0MC4xMDA0MC40LjNcIixTSEEyMjR3aXRoRFNBOlwiMi4xNi44NDAuMS4xMDEuMy40LjMuMVwiLFNIQTI1NndpdGhEU0E6XCIyLjE2Ljg0MC4xLjEwMS4zLjQuMy4yXCIscnNhRW5jcnlwdGlvbjpcIjEuMi44NDAuMTEzNTQ5LjEuMS4xXCIsY291bnRyeU5hbWU6XCIyLjUuNC42XCIsb3JnYW5pemF0aW9uOlwiMi41LjQuMTBcIixvcmdhbml6YXRpb25hbFVuaXQ6XCIyLjUuNC4xMVwiLHN0YXRlT3JQcm92aW5jZU5hbWU6XCIyLjUuNC44XCIsbG9jYWxpdHk6XCIyLjUuNC43XCIsY29tbW9uTmFtZTpcIjIuNS40LjNcIixzdWJqZWN0S2V5SWRlbnRpZmllcjpcIjIuNS4yOS4xNFwiLGtleVVzYWdlOlwiMi41LjI5LjE1XCIsc3ViamVjdEFsdE5hbWU6XCIyLjUuMjkuMTdcIixiYXNpY0NvbnN0cmFpbnRzOlwiMi41LjI5LjE5XCIsbmFtZUNvbnN0cmFpbnRzOlwiMi41LjI5LjMwXCIsY1JMRGlzdHJpYnV0aW9uUG9pbnRzOlwiMi41LjI5LjMxXCIsY2VydGlmaWNhdGVQb2xpY2llczpcIjIuNS4yOS4zMlwiLGF1dGhvcml0eUtleUlkZW50aWZpZXI6XCIyLjUuMjkuMzVcIixwb2xpY3lDb25zdHJhaW50czpcIjIuNS4yOS4zNlwiLGV4dEtleVVzYWdlOlwiMi41LjI5LjM3XCIsYXV0aG9yaXR5SW5mb0FjY2VzczpcIjEuMy42LjEuNS41LjcuMS4xXCIsYW55RXh0ZW5kZWRLZXlVc2FnZTpcIjIuNS4yOS4zNy4wXCIsc2VydmVyQXV0aDpcIjEuMy42LjEuNS41LjcuMy4xXCIsY2xpZW50QXV0aDpcIjEuMy42LjEuNS41LjcuMy4yXCIsY29kZVNpZ25pbmc6XCIxLjMuNi4xLjUuNS43LjMuM1wiLGVtYWlsUHJvdGVjdGlvbjpcIjEuMy42LjEuNS41LjcuMy40XCIsdGltZVN0YW1waW5nOlwiMS4zLjYuMS41LjUuNy4zLjhcIixvY3NwU2lnbmluZzpcIjEuMy42LjEuNS41LjcuMy45XCIsZWNQdWJsaWNLZXk6XCIxLjIuODQwLjEwMDQ1LjIuMVwiLHNlY3AyNTZyMTpcIjEuMi44NDAuMTAwNDUuMy4xLjdcIixzZWNwMjU2azE6XCIxLjMuMTMyLjAuMTBcIixzZWNwMzg0cjE6XCIxLjMuMTMyLjAuMzRcIixwa2NzNVBCRVMyOlwiMS4yLjg0MC4xMTM1NDkuMS41LjEzXCIscGtjczVQQktERjI6XCIxLjIuODQwLjExMzU0OS4xLjUuMTJcIixcImRlcy1FREUzLUNCQ1wiOlwiMS4yLjg0MC4xMTM1NDkuMy43XCIsZGF0YTpcIjEuMi44NDAuMTEzNTQ5LjEuNy4xXCIsXCJzaWduZWQtZGF0YVwiOlwiMS4yLjg0MC4xMTM1NDkuMS43LjJcIixcImVudmVsb3BlZC1kYXRhXCI6XCIxLjIuODQwLjExMzU0OS4xLjcuM1wiLFwiZGlnZXN0ZWQtZGF0YVwiOlwiMS4yLjg0MC4xMTM1NDkuMS43LjVcIixcImVuY3J5cHRlZC1kYXRhXCI6XCIxLjIuODQwLjExMzU0OS4xLjcuNlwiLFwiYXV0aGVudGljYXRlZC1kYXRhXCI6XCIxLjIuODQwLjExMzU0OS4xLjkuMTYuMS4yXCIsdHN0aW5mbzpcIjEuMi44NDAuMTEzNTQ5LjEuOS4xNi4xLjRcIix9O3RoaXMub2JqQ2FjaGU9e307dGhpcy5uYW1lMm9iaj1mdW5jdGlvbihiKXtpZih0eXBlb2YgdGhpcy5vYmpDYWNoZVtiXSE9XCJ1bmRlZmluZWRcIil7cmV0dXJuIHRoaXMub2JqQ2FjaGVbYl19aWYodHlwZW9mIHRoaXMubmFtZTJvaWRMaXN0W2JdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiTmFtZSBvZiBPYmplY3RJZGVudGlmaWVyIG5vdCBkZWZpbmVkOiBcIitifXZhciBjPXRoaXMubmFtZTJvaWRMaXN0W2JdO3ZhciBkPW5ldyBLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcih7b2lkOmN9KTt0aGlzLm9iakNhY2hlW2JdPWQ7cmV0dXJuIGR9O3RoaXMuYXR5cGUyb2JqPWZ1bmN0aW9uKGIpe2lmKHR5cGVvZiB0aGlzLm9iakNhY2hlW2JdIT1cInVuZGVmaW5lZFwiKXtyZXR1cm4gdGhpcy5vYmpDYWNoZVtiXX1pZih0eXBlb2YgdGhpcy5hdHlwZTJvaWRMaXN0W2JdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiQXR0cmlidXRlVHlwZSBuYW1lIHVuZGVmaW5lZDogXCIrYn12YXIgYz10aGlzLmF0eXBlMm9pZExpc3RbYl07dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6Y30pO3RoaXMub2JqQ2FjaGVbYl09ZDtyZXR1cm4gZH19O0tKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZT1mdW5jdGlvbihiKXt2YXIgYz1LSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWRMaXN0O2Zvcih2YXIgYSBpbiBjKXtpZihjW2FdPT1iKXtyZXR1cm4gYX19cmV0dXJuXCJcIn07S0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkPWZ1bmN0aW9uKGEpe3ZhciBiPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZExpc3Q7aWYoYlthXT09PXVuZGVmaW5lZCl7cmV0dXJuXCJcIn1yZXR1cm4gYlthXX07S0pVUi5hc24xLng1MDkuWDUwOVV0aWw9bmV3IGZ1bmN0aW9uKCl7dGhpcy5nZXRQS0NTOFB1YktleVBFTWZyb21SU0FLZXk9ZnVuY3Rpb24oaSl7dmFyIGg9bnVsbDt2YXIgZj1LSlVSLmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgoaS5uKTt2YXIgaj1LSlVSLmFzbjEuQVNOMVV0aWwuaW50ZWdlclRvQnl0ZUhleChpLmUpO3ZhciBhPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7aGV4OmZ9KTt2YXIgZz1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2hleDpqfSk7dmFyIGw9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W2EsZ119KTt2YXIgYz1sLmdldEVuY29kZWRIZXgoKTt2YXIgZD1uZXcgS0pVUi5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTpcInJzYUVuY3J5cHRpb25cIn0pO3ZhciBiPW5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKHtoZXg6XCIwMFwiK2N9KTt2YXIgaz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbZCxiXX0pO3ZhciBlPWsuZ2V0RW5jb2RlZEhleCgpO3ZhciBoPUtKVVIuYXNuMS5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KGUsXCJQVUJMSUMgS0VZXCIpO3JldHVybiBofX07S0pVUi5hc24xLng1MDkuWDUwOVV0aWwubmV3Q2VydFBFTT1mdW5jdGlvbihmKXt2YXIgYz1LSlVSLmFzbjEueDUwOTt2YXIgZT1uZXcgYy5UQlNDZXJ0aWZpY2F0ZSgpO2lmKGYuc2VyaWFsIT09dW5kZWZpbmVkKXtlLnNldFNlcmlhbE51bWJlckJ5UGFyYW0oZi5zZXJpYWwpfWVsc2V7dGhyb3dcInNlcmlhbCBudW1iZXIgdW5kZWZpbmVkLlwifWlmKHR5cGVvZiBmLnNpZ2FsZy5uYW1lPT1cInN0cmluZ1wiKXtlLnNldFNpZ25hdHVyZUFsZ0J5UGFyYW0oZi5zaWdhbGcpfWVsc2V7dGhyb3dcInVucHJvcGVyIHNpZ25hdHVyZSBhbGdvcml0aG0gbmFtZVwifWlmKGYuaXNzdWVyIT09dW5kZWZpbmVkKXtlLnNldElzc3VlckJ5UGFyYW0oZi5pc3N1ZXIpfWVsc2V7dGhyb3dcImlzc3VlciBuYW1lIHVuZGVmaW5lZC5cIn1pZihmLm5vdGJlZm9yZSE9PXVuZGVmaW5lZCl7ZS5zZXROb3RCZWZvcmVCeVBhcmFtKGYubm90YmVmb3JlKX1lbHNle3Rocm93XCJub3RiZWZvcmUgdW5kZWZpbmVkLlwifWlmKGYubm90YWZ0ZXIhPT11bmRlZmluZWQpe2Uuc2V0Tm90QWZ0ZXJCeVBhcmFtKGYubm90YWZ0ZXIpfWVsc2V7dGhyb3dcIm5vdGFmdGVyIHVuZGVmaW5lZC5cIn1pZihmLnN1YmplY3QhPT11bmRlZmluZWQpe2Uuc2V0U3ViamVjdEJ5UGFyYW0oZi5zdWJqZWN0KX1lbHNle3Rocm93XCJzdWJqZWN0IG5hbWUgdW5kZWZpbmVkLlwifWlmKGYuc2JqcHVia2V5IT09dW5kZWZpbmVkKXtlLnNldFN1YmplY3RQdWJsaWNLZXlCeUdldEtleShmLnNianB1YmtleSl9ZWxzZXt0aHJvd1wic3ViamVjdCBwdWJsaWMga2V5IHVuZGVmaW5lZC5cIn1pZihmLmV4dCE9PXVuZGVmaW5lZCYmZi5leHQubGVuZ3RoIT09dW5kZWZpbmVkKXtmb3IodmFyIGI9MDtiPGYuZXh0Lmxlbmd0aDtiKyspe2ZvcihrZXkgaW4gZi5leHRbYl0pe2UuYXBwZW5kRXh0ZW5zaW9uQnlOYW1lKGtleSxmLmV4dFtiXVtrZXldKX19fWlmKGYuY2FrZXk9PT11bmRlZmluZWQmJmYuc2lnaGV4PT09dW5kZWZpbmVkKXt0aHJvd1wicGFyYW0gY2FrZXkgYW5kIHNpZ2hleCB1bmRlZmluZWQuXCJ9dmFyIGQ9bnVsbDt2YXIgYT1udWxsO2lmKGYuY2FrZXkpe2Q9S0VZVVRJTC5nZXRLZXkuYXBwbHkobnVsbCxmLmNha2V5KTthPW5ldyBjLkNlcnRpZmljYXRlKHt0YnNjZXJ0b2JqOmUscHJ2a2V5b2JqOmR9KTthLnNpZ24oKX1pZihmLnNpZ2hleCl7YT1uZXcgYy5DZXJ0aWZpY2F0ZSh7dGJzY2VydG9iajplfSk7YS5zZXRTaWduYXR1cmVIZXgoZi5zaWdoZXgpfXJldHVybiBhLmdldFBFTVN0cmluZygpfTtcbi8qISBhc24xY21zLTEuMC4yLmpzIChjKSAyMDEzLTIwMTQgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmFzbjE9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEpe0tKVVIuYXNuMT17fX1pZih0eXBlb2YgS0pVUi5hc24xLmNtcz09XCJ1bmRlZmluZWRcInx8IUtKVVIuYXNuMS5jbXMpe0tKVVIuYXNuMS5jbXM9e319S0pVUi5hc24xLmNtcy5BdHRyaWJ1dGU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPVtdO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBmLGUsYztmPW5ldyBLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcih7b2lkOnRoaXMuYXR0clR5cGVPaWR9KTtlPW5ldyBLSlVSLmFzbjEuREVSU2V0KHthcnJheTp0aGlzLnZhbHVlTGlzdH0pO3RyeXtlLmdldEVuY29kZWRIZXgoKX1jYXRjaChkKXt0aHJvd1wiZmFpbCB2YWx1ZVNldC5nZXRFbmNvZGVkSGV4IGluIEF0dHJpYnV0ZSgxKS9cIitkfWM9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W2YsZV19KTt0cnl7dGhpcy5oVExWPWMuZ2V0RW5jb2RlZEhleCgpfWNhdGNoKGQpe3Rocm93XCJmYWlsZWQgc2VxLmdldEVuY29kZWRIZXggaW4gQXR0cmlidXRlKDIpL1wiK2R9cmV0dXJuIHRoaXMuaFRMVn19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jbXMuQXR0cmlidXRlLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY21zLkNvbnRlbnRUeXBlPWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS5jbXMuQ29udGVudFR5cGUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuM1wiO3ZhciBhPW51bGw7aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe3ZhciBhPW5ldyBLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcihiKTt0aGlzLnZhbHVlTGlzdD1bYV19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLkNvbnRlbnRUeXBlLEtKVVIuYXNuMS5jbXMuQXR0cmlidXRlKTtLSlVSLmFzbjEuY21zLk1lc3NhZ2VEaWdlc3Q9ZnVuY3Rpb24oZSl7S0pVUi5hc24xLmNtcy5NZXNzYWdlRGlnZXN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmF0dHJUeXBlT2lkPVwiMS4yLjg0MC4xMTM1NDkuMS45LjRcIjtpZih0eXBlb2YgZSE9XCJ1bmRlZmluZWRcIil7aWYoZS5lY2lPYmogaW5zdGFuY2VvZiBLSlVSLmFzbjEuY21zLkVuY2Fwc3VsYXRlZENvbnRlbnRJbmZvJiZ0eXBlb2YgZS5oYXNoQWxnPT1cInN0cmluZ1wiKXt2YXIgYj1lLmVjaU9iai5lQ29udGVudFZhbHVlSGV4O3ZhciBhPWUuaGFzaEFsZzt2YXIgYz1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoYixhKTt2YXIgZD1uZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtoZXg6Y30pO2QuZ2V0RW5jb2RlZEhleCgpO3RoaXMudmFsdWVMaXN0PVtkXX1lbHNle3ZhciBkPW5ldyBLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmcoZSk7ZC5nZXRFbmNvZGVkSGV4KCk7dGhpcy52YWx1ZUxpc3Q9W2RdfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jbXMuTWVzc2FnZURpZ2VzdCxLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZSk7S0pVUi5hc24xLmNtcy5TaWduaW5nVGltZT1mdW5jdGlvbihjKXtLSlVSLmFzbjEuY21zLlNpZ25pbmdUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmF0dHJUeXBlT2lkPVwiMS4yLjg0MC4xMTM1NDkuMS45LjVcIjtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7dmFyIGE9bmV3IEtKVVIuYXNuMS54NTA5LlRpbWUoYyk7dHJ5e2EuZ2V0RW5jb2RlZEhleCgpfWNhdGNoKGIpe3Rocm93XCJTaWduaW5nVGltZS5nZXRFbmNvZGVkSGV4KCkgZmFpbGVkL1wiK2J9dGhpcy52YWx1ZUxpc3Q9W2FdfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5TaWduaW5nVGltZSxLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZSk7S0pVUi5hc24xLmNtcy5TaWduaW5nQ2VydGlmaWNhdGU9ZnVuY3Rpb24oZCl7S0pVUi5hc24xLmNtcy5TaWduaW5nQ2VydGlmaWNhdGUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuMTYuMi4xMlwiO3ZhciBhPUtKVVIuYXNuMTt2YXIgYz1LSlVSLmFzbjEuY21zO3ZhciBiPUtKVVIuY3J5cHRvO3RoaXMuc2V0Q2VydHM9ZnVuY3Rpb24obCl7dmFyIGo9W107Zm9yKHZhciBoPTA7aDxsLmxlbmd0aDtoKyspe3ZhciBmPUtFWVVUSUwuZ2V0SGV4RnJvbVBFTShsW2hdKTt2YXIgZT1iLlV0aWwuaGFzaEhleChmLFwic2hhMVwiKTt2YXIgbT1uZXcgYS5ERVJPY3RldFN0cmluZyh7aGV4OmV9KTttLmdldEVuY29kZWRIZXgoKTt2YXIgaz1uZXcgYy5Jc3N1ZXJBbmRTZXJpYWxOdW1iZXIoe2NlcnQ6bFtoXX0pO2suZ2V0RW5jb2RlZEhleCgpO3ZhciBuPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpbbSxrXX0pO24uZ2V0RW5jb2RlZEhleCgpO2oucHVzaChuKX12YXIgZz1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6an0pO2cuZ2V0RW5jb2RlZEhleCgpO3RoaXMudmFsdWVMaXN0PVtnXX07aWYodHlwZW9mIGQhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBkLmFycmF5PT1cIm9iamVjdFwiKXt0aGlzLnNldENlcnRzKGQuYXJyYXkpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jbXMuU2lnbmluZ0NlcnRpZmljYXRlLEtKVVIuYXNuMS5jbXMuQXR0cmlidXRlKTtLSlVSLmFzbjEuY21zLlNpZ25pbmdDZXJ0aWZpY2F0ZVYyPWZ1bmN0aW9uKGUpe0tKVVIuYXNuMS5jbXMuU2lnbmluZ0NlcnRpZmljYXRlVjIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuMTYuMi40N1wiO3ZhciBiPUtKVVIuYXNuMTt2YXIgZj1LSlVSLmFzbjEueDUwOTt2YXIgZD1LSlVSLmFzbjEuY21zO3ZhciBjPUtKVVIuY3J5cHRvO3RoaXMuc2V0Q2VydHM9ZnVuY3Rpb24ocCxoKXt2YXIgbj1bXTtmb3IodmFyIGw9MDtsPHAubGVuZ3RoO2wrKyl7dmFyIGo9S0VZVVRJTC5nZXRIZXhGcm9tUEVNKHBbbF0pO3ZhciByPVtdO2lmKGghPVwic2hhMjU2XCIpe3IucHVzaChuZXcgZi5BbGdvcml0aG1JZGVudGlmaWVyKHtuYW1lOmh9KSl9dmFyIGc9Yy5VdGlsLmhhc2hIZXgoaixoKTt2YXIgcT1uZXcgYi5ERVJPY3RldFN0cmluZyh7aGV4Omd9KTtxLmdldEVuY29kZWRIZXgoKTtyLnB1c2gocSk7dmFyIG09bmV3IGQuSXNzdWVyQW5kU2VyaWFsTnVtYmVyKHtjZXJ0OnBbbF19KTttLmdldEVuY29kZWRIZXgoKTtyLnB1c2gobSk7dmFyIG89bmV3IGIuREVSU2VxdWVuY2Uoe2FycmF5OnJ9KTtvLmdldEVuY29kZWRIZXgoKTtuLnB1c2gobyl9dmFyIGs9bmV3IGIuREVSU2VxdWVuY2Uoe2FycmF5Om59KTtrLmdldEVuY29kZWRIZXgoKTt0aGlzLnZhbHVlTGlzdD1ba119O2lmKHR5cGVvZiBlIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgZS5hcnJheT09XCJvYmplY3RcIil7dmFyIGE9XCJzaGEyNTZcIjtpZih0eXBlb2YgZS5oYXNoQWxnPT1cInN0cmluZ1wiKXthPWUuaGFzaEFsZ310aGlzLnNldENlcnRzKGUuYXJyYXksYSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5TaWduaW5nQ2VydGlmaWNhdGVWMixLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZSk7S0pVUi5hc24xLmNtcy5Jc3N1ZXJBbmRTZXJpYWxOdW1iZXI9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLmNtcy5Jc3N1ZXJBbmRTZXJpYWxOdW1iZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBlPW51bGw7dmFyIGI9bnVsbDt2YXIgYT1LSlVSLmFzbjE7dmFyIGQ9YS54NTA5O3RoaXMuc2V0QnlDZXJ0UEVNPWZ1bmN0aW9uKGkpe3ZhciBnPUtFWVVUSUwuZ2V0SGV4RnJvbVBFTShpKTt2YXIgZj1uZXcgWDUwOSgpO2YuaGV4PWc7dmFyIGo9Zi5nZXRJc3N1ZXJIZXgoKTt0aGlzLmRJc3N1ZXI9bmV3IGQuWDUwME5hbWUoKTt0aGlzLmRJc3N1ZXIuaFRMVj1qO3ZhciBoPWYuZ2V0U2VyaWFsTnVtYmVySGV4KCk7dGhpcy5kU2VyaWFsPW5ldyBhLkRFUkludGVnZXIoe2hleDpofSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBmPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmRJc3N1ZXIsdGhpcy5kU2VyaWFsXX0pO3RoaXMuaFRMVj1mLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGM9PVwic3RyaW5nXCImJmMuaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpIT0tMSl7dGhpcy5zZXRCeUNlcnRQRU0oYyl9aWYoYy5pc3N1ZXImJmMuc2VyaWFsKXtpZihjLmlzc3VlciBpbnN0YW5jZW9mIEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lKXt0aGlzLmRJc3N1ZXI9Yy5pc3N1ZXJ9ZWxzZXt0aGlzLmRJc3N1ZXI9bmV3IEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lKGMuaXNzdWVyKX1pZihjLnNlcmlhbCBpbnN0YW5jZW9mIEtKVVIuYXNuMS5ERVJJbnRlZ2VyKXt0aGlzLmRTZXJpYWw9Yy5zZXJpYWx9ZWxzZXt0aGlzLmRTZXJpYWw9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKGMuc2VyaWFsKX19aWYodHlwZW9mIGMuY2VydD09XCJzdHJpbmdcIil7dGhpcy5zZXRCeUNlcnRQRU0oYy5jZXJ0KX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLklzc3VlckFuZFNlcmlhbE51bWJlcixLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLmNtcy5BdHRyaWJ1dGVMaXN0PWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5jbXMuQXR0cmlidXRlTGlzdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5saXN0PW5ldyBBcnJheSgpO3RoaXMuc29ydEZsYWc9dHJ1ZTt0aGlzLmFkZD1mdW5jdGlvbihiKXtpZihiIGluc3RhbmNlb2YgS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUpe3RoaXMubGlzdC5wdXNoKGIpfX07dGhpcy5sZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5saXN0Lmxlbmd0aH07dGhpcy5jbGVhcj1mdW5jdGlvbigpe3RoaXMubGlzdD1uZXcgQXJyYXkoKTt0aGlzLmhUTFY9bnVsbDt0aGlzLmhWPW51bGx9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhUTFY9PVwic3RyaW5nXCIpe3JldHVybiB0aGlzLmhUTFZ9dmFyIGI9bmV3IEtKVVIuYXNuMS5ERVJTZXQoe2FycmF5OnRoaXMubGlzdCxzb3J0ZmxhZzp0aGlzLnNvcnRGbGFnfSk7dGhpcy5oVExWPWIuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5zb3J0ZmxhZyE9XCJ1bmRlZmluZWRcIiYmYS5zb3J0ZmxhZz09ZmFsc2Upe3RoaXMuc29ydEZsYWc9ZmFsc2V9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGVMaXN0LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY21zLlNpZ25lckluZm89ZnVuY3Rpb24oYyl7S0pVUi5hc24xLmNtcy5TaWduZXJJbmZvLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGI9S0pVUi5hc24xLmNtczt2YXIgZD1LSlVSLmFzbjEueDUwOTt0aGlzLmRDTVNWZXJzaW9uPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6MX0pO3RoaXMuZFNpZ25lcklkZW50aWZpZXI9bnVsbDt0aGlzLmREaWdlc3RBbGdvcml0aG09bnVsbDt0aGlzLmRTaWduZWRBdHRycz1uZXcgYi5BdHRyaWJ1dGVMaXN0KCk7dGhpcy5kU2lnQWxnPW51bGw7dGhpcy5kU2lnPW51bGw7dGhpcy5kVW5zaWduZWRBdHRycz1uZXcgYi5BdHRyaWJ1dGVMaXN0KCk7dGhpcy5zZXRTaWduZXJJZGVudGlmaWVyPWZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBmPT1cInN0cmluZ1wiJiZmLmluZGV4T2YoXCJDRVJUSUZJQ0FURVwiKSE9LTEmJmYuaW5kZXhPZihcIkJFR0lOXCIpIT0tMSYmZi5pbmRleE9mKFwiRU5EXCIpIT0tMSl7dmFyIGU9Zjt0aGlzLmRTaWduZXJJZGVudGlmaWVyPW5ldyBiLklzc3VlckFuZFNlcmlhbE51bWJlcih7Y2VydDpmfSl9fTt0aGlzLnNldEZvckNvbnRlbnRBbmRIYXNoPWZ1bmN0aW9uKGUpe2lmKHR5cGVvZiBlIT1cInVuZGVmaW5lZFwiKXtpZihlLmVjaU9iaiBpbnN0YW5jZW9mIEtKVVIuYXNuMS5jbXMuRW5jYXBzdWxhdGVkQ29udGVudEluZm8pe3RoaXMuZFNpZ25lZEF0dHJzLmFkZChuZXcgYi5Db250ZW50VHlwZSh7b2lkOlwiMS4yLjg0MC4xMTM1NDkuMS43LjFcIn0pKTt0aGlzLmRTaWduZWRBdHRycy5hZGQobmV3IGIuTWVzc2FnZURpZ2VzdCh7ZWNpT2JqOmUuZWNpT2JqLGhhc2hBbGc6ZS5oYXNoQWxnfSkpfWlmKHR5cGVvZiBlLnNkT2JqIT1cInVuZGVmaW5lZFwiJiZlLnNkT2JqIGluc3RhbmNlb2YgS0pVUi5hc24xLmNtcy5TaWduZWREYXRhKXtpZihlLnNkT2JqLmRpZ2VzdEFsZ05hbWVMaXN0LmpvaW4oXCI6XCIpLmluZGV4T2YoZS5oYXNoQWxnKT09LTEpe2Uuc2RPYmouZGlnZXN0QWxnTmFtZUxpc3QucHVzaChlLmhhc2hBbGcpfX1pZih0eXBlb2YgZS5oYXNoQWxnPT1cInN0cmluZ1wiKXt0aGlzLmREaWdlc3RBbGdvcml0aG09bmV3IGQuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTplLmhhc2hBbGd9KX19fTt0aGlzLnNpZ249ZnVuY3Rpb24oaixmKXt0aGlzLmRTaWdBbGc9bmV3IGQuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTpmfSk7dmFyIGc9dGhpcy5kU2lnbmVkQXR0cnMuZ2V0RW5jb2RlZEhleCgpO3ZhciBlPUtFWVVUSUwuZ2V0S2V5KGopO3ZhciBpPW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzpmfSk7aS5pbml0KGUpO2kudXBkYXRlSGV4KGcpO3ZhciBoPWkuc2lnbigpO3RoaXMuZFNpZz1uZXcgYS5ERVJPY3RldFN0cmluZyh7aGV4Omh9KX07dGhpcy5hZGRVbnNpZ25lZD1mdW5jdGlvbihlKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmRVbnNpZ25lZEF0dHJzLmhUTFY9bnVsbDt0aGlzLmRVbnNpZ25lZEF0dHJzLmFkZChlKX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5kU2lnbmVkQXR0cnMgaW5zdGFuY2VvZiBLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZUxpc3QmJnRoaXMuZFNpZ25lZEF0dHJzLmxlbmd0aCgpPT0wKXt0aHJvd1wiU2lnbmVkQXR0cnMgbGVuZ3RoID0gMCAoZW1wdHkpXCJ9dmFyIGU9bmV3IGEuREVSVGFnZ2VkT2JqZWN0KHtvYmo6dGhpcy5kU2lnbmVkQXR0cnMsdGFnOlwiYTBcIixleHBsaWNpdDpmYWxzZX0pO3ZhciBoPW51bGw7aWYodGhpcy5kVW5zaWduZWRBdHRycy5sZW5ndGgoKT4wKXtoPW5ldyBhLkRFUlRhZ2dlZE9iamVjdCh7b2JqOnRoaXMuZFVuc2lnbmVkQXR0cnMsdGFnOlwiYTFcIixleHBsaWNpdDpmYWxzZX0pfXZhciBnPVt0aGlzLmRDTVNWZXJzaW9uLHRoaXMuZFNpZ25lcklkZW50aWZpZXIsdGhpcy5kRGlnZXN0QWxnb3JpdGhtLGUsdGhpcy5kU2lnQWxnLHRoaXMuZFNpZyxdO2lmKGghPW51bGwpe2cucHVzaChoKX12YXIgZj1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6Z30pO3RoaXMuaFRMVj1mLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5TaWduZXJJbmZvLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY21zLkVuY2Fwc3VsYXRlZENvbnRlbnRJbmZvPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5jbXMuRW5jYXBzdWxhdGVkQ29udGVudEluZm8uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEuY21zO3ZhciBkPUtKVVIuYXNuMS54NTA5O3RoaXMuZEVDb250ZW50VHlwZT1uZXcgYS5ERVJPYmplY3RJZGVudGlmaWVyKHtuYW1lOlwiZGF0YVwifSk7dGhpcy5kRUNvbnRlbnQ9bnVsbDt0aGlzLmlzRGV0YWNoZWQ9ZmFsc2U7dGhpcy5lQ29udGVudFZhbHVlSGV4PW51bGw7dGhpcy5zZXRDb250ZW50VHlwZT1mdW5jdGlvbihlKXtpZihlLm1hdGNoKC9eWzAtMl1bLl1bMC05Ll0rJC8pKXt0aGlzLmRFQ29udGVudFR5cGU9bmV3IGEuREVST2JqZWN0SWRlbnRpZmllcih7b2lkOmV9KX1lbHNle3RoaXMuZEVDb250ZW50VHlwZT1uZXcgYS5ERVJPYmplY3RJZGVudGlmaWVyKHtuYW1lOmV9KX19O3RoaXMuc2V0Q29udGVudFZhbHVlPWZ1bmN0aW9uKGUpe2lmKHR5cGVvZiBlIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgZS5oZXg9PVwic3RyaW5nXCIpe3RoaXMuZUNvbnRlbnRWYWx1ZUhleD1lLmhleH1lbHNle2lmKHR5cGVvZiBlLnN0cj09XCJzdHJpbmdcIil7dGhpcy5lQ29udGVudFZhbHVlSGV4PXV0Zjh0b2hleChlLnN0cil9fX19O3RoaXMuc2V0Q29udGVudFZhbHVlSGV4PWZ1bmN0aW9uKGUpe3RoaXMuZUNvbnRlbnRWYWx1ZUhleD1lfTt0aGlzLnNldENvbnRlbnRWYWx1ZVN0cj1mdW5jdGlvbihlKXt0aGlzLmVDb250ZW50VmFsdWVIZXg9dXRmOHRvaGV4KGUpfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0eXBlb2YgdGhpcy5lQ29udGVudFZhbHVlSGV4IT1cInN0cmluZ1wiKXt0aHJvd1wiZUNvbnRlbnRWYWx1ZSBub3QgeWV0IHNldFwifXZhciBnPW5ldyBhLkRFUk9jdGV0U3RyaW5nKHtoZXg6dGhpcy5lQ29udGVudFZhbHVlSGV4fSk7dGhpcy5kRUNvbnRlbnQ9bmV3IGEuREVSVGFnZ2VkT2JqZWN0KHtvYmo6Zyx0YWc6XCJhMFwiLGV4cGxpY2l0OnRydWV9KTt2YXIgZT1bdGhpcy5kRUNvbnRlbnRUeXBlXTtpZighdGhpcy5pc0RldGFjaGVkKXtlLnB1c2godGhpcy5kRUNvbnRlbnQpfXZhciBmPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTplfSk7dGhpcy5oVExWPWYuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLkVuY2Fwc3VsYXRlZENvbnRlbnRJbmZvLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY21zLkNvbnRlbnRJbmZvPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5jbXMuQ29udGVudEluZm8uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEuY21zO3ZhciBkPUtKVVIuYXNuMS54NTA5O3RoaXMuZENvbnRlbnRUeXBlPW51bGw7dGhpcy5kQ29udGVudD1udWxsO3RoaXMuc2V0Q29udGVudFR5cGU9ZnVuY3Rpb24oZSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpe3RoaXMuZENvbnRlbnRUeXBlPWQuT0lELm5hbWUyb2JqKGUpfX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGY9bmV3IGEuREVSVGFnZ2VkT2JqZWN0KHtvYmo6dGhpcy5kQ29udGVudCx0YWc6XCJhMFwiLGV4cGxpY2l0OnRydWV9KTt2YXIgZT1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMuZENvbnRlbnRUeXBlLGZdfSk7dGhpcy5oVExWPWUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZihjLnR5cGUpe3RoaXMuc2V0Q29udGVudFR5cGUoYy50eXBlKX1pZihjLm9iaiYmYy5vYmogaW5zdGFuY2VvZiBhLkFTTjFPYmplY3Qpe3RoaXMuZENvbnRlbnQ9Yy5vYmp9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5Db250ZW50SW5mbyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLmNtcy5TaWduZWREYXRhPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5jbXMuU2lnbmVkRGF0YS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBiPUtKVVIuYXNuMS5jbXM7dmFyIGQ9S0pVUi5hc24xLng1MDk7dGhpcy5kQ01TVmVyc2lvbj1uZXcgYS5ERVJJbnRlZ2VyKHtcImludFwiOjF9KTt0aGlzLmREaWdlc3RBbGdzPW51bGw7dGhpcy5kaWdlc3RBbGdOYW1lTGlzdD1bXTt0aGlzLmRFbmNhcENvbnRlbnRJbmZvPW5ldyBiLkVuY2Fwc3VsYXRlZENvbnRlbnRJbmZvKCk7dGhpcy5kQ2VydHM9bnVsbDt0aGlzLmNlcnRpZmljYXRlTGlzdD1bXTt0aGlzLmNybExpc3Q9W107dGhpcy5zaWduZXJJbmZvTGlzdD1bbmV3IGIuU2lnbmVySW5mbygpXTt0aGlzLmFkZENlcnRpZmljYXRlc0J5UEVNPWZ1bmN0aW9uKGUpe3ZhciBmPUtFWVVUSUwuZ2V0SGV4RnJvbVBFTShlKTt2YXIgZz1uZXcgYS5BU04xT2JqZWN0KCk7Zy5oVExWPWY7dGhpcy5jZXJ0aWZpY2F0ZUxpc3QucHVzaChnKX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodHlwZW9mIHRoaXMuaFRMVj09XCJzdHJpbmdcIil7cmV0dXJuIHRoaXMuaFRMVn1pZih0aGlzLmREaWdlc3RBbGdzPT1udWxsKXt2YXIgaz1bXTtmb3IodmFyIGo9MDtqPHRoaXMuZGlnZXN0QWxnTmFtZUxpc3QubGVuZ3RoO2orKyl7dmFyIGg9dGhpcy5kaWdlc3RBbGdOYW1lTGlzdFtqXTt2YXIgbT1uZXcgZC5BbGdvcml0aG1JZGVudGlmaWVyKHtuYW1lOmh9KTtrLnB1c2gobSl9dGhpcy5kRGlnZXN0QWxncz1uZXcgYS5ERVJTZXQoe2FycmF5Omt9KX12YXIgZT1bdGhpcy5kQ01TVmVyc2lvbix0aGlzLmREaWdlc3RBbGdzLHRoaXMuZEVuY2FwQ29udGVudEluZm9dO2lmKHRoaXMuZENlcnRzPT1udWxsKXtpZih0aGlzLmNlcnRpZmljYXRlTGlzdC5sZW5ndGg+MCl7dmFyIGw9bmV3IGEuREVSU2V0KHthcnJheTp0aGlzLmNlcnRpZmljYXRlTGlzdH0pO3RoaXMuZENlcnRzPW5ldyBhLkRFUlRhZ2dlZE9iamVjdCh7b2JqOmwsdGFnOlwiYTBcIixleHBsaWNpdDpmYWxzZX0pfX1pZih0aGlzLmRDZXJ0cyE9bnVsbCl7ZS5wdXNoKHRoaXMuZENlcnRzKX12YXIgZz1uZXcgYS5ERVJTZXQoe2FycmF5OnRoaXMuc2lnbmVySW5mb0xpc3R9KTtlLnB1c2goZyk7dmFyIGY9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmV9KTt0aGlzLmhUTFY9Zi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07dGhpcy5nZXRDb250ZW50SW5mbz1mdW5jdGlvbigpe3RoaXMuZ2V0RW5jb2RlZEhleCgpO3ZhciBlPW5ldyBiLkNvbnRlbnRJbmZvKHt0eXBlOlwic2lnbmVkLWRhdGFcIixvYmo6dGhpc30pO3JldHVybiBlfTt0aGlzLmdldENvbnRlbnRJbmZvRW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuZ2V0Q29udGVudEluZm8oKTt2YXIgZj1lLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gZn07dGhpcy5nZXRQRU09ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdldENvbnRlbnRJbmZvRW5jb2RlZEhleCgpO3ZhciBmPWEuQVNOMVV0aWwuZ2V0UEVNU3RyaW5nRnJvbUhleChlLFwiQ01TXCIpO3JldHVybiBmfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5TaWduZWREYXRhLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY21zLkNNU1V0aWw9bmV3IGZ1bmN0aW9uKCl7fTtLSlVSLmFzbjEuY21zLkNNU1V0aWwubmV3U2lnbmVkRGF0YT1mdW5jdGlvbihhKXt2YXIgaD1LSlVSLmFzbjEuY21zO3ZhciBnPUtKVVIuYXNuMS5jYWRlczt2YXIgZj1uZXcgaC5TaWduZWREYXRhKCk7Zi5kRW5jYXBDb250ZW50SW5mby5zZXRDb250ZW50VmFsdWUoYS5jb250ZW50KTtpZih0eXBlb2YgYS5jZXJ0cz09XCJvYmplY3RcIil7Zm9yKHZhciBiPTA7YjxhLmNlcnRzLmxlbmd0aDtiKyspe2YuYWRkQ2VydGlmaWNhdGVzQnlQRU0oYS5jZXJ0c1tiXSl9fWYuc2lnbmVySW5mb0xpc3Q9W107Zm9yKHZhciBiPTA7YjxhLnNpZ25lckluZm9zLmxlbmd0aDtiKyspe3ZhciBkPWEuc2lnbmVySW5mb3NbYl07dmFyIGM9bmV3IGguU2lnbmVySW5mbygpO2Muc2V0U2lnbmVySWRlbnRpZmllcihkLnNpZ25lckNlcnQpO2Muc2V0Rm9yQ29udGVudEFuZEhhc2goe3NkT2JqOmYsZWNpT2JqOmYuZEVuY2FwQ29udGVudEluZm8saGFzaEFsZzpkLmhhc2hBbGd9KTtmb3IoYXR0ck5hbWUgaW4gZC5zQXR0cil7dmFyIGo9ZC5zQXR0clthdHRyTmFtZV07aWYoYXR0ck5hbWU9PVwiU2lnbmluZ1RpbWVcIil7dmFyIGU9bmV3IGguU2lnbmluZ1RpbWUoaik7Yy5kU2lnbmVkQXR0cnMuYWRkKGUpfWlmKGF0dHJOYW1lPT1cIlNpZ25pbmdDZXJ0aWZpY2F0ZVwiKXt2YXIgZT1uZXcgaC5TaWduaW5nQ2VydGlmaWNhdGUoaik7Yy5kU2lnbmVkQXR0cnMuYWRkKGUpfWlmKGF0dHJOYW1lPT1cIlNpZ25pbmdDZXJ0aWZpY2F0ZVYyXCIpe3ZhciBlPW5ldyBoLlNpZ25pbmdDZXJ0aWZpY2F0ZVYyKGopO2MuZFNpZ25lZEF0dHJzLmFkZChlKX1pZihhdHRyTmFtZT09XCJTaWduYXR1cmVQb2xpY3lJZGVudGlmaWVyXCIpe3ZhciBlPW5ldyBnLlNpZ25hdHVyZVBvbGljeUlkZW50aWZpZXIoaik7Yy5kU2lnbmVkQXR0cnMuYWRkKGUpfX1jLnNpZ24oZC5zaWduZXJQcnZLZXksZC5zaWdBbGcpO2Yuc2lnbmVySW5mb0xpc3QucHVzaChjKX1yZXR1cm4gZn07XG4vKiEgYXNuMXRzcC0xLjAuMS5qcyAoYykgMjAxNCBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuICovXG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuYXNuMT09XCJ1bmRlZmluZWRcInx8IUtKVVIuYXNuMSl7S0pVUi5hc24xPXt9fWlmKHR5cGVvZiBLSlVSLmFzbjEudHNwPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xLnRzcCl7S0pVUi5hc24xLnRzcD17fX1LSlVSLmFzbjEudHNwLkFjY3VyYWN5PWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS50c3AuQWNjdXJhY3kuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt0aGlzLnNlY29uZHM9bnVsbDt0aGlzLm1pbGxpcz1udWxsO3RoaXMubWljcm9zPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGU9bnVsbDt2YXIgZz1udWxsO3ZhciBpPW51bGw7dmFyIGM9W107aWYodGhpcy5zZWNvbmRzIT1udWxsKXtlPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6dGhpcy5zZWNvbmRzfSk7Yy5wdXNoKGUpfWlmKHRoaXMubWlsbGlzIT1udWxsKXt2YXIgaD1uZXcgYS5ERVJJbnRlZ2VyKHtcImludFwiOnRoaXMubWlsbGlzfSk7Zz1uZXcgYS5ERVJUYWdnZWRPYmplY3Qoe29iajpoLHRhZzpcIjgwXCIsZXhwbGljaXQ6ZmFsc2V9KTtjLnB1c2goZyl9aWYodGhpcy5taWNyb3MhPW51bGwpe3ZhciBmPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6dGhpcy5taWNyb3N9KTtpPW5ldyBhLkRFUlRhZ2dlZE9iamVjdCh7b2JqOmYsdGFnOlwiODFcIixleHBsaWNpdDpmYWxzZX0pO2MucHVzaChpKX12YXIgZD1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6Y30pO3RoaXMuaFRMVj1kLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGIuc2Vjb25kcz09XCJudW1iZXJcIil7dGhpcy5zZWNvbmRzPWIuc2Vjb25kc31pZih0eXBlb2YgYi5taWxsaXM9PVwibnVtYmVyXCIpe3RoaXMubWlsbGlzPWIubWlsbGlzfWlmKHR5cGVvZiBiLm1pY3Jvcz09XCJudW1iZXJcIil7dGhpcy5taWNyb3M9Yi5taWNyb3N9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5BY2N1cmFjeSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLnRzcC5NZXNzYWdlSW1wcmludD1mdW5jdGlvbihiKXtLSlVSLmFzbjEudHNwLk1lc3NhZ2VJbXByaW50LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGM9S0pVUi5hc24xLng1MDk7dGhpcy5kSGFzaEFsZz1udWxsO3RoaXMuZEhhc2hWYWx1ZT1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhUTFY9PVwic3RyaW5nXCIpe3JldHVybiB0aGlzLmhUTFZ9dmFyIGQ9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmRIYXNoQWxnLHRoaXMuZEhhc2hWYWx1ZV19KTtyZXR1cm4gZC5nZXRFbmNvZGVkSGV4KCl9O2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5oYXNoQWxnPT1cInN0cmluZ1wiKXt0aGlzLmRIYXNoQWxnPW5ldyBjLkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6Yi5oYXNoQWxnfSl9aWYodHlwZW9mIGIuaGFzaFZhbHVlPT1cInN0cmluZ1wiKXt0aGlzLmRIYXNoVmFsdWU9bmV3IGEuREVST2N0ZXRTdHJpbmcoe2hleDpiLmhhc2hWYWx1ZX0pfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS50c3AuTWVzc2FnZUltcHJpbnQsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuVGltZVN0YW1wUmVxPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS50c3AuVGltZVN0YW1wUmVxLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGI9S0pVUi5hc24xLnRzcDt0aGlzLmRWZXJzaW9uPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6MX0pO3RoaXMuZE1lc3NhZ2VJbXByaW50PW51bGw7dGhpcy5kUG9saWN5PW51bGw7dGhpcy5kTm9uY2U9bnVsbDt0aGlzLmNlcnRSZXE9dHJ1ZTt0aGlzLnNldE1lc3NhZ2VJbXByaW50PWZ1bmN0aW9uKGQpe2lmKGQgaW5zdGFuY2VvZiBLSlVSLmFzbjEudHNwLk1lc3NhZ2VJbXByaW50KXt0aGlzLmRNZXNzYWdlSW1wcmludD1kO3JldHVybn1pZih0eXBlb2YgZD09XCJvYmplY3RcIil7dGhpcy5kTWVzc2FnZUltcHJpbnQ9bmV3IGIuTWVzc2FnZUltcHJpbnQoZCl9fTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmRNZXNzYWdlSW1wcmludD09bnVsbCl7dGhyb3dcIm1lc3NhZ2VJbXByaW50IHNoYWxsIGJlIHNwZWNpZmllZFwifXZhciBkPVt0aGlzLmRWZXJzaW9uLHRoaXMuZE1lc3NhZ2VJbXByaW50XTtpZih0aGlzLmRQb2xpY3khPW51bGwpe2QucHVzaCh0aGlzLmRQb2xpY3kpfWlmKHRoaXMuZE5vbmNlIT1udWxsKXtkLnB1c2godGhpcy5kTm9uY2UpfWlmKHRoaXMuY2VydFJlcSl7ZC5wdXNoKG5ldyBhLkRFUkJvb2xlYW4oKSl9dmFyIGU9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmR9KTt0aGlzLmhUTFY9ZS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjLm1pPT1cIm9iamVjdFwiKXt0aGlzLnNldE1lc3NhZ2VJbXByaW50KGMubWkpfWlmKHR5cGVvZiBjLnBvbGljeT09XCJvYmplY3RcIil7dGhpcy5kUG9saWN5PW5ldyBhLkRFUk9iamVjdElkZW50aWZpZXIoYy5wb2xpY3kpfWlmKHR5cGVvZiBjLm5vbmNlPT1cIm9iamVjdFwiKXt0aGlzLmROb25jZT1uZXcgYS5ERVJJbnRlZ2VyKGMubm9uY2UpfWlmKHR5cGVvZiBjLmNlcnRyZXE9PVwiYm9vbGVhblwiKXt0aGlzLmNlcnRSZXE9Yy5jZXJ0cmVxfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS50c3AuVGltZVN0YW1wUmVxLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEudHNwLlRTVEluZm89ZnVuY3Rpb24oYyl7S0pVUi5hc24xLnRzcC5UU1RJbmZvLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGQ9S0pVUi5hc24xLng1MDk7dmFyIGI9S0pVUi5hc24xLnRzcDt0aGlzLmRWZXJzaW9uPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6MX0pO3RoaXMuZFBvbGljeT1udWxsO3RoaXMuZE1lc3NhZ2VJbXByaW50PW51bGw7dGhpcy5kU2VyaWFsTnVtYmVyPW51bGw7dGhpcy5kR2VuVGltZT1udWxsO3RoaXMuZEFjY3VyYWN5PW51bGw7dGhpcy5kT3JkZXJpbmc9bnVsbDt0aGlzLmROb25jZT1udWxsO3RoaXMuZFRzYT1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBlPVt0aGlzLmRWZXJzaW9uXTtpZih0aGlzLmRQb2xpY3k9PW51bGwpe3Rocm93XCJwb2xpY3kgc2hhbGwgYmUgc3BlY2lmaWVkLlwifWUucHVzaCh0aGlzLmRQb2xpY3kpO2lmKHRoaXMuZE1lc3NhZ2VJbXByaW50PT1udWxsKXt0aHJvd1wibWVzc2FnZUltcHJpbnQgc2hhbGwgYmUgc3BlY2lmaWVkLlwifWUucHVzaCh0aGlzLmRNZXNzYWdlSW1wcmludCk7aWYodGhpcy5kU2VyaWFsTnVtYmVyPT1udWxsKXt0aHJvd1wic2VyaWFsTnVtYmVyIHNoYWxsIGJlIHNwZWNpZmllZC5cIn1lLnB1c2godGhpcy5kU2VyaWFsTnVtYmVyKTtpZih0aGlzLmRHZW5UaW1lPT1udWxsKXt0aHJvd1wiZ2VuVGltZSBzaGFsbCBiZSBzcGVjaWZpZWQuXCJ9ZS5wdXNoKHRoaXMuZEdlblRpbWUpO2lmKHRoaXMuZEFjY3VyYWN5IT1udWxsKXtlLnB1c2godGhpcy5kQWNjdXJhY3kpfWlmKHRoaXMuZE9yZGVyaW5nIT1udWxsKXtlLnB1c2godGhpcy5kT3JkZXJpbmcpfWlmKHRoaXMuZE5vbmNlIT1udWxsKXtlLnB1c2godGhpcy5kTm9uY2UpfWlmKHRoaXMuZFRzYSE9bnVsbCl7ZS5wdXNoKHRoaXMuZFRzYSl9dmFyIGY9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmV9KTt0aGlzLmhUTFY9Zi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjLnBvbGljeT09XCJzdHJpbmdcIil7aWYoIWMucG9saWN5Lm1hdGNoKC9eWzAtOS5dKyQvKSl7dGhyb3dcInBvbGljeSBzaGFsbCBiZSBvaWQgbGlrZSAwLjEuNC4xMzRcIn10aGlzLmRQb2xpY3k9bmV3IGEuREVST2JqZWN0SWRlbnRpZmllcih7b2lkOmMucG9saWN5fSl9aWYodHlwZW9mIGMubWVzc2FnZUltcHJpbnQhPVwidW5kZWZpbmVkXCIpe3RoaXMuZE1lc3NhZ2VJbXByaW50PW5ldyBiLk1lc3NhZ2VJbXByaW50KGMubWVzc2FnZUltcHJpbnQpfWlmKHR5cGVvZiBjLnNlcmlhbE51bWJlciE9XCJ1bmRlZmluZWRcIil7dGhpcy5kU2VyaWFsTnVtYmVyPW5ldyBhLkRFUkludGVnZXIoYy5zZXJpYWxOdW1iZXIpfWlmKHR5cGVvZiBjLmdlblRpbWUhPVwidW5kZWZpbmVkXCIpe3RoaXMuZEdlblRpbWU9bmV3IGEuREVSR2VuZXJhbGl6ZWRUaW1lKGMuZ2VuVGltZSl9aWYodHlwZW9mIGMuYWNjdXJhY3khPVwidW5kZWZpbmRcIil7dGhpcy5kQWNjdXJhY3k9bmV3IGIuQWNjdXJhY3koYy5hY2N1cmFjeSl9aWYodHlwZW9mIGMub3JkZXJpbmchPVwidW5kZWZpbmVkXCImJmMub3JkZXJpbmc9PXRydWUpe3RoaXMuZE9yZGVyaW5nPW5ldyBhLkRFUkJvb2xlYW4oKX1pZih0eXBlb2YgYy5ub25jZSE9XCJ1bmRlZmluZWRcIil7dGhpcy5kTm9uY2U9bmV3IGEuREVSSW50ZWdlcihjLm5vbmNlKX1pZih0eXBlb2YgYy50c2EhPVwidW5kZWZpbmVkXCIpe3RoaXMuZFRzYT1uZXcgZC5YNTAwTmFtZShjLnRzYSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5UU1RJbmZvLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEudHNwLlRpbWVTdGFtcFJlc3A9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLnRzcC5UaW1lU3RhbXBSZXNwLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGI9S0pVUi5hc24xLnRzcDt0aGlzLmRTdGF0dXM9bnVsbDt0aGlzLmRUU1Q9bnVsbDt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmRTdGF0dXM9PW51bGwpe3Rocm93XCJzdGF0dXMgc2hhbGwgYmUgc3BlY2lmaWVkXCJ9dmFyIGQ9W3RoaXMuZFN0YXR1c107aWYodGhpcy5kVFNUIT1udWxsKXtkLnB1c2godGhpcy5kVFNUKX12YXIgZT1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZH0pO3RoaXMuaFRMVj1lLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGMuc3RhdHVzPT1cIm9iamVjdFwiKXt0aGlzLmRTdGF0dXM9bmV3IGIuUEtJU3RhdHVzSW5mbyhjLnN0YXR1cyl9aWYodHlwZW9mIGMudHN0IT1cInVuZGVmaW5lZFwiJiZjLnRzdCBpbnN0YW5jZW9mIEtKVVIuYXNuMS5BU04xT2JqZWN0KXt0aGlzLmRUU1Q9Yy50c3QuZ2V0Q29udGVudEluZm8oKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEudHNwLlRpbWVTdGFtcFJlc3AsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuUEtJU3RhdHVzSW5mbz1mdW5jdGlvbihjKXtLSlVSLmFzbjEudHNwLlBLSVN0YXR1c0luZm8uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEudHNwO3RoaXMuZFN0YXR1cz1udWxsO3RoaXMuZFN0YXR1c1N0cmluZz1udWxsO3RoaXMuZEZhaWx1cmVJbmZvPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5kU3RhdHVzPT1udWxsKXt0aHJvd1wic3RhdHVzIHNoYWxsIGJlIHNwZWNpZmllZFwifXZhciBkPVt0aGlzLmRTdGF0dXNdO2lmKHRoaXMuZFN0YXR1c1N0cmluZyE9bnVsbCl7ZC5wdXNoKHRoaXMuZFN0YXR1c1N0cmluZyl9aWYodGhpcy5kRmFpbHVyZUluZm8hPW51bGwpe2QucHVzaCh0aGlzLmRGYWlsdXJlSW5mbyl9dmFyIGU9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmR9KTt0aGlzLmhUTFY9ZS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjLnN0YXR1cz09XCJvYmplY3RcIil7dGhpcy5kU3RhdHVzPW5ldyBiLlBLSVN0YXR1cyhjLnN0YXR1cyl9aWYodHlwZW9mIGMuc3RhdHN0cj09XCJvYmplY3RcIil7dGhpcy5kU3RhdHVzU3RyaW5nPW5ldyBiLlBLSUZyZWVUZXh0KHthcnJheTpjLnN0YXRzdHJ9KX1pZih0eXBlb2YgYy5mYWlsaW5mbz09XCJvYmplY3RcIil7dGhpcy5kRmFpbHVyZUluZm89bmV3IGIuUEtJRmFpbHVyZUluZm8oYy5mYWlsaW5mbyl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5QS0lTdGF0dXNJbmZvLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEudHNwLlBLSVN0YXR1cz1mdW5jdGlvbihlKXtLSlVSLmFzbjEudHNwLlBLSVN0YXR1cy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBiPUtKVVIuYXNuMS50c3A7dmFyIGQ9bnVsbDt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt0aGlzLmhUTFY9dGhpcy5kU3RhdHVzLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgZSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGUubmFtZSE9XCJ1bmRlZmluZWRcIil7dmFyIGM9Yi5QS0lTdGF0dXMudmFsdWVMaXN0O2lmKHR5cGVvZiBjW2UubmFtZV09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJuYW1lIHVuZGVmaW5lZDogXCIrZS5uYW1lfXRoaXMuZFN0YXR1cz1uZXcgYS5ERVJJbnRlZ2VyKHtcImludFwiOmNbZS5uYW1lXX0pfWVsc2V7dGhpcy5kU3RhdHVzPW5ldyBhLkRFUkludGVnZXIoZSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5QS0lTdGF0dXMsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuUEtJU3RhdHVzLnZhbHVlTGlzdD17Z3JhbnRlZDowLGdyYW50ZWRXaXRoTW9kczoxLHJlamVjdGlvbjoyLHdhaXRpbmc6MyxyZXZvY2F0aW9uV2FybmluZzo0LHJldm9jYXRpb25Ob3RpZmljYXRpb246NX07S0pVUi5hc24xLnRzcC5QS0lGcmVlVGV4dD1mdW5jdGlvbihiKXtLSlVSLmFzbjEudHNwLlBLSUZyZWVUZXh0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dGhpcy50ZXh0TGlzdD1bXTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgYz1bXTtmb3IodmFyIGU9MDtlPHRoaXMudGV4dExpc3QubGVuZ3RoO2UrKyl7Yy5wdXNoKG5ldyBhLkRFUlVURjhTdHJpbmcoe3N0cjp0aGlzLnRleHRMaXN0W2VdfSkpfXZhciBkPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpjfSk7dGhpcy5oVExWPWQuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5hcnJheT09XCJvYmplY3RcIil7dGhpcy50ZXh0TGlzdD1iLmFycmF5fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS50c3AuUEtJRnJlZVRleHQsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuUEtJRmFpbHVyZUluZm89ZnVuY3Rpb24oZCl7S0pVUi5hc24xLnRzcC5QS0lGYWlsdXJlSW5mby5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBiPUtKVVIuYXNuMS50c3A7dGhpcy52YWx1ZT1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMudmFsdWU9PW51bGwpe3Rocm93XCJ2YWx1ZSBzaGFsbCBiZSBzcGVjaWZpZWRcIn12YXIgZT1uZXcgTnVtYmVyKHRoaXMudmFsdWUpLnRvU3RyaW5nKDIpO3ZhciBmPW5ldyBhLkRFUkJpdFN0cmluZygpO2Yuc2V0QnlCaW5hcnlTdHJpbmcoZSk7dGhpcy5oVExWPWYuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBkIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgZC5uYW1lPT1cInN0cmluZ1wiKXt2YXIgYz1iLlBLSUZhaWx1cmVJbmZvLnZhbHVlTGlzdDtpZih0eXBlb2YgY1tkLm5hbWVdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wibmFtZSB1bmRlZmluZWQ6IFwiK2QubmFtZX10aGlzLnZhbHVlPWNbZC5uYW1lXX1lbHNle2lmKHR5cGVvZiBkW1wiaW50XCJdPT1cIm51bWJlclwiKXt0aGlzLnZhbHVlPWRbXCJpbnRcIl19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS50c3AuUEtJRmFpbHVyZUluZm8sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuUEtJRmFpbHVyZUluZm8udmFsdWVMaXN0PXtiYWRBbGc6MCxiYWRSZXF1ZXN0OjIsYmFkRGF0YUZvcm1hdDo1LHRpbWVOb3RBdmFpbGFibGU6MTQsdW5hY2NlcHRlZFBvbGljeToxNSx1bmFjY2VwdGVkRXh0ZW5zaW9uOjE2LGFkZEluZm9Ob3RBdmFpbGFibGU6MTcsc3lzdGVtRmFpbHVyZToyNX07S0pVUi5hc24xLnRzcC5BYnN0cmFjdFRTQUFkYXB0ZXI9ZnVuY3Rpb24oYSl7dGhpcy5nZXRUU1RIZXg9ZnVuY3Rpb24oYyxiKXt0aHJvd1wibm90IGltcGxlbWVudGVkIHlldFwifX07S0pVUi5hc24xLnRzcC5TaW1wbGVUU0FBZGFwdGVyPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS50c3AuU2ltcGxlVFNBQWRhcHRlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5wYXJhbXM9bnVsbDt0aGlzLnNlcmlhbD0wO3RoaXMuZ2V0VFNUSGV4PWZ1bmN0aW9uKGMsYil7dmFyIGU9S0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGMsYik7dGhpcy5wYXJhbXMudHN0SW5mby5tZXNzYWdlSW1wcmludD17aGFzaEFsZzpiLGhhc2hWYWx1ZTplfTt0aGlzLnBhcmFtcy50c3RJbmZvLnNlcmlhbE51bWJlcj17XCJpbnRcIjp0aGlzLnNlcmlhbCsrfTt2YXIgZD1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwMDAwMDAwMCk7dGhpcy5wYXJhbXMudHN0SW5mby5ub25jZT17XCJpbnRcIjpkfTt2YXIgZj1LSlVSLmFzbjEudHNwLlRTUFV0aWwubmV3VGltZVN0YW1wVG9rZW4odGhpcy5wYXJhbXMpO3JldHVybiBmLmdldENvbnRlbnRJbmZvRW5jb2RlZEhleCgpfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7dGhpcy5wYXJhbXM9YX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS50c3AuU2ltcGxlVFNBQWRhcHRlcixLSlVSLmFzbjEudHNwLkFic3RyYWN0VFNBQWRhcHRlcik7S0pVUi5hc24xLnRzcC5GaXhlZFRTQUFkYXB0ZXI9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLnRzcC5GaXhlZFRTQUFkYXB0ZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMucGFyYW1zPW51bGw7dGhpcy5nZXRUU1RIZXg9ZnVuY3Rpb24oYyxiKXt2YXIgZD1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoYyxiKTt0aGlzLnBhcmFtcy50c3RJbmZvLm1lc3NhZ2VJbXByaW50PXtoYXNoQWxnOmIsaGFzaFZhbHVlOmR9O3ZhciBlPUtKVVIuYXNuMS50c3AuVFNQVXRpbC5uZXdUaW1lU3RhbXBUb2tlbih0aGlzLnBhcmFtcyk7cmV0dXJuIGUuZ2V0Q29udGVudEluZm9FbmNvZGVkSGV4KCl9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXt0aGlzLnBhcmFtcz1hfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5GaXhlZFRTQUFkYXB0ZXIsS0pVUi5hc24xLnRzcC5BYnN0cmFjdFRTQUFkYXB0ZXIpO0tKVVIuYXNuMS50c3AuVFNQVXRpbD1uZXcgZnVuY3Rpb24oKXt9O0tKVVIuYXNuMS50c3AuVFNQVXRpbC5uZXdUaW1lU3RhbXBUb2tlbj1mdW5jdGlvbihiKXt2YXIgaj1LSlVSLmFzbjEuY21zO3ZhciBhPUtKVVIuYXNuMS50c3A7dmFyIGc9bmV3IGouU2lnbmVkRGF0YSgpO3ZhciBlPW5ldyBhLlRTVEluZm8oYi50c3RJbmZvKTt2YXIgZj1lLmdldEVuY29kZWRIZXgoKTtnLmRFbmNhcENvbnRlbnRJbmZvLnNldENvbnRlbnRWYWx1ZSh7aGV4OmZ9KTtnLmRFbmNhcENvbnRlbnRJbmZvLnNldENvbnRlbnRUeXBlKFwidHN0aW5mb1wiKTtpZih0eXBlb2YgYi5jZXJ0cz09XCJvYmplY3RcIil7Zm9yKHZhciBjPTA7YzxiLmNlcnRzLmxlbmd0aDtjKyspe2cuYWRkQ2VydGlmaWNhdGVzQnlQRU0oYi5jZXJ0c1tjXSl9fXZhciBkPWcuc2lnbmVySW5mb0xpc3RbMF07ZC5zZXRTaWduZXJJZGVudGlmaWVyKGIuc2lnbmVyQ2VydCk7ZC5zZXRGb3JDb250ZW50QW5kSGFzaCh7c2RPYmo6ZyxlY2lPYmo6Zy5kRW5jYXBDb250ZW50SW5mbyxoYXNoQWxnOmIuaGFzaEFsZ30pO3ZhciBoPW5ldyBqLlNpZ25pbmdDZXJ0aWZpY2F0ZSh7YXJyYXk6W2Iuc2lnbmVyQ2VydF19KTtkLmRTaWduZWRBdHRycy5hZGQoaCk7ZC5zaWduKGIuc2lnbmVyUHJ2S2V5LGIuc2lnQWxnKTtyZXR1cm4gZ307S0pVUi5hc24xLnRzcC5UU1BVdGlsLnBhcnNlVGltZVN0YW1wUmVxPWZ1bmN0aW9uKGQpe3ZhciBmPXt9O2YuY2VydHJlcT1mYWxzZTt2YXIgaD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihkLDApO2lmKGgubGVuZ3RoPDIpe3Rocm93XCJUaW1lU3RhbXBSZXEgbXVzdCBoYXZlIGF0IGxlYXN0IDIgaXRlbXNcIn12YXIgYz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsaFsxXSk7Zi5taT1LSlVSLmFzbjEudHNwLlRTUFV0aWwucGFyc2VNZXNzYWdlSW1wcmludChjKTtmb3IodmFyIGU9MjtlPGgubGVuZ3RoO2UrKyl7dmFyIGI9aFtlXTt2YXIgYT1kLnN1YnN0cihiLDIpO2lmKGE9PVwiMDZcIil7dmFyIGc9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZCxiKTtmLnBvbGljeT1BU04xSEVYLmhleHRvb2lkc3RyKGcpfWlmKGE9PVwiMDJcIil7Zi5ub25jZT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihkLGIpfWlmKGE9PVwiMDFcIil7Zi5jZXJ0cmVxPXRydWV9fXJldHVybiBmfTtLSlVSLmFzbjEudHNwLlRTUFV0aWwucGFyc2VNZXNzYWdlSW1wcmludD1mdW5jdGlvbihjKXt2YXIgaD17fTtpZihjLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJoZWFkIG9mIG1lc3NhZ2VJbXByaW50IGhleCBzaGFsbCBiZSAnMzAnXCJ9dmFyIGE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooYywwKTt2YXIgaT1BU04xSEVYLmdldERlY2VuZGFudEluZGV4QnlOdGhMaXN0KGMsMCxbMCwwXSk7dmFyIGQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooYyxpKTt2YXIgZT1BU04xSEVYLmhleHRvb2lkc3RyKGQpO3ZhciBnPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShlKTtpZihnPT1cIlwiKXt0aHJvd1wiaGFzaEFsZyBuYW1lIHVuZGVmaW5lZDogXCIrZX12YXIgYj1nO3ZhciBmPUFTTjFIRVguZ2V0RGVjZW5kYW50SW5kZXhCeU50aExpc3QoYywwLFsxXSk7aC5oYXNoQWxnPWI7aC5oYXNoVmFsdWU9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooYyxmKTtyZXR1cm4gaH07XG4vKiEgYXNuMWNhZGVzLTEuMC4wLmpzIChjKSAyMDEzLTIwMTQgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmFzbjE9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEpe0tKVVIuYXNuMT17fX1pZih0eXBlb2YgS0pVUi5hc24xLmNhZGVzPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xLmNhZGVzKXtLSlVSLmFzbjEuY2FkZXM9e319S0pVUi5hc24xLmNhZGVzLlNpZ25hdHVyZVBvbGljeUlkZW50aWZpZXI9ZnVuY3Rpb24oZSl7S0pVUi5hc24xLmNhZGVzLlNpZ25hdHVyZVBvbGljeUlkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuMTYuMi4xNVwiO3ZhciBiPUtKVVIuYXNuMTt2YXIgZD1LSlVSLmFzbjEuY2FkZXM7aWYodHlwZW9mIGUhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBlLm9pZD09XCJzdHJpbmdcIiYmdHlwZW9mIGUuaGFzaD09XCJvYmplY3RcIil7dmFyIGY9bmV3IGIuREVST2JqZWN0SWRlbnRpZmllcih7b2lkOmUub2lkfSk7dmFyIGE9bmV3IGQuT3RoZXJIYXNoQWxnQW5kVmFsdWUoZS5oYXNoKTt2YXIgYz1uZXcgYi5ERVJTZXF1ZW5jZSh7YXJyYXk6W2YsYV19KTt0aGlzLnZhbHVlTGlzdD1bY119fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNhZGVzLlNpZ25hdHVyZVBvbGljeUlkZW50aWZpZXIsS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUpO0tKVVIuYXNuMS5jYWRlcy5PdGhlckhhc2hBbGdBbmRWYWx1ZT1mdW5jdGlvbihiKXtLSlVSLmFzbjEuY2FkZXMuT3RoZXJIYXNoQWxnQW5kVmFsdWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYz1LSlVSLmFzbjEueDUwOTt0aGlzLmRBbGc9bnVsbDt0aGlzLmRIYXNoPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGQ9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmRBbGcsdGhpcy5kSGFzaF19KTt0aGlzLmhUTFY9ZC5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLmFsZz09XCJzdHJpbmdcIiYmdHlwZW9mIGIuaGFzaD09XCJzdHJpbmdcIil7dGhpcy5kQWxnPW5ldyBjLkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6Yi5hbGd9KTt0aGlzLmRIYXNoPW5ldyBhLkRFUk9jdGV0U3RyaW5nKHtoZXg6Yi5oYXNofSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNhZGVzLk90aGVySGFzaEFsZ0FuZFZhbHVlLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY2FkZXMuU2lnbmF0dXJlVGltZVN0YW1wPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5jYWRlcy5TaWduYXR1cmVUaW1lU3RhbXAuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuMTYuMi4xNFwiO3RoaXMudHN0SGV4PW51bGw7dmFyIGE9S0pVUi5hc24xO2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYy5yZXMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjLnJlcz09XCJzdHJpbmdcIiYmYy5yZXMubWF0Y2goL15bMC05QS1GYS1mXSskLykpe31lbHNle2lmKGMucmVzIGluc3RhbmNlb2YgS0pVUi5hc24xLkFTTjFPYmplY3Qpe31lbHNle3Rocm93XCJyZXMgcGFyYW0gc2hhbGwgYmUgQVNOMU9iamVjdCBvciBoZXggc3RyaW5nXCJ9fX1pZih0eXBlb2YgYy50c3QhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjLnRzdD09XCJzdHJpbmdcIiYmYy50c3QubWF0Y2goL15bMC05QS1GYS1mXSskLykpe3ZhciBiPW5ldyBhLkFTTjFPYmplY3QoKTt0aGlzLnRzdEhleD1jLnRzdDtiLmhUTFY9dGhpcy50c3RIZXg7Yi5nZXRFbmNvZGVkSGV4KCk7dGhpcy52YWx1ZUxpc3Q9W2JdfWVsc2V7aWYoYy50c3QgaW5zdGFuY2VvZiBLSlVSLmFzbjEuQVNOMU9iamVjdCl7fWVsc2V7dGhyb3dcInRzdCBwYXJhbSBzaGFsbCBiZSBBU04xT2JqZWN0IG9yIGhleCBzdHJpbmdcIn19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jYWRlcy5TaWduYXR1cmVUaW1lU3RhbXAsS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUpO0tKVVIuYXNuMS5jYWRlcy5Db21wbGV0ZUNlcnRpZmljYXRlUmVmcz1mdW5jdGlvbihjKXtLSlVSLmFzbjEuY2FkZXMuQ29tcGxldGVDZXJ0aWZpY2F0ZVJlZnMuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuMTYuMi4yMVwiO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEuY2FkZXM7dGhpcy5zZXRCeUFycmF5PWZ1bmN0aW9uKGQpe3RoaXMudmFsdWVMaXN0PVtdO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1uZXcgYi5PdGhlckNlcnRJRChkW2VdKTt0aGlzLnZhbHVlTGlzdC5wdXNoKGYpfX07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjPT1cIm9iamVjdFwiJiZ0eXBlb2YgYy5sZW5ndGg9PVwibnVtYmVyXCIpe3RoaXMuc2V0QnlBcnJheShjKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY2FkZXMuQ29tcGxldGVDZXJ0aWZpY2F0ZVJlZnMsS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUpO0tKVVIuYXNuMS5jYWRlcy5PdGhlckNlcnRJRD1mdW5jdGlvbihkKXtLSlVSLmFzbjEuY2FkZXMuT3RoZXJDZXJ0SUQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYz1LSlVSLmFzbjEuY21zO3ZhciBiPUtKVVIuYXNuMS5jYWRlczt0aGlzLmhhc0lzc3VlclNlcmlhbD10cnVlO3RoaXMuZE90aGVyQ2VydEhhc2g9bnVsbDt0aGlzLmRJc3N1ZXJTZXJpYWw9bnVsbDt0aGlzLnNldEJ5Q2VydFBFTT1mdW5jdGlvbihlKXt0aGlzLmRPdGhlckNlcnRIYXNoPW5ldyBiLk90aGVySGFzaChlKTtpZih0aGlzLmhhc0lzc3VlclNlcmlhbCl7dGhpcy5kSXNzdWVyU2VyaWFsPW5ldyBjLklzc3VlckFuZFNlcmlhbE51bWJlcihlKX19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaFRMViE9bnVsbCl7cmV0dXJuIHRoaXMuaFRMVn1pZih0aGlzLmRPdGhlckNlcnRIYXNoPT1udWxsKXt0aHJvd1wib3RoZXJDZXJ0SGFzaCBub3Qgc2V0XCJ9dmFyIGU9W3RoaXMuZE90aGVyQ2VydEhhc2hdO2lmKHRoaXMuZElzc3VlclNlcmlhbCE9bnVsbCl7ZS5wdXNoKHRoaXMuZElzc3VlclNlcmlhbCl9dmFyIGY9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmV9KTt0aGlzLmhUTFY9Zi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGQhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBkPT1cInN0cmluZ1wiJiZkLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKSE9LTEpe3RoaXMuc2V0QnlDZXJ0UEVNKGQpfWlmKHR5cGVvZiBkPT1cIm9iamVjdFwiKXtpZihkLmhhc2lzPT09ZmFsc2Upe3RoaXMuaGFzSXNzdWVyU2VyaWFsPWZhbHNlfWlmKHR5cGVvZiBkLmNlcnQ9PVwic3RyaW5nXCIpe3RoaXMuc2V0QnlDZXJ0UEVNKGQuY2VydCl9fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jYWRlcy5PdGhlckNlcnRJRCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLmNhZGVzLk90aGVySGFzaD1mdW5jdGlvbihjKXtLSlVSLmFzbjEuY2FkZXMuT3RoZXJIYXNoLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGI9S0pVUi5hc24xLmNhZGVzO3RoaXMuYWxnPVwic2hhMjU2XCI7dGhpcy5kT3RoZXJIYXNoPW51bGw7dGhpcy5zZXRCeUNlcnRQRU09ZnVuY3Rpb24oZCl7aWYoZC5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIik9PS0xKXt0aHJvd1wiY2VydFBFTSBub3QgdG8gc2VlbSBQRU0gZm9ybWF0XCJ9dmFyIGU9WDUwOS5wZW1Ub0hleChkKTt2YXIgZj1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoZSx0aGlzLmFsZyk7dGhpcy5kT3RoZXJIYXNoPW5ldyBiLk90aGVySGFzaEFsZ0FuZFZhbHVlKHthbGc6dGhpcy5hbGcsaGFzaDpmfSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuZE90aGVySGFzaD09bnVsbCl7dGhyb3dcIk90aGVySGFzaCBub3Qgc2V0XCJ9cmV0dXJuIHRoaXMuZE90aGVySGFzaC5nZXRFbmNvZGVkSGV4KCl9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYz09XCJzdHJpbmdcIil7aWYoYy5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIikhPS0xKXt0aGlzLnNldEJ5Q2VydFBFTShjKX1lbHNle2lmKGMubWF0Y2goL15bMC05QS1GYS1mXSskLykpe3RoaXMuZE90aGVySGFzaD1uZXcgYS5ERVJPY3RldFN0cmluZyh7aGV4OmN9KX1lbHNle3Rocm93XCJ1bnN1cHBvcnRlZCBzdHJpbmcgdmFsdWUgZm9yIHBhcmFtc1wifX19ZWxzZXtpZih0eXBlb2YgYz09XCJvYmplY3RcIil7aWYodHlwZW9mIGMuY2VydD09XCJzdHJpbmdcIil7aWYodHlwZW9mIGMuYWxnPT1cInN0cmluZ1wiKXt0aGlzLmFsZz1jLmFsZ310aGlzLnNldEJ5Q2VydFBFTShjLmNlcnQpfWVsc2V7dGhpcy5kT3RoZXJIYXNoPW5ldyBiLk90aGVySGFzaEFsZ0FuZFZhbHVlKGMpfX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNhZGVzLk90aGVySGFzaCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLmNhZGVzLkNBZEVTVXRpbD1uZXcgZnVuY3Rpb24oKXt9O0tKVVIuYXNuMS5jYWRlcy5DQWRFU1V0aWwuYWRkU2lnVFM9ZnVuY3Rpb24oYyxiLGEpe307S0pVUi5hc24xLmNhZGVzLkNBZEVTVXRpbC5wYXJzZVNpZ25lZERhdGFGb3JBZGRpbmdVbnNpZ25lZD1mdW5jdGlvbihkKXt2YXIgcT1LSlVSLmFzbjE7dmFyIHA9S0pVUi5hc24xLmNtczt2YXIgYz1LSlVSLmFzbjEuY2FkZXMuQ0FkRVNVdGlsO3ZhciBhPXt9O2lmKEFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VExWQnlOdGhMaXN0KGQsMCxbMF0pIT1cIjA2MDkyYTg2NDg4NmY3MGQwMTA3MDJcIil7dGhyb3dcImhleCBpcyBub3QgQ01TIFNpZ25lZERhdGFcIn12YXIgcz1BU04xSEVYLmdldERlY2VuZGFudEluZGV4QnlOdGhMaXN0KGQsMCxbMSwwXSk7dmFyIGI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZCxzKTtpZihiLmxlbmd0aDw0KXt0aHJvd1wibnVtIG9mIFNpZ25lZERhdGEgZWxlbSBzaGFsbCBiZSA0IGF0IGxlYXN0XCJ9dmFyIGY9Yi5zaGlmdCgpO2EudmVyc2lvbj1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsZik7dmFyIGw9Yi5zaGlmdCgpO2EuYWxncz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsbCk7dmFyIG09Yi5zaGlmdCgpO2EuZW5jYXBjb250ZW50PUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxtKTthLmNlcnRzPW51bGw7YS5yZXZzPW51bGw7YS5zaT1bXTt2YXIgbj1iLnNoaWZ0KCk7aWYoZC5zdWJzdHIobiwyKT09XCJhMFwiKXthLmNlcnRzPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxuKTtuPWIuc2hpZnQoKX1pZihkLnN1YnN0cihuLDIpPT1cImExXCIpe2EucmV2cz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsbik7bj1iLnNoaWZ0KCl9dmFyIGs9bjtpZihkLnN1YnN0cihrLDIpIT1cIjMxXCIpe3Rocm93XCJDYW4ndCBmaW5kIHNpZ25lckluZm9zXCJ9dmFyIGo9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZCxrKTtmb3IodmFyIGg9MDtoPGoubGVuZ3RoO2grKyl7dmFyIG89altoXTt2YXIgZT1jLnBhcnNlU2lnbmVySW5mb0ZvckFkZGluZ1Vuc2lnbmVkKGQsbyxoKTthLnNpW2hdPWV9dmFyIGc9bnVsbDthLm9iaj1uZXcgcC5TaWduZWREYXRhKCk7Zz1uZXcgcS5BU04xT2JqZWN0KCk7Zy5oVExWPWEudmVyc2lvbjthLm9iai5kQ01TVmVyc2lvbj1nO2c9bmV3IHEuQVNOMU9iamVjdCgpO2cuaFRMVj1hLmFsZ3M7YS5vYmouZERpZ2VzdEFsZ3M9ZztnPW5ldyBxLkFTTjFPYmplY3QoKTtnLmhUTFY9YS5lbmNhcGNvbnRlbnQ7YS5vYmouZEVuY2FwQ29udGVudEluZm89ZztnPW5ldyBxLkFTTjFPYmplY3QoKTtnLmhUTFY9YS5jZXJ0czthLm9iai5kQ2VydHM9ZzthLm9iai5zaWduZXJJbmZvTGlzdD1bXTtmb3IodmFyIGg9MDtoPGEuc2kubGVuZ3RoO2grKyl7YS5vYmouc2lnbmVySW5mb0xpc3QucHVzaChhLnNpW2hdLm9iail9cmV0dXJuIGF9O0tKVVIuYXNuMS5jYWRlcy5DQWRFU1V0aWwucGFyc2VTaWduZXJJbmZvRm9yQWRkaW5nVW5zaWduZWQ9ZnVuY3Rpb24oZCxrLGEpe3ZhciBtPUtKVVIuYXNuMTt2YXIgbD1LSlVSLmFzbjEuY21zO3ZhciBiPXt9O3ZhciBlPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGQsayk7aWYoZS5sZW5ndGghPTYpe3Rocm93XCJub3Qgc3VwcG9ydGVkIGl0ZW1zIGZvciBTaWduZXJJbmZvICghPTYpXCJ9dmFyIGY9ZS5zaGlmdCgpO2IudmVyc2lvbj1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsZik7dmFyIG49ZS5zaGlmdCgpO2Iuc2k9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihkLG4pO3ZhciBoPWUuc2hpZnQoKTtiLmRpZ2FsZz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsaCk7dmFyIGM9ZS5zaGlmdCgpO2Iuc2F0dHJzPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxjKTt2YXIgaT1lLnNoaWZ0KCk7Yi5zaWdhbGc9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihkLGkpO3ZhciBqPWUuc2hpZnQoKTtiLnNpZz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsaik7Yi5zaWd2YWw9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZCxqKTt2YXIgZz1udWxsO2Iub2JqPW5ldyBsLlNpZ25lckluZm8oKTtnPW5ldyBtLkFTTjFPYmplY3QoKTtnLmhUTFY9Yi52ZXJzaW9uO2Iub2JqLmRDTVNWZXJzaW9uPWc7Zz1uZXcgbS5BU04xT2JqZWN0KCk7Zy5oVExWPWIuc2k7Yi5vYmouZFNpZ25lcklkZW50aWZpZXI9ZztnPW5ldyBtLkFTTjFPYmplY3QoKTtnLmhUTFY9Yi5kaWdhbGc7Yi5vYmouZERpZ2VzdEFsZ29yaXRobT1nO2c9bmV3IG0uQVNOMU9iamVjdCgpO2cuaFRMVj1iLnNhdHRycztiLm9iai5kU2lnbmVkQXR0cnM9ZztnPW5ldyBtLkFTTjFPYmplY3QoKTtnLmhUTFY9Yi5zaWdhbGc7Yi5vYmouZFNpZ0FsZz1nO2c9bmV3IG0uQVNOMU9iamVjdCgpO2cuaFRMVj1iLnNpZztiLm9iai5kU2lnPWc7Yi5vYmouZFVuc2lnbmVkQXR0cnM9bmV3IGwuQXR0cmlidXRlTGlzdCgpO3JldHVybiBifTtcbi8qISBhc24xY3NyLTEuMC4wLmpzIChjKSAyMDE1IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbmlmKHR5cGVvZiBLSlVSLmFzbjEuY3NyPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xLmNzcil7S0pVUi5hc24xLmNzcj17fX1LSlVSLmFzbjEuY3NyLkNlcnRpZmljYXRpb25SZXF1ZXN0PWZ1bmN0aW9uKGYpe0tKVVIuYXNuMS5jc3IuQ2VydGlmaWNhdGlvblJlcXVlc3Quc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGw7dmFyIGQ9bnVsbDt2YXIgZT1udWxsO3ZhciBjPW51bGw7dmFyIGE9bnVsbDt0aGlzLnNpZ249ZnVuY3Rpb24oaSxoKXtpZih0aGlzLnBydktleT09bnVsbCl7dGhpcy5wcnZLZXk9aH10aGlzLmFzbjFTaWduYXR1cmVBbGc9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6aX0pO3NpZz1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6aX0pO3NpZy5pbml0U2lnbih0aGlzLnBydktleSk7c2lnLnVwZGF0ZUhleCh0aGlzLmFzbjFDU1JJbmZvLmdldEVuY29kZWRIZXgoKSk7dGhpcy5oZXhTaWc9c2lnLnNpZ24oKTt0aGlzLmFzbjFTaWc9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrdGhpcy5oZXhTaWd9KTt2YXIgZz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5hc24xQ1NSSW5mbyx0aGlzLmFzbjFTaWduYXR1cmVBbGcsdGhpcy5hc24xU2lnXX0pO3RoaXMuaFRMVj1nLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9O3RoaXMuZ2V0UEVNU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGc9S0pVUi5hc24xLkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgodGhpcy5nZXRFbmNvZGVkSGV4KCksXCJDRVJUSUZJQ0FURSBSRVFVRVNUXCIpO3JldHVybiBnfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmlzTW9kaWZpZWQ9PWZhbHNlJiZ0aGlzLmhUTFYhPW51bGwpe3JldHVybiB0aGlzLmhUTFZ9dGhyb3dcIm5vdCBzaWduZWQgeWV0XCJ9O2lmKHR5cGVvZiBmIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgZi5jc3JpbmZvIT1cInVuZGVmaW5lZFwiKXt0aGlzLmFzbjFDU1JJbmZvPWYuY3NyaW5mb319fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY3NyLkNlcnRpZmljYXRpb25SZXF1ZXN0LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY3NyLkNlcnRpZmljYXRpb25SZXF1ZXN0SW5mbz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuY3NyLkNlcnRpZmljYXRpb25SZXF1ZXN0SW5mby5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5faW5pdGlhbGl6ZT1mdW5jdGlvbigpe3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO3RoaXMuYXNuMVZlcnNpb249bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtcImludFwiOjB9KTt0aGlzLmFzbjFTdWJqZWN0PW51bGw7dGhpcy5hc24xU3VialBLZXk9bnVsbDt0aGlzLmV4dGVuc2lvbnNBcnJheT1uZXcgQXJyYXkoKX07dGhpcy5zZXRTdWJqZWN0QnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFTdWJqZWN0PW5ldyBLSlVSLmFzbjEueDUwOS5YNTAwTmFtZShiKX07dGhpcy5zZXRTdWJqZWN0UHVibGljS2V5QnlHZXRLZXk9ZnVuY3Rpb24oYyl7dmFyIGI9S0VZVVRJTC5nZXRLZXkoYyk7dGhpcy5hc24xU3VialBLZXk9bmV3IEtKVVIuYXNuMS54NTA5LlN1YmplY3RQdWJsaWNLZXlJbmZvKGIpfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXkoKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVZlcnNpb24pO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xU3ViamVjdCk7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTdWJqUEtleSk7dmFyIGM9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6dGhpcy5leHRlbnNpb25zQXJyYXl9KTt2YXIgYj1uZXcgS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdCh7ZXhwbGljaXQ6ZmFsc2UsdGFnOlwiYTBcIixvYmo6Y30pO3RoaXMuYXNuMUFycmF5LnB1c2goYik7dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6dGhpcy5hc24xQXJyYXl9KTt0aGlzLmhUTFY9ZC5nZXRFbmNvZGVkSGV4KCk7dGhpcy5pc01vZGlmaWVkPWZhbHNlO3JldHVybiB0aGlzLmhUTFZ9O3RoaXMuX2luaXRpYWxpemUoKX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNzci5DZXJ0aWZpY2F0aW9uUmVxdWVzdEluZm8sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jc3IuQ1NSVXRpbD1uZXcgZnVuY3Rpb24oKXt9O0tKVVIuYXNuMS5jc3IuQ1NSVXRpbC5uZXdDU1JQRU09ZnVuY3Rpb24oZil7dmFyIGM9S0pVUi5hc24xLmNzcjtpZihmLnN1YmplY3Q9PT11bmRlZmluZWQpe3Rocm93XCJwYXJhbWV0ZXIgc3ViamVjdCB1bmRlZmluZWRcIn1pZihmLnNianB1YmtleT09PXVuZGVmaW5lZCl7dGhyb3dcInBhcmFtZXRlciBzYmpwdWJrZXkgdW5kZWZpbmVkXCJ9aWYoZi5zaWdhbGc9PT11bmRlZmluZWQpe3Rocm93XCJwYXJhbWV0ZXIgc2lnYWxnIHVuZGVmaW5lZFwifWlmKGYuc2JqcHJ2a2V5PT09dW5kZWZpbmVkKXt0aHJvd1wicGFyYW1ldGVyIHNianB1YmtleSB1bmRlZmluZWRcIn12YXIgYj1uZXcgYy5DZXJ0aWZpY2F0aW9uUmVxdWVzdEluZm8oKTtiLnNldFN1YmplY3RCeVBhcmFtKGYuc3ViamVjdCk7Yi5zZXRTdWJqZWN0UHVibGljS2V5QnlHZXRLZXkoZi5zYmpwdWJrZXkpO3ZhciBkPW5ldyBjLkNlcnRpZmljYXRpb25SZXF1ZXN0KHtjc3JpbmZvOmJ9KTt2YXIgYT1LRVlVVElMLmdldEtleShmLnNianBydmtleSk7ZC5zaWduKGYuc2lnYWxnLGEpO3ZhciBlPWQuZ2V0UEVNU3RyaW5nKCk7cmV0dXJuIGV9O1xuLyohIGFzbjFvY3NwLTEuMC4xLmpzIChjKSAyMDE2IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5hc24xPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xKXtLSlVSLmFzbjE9e319aWYodHlwZW9mIEtKVVIuYXNuMS5vY3NwPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xLm9jc3Ape0tKVVIuYXNuMS5vY3NwPXt9fUtKVVIuYXNuMS5vY3NwLkRFRkFVTFRfSEFTSD1cInNoYTFcIjtLSlVSLmFzbjEub2NzcC5DZXJ0SUQ9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLm9jc3AuQ2VydElELnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGU9S0pVUi5hc24xLng1MDk7dGhpcy5kSGFzaEFsZz1udWxsO3RoaXMuZElzc3Vlck5hbWVIYXNoPW51bGw7dGhpcy5kSXNzdWVyS2V5SGFzaD1udWxsO3RoaXMuZFNlcmlhbE51bWJlcj1udWxsO3RoaXMuc2V0QnlWYWx1ZT1mdW5jdGlvbihpLGgsZixnKXtpZihnPT09dW5kZWZpbmVkKXtnPUtKVVIuYXNuMS5vY3NwLkRFRkFVTFRfSEFTSH10aGlzLmRIYXNoQWxnPW5ldyBlLkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6Z30pO3RoaXMuZElzc3Vlck5hbWVIYXNoPW5ldyBhLkRFUk9jdGV0U3RyaW5nKHtoZXg6aX0pO3RoaXMuZElzc3VlcktleUhhc2g9bmV3IGEuREVST2N0ZXRTdHJpbmcoe2hleDpofSk7dGhpcy5kU2VyaWFsTnVtYmVyPW5ldyBhLkRFUkludGVnZXIoe2hleDpmfSl9O3RoaXMuc2V0QnlDZXJ0PWZ1bmN0aW9uKG0saSxrKXtpZihrPT09dW5kZWZpbmVkKXtrPUtKVVIuYXNuMS5vY3NwLkRFRkFVTFRfSEFTSH12YXIgZj1uZXcgWDUwOSgpO2YucmVhZENlcnRQRU0oaSk7dmFyIG49bmV3IFg1MDkoKTtuLnJlYWRDZXJ0UEVNKG0pO3ZhciBvPVg1MDkuZ2V0UHVibGljS2V5SW5mb1Byb3BPZkNlcnRQRU0obSk7dmFyIGw9by5rZXloZXg7dmFyIGc9Zi5nZXRTZXJpYWxOdW1iZXJIZXgoKTt2YXIgaD1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgobi5nZXRTdWJqZWN0SGV4KCksayk7dmFyIGo9S0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGwsayk7dGhpcy5zZXRCeVZhbHVlKGgsaixnLGspO3RoaXMuaG9nZT1mLmdldFNlcmlhbE51bWJlckhleCgpfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmRIYXNoQWxnPT09bnVsbCYmdGhpcy5kSXNzdWVyTmFtZUhhc2g9PT1udWxsJiZ0aGlzLmRJc3N1ZXJLZXlIYXNoPT09bnVsbCYmdGhpcy5kU2VyaWFsTnVtYmVyPT09bnVsbCl7dGhyb3dcIm5vdCB5ZXQgc2V0IHZhbHVlc1wifXZhciBmPVt0aGlzLmRIYXNoQWxnLHRoaXMuZElzc3Vlck5hbWVIYXNoLHRoaXMuZElzc3VlcktleUhhc2gsdGhpcy5kU2VyaWFsTnVtYmVyXTt2YXIgZz1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6Zn0pO3RoaXMuaFRMVj1nLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYyE9PVwidW5kZWZpbmVkXCIpe3ZhciBiPWM7aWYodHlwZW9mIGIuaXNzdWVyQ2VydCE9PVwidW5kZWZpbmVkXCImJnR5cGVvZiBiLnN1YmplY3RDZXJ0IT09XCJ1bmRlZmluZWRcIil7dmFyIGQ9S0pVUi5hc24xLm9jc3AuREVGQVVMVF9IQVNIO2lmKHR5cGVvZiBiLmFsZz09PVwidW5kZWZpbmVkXCIpe2Q9dW5kZWZpbmVkfXRoaXMuc2V0QnlDZXJ0KGIuaXNzdWVyQ2VydCxiLnN1YmplY3RDZXJ0LGQpfWVsc2V7aWYodHlwZW9mIGIubmFtZWhhc2ghPT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgYi5rZXloYXNoIT09XCJ1bmRlZmluZWRcIiYmdHlwZW9mIGIuc2VyaWFsIT09XCJ1bmRlZmluZWRcIil7dmFyIGQ9S0pVUi5hc24xLm9jc3AuREVGQVVMVF9IQVNIO2lmKHR5cGVvZiBiLmFsZz09PVwidW5kZWZpbmVkXCIpe2Q9dW5kZWZpbmVkfXRoaXMuc2V0QnlWYWx1ZShiLm5hbWVoYXNoLGIua2V5aGFzaCxiLnNlcmlhbCxkKX1lbHNle3Rocm93XCJpbnZhbGlkIGNvbnN0cnVjdG9yIGFyZ3VtZW50c1wifX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEub2NzcC5DZXJ0SUQsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5vY3NwLlJlcXVlc3Q9ZnVuY3Rpb24oYil7S0pVUi5hc24xLm9jc3AuUmVxdWVzdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5kUmVxQ2VydD1udWxsO3RoaXMuZEV4dD1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBjPVtdO2lmKHRoaXMuZFJlcUNlcnQ9PT1udWxsKXt0aHJvd1wicmVxQ2VydCBub3Qgc2V0XCJ9Yy5wdXNoKHRoaXMuZFJlcUNlcnQpO3ZhciBkPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OmN9KTt0aGlzLmhUTFY9ZC5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGIhPT1cInVuZGVmaW5lZFwiKXt2YXIgYT1uZXcgS0pVUi5hc24xLm9jc3AuQ2VydElEKGIpO3RoaXMuZFJlcUNlcnQ9YX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5vY3NwLlJlcXVlc3QsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5vY3NwLlRCU1JlcXVlc3Q9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLm9jc3AuVEJTUmVxdWVzdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy52ZXJzaW9uPTA7dGhpcy5kUmVxdWVzdG9yTmFtZT1udWxsO3RoaXMuZFJlcXVlc3RMaXN0PVtdO3RoaXMuZFJlcXVlc3RFeHQ9bnVsbDt0aGlzLnNldFJlcXVlc3RMaXN0QnlQYXJhbT1mdW5jdGlvbihkKXt2YXIgYj1bXTtmb3IodmFyIGM9MDtjPGQubGVuZ3RoO2MrKyl7dmFyIGU9bmV3IEtKVVIuYXNuMS5vY3NwLlJlcXVlc3QoZFswXSk7Yi5wdXNoKGUpfXRoaXMuZFJlcXVlc3RMaXN0PWJ9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBiPVtdO2lmKHRoaXMudmVyc2lvbiE9PTApe3Rocm93XCJub3Qgc3VwcG9ydGVkIHZlcnNpb246IFwiK3RoaXMudmVyc2lvbn1pZih0aGlzLmRSZXF1ZXN0b3JOYW1lIT09bnVsbCl7dGhyb3dcInJlcXVlc3Rvck5hbWUgbm90IHN1cHBvcnRlZFwifXZhciBkPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OnRoaXMuZFJlcXVlc3RMaXN0fSk7Yi5wdXNoKGQpO2lmKHRoaXMuZFJlcXVlc3RFeHQhPT1udWxsKXt0aHJvd1wicmVxdWVzdEV4dGVuc2lvbnMgbm90IHN1cHBvcnRlZFwifXZhciBjPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OmJ9KTt0aGlzLmhUTFY9Yy5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGEhPT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5yZXFMaXN0IT09XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRSZXF1ZXN0TGlzdEJ5UGFyYW0oYS5yZXFMaXN0KX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEub2NzcC5UQlNSZXF1ZXN0LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEub2NzcC5PQ1NQUmVxdWVzdD1mdW5jdGlvbihiKXtLSlVSLmFzbjEub2NzcC5PQ1NQUmVxdWVzdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5kVGJzUmVxdWVzdD1udWxsO3RoaXMuZE9wdGlvbmFsU2lnbmF0dXJlPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGM9W107aWYodGhpcy5kVGJzUmVxdWVzdCE9PW51bGwpe2MucHVzaCh0aGlzLmRUYnNSZXF1ZXN0KX1lbHNle3Rocm93XCJ0YnNSZXF1ZXN0IG5vdCBzZXRcIn1pZih0aGlzLmRPcHRpb25hbFNpZ25hdHVyZSE9PW51bGwpe3Rocm93XCJvcHRpb25hbFNpZ25hdHVyZSBub3Qgc3VwcG9ydGVkXCJ9dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6Y30pO3RoaXMuaFRMVj1kLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYiE9PVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLnJlcUxpc3QhPT1cInVuZGVmaW5lZFwiKXt2YXIgYT1uZXcgS0pVUi5hc24xLm9jc3AuVEJTUmVxdWVzdChiKTt0aGlzLmRUYnNSZXF1ZXN0PWF9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLm9jc3AuT0NTUFJlcXVlc3QsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5vY3NwLk9DU1BVdGlsPXt9O0tKVVIuYXNuMS5vY3NwLk9DU1BVdGlsLmdldFJlcXVlc3RIZXg9ZnVuY3Rpb24oYSxiLGUpe2lmKGU9PT11bmRlZmluZWQpe2U9S0pVUi5hc24xLm9jc3AuREVGQVVMVF9IQVNIfXZhciBkPXthbGc6ZSxpc3N1ZXJDZXJ0OmEsc3ViamVjdENlcnQ6Yn07dmFyIGM9bmV3IEtKVVIuYXNuMS5vY3NwLk9DU1BSZXF1ZXN0KHtyZXFMaXN0OltkXX0pO3JldHVybiBjLmdldEVuY29kZWRIZXgoKX07S0pVUi5hc24xLm9jc3AuT0NTUFV0aWwuZ2V0T0NTUFJlc3BvbnNlSW5mbz1mdW5jdGlvbihmKXt2YXIgYT17fTt0cnl7dmFyIGI9QVNOMUhFWC5nZXRWYnlMaXN0KGYsMCxbMF0sXCIwYVwiKTthLnJlc3BvbnNlU3RhdHVzPXBhcnNlSW50KGIsMTYpfWNhdGNoKGQpe31pZihhLnJlc3BvbnNlU3RhdHVzIT09MCl7cmV0dXJuIGF9dHJ5e3ZhciBlPUFTTjFIRVguZ2V0RGVjZW5kYW50SW5kZXhCeU50aExpc3QoZiwwLFsxLDAsMSwwLDAsMiwwLDFdKTtpZihmLnN1YnN0cihlLDIpPT09XCI4MFwiKXthLmNlcnRTdGF0dXM9XCJnb29kXCJ9ZWxzZXtpZihmLnN1YnN0cihlLDIpPT09XCJhMVwiKXthLmNlcnRTdGF0dXM9XCJyZXZva2VkXCI7YS5yZXZvY2F0aW9uVGltZT1oZXh0b3V0ZjgoQVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KGYsZSxbMF0pKX1lbHNle2lmKGYuc3Vic3RyKGUsMik9PT1cIjgyXCIpe2EuY2VydFN0YXR1cz1cInVua25vd25cIn19fX1jYXRjaChkKXt9dHJ5e3ZhciBjPUFTTjFIRVguZ2V0RGVjZW5kYW50SW5kZXhCeU50aExpc3QoZiwwLFsxLDAsMSwwLDAsMiwwLDJdKTthLnRoaXNVcGRhdGU9aGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGYsYykpfWNhdGNoKGQpe310cnl7dmFyIGc9QVNOMUhFWC5nZXREZWNlbmRhbnRJbmRleEJ5TnRoTGlzdChmLDAsWzEsMCwxLDAsMCwyLDAsM10pO2lmKGYuc3Vic3RyKGcsMik9PT1cImEwXCIpe2EubmV4dFVwZGF0ZT1oZXh0b3V0ZjgoQVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KGYsZyxbMF0pKX19Y2F0Y2goZCl7fXJldHVybiBhfTtcbi8qISBiYXNlNjR4LTEuMS43IChjKSAyMDEyLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xudmFyIEtKVVI7aWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmxhbmc9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmxhbmcpe0tKVVIubGFuZz17fX1LSlVSLmxhbmcuU3RyaW5nPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBCYXNlNjR4KCl7fWZ1bmN0aW9uIHN0b0JBKGQpe3ZhciBiPW5ldyBBcnJheSgpO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGg7YysrKXtiW2NdPWQuY2hhckNvZGVBdChjKX1yZXR1cm4gYn1mdW5jdGlvbiBCQXRvcyhiKXt2YXIgZD1cIlwiO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtkPWQrU3RyaW5nLmZyb21DaGFyQ29kZShiW2NdKX1yZXR1cm4gZH1mdW5jdGlvbiBCQXRvaGV4KGIpe3ZhciBlPVwiXCI7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBjPWJbZF0udG9TdHJpbmcoMTYpO2lmKGMubGVuZ3RoPT0xKXtjPVwiMFwiK2N9ZT1lK2N9cmV0dXJuIGV9ZnVuY3Rpb24gc3RvaGV4KGEpe3JldHVybiBCQXRvaGV4KHN0b0JBKGEpKX1mdW5jdGlvbiBzdG9iNjQoYSl7cmV0dXJuIGhleDJiNjQoc3RvaGV4KGEpKX1mdW5jdGlvbiBzdG9iNjR1KGEpe3JldHVybiBiNjR0b2I2NHUoaGV4MmI2NChzdG9oZXgoYSkpKX1mdW5jdGlvbiBiNjR1dG9zKGEpe3JldHVybiBCQXRvcyhiNjR0b0JBKGI2NHV0b2I2NChhKSkpfWZ1bmN0aW9uIGI2NHRvYjY0dShhKXthPWEucmVwbGFjZSgvXFw9L2csXCJcIik7YT1hLnJlcGxhY2UoL1xcKy9nLFwiLVwiKTthPWEucmVwbGFjZSgvXFwvL2csXCJfXCIpO3JldHVybiBhfWZ1bmN0aW9uIGI2NHV0b2I2NChhKXtpZihhLmxlbmd0aCU0PT0yKXthPWErXCI9PVwifWVsc2V7aWYoYS5sZW5ndGglND09Myl7YT1hK1wiPVwifX1hPWEucmVwbGFjZSgvLS9nLFwiK1wiKTthPWEucmVwbGFjZSgvXy9nLFwiL1wiKTtyZXR1cm4gYX1mdW5jdGlvbiBoZXh0b2I2NHUoYSl7aWYoYS5sZW5ndGglMj09MSl7YT1cIjBcIithfXJldHVybiBiNjR0b2I2NHUoaGV4MmI2NChhKSl9ZnVuY3Rpb24gYjY0dXRvaGV4KGEpe3JldHVybiBiNjR0b2hleChiNjR1dG9iNjQoYSkpfXZhciB1dGY4dG9iNjR1LGI2NHV0b3V0Zjg7aWYodHlwZW9mIEJ1ZmZlcj09PVwiZnVuY3Rpb25cIil7dXRmOHRvYjY0dT1mdW5jdGlvbihhKXtyZXR1cm4gYjY0dG9iNjR1KG5ldyBCdWZmZXIoYSxcInV0ZjhcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpfTtiNjR1dG91dGY4PWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgQnVmZmVyKGI2NHV0b2I2NChhKSxcImJhc2U2NFwiKS50b1N0cmluZyhcInV0ZjhcIil9fWVsc2V7dXRmOHRvYjY0dT1mdW5jdGlvbihhKXtyZXR1cm4gaGV4dG9iNjR1KHVyaWNtcHRvaGV4KGVuY29kZVVSSUNvbXBvbmVudEFsbChhKSkpfTtiNjR1dG91dGY4PWZ1bmN0aW9uKGEpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoaGV4dG91cmljbXAoYjY0dXRvaGV4KGEpKSl9fWZ1bmN0aW9uIHV0Zjh0b2I2NChhKXtyZXR1cm4gaGV4MmI2NCh1cmljbXB0b2hleChlbmNvZGVVUklDb21wb25lbnRBbGwoYSkpKX1mdW5jdGlvbiBiNjR0b3V0ZjgoYSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChoZXh0b3VyaWNtcChiNjR0b2hleChhKSkpfWZ1bmN0aW9uIHV0Zjh0b2hleChhKXtyZXR1cm4gdXJpY21wdG9oZXgoZW5jb2RlVVJJQ29tcG9uZW50QWxsKGEpKX1mdW5jdGlvbiBoZXh0b3V0ZjgoYSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChoZXh0b3VyaWNtcChhKSl9ZnVuY3Rpb24gaGV4dG9yc3RyKGMpe3ZhciBiPVwiXCI7Zm9yKHZhciBhPTA7YTxjLmxlbmd0aC0xO2ErPTIpe2IrPVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYy5zdWJzdHIoYSwyKSwxNikpfXJldHVybiBifWZ1bmN0aW9uIHJzdHJ0b2hleChjKXt2YXIgYT1cIlwiO2Zvcih2YXIgYj0wO2I8Yy5sZW5ndGg7YisrKXthKz0oXCIwXCIrYy5jaGFyQ29kZUF0KGIpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfXJldHVybiBhfWZ1bmN0aW9uIGhleHRvYjY0KGEpe3JldHVybiBoZXgyYjY0KGEpfWZ1bmN0aW9uIGhleHRvYjY0bmwoYil7dmFyIGE9aGV4dG9iNjQoYik7dmFyIGM9YS5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTtjPWMucmVwbGFjZSgvXFxyXFxuJC8sXCJcIik7cmV0dXJuIGN9ZnVuY3Rpb24gYjY0bmx0b2hleChiKXt2YXIgYT1iLnJlcGxhY2UoL1teMC05QS1aYS16XFwvKz1dKi9nLFwiXCIpO3ZhciBjPWI2NHRvaGV4KGEpO3JldHVybiBjfWZ1bmN0aW9uIHVyaWNtcHRvaGV4KGEpe3JldHVybiBhLnJlcGxhY2UoLyUvZyxcIlwiKX1mdW5jdGlvbiBoZXh0b3VyaWNtcChhKXtyZXR1cm4gYS5yZXBsYWNlKC8oLi4pL2csXCIlJDFcIil9ZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50QWxsKGEpe3ZhciBkPWVuY29kZVVSSUNvbXBvbmVudChhKTt2YXIgYj1cIlwiO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGg7YysrKXtpZihkW2NdPT1cIiVcIil7Yj1iK2Quc3Vic3RyKGMsMyk7Yz1jKzJ9ZWxzZXtiPWIrXCIlXCIrc3RvaGV4KGRbY10pfX1yZXR1cm4gYn1mdW5jdGlvbiBuZXdsaW5lX3RvVW5peChhKXthPWEucmVwbGFjZSgvXFxyXFxuL21nLFwiXFxuXCIpO3JldHVybiBhfWZ1bmN0aW9uIG5ld2xpbmVfdG9Eb3MoYSl7YT1hLnJlcGxhY2UoL1xcclxcbi9tZyxcIlxcblwiKTthPWEucmVwbGFjZSgvXFxuL21nLFwiXFxyXFxuXCIpO3JldHVybiBhfUtKVVIubGFuZy5TdHJpbmcuaXNJbnRlZ2VyPWZ1bmN0aW9uKGEpe2lmKGEubWF0Y2goL15bMC05XSskLykpe3JldHVybiB0cnVlfWVsc2V7aWYoYS5tYXRjaCgvXi1bMC05XSskLykpe3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX19O0tKVVIubGFuZy5TdHJpbmcuaXNIZXg9ZnVuY3Rpb24oYSl7aWYoYS5sZW5ndGglMj09MCYmKGEubWF0Y2goL15bMC05YS1mXSskLyl8fGEubWF0Y2goL15bMC05QS1GXSskLykpKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19O0tKVVIubGFuZy5TdHJpbmcuaXNCYXNlNjQ9ZnVuY3Rpb24oYSl7YT1hLnJlcGxhY2UoL1xccysvZyxcIlwiKTtpZihhLm1hdGNoKC9eWzAtOUEtWmEteitcXC9dKz17MCwzfSQvKSYmYS5sZW5ndGglND09MCl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fTtLSlVSLmxhbmcuU3RyaW5nLmlzQmFzZTY0VVJMPWZ1bmN0aW9uKGEpe2lmKGEubWF0Y2goL1srLz1dLykpe3JldHVybiBmYWxzZX1hPWI2NHV0b2I2NChhKTtyZXR1cm4gS0pVUi5sYW5nLlN0cmluZy5pc0Jhc2U2NChhKX07S0pVUi5sYW5nLlN0cmluZy5pc0ludGVnZXJBcnJheT1mdW5jdGlvbihhKXthPWEucmVwbGFjZSgvXFxzKy9nLFwiXCIpO2lmKGEubWF0Y2goL15cXFtbMC05LF0rXFxdJC8pKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19O2Z1bmN0aW9uIGludGFyeXN0cnRvaGV4KGIpe2I9Yi5yZXBsYWNlKC9eXFxzKlxcW1xccyovLFwiXCIpO2I9Yi5yZXBsYWNlKC9cXHMqXFxdXFxzKiQvLFwiXCIpO2I9Yi5yZXBsYWNlKC9cXHMqL2csXCJcIik7dHJ5e3ZhciBjPWIuc3BsaXQoLywvKS5tYXAoZnVuY3Rpb24oZyxlLGgpe3ZhciBmPXBhcnNlSW50KGcpO2lmKGY8MHx8MjU1PGYpe3Rocm93XCJpbnRlZ2VyIG5vdCBpbiByYW5nZSAwLTI1NVwifXZhciBkPShcIjAwXCIrZi50b1N0cmluZygxNikpLnNsaWNlKC0yKTtyZXR1cm4gZH0pLmpvaW4oXCJcIik7cmV0dXJuIGN9Y2F0Y2goYSl7dGhyb3dcIm1hbGZvcm1lZCBpbnRlZ2VyIGFycmF5IHN0cmluZzogXCIrYX19dmFyIHN0cmRpZmZpZHg9ZnVuY3Rpb24oYyxhKXt2YXIgZD1jLmxlbmd0aDtpZihjLmxlbmd0aD5hLmxlbmd0aCl7ZD1hLmxlbmd0aH1mb3IodmFyIGI9MDtiPGQ7YisrKXtpZihjLmNoYXJDb2RlQXQoYikhPWEuY2hhckNvZGVBdChiKSl7cmV0dXJuIGJ9fWlmKGMubGVuZ3RoIT1hLmxlbmd0aCl7cmV0dXJuIGR9cmV0dXJuIC0xfTtcbi8qISBjcnlwdG8tMS4xLjkuanMgKGMpIDIwMTMtMjAxNiBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuICovXG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuY3J5cHRvPT1cInVuZGVmaW5lZFwifHwhS0pVUi5jcnlwdG8pe0tKVVIuY3J5cHRvPXt9fUtKVVIuY3J5cHRvLlV0aWw9bmV3IGZ1bmN0aW9uKCl7dGhpcy5ESUdFU1RJTkZPSEVBRD17c2hhMTpcIjMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNFwiLHNoYTIyNDpcIjMwMmQzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwNDA1MDAwNDFjXCIsc2hhMjU2OlwiMzAzMTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAxMDUwMDA0MjBcIixzaGEzODQ6XCIzMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMFwiLHNoYTUxMjpcIjMwNTEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMzA1MDAwNDQwXCIsbWQyOlwiMzAyMDMwMGMwNjA4MmE4NjQ4ODZmNzBkMDIwMjA1MDAwNDEwXCIsbWQ1OlwiMzAyMDMwMGMwNjA4MmE4NjQ4ODZmNzBkMDIwNTA1MDAwNDEwXCIscmlwZW1kMTYwOlwiMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0XCIsfTt0aGlzLkRFRkFVTFRQUk9WSURFUj17bWQ1OlwiY3J5cHRvanNcIixzaGExOlwiY3J5cHRvanNcIixzaGEyMjQ6XCJjcnlwdG9qc1wiLHNoYTI1NjpcImNyeXB0b2pzXCIsc2hhMzg0OlwiY3J5cHRvanNcIixzaGE1MTI6XCJjcnlwdG9qc1wiLHJpcGVtZDE2MDpcImNyeXB0b2pzXCIsaG1hY21kNTpcImNyeXB0b2pzXCIsaG1hY3NoYTE6XCJjcnlwdG9qc1wiLGhtYWNzaGEyMjQ6XCJjcnlwdG9qc1wiLGhtYWNzaGEyNTY6XCJjcnlwdG9qc1wiLGhtYWNzaGEzODQ6XCJjcnlwdG9qc1wiLGhtYWNzaGE1MTI6XCJjcnlwdG9qc1wiLGhtYWNyaXBlbWQxNjA6XCJjcnlwdG9qc1wiLE1ENXdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEzODR3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixSSVBFTUQxNjB3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixNRDV3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTIyNHdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEzODR3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTUxMndpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEExd2l0aERTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aERTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aERTQTpcImNyeXB0b2pzL2pzcnNhXCIsTUQ1d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEEzODR3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIix9O3RoaXMuQ1JZUFRPSlNNRVNTQUdFRElHRVNUTkFNRT17bWQ1OkNyeXB0b0pTLmFsZ28uTUQ1LHNoYTE6Q3J5cHRvSlMuYWxnby5TSEExLHNoYTIyNDpDcnlwdG9KUy5hbGdvLlNIQTIyNCxzaGEyNTY6Q3J5cHRvSlMuYWxnby5TSEEyNTYsc2hhMzg0OkNyeXB0b0pTLmFsZ28uU0hBMzg0LHNoYTUxMjpDcnlwdG9KUy5hbGdvLlNIQTUxMixyaXBlbWQxNjA6Q3J5cHRvSlMuYWxnby5SSVBFTUQxNjB9O3RoaXMuZ2V0RGlnZXN0SW5mb0hleD1mdW5jdGlvbihhLGIpe2lmKHR5cGVvZiB0aGlzLkRJR0VTVElORk9IRUFEW2JdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiYWxnIG5vdCBzdXBwb3J0ZWQgaW4gVXRpbC5ESUdFU1RJTkZPSEVBRDogXCIrYn1yZXR1cm4gdGhpcy5ESUdFU1RJTkZPSEVBRFtiXSthfTt0aGlzLmdldFBhZGRlZERpZ2VzdEluZm9IZXg9ZnVuY3Rpb24oaCxhLGope3ZhciBjPXRoaXMuZ2V0RGlnZXN0SW5mb0hleChoLGEpO3ZhciBkPWovNDtpZihjLmxlbmd0aCsyMj5kKXt0aHJvd1wia2V5IGlzIHRvbyBzaG9ydCBmb3IgU2lnQWxnOiBrZXlsZW49XCIraitcIixcIithfXZhciBiPVwiMDAwMVwiO3ZhciBrPVwiMDBcIitjO3ZhciBnPVwiXCI7dmFyIGw9ZC1iLmxlbmd0aC1rLmxlbmd0aDtmb3IodmFyIGY9MDtmPGw7Zis9Mil7Zys9XCJmZlwifXZhciBlPWIrZytrO3JldHVybiBlfTt0aGlzLmhhc2hTdHJpbmc9ZnVuY3Rpb24oYSxjKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOmN9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuaGFzaEhleD1mdW5jdGlvbihiLGMpe3ZhciBhPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6Y30pO3JldHVybiBhLmRpZ2VzdEhleChiKX07dGhpcy5zaGExPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGExXCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuc2hhMjU2PWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGEyNTZcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5zaGEyNTZIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTI1NlwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0SGV4KGEpfTt0aGlzLnNoYTUxMj1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwic2hhNTEyXCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuc2hhNTEySGV4PWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGE1MTJcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdEhleChhKX07dGhpcy5tZDU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcIm1kNVwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0U3RyaW5nKGEpfTt0aGlzLnJpcGVtZDE2MD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwicmlwZW1kMTYwXCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuZ2V0Q3J5cHRvSlNNREJ5TmFtZT1mdW5jdGlvbihhKXt9fTtLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0PWZ1bmN0aW9uKGMpe3ZhciBiPW51bGw7dmFyIGE9bnVsbDt2YXIgZD1udWxsO3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24oZyxmKXtpZihnIT1udWxsJiZmPT09dW5kZWZpbmVkKXtmPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW2ddfWlmKFwiOm1kNTpzaGExOnNoYTIyNDpzaGEyNTY6c2hhMzg0OnNoYTUxMjpyaXBlbWQxNjA6XCIuaW5kZXhPZihnKSE9LTEmJmY9PVwiY3J5cHRvanNcIil7dHJ5e3RoaXMubWQ9S0pVUi5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW2ddLmNyZWF0ZSgpfWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrZytcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihoKXt2YXIgaT1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGgpO3RoaXMubWQudXBkYXRlKGkpfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3ZhciBoPXRoaXMubWQuZmluYWxpemUoKTtyZXR1cm4gaC50b1N0cmluZyhDcnlwdG9KUy5lbmMuSGV4KX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVTdHJpbmcoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9O3RoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlSGV4KGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfX1pZihcIjpzaGEyNTY6XCIuaW5kZXhPZihnKSE9LTEmJmY9PVwic2pjbFwiKXt0cnl7dGhpcy5tZD1uZXcgc2pjbC5oYXNoLnNoYTI1NigpfWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrZytcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihpKXt2YXIgaD1zamNsLmNvZGVjLmhleC50b0JpdHMoaSk7dGhpcy5tZC51cGRhdGUoaCl9O3RoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7dmFyIGg9dGhpcy5tZC5maW5hbGl6ZSgpO3JldHVybiBzamNsLmNvZGVjLmhleC5mcm9tQml0cyhoKX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVTdHJpbmcoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9O3RoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlSGV4KGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfX19O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGUpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oZSl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3Rocm93XCJkaWdlc3QoKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oZSl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbihlKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O2lmKGMhPT11bmRlZmluZWQpe2lmKGMuYWxnIT09dW5kZWZpbmVkKXt0aGlzLmFsZ05hbWU9Yy5hbGc7aWYoYy5wcm92PT09dW5kZWZpbmVkKXt0aGlzLnByb3ZOYW1lPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV19dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSl9fX07S0pVUi5jcnlwdG8uTWFjPWZ1bmN0aW9uKGQpe3ZhciBmPW51bGw7dmFyIGM9bnVsbDt2YXIgYT1udWxsO3ZhciBlPW51bGw7dmFyIGI9bnVsbDt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyPWZ1bmN0aW9uKGssaSl7az1rLnRvTG93ZXJDYXNlKCk7aWYoaz09bnVsbCl7az1cImhtYWNzaGExXCJ9az1rLnRvTG93ZXJDYXNlKCk7aWYoay5zdWJzdHIoMCw0KSE9XCJobWFjXCIpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciB1bnN1cHBvcnRlZCBITUFDIGFsZzogXCIra31pZihpPT09dW5kZWZpbmVkKXtpPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW2tdfXRoaXMuYWxnUHJvdj1rK1wiL1wiK2k7dmFyIGc9ay5zdWJzdHIoNCk7aWYoXCI6bWQ1OnNoYTE6c2hhMjI0OnNoYTI1NjpzaGEzODQ6c2hhNTEyOnJpcGVtZDE2MDpcIi5pbmRleE9mKGcpIT0tMSYmaT09XCJjcnlwdG9qc1wiKXt0cnl7dmFyIGo9S0pVUi5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW2ddO3RoaXMubWFjPUNyeXB0b0pTLmFsZ28uSE1BQy5jcmVhdGUoaix0aGlzLnBhc3MpfWNhdGNoKGgpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBoYXNoQWxnPVwiK2crXCIvXCIraH10aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihsKXt0aGlzLm1hYy51cGRhdGUobCl9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGwpe3ZhciBtPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UobCk7dGhpcy5tYWMudXBkYXRlKG0pfTt0aGlzLmRvRmluYWw9ZnVuY3Rpb24oKXt2YXIgbD10aGlzLm1hYy5maW5hbGl6ZSgpO3JldHVybiBsLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5IZXgpfTt0aGlzLmRvRmluYWxTdHJpbmc9ZnVuY3Rpb24obCl7dGhpcy51cGRhdGVTdHJpbmcobCk7cmV0dXJuIHRoaXMuZG9GaW5hbCgpfTt0aGlzLmRvRmluYWxIZXg9ZnVuY3Rpb24obCl7dGhpcy51cGRhdGVIZXgobCk7cmV0dXJuIHRoaXMuZG9GaW5hbCgpfX19O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGcpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGcpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbD1mdW5jdGlvbigpe3Rocm93XCJkaWdlc3QoKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbFN0cmluZz1mdW5jdGlvbihnKXt0aHJvd1wiZGlnZXN0U3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fTt0aGlzLmRvRmluYWxIZXg9ZnVuY3Rpb24oZyl7dGhyb3dcImRpZ2VzdEhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5zZXRQYXNzd29yZD1mdW5jdGlvbihoKXtpZih0eXBlb2YgaD09XCJzdHJpbmdcIil7dmFyIGc9aDtpZihoLmxlbmd0aCUyPT0xfHwhaC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7Zz1yc3RydG9oZXgoaCl9dGhpcy5wYXNzPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoZyk7cmV0dXJufWlmKHR5cGVvZiBoIT1cIm9iamVjdFwiKXt0aHJvd1wiS0pVUi5jcnlwdG8uTWFjIHVuc3VwcG9ydGVkIHBhc3N3b3JkIHR5cGU6IFwiK2h9dmFyIGc9bnVsbDtpZihoLmhleCE9PXVuZGVmaW5lZCl7aWYoaC5oZXgubGVuZ3RoJTIhPTB8fCFoLmhleC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7dGhyb3dcIk1hYzogd3JvbmcgaGV4IHBhc3N3b3JkOiBcIitoLmhleH1nPWguaGV4fWlmKGgudXRmOCE9PXVuZGVmaW5lZCl7Zz11dGY4dG9oZXgoaC51dGY4KX1pZihoLnJzdHIhPT11bmRlZmluZWQpe2c9cnN0cnRvaGV4KGgucnN0cil9aWYoaC5iNjQhPT11bmRlZmluZWQpe2c9YjY0dG9oZXgoaC5iNjQpfWlmKGguYjY0dSE9PXVuZGVmaW5lZCl7Zz1iNjR1dG9oZXgoaC5iNjR1KX1pZihnPT1udWxsKXt0aHJvd1wiS0pVUi5jcnlwdG8uTWFjIHVuc3VwcG9ydGVkIHBhc3N3b3JkIHR5cGU6IFwiK2h9dGhpcy5wYXNzPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoZyl9O2lmKGQhPT11bmRlZmluZWQpe2lmKGQucGFzcyE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQYXNzd29yZChkLnBhc3MpfWlmKGQuYWxnIT09dW5kZWZpbmVkKXt0aGlzLmFsZ05hbWU9ZC5hbGc7aWYoZC5wcm92PT09dW5kZWZpbmVkKXt0aGlzLnByb3ZOYW1lPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV19dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSl9fX07S0pVUi5jcnlwdG8uU2lnbmF0dXJlPWZ1bmN0aW9uKG8pe3ZhciBxPW51bGw7dmFyIG49bnVsbDt2YXIgcj1udWxsO3ZhciBjPW51bGw7dmFyIGw9bnVsbDt2YXIgZD1udWxsO3ZhciBrPW51bGw7dmFyIGg9bnVsbDt2YXIgcD1udWxsO3ZhciBlPW51bGw7dmFyIGI9LTE7dmFyIGc9bnVsbDt2YXIgaj1udWxsO3ZhciBhPW51bGw7dmFyIGk9bnVsbDt2YXIgZj1udWxsO3RoaXMuX3NldEFsZ05hbWVzPWZ1bmN0aW9uKCl7dmFyIHM9dGhpcy5hbGdOYW1lLm1hdGNoKC9eKC4rKXdpdGgoLispJC8pO2lmKHMpe3RoaXMubWRBbGdOYW1lPXNbMV0udG9Mb3dlckNhc2UoKTt0aGlzLnB1YmtleUFsZ05hbWU9c1syXS50b0xvd2VyQ2FzZSgpfX07dGhpcy5femVyb1BhZGRpbmdPZlNpZ25hdHVyZT1mdW5jdGlvbih4LHcpe3ZhciB2PVwiXCI7dmFyIHQ9dy80LXgubGVuZ3RoO2Zvcih2YXIgdT0wO3U8dDt1Kyspe3Y9ditcIjBcIn1yZXR1cm4gdit4fTt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyPWZ1bmN0aW9uKHUsdCl7dGhpcy5fc2V0QWxnTmFtZXMoKTtpZih0IT1cImNyeXB0b2pzL2pzcnNhXCIpe3Rocm93XCJwcm92aWRlciBub3Qgc3VwcG9ydGVkOiBcIit0fWlmKFwiOm1kNTpzaGExOnNoYTIyNDpzaGEyNTY6c2hhMzg0OnNoYTUxMjpyaXBlbWQxNjA6XCIuaW5kZXhPZih0aGlzLm1kQWxnTmFtZSkhPS0xKXt0cnl7dGhpcy5tZD1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOnRoaXMubWRBbGdOYW1lfSl9Y2F0Y2gocyl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGFsZz1cIit0aGlzLm1kQWxnTmFtZStcIi9cIitzfXRoaXMuaW5pdD1mdW5jdGlvbih3LHgpe3ZhciB5PW51bGw7dHJ5e2lmKHg9PT11bmRlZmluZWQpe3k9S0VZVVRJTC5nZXRLZXkodyl9ZWxzZXt5PUtFWVVUSUwuZ2V0S2V5KHcseCl9fWNhdGNoKHYpe3Rocm93XCJpbml0IGZhaWxlZDpcIit2fWlmKHkuaXNQcml2YXRlPT09dHJ1ZSl7dGhpcy5wcnZLZXk9eTt0aGlzLnN0YXRlPVwiU0lHTlwifWVsc2V7aWYoeS5pc1B1YmxpYz09PXRydWUpe3RoaXMucHViS2V5PXk7dGhpcy5zdGF0ZT1cIlZFUklGWVwifWVsc2V7dGhyb3dcImluaXQgZmFpbGVkLjpcIit5fX19O3RoaXMuaW5pdFNpZ249ZnVuY3Rpb24odil7aWYodHlwZW9mIHYuZWNwcnZoZXg9PVwic3RyaW5nXCImJnR5cGVvZiB2LmVjY3VydmVuYW1lPT1cInN0cmluZ1wiKXt0aGlzLmVjcHJ2aGV4PXYuZWNwcnZoZXg7dGhpcy5lY2N1cnZlbmFtZT12LmVjY3VydmVuYW1lfWVsc2V7dGhpcy5wcnZLZXk9dn10aGlzLnN0YXRlPVwiU0lHTlwifTt0aGlzLmluaXRWZXJpZnlCeVB1YmxpY0tleT1mdW5jdGlvbih2KXtpZih0eXBlb2Ygdi5lY3B1YmhleD09XCJzdHJpbmdcIiYmdHlwZW9mIHYuZWNjdXJ2ZW5hbWU9PVwic3RyaW5nXCIpe3RoaXMuZWNwdWJoZXg9di5lY3B1YmhleDt0aGlzLmVjY3VydmVuYW1lPXYuZWNjdXJ2ZW5hbWV9ZWxzZXtpZih2IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3RoaXMucHViS2V5PXZ9ZWxzZXtpZih2IGluc3RhbmNlb2YgUlNBS2V5KXt0aGlzLnB1YktleT12fX19dGhpcy5zdGF0ZT1cIlZFUklGWVwifTt0aGlzLmluaXRWZXJpZnlCeUNlcnRpZmljYXRlUEVNPWZ1bmN0aW9uKHYpe3ZhciB3PW5ldyBYNTA5KCk7dy5yZWFkQ2VydFBFTSh2KTt0aGlzLnB1YktleT13LnN1YmplY3RQdWJsaWNLZXlSU0E7dGhpcy5zdGF0ZT1cIlZFUklGWVwifTt0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbih2KXt0aGlzLm1kLnVwZGF0ZVN0cmluZyh2KX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24odil7dGhpcy5tZC51cGRhdGVIZXgodil9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuc0hhc2hIZXg9dGhpcy5tZC5kaWdlc3QoKTtpZih0eXBlb2YgdGhpcy5lY3BydmhleCE9XCJ1bmRlZmluZWRcIiYmdHlwZW9mIHRoaXMuZWNjdXJ2ZW5hbWUhPVwidW5kZWZpbmVkXCIpe3ZhciB2PW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6dGhpcy5lY2N1cnZlbmFtZX0pO3RoaXMuaFNpZ249di5zaWduSGV4KHRoaXMuc0hhc2hIZXgsdGhpcy5lY3BydmhleCl9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT1cInJzYWFuZG1nZjFcIil7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoUFNTKHRoaXMuc0hhc2hIZXgsdGhpcy5tZEFsZ05hbWUsdGhpcy5wc3NTYWx0TGVuKX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PVwicnNhXCIpe3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHRoaXMubWRBbGdOYW1lKX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4KX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCl9ZWxzZXt0aHJvd1wiU2lnbmF0dXJlOiB1bnN1cHBvcnRlZCBwdWJsaWMga2V5IGFsZzogXCIrdGhpcy5wdWJrZXlBbGdOYW1lfX19fX1yZXR1cm4gdGhpcy5oU2lnbn07dGhpcy5zaWduU3RyaW5nPWZ1bmN0aW9uKHYpe3RoaXMudXBkYXRlU3RyaW5nKHYpO3JldHVybiB0aGlzLnNpZ24oKX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKHYpe3RoaXMudXBkYXRlSGV4KHYpO3JldHVybiB0aGlzLnNpZ24oKX07dGhpcy52ZXJpZnk9ZnVuY3Rpb24odil7dGhpcy5zSGFzaEhleD10aGlzLm1kLmRpZ2VzdCgpO2lmKHR5cGVvZiB0aGlzLmVjcHViaGV4IT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgdGhpcy5lY2N1cnZlbmFtZSE9XCJ1bmRlZmluZWRcIil7dmFyIHc9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTp0aGlzLmVjY3VydmVuYW1lfSk7cmV0dXJuIHcudmVyaWZ5SGV4KHRoaXMuc0hhc2hIZXgsdix0aGlzLmVjcHViaGV4KX1lbHNle2lmKHRoaXMucHViS2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PVwicnNhYW5kbWdmMVwiKXtyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTKHRoaXMuc0hhc2hIZXgsdix0aGlzLm1kQWxnTmFtZSx0aGlzLnBzc1NhbHRMZW4pfWVsc2V7aWYodGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBSU0FLZXkmJnRoaXMucHVia2V5QWxnTmFtZT09XCJyc2FcIil7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHYpfWVsc2V7aWYodGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSl7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHYpfWVsc2V7aWYodGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5EU0Epe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle3Rocm93XCJTaWduYXR1cmU6IHVuc3VwcG9ydGVkIHB1YmxpYyBrZXkgYWxnOiBcIit0aGlzLnB1YmtleUFsZ05hbWV9fX19fX19fTt0aGlzLmluaXQ9ZnVuY3Rpb24ocyx0KXt0aHJvd1wiaW5pdChrZXksIHBhc3MpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5pbml0VmVyaWZ5QnlQdWJsaWNLZXk9ZnVuY3Rpb24ocyl7dGhyb3dcImluaXRWZXJpZnlCeVB1YmxpY0tleShyc2FQdWJLZXl5KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuaW5pdFZlcmlmeUJ5Q2VydGlmaWNhdGVQRU09ZnVuY3Rpb24ocyl7dGhyb3dcImluaXRWZXJpZnlCeUNlcnRpZmljYXRlUEVNKGNlcnRQRU0pIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5pbml0U2lnbj1mdW5jdGlvbihzKXt0aHJvd1wiaW5pdFNpZ24ocHJ2S2V5KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHMpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKHMpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3Rocm93XCJzaWduKCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnNpZ25TdHJpbmc9ZnVuY3Rpb24ocyl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKHMpe3Rocm93XCJkaWdlc3RIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKHMpe3Rocm93XCJ2ZXJpZnkoaFNpZ1ZhbCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLmluaXRQYXJhbXM9bztpZihvIT09dW5kZWZpbmVkKXtpZihvLmFsZyE9PXVuZGVmaW5lZCl7dGhpcy5hbGdOYW1lPW8uYWxnO2lmKG8ucHJvdj09PXVuZGVmaW5lZCl7dGhpcy5wcm92TmFtZT1LSlVSLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0aGlzLmFsZ05hbWVdfWVsc2V7dGhpcy5wcm92TmFtZT1vLnByb3Z9dGhpcy5hbGdQcm92TmFtZT10aGlzLmFsZ05hbWUrXCI6XCIrdGhpcy5wcm92TmFtZTt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyKHRoaXMuYWxnTmFtZSx0aGlzLnByb3ZOYW1lKTt0aGlzLl9zZXRBbGdOYW1lcygpfWlmKG8ucHNzc2FsdGxlbiE9PXVuZGVmaW5lZCl7dGhpcy5wc3NTYWx0TGVuPW8ucHNzc2FsdGxlbn1pZihvLnBydmtleXBlbSE9PXVuZGVmaW5lZCl7aWYoby5wcnZrZXlwYXMhPT11bmRlZmluZWQpe3Rocm93XCJib3RoIHBydmtleXBlbSBhbmQgcHJ2a2V5cGFzIHBhcmFtZXRlcnMgbm90IHN1cHBvcnRlZFwifWVsc2V7dHJ5e3ZhciBxPW5ldyBSU0FLZXkoKTtxLnJlYWRQcml2YXRlS2V5RnJvbVBFTVN0cmluZyhvLnBydmtleXBlbSk7dGhpcy5pbml0U2lnbihxKX1jYXRjaChtKXt0aHJvd1wiZmF0YWwgZXJyb3IgdG8gbG9hZCBwZW0gcHJpdmF0ZSBrZXk6IFwiK219fX19fTtLSlVSLmNyeXB0by5PSUQ9bmV3IGZ1bmN0aW9uKCl7dGhpcy5vaWRoZXgybmFtZT17XCIyYTg2NDg4NmY3MGQwMTAxMDFcIjpcInJzYUVuY3J5cHRpb25cIixcIjJhODY0OGNlM2QwMjAxXCI6XCJlY1B1YmxpY0tleVwiLFwiMmE4NjQ4Y2UzODA0MDFcIjpcImRzYVwiLFwiMmE4NjQ4Y2UzZDAzMDEwN1wiOlwic2VjcDI1NnIxXCIsXCIyYjgxMDQwMDFmXCI6XCJzZWNwMTkyazFcIixcIjJiODEwNDAwMjFcIjpcInNlY3AyMjRyMVwiLFwiMmI4MTA0MDAwYVwiOlwic2VjcDI1NmsxXCIsXCIyYjgxMDQwMDIzXCI6XCJzZWNwNTIxcjFcIixcIjJiODEwNDAwMjJcIjpcInNlY3AzODRyMVwiLFwiMmE4NjQ4Y2UzODA0MDNcIjpcIlNIQTF3aXRoRFNBXCIsXCI2MDg2NDgwMTY1MDMwNDAzMDFcIjpcIlNIQTIyNHdpdGhEU0FcIixcIjYwODY0ODAxNjUwMzA0MDMwMlwiOlwiU0hBMjU2d2l0aERTQVwiLH19O1xuLyohIGVjZHNhLW1vZGlmaWVkLTEuMC41LmpzIChjKSBTdGVwaGFuIFRob21hcywgS2VuamkgVXJ1c2hpbWEgfCBnaXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5FQ0RTQT1mdW5jdGlvbihoKXt2YXIgZT1cInNlY3AyNTZyMVwiO3ZhciBnPW51bGw7dmFyIGI9bnVsbDt2YXIgZj1udWxsO3ZhciBhPW5ldyBTZWN1cmVSYW5kb20oKTt2YXIgZD1udWxsO3RoaXMudHlwZT1cIkVDXCI7ZnVuY3Rpb24gYyhzLG8scixuKXt2YXIgaj1NYXRoLm1heChvLmJpdExlbmd0aCgpLG4uYml0TGVuZ3RoKCkpO3ZhciB0PXMuYWRkMkQocik7dmFyIHE9cy5jdXJ2ZS5nZXRJbmZpbml0eSgpO2Zvcih2YXIgcD1qLTE7cD49MDstLXApe3E9cS50d2ljZTJEKCk7cS56PUJpZ0ludGVnZXIuT05FO2lmKG8udGVzdEJpdChwKSl7aWYobi50ZXN0Qml0KHApKXtxPXEuYWRkMkQodCl9ZWxzZXtxPXEuYWRkMkQocyl9fWVsc2V7aWYobi50ZXN0Qml0KHApKXtxPXEuYWRkMkQocil9fX1yZXR1cm4gcX10aGlzLmdldEJpZ1JhbmRvbT1mdW5jdGlvbihpKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIoaS5iaXRMZW5ndGgoKSxhKS5tb2QoaS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpLmFkZChCaWdJbnRlZ2VyLk9ORSl9O3RoaXMuc2V0TmFtZWRDdXJ2ZT1mdW5jdGlvbihpKXt0aGlzLmVjcGFyYW1zPUtKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIuZ2V0QnlOYW1lKGkpO3RoaXMucHJ2S2V5SGV4PW51bGw7dGhpcy5wdWJLZXlIZXg9bnVsbDt0aGlzLmN1cnZlTmFtZT1pfTt0aGlzLnNldFByaXZhdGVLZXlIZXg9ZnVuY3Rpb24oaSl7dGhpcy5pc1ByaXZhdGU9dHJ1ZTt0aGlzLnBydktleUhleD1pfTt0aGlzLnNldFB1YmxpY0tleUhleD1mdW5jdGlvbihpKXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5wdWJLZXlIZXg9aX07dGhpcy5nZXRQdWJsaWNLZXlYWUhleD1mdW5jdGlvbigpe3ZhciBrPXRoaXMucHViS2V5SGV4O2lmKGsuc3Vic3RyKDAsMikhPT1cIjA0XCIpe3Rocm93XCJ0aGlzIG1ldGhvZCBzdXBwb3J0cyB1bmNvbXByZXNzZWQgZm9ybWF0KDA0KSBvbmx5XCJ9dmFyIGo9dGhpcy5lY3BhcmFtcy5rZXlsZW4vNDtpZihrLmxlbmd0aCE9PTIraioyKXt0aHJvd1wibWFsZm9ybWVkIHB1YmxpYyBrZXkgaGV4IGxlbmd0aFwifXZhciBpPXt9O2kueD1rLnN1YnN0cigyLGopO2kueT1rLnN1YnN0cigyK2opO3JldHVybiBpfTt0aGlzLmdldFNob3J0TklTVFBDdXJ2ZU5hbWU9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLmN1cnZlTmFtZTtpZihpPT09XCJzZWNwMjU2cjFcInx8aT09PVwiTklTVCBQLTI1NlwifHxpPT09XCJQLTI1NlwifHxpPT09XCJwcmltZTI1NnYxXCIpe3JldHVyblwiUC0yNTZcIn1pZihpPT09XCJzZWNwMzg0cjFcInx8aT09PVwiTklTVCBQLTM4NFwifHxpPT09XCJQLTM4NFwiKXtyZXR1cm5cIlAtMzg0XCJ9cmV0dXJuIG51bGx9O3RoaXMuZ2VuZXJhdGVLZXlQYWlySGV4PWZ1bmN0aW9uKCl7dmFyIGs9dGhpcy5lY3BhcmFtcy5uO3ZhciBuPXRoaXMuZ2V0QmlnUmFuZG9tKGspO3ZhciBsPXRoaXMuZWNwYXJhbXMuRy5tdWx0aXBseShuKTt2YXIgcT1sLmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgbz1sLmdldFkoKS50b0JpZ0ludGVnZXIoKTt2YXIgaT10aGlzLmVjcGFyYW1zLmtleWxlbi80O3ZhciBtPShcIjAwMDAwMDAwMDBcIituLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciByPShcIjAwMDAwMDAwMDBcIitxLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciBwPShcIjAwMDAwMDAwMDBcIitvLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciBqPVwiMDRcIityK3A7dGhpcy5zZXRQcml2YXRlS2V5SGV4KG0pO3RoaXMuc2V0UHVibGljS2V5SGV4KGopO3JldHVybntlY3BydmhleDptLGVjcHViaGV4Omp9fTt0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXMuc2lnbkhleChpLHRoaXMucHJ2S2V5SGV4KX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKG8sail7dmFyIHQ9bmV3IEJpZ0ludGVnZXIoaiwxNik7dmFyIGw9dGhpcy5lY3BhcmFtcy5uO3ZhciBxPW5ldyBCaWdJbnRlZ2VyKG8sMTYpO2Rve3ZhciBtPXRoaXMuZ2V0QmlnUmFuZG9tKGwpO3ZhciB1PXRoaXMuZWNwYXJhbXMuRzt2YXIgcD11Lm11bHRpcGx5KG0pO3ZhciBpPXAuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChsKX13aGlsZShpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPD0wKTt2YXIgdj1tLm1vZEludmVyc2UobCkubXVsdGlwbHkocS5hZGQodC5tdWx0aXBseShpKSkpLm1vZChsKTtyZXR1cm4gS0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZyhpLHYpfTt0aGlzLnNpZ249ZnVuY3Rpb24obSx1KXt2YXIgcT11O3ZhciBqPXRoaXMuZWNwYXJhbXMubjt2YXIgcD1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChtKTtkb3t2YXIgbD10aGlzLmdldEJpZ1JhbmRvbShqKTt2YXIgdD10aGlzLmVjcGFyYW1zLkc7dmFyIG89dC5tdWx0aXBseShsKTt2YXIgaT1vLmdldFgoKS50b0JpZ0ludGVnZXIoKS5tb2Qoail9d2hpbGUoaS5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKTw9MCk7dmFyIHY9bC5tb2RJbnZlcnNlKGopLm11bHRpcGx5KHAuYWRkKHEubXVsdGlwbHkoaSkpKS5tb2Qoaik7cmV0dXJuIHRoaXMuc2VyaWFsaXplU2lnKGksdil9O3RoaXMudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGosaSl7cmV0dXJuIHRoaXMudmVyaWZ5SGV4KGosaSx0aGlzLnB1YktleUhleCl9O3RoaXMudmVyaWZ5SGV4PWZ1bmN0aW9uKG0saSxwKXt2YXIgbCxqO3ZhciBvPUtKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4KGkpO2w9by5yO2o9by5zO3ZhciBrO2s9RUNQb2ludEZwLmRlY29kZUZyb21IZXgodGhpcy5lY3BhcmFtcy5jdXJ2ZSxwKTt2YXIgbj1uZXcgQmlnSW50ZWdlcihtLDE2KTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcobixsLGosayl9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKG8scCxqKXt2YXIgbCxpO2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KHApKXt2YXIgbj10aGlzLnBhcnNlU2lnKHApO2w9bi5yO2k9bi5zfWVsc2V7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwJiZwLnImJnAucyl7bD1wLnI7aT1wLnN9ZWxzZXt0aHJvd1wiSW52YWxpZCB2YWx1ZSBmb3Igc2lnbmF0dXJlXCJ9fXZhciBrO2lmKGogaW5zdGFuY2VvZiBFQ1BvaW50RnApe2s9an1lbHNle2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KGopKXtrPUVDUG9pbnRGcC5kZWNvZGVGcm9tKHRoaXMuZWNwYXJhbXMuY3VydmUsail9ZWxzZXt0aHJvd1wiSW52YWxpZCBmb3JtYXQgZm9yIHB1YmtleSB2YWx1ZSwgbXVzdCBiZSBieXRlIGFycmF5IG9yIEVDUG9pbnRGcFwifX12YXIgbT1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChvKTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcobSxsLGksayl9O3RoaXMudmVyaWZ5UmF3PWZ1bmN0aW9uKG8saSx3LG0pe3ZhciBsPXRoaXMuZWNwYXJhbXMubjt2YXIgdT10aGlzLmVjcGFyYW1zLkc7aWYoaS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fGkuY29tcGFyZVRvKGwpPj0wKXtyZXR1cm4gZmFsc2V9aWYody5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fHcuY29tcGFyZVRvKGwpPj0wKXtyZXR1cm4gZmFsc2V9dmFyIHA9dy5tb2RJbnZlcnNlKGwpO3ZhciBrPW8ubXVsdGlwbHkocCkubW9kKGwpO3ZhciBqPWkubXVsdGlwbHkocCkubW9kKGwpO3ZhciBxPXUubXVsdGlwbHkoaykuYWRkKG0ubXVsdGlwbHkoaikpO3ZhciB0PXEuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChsKTtyZXR1cm4gdC5lcXVhbHMoaSl9O3RoaXMuc2VyaWFsaXplU2lnPWZ1bmN0aW9uKGssail7dmFyIGw9ay50b0J5dGVBcnJheVNpZ25lZCgpO3ZhciBpPWoudG9CeXRlQXJyYXlTaWduZWQoKTt2YXIgbT1bXTttLnB1c2goMik7bS5wdXNoKGwubGVuZ3RoKTttPW0uY29uY2F0KGwpO20ucHVzaCgyKTttLnB1c2goaS5sZW5ndGgpO209bS5jb25jYXQoaSk7bS51bnNoaWZ0KG0ubGVuZ3RoKTttLnVuc2hpZnQoNDgpO3JldHVybiBtfTt0aGlzLnBhcnNlU2lnPWZ1bmN0aW9uKG4pe3ZhciBtO2lmKG5bMF0hPTQ4KXt0aHJvdyBuZXcgRXJyb3IoXCJTaWduYXR1cmUgbm90IGEgdmFsaWQgREVSU2VxdWVuY2VcIil9bT0yO2lmKG5bbV0hPTIpe3Rocm93IG5ldyBFcnJvcihcIkZpcnN0IGVsZW1lbnQgaW4gc2lnbmF0dXJlIG11c3QgYmUgYSBERVJJbnRlZ2VyXCIpfXZhciBsPW4uc2xpY2UobSsyLG0rMituW20rMV0pO20rPTIrblttKzFdO2lmKG5bbV0hPTIpe3Rocm93IG5ldyBFcnJvcihcIlNlY29uZCBlbGVtZW50IGluIHNpZ25hdHVyZSBtdXN0IGJlIGEgREVSSW50ZWdlclwiKX12YXIgaT1uLnNsaWNlKG0rMixtKzIrblttKzFdKTttKz0yK25bbSsxXTt2YXIgaz1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChsKTt2YXIgaj1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChpKTtyZXR1cm57cjprLHM6an19O3RoaXMucGFyc2VTaWdDb21wYWN0PWZ1bmN0aW9uKG0pe2lmKG0ubGVuZ3RoIT09NjUpe3Rocm93XCJTaWduYXR1cmUgaGFzIHRoZSB3cm9uZyBsZW5ndGhcIn12YXIgaj1tWzBdLTI3O2lmKGo8MHx8aj43KXt0aHJvd1wiSW52YWxpZCBzaWduYXR1cmUgdHlwZVwifXZhciBvPXRoaXMuZWNwYXJhbXMubjt2YXIgbD1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChtLnNsaWNlKDEsMzMpKS5tb2Qobyk7dmFyIGs9QmlnSW50ZWdlci5mcm9tQnl0ZUFycmF5VW5zaWduZWQobS5zbGljZSgzMyw2NSkpLm1vZChvKTtyZXR1cm57cjpsLHM6ayxpOmp9fTtpZihoIT09dW5kZWZpbmVkKXtpZihoLmN1cnZlIT09dW5kZWZpbmVkKXt0aGlzLmN1cnZlTmFtZT1oLmN1cnZlfX1pZih0aGlzLmN1cnZlTmFtZT09PXVuZGVmaW5lZCl7dGhpcy5jdXJ2ZU5hbWU9ZX10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO2lmKGghPT11bmRlZmluZWQpe2lmKGgucHJ2IT09dW5kZWZpbmVkKXt0aGlzLnNldFByaXZhdGVLZXlIZXgoaC5wcnYpfWlmKGgucHViIT09dW5kZWZpbmVkKXt0aGlzLnNldFB1YmxpY0tleUhleChoLnB1Yil9fX07S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKGEpO3ZhciBkPW5ldyBCaWdJbnRlZ2VyKGIuciwxNik7dmFyIGM9bmV3IEJpZ0ludGVnZXIoYi5zLDE2KTtyZXR1cm57cjpkLHM6Y319O0tKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4SW5IZXhSUz1mdW5jdGlvbihjKXtpZihjLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJzaWduYXR1cmUgaXMgbm90IGEgQVNOLjEgc2VxdWVuY2VcIn12YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihjLDApO2lmKGIubGVuZ3RoIT0yKXt0aHJvd1wibnVtYmVyIG9mIHNpZ25hdHVyZSBBU04uMSBzZXF1ZW5jZSBlbGVtZW50cyBzZWVtIHdyb25nXCJ9dmFyIGc9YlswXTt2YXIgZj1iWzFdO2lmKGMuc3Vic3RyKGcsMikhPVwiMDJcIil7dGhyb3dcIjFzdCBpdGVtIG9mIHNlcXVlbmUgb2Ygc2lnbmF0dXJlIGlzIG5vdCBBU04uMSBpbnRlZ2VyXCJ9aWYoYy5zdWJzdHIoZiwyKSE9XCIwMlwiKXt0aHJvd1wiMm5kIGl0ZW0gb2Ygc2VxdWVuZSBvZiBzaWduYXR1cmUgaXMgbm90IEFTTi4xIGludGVnZXJcIn12YXIgZT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihjLGcpO3ZhciBkPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGMsZik7cmV0dXJue3I6ZSxzOmR9fTtLSlVSLmNyeXB0by5FQ0RTQS5hc24xU2lnVG9Db25jYXRTaWc9ZnVuY3Rpb24oYyl7dmFyIGQ9S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKGMpO3ZhciBiPWQucjt2YXIgYT1kLnM7aWYoYi5zdWJzdHIoMCwyKT09XCIwMFwiJiYoKChiLmxlbmd0aC8yKSo4KSUoMTYqOCkpPT04KXtiPWIuc3Vic3RyKDIpfWlmKGEuc3Vic3RyKDAsMik9PVwiMDBcIiYmKCgoYS5sZW5ndGgvMikqOCklKDE2KjgpKT09OCl7YT1hLnN1YnN0cigyKX1pZigoKChiLmxlbmd0aC8yKSo4KSUoMTYqOCkpIT0wKXt0aHJvd1widW5rbm93biBFQ0RTQSBzaWcgciBsZW5ndGggZXJyb3JcIn1pZigoKChhLmxlbmd0aC8yKSo4KSUoMTYqOCkpIT0wKXt0aHJvd1widW5rbm93biBFQ0RTQSBzaWcgcyBsZW5ndGggZXJyb3JcIn1yZXR1cm4gYithfTtLSlVSLmNyeXB0by5FQ0RTQS5jb25jYXRTaWdUb0FTTjFTaWc9ZnVuY3Rpb24oYSl7aWYoKCgoYS5sZW5ndGgvMikqOCklKDE2KjgpKSE9MCl7dGhyb3dcInVua25vd24gRUNEU0EgY29uY2F0aW5hdGVkIHItcyBzaWcgIGxlbmd0aCBlcnJvclwifXZhciBjPWEuc3Vic3RyKDAsYS5sZW5ndGgvMik7dmFyIGI9YS5zdWJzdHIoYS5sZW5ndGgvMik7cmV0dXJuIEtKVVIuY3J5cHRvLkVDRFNBLmhleFJTU2lnVG9BU04xU2lnKGMsYil9O0tKVVIuY3J5cHRvLkVDRFNBLmhleFJTU2lnVG9BU04xU2lnPWZ1bmN0aW9uKGIsYSl7dmFyIGQ9bmV3IEJpZ0ludGVnZXIoYiwxNik7dmFyIGM9bmV3IEJpZ0ludGVnZXIoYSwxNik7cmV0dXJuIEtKVVIuY3J5cHRvLkVDRFNBLmJpUlNTaWdUb0FTTjFTaWcoZCxjKX07S0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZz1mdW5jdGlvbihlLGMpe3ZhciBiPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OmV9KTt2YXIgYT1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpjfSk7dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W2IsYV19KTtyZXR1cm4gZC5nZXRFbmNvZGVkSGV4KCl9O1xuLyohIGVjcGFyYW0tMS4wLjAuanMgKGMpIDIwMTMgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCPW5ldyBmdW5jdGlvbigpe3ZhciBiPXt9O3ZhciBjPXt9O2Z1bmN0aW9uIGEoZCl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGQsMTYpfXRoaXMuZ2V0QnlOYW1lPWZ1bmN0aW9uKGUpe3ZhciBkPWU7aWYodHlwZW9mIGNbZF0hPVwidW5kZWZpbmVkXCIpe2Q9Y1tlXX1pZih0eXBlb2YgYltkXSE9XCJ1bmRlZmluZWRcIil7cmV0dXJuIGJbZF19dGhyb3dcInVucmVnaXN0ZXJlZCBFQyBjdXJ2ZSBuYW1lOiBcIitkfTt0aGlzLnJlZ2lzdD1mdW5jdGlvbihBLGwsbyxnLG0sZSxqLGYsayx1LGQseCl7YltBXT17fTt2YXIgcz1hKG8pO3ZhciB6PWEoZyk7dmFyIHk9YShtKTt2YXIgdD1hKGUpO3ZhciB3PWEoaik7dmFyIHI9bmV3IEVDQ3VydmVGcChzLHoseSk7dmFyIHE9ci5kZWNvZGVQb2ludEhleChcIjA0XCIrZitrKTtiW0FdW1wibmFtZVwiXT1BO2JbQV1bXCJrZXlsZW5cIl09bDtiW0FdW1wiY3VydmVcIl09cjtiW0FdW1wiR1wiXT1xO2JbQV1bXCJuXCJdPXQ7YltBXVtcImhcIl09dztiW0FdW1wib2lkXCJdPWQ7YltBXVtcImluZm9cIl09eDtmb3IodmFyIHY9MDt2PHUubGVuZ3RoO3YrKyl7Y1t1W3ZdXT1BfX19O0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDEyOHIxXCIsMTI4LFwiRkZGRkZGRkRGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCJFODc1NzlDMTEwNzlGNDNERDgyNDk5M0MyQ0VFNUVEM1wiLFwiRkZGRkZGRkUwMDAwMDAwMDc1QTMwRDFCOTAzOEExMTVcIixcIjFcIixcIjE2MUZGNzUyOEI4OTlCMkQwQzI4NjA3Q0E1MkM1Qjg2XCIsXCJDRjVBQzgzOTVCQUZFQjEzQzAyREEyOTJEREVEN0E4M1wiLFtdLFwiXCIsXCJzZWNwMTI4cjEgOiBTRUNHIGN1cnZlIG92ZXIgYSAxMjggYml0IHByaW1lIGZpZWxkXCIpO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE2MGsxXCIsMTYwLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGQUM3M1wiLFwiMFwiLFwiN1wiLFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUI4RkExNkRGQUI5QUNBMTZCNkIzXCIsXCIxXCIsXCIzQjRDMzgyQ0UzN0FBMTkyQTQwMTlFNzYzMDM2RjRGNURENEQ3RUJCXCIsXCI5MzhDRjkzNTMxOEZEQ0VENkJDMjgyODY1MzE3MzNDM0YwM0M0RkVFXCIsW10sXCJcIixcInNlY3AxNjBrMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDE2MCBiaXQgcHJpbWUgZmllbGRcIik7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTYwcjFcIiwxNjAsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZDXCIsXCIxQzk3QkVGQzU0QkQ3QThCNjVBQ0Y4OUY4MUQ0RDRBREM1NjVGQTQ1XCIsXCIwMTAwMDAwMDAwMDAwMDAwMDAwMDAxRjRDOEY5MjdBRUQzQ0E3NTIyNTdcIixcIjFcIixcIjRBOTZCNTY4OEVGNTczMjg0NjY0Njk4OTY4QzM4QkI5MTNDQkZDODJcIixcIjIzQTYyODU1MzE2ODk0N0Q1OURDQzkxMjA0MjM1MTM3N0FDNUZCMzJcIixbXSxcIlwiLFwic2VjcDE2MHIxIDogU0VDRyBjdXJ2ZSBvdmVyIGEgMTYwIGJpdCBwcmltZSBmaWVsZFwiKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJrMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRUUzN1wiLFwiMFwiLFwiM1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFMjZGMkZDMTcwRjY5NDY2QTc0REVGRDhEXCIsXCIxXCIsXCJEQjRGRjEwRUMwNTdFOUFFMjZCMDdEMDI4MEI3RjQzNDFEQTVEMUIxRUFFMDZDN0RcIixcIjlCMkYyRjZEOUM1NjI4QTc4NDQxNjNEMDE1QkU4NjM0NDA4MkFBODhEOTVFMkY5RFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJyMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZDXCIsXCI2NDIxMDUxOUU1OUM4MEU3MEZBN0U5QUI3MjI0MzA0OUZFQjhERUVDQzE0NkI5QjFcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjk5REVGODM2MTQ2QkM5QjFCNEQyMjgzMVwiLFwiMVwiLFwiMTg4REE4MEVCMDMwOTBGNjdDQkYyMEVCNDNBMTg4MDBGNEZGMEFGRDgyRkYxMDEyXCIsXCIwNzE5MkI5NUZGQzhEQTc4NjMxMDExRUQ2QjI0Q0RENTczRjk3N0ExMUU3OTQ4MTFcIixbXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMjI0cjFcIiwyMjQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVcIixcIkI0MDUwQTg1MEMwNEIzQUJGNTQxMzI1NjUwNDRCMEI3RDdCRkQ4QkEyNzBCMzk0MzIzNTVGRkI0XCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGMTZBMkUwQjhGMDNFMTNERDI5NDU1QzVDMkEzRFwiLFwiMVwiLFwiQjcwRTBDQkQ2QkI0QkY3RjMyMTM5MEI5NEEwM0MxRDM1NkMyMTEyMjM0MzI4MEQ2MTE1QzFEMjFcIixcIkJEMzc2Mzg4QjVGNzIzRkI0QzIyREZFNkNENDM3NUEwNUEwNzQ3NjQ0NEQ1ODE5OTg1MDA3RTM0XCIsW10pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDI1NmsxXCIsMjU2LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkMyRlwiLFwiMFwiLFwiN1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVCQUFFRENFNkFGNDhBMDNCQkZEMjVFOENEMDM2NDE0MVwiLFwiMVwiLFwiNzlCRTY2N0VGOURDQkJBQzU1QTA2Mjk1Q0U4NzBCMDcwMjlCRkNEQjJEQ0UyOEQ5NTlGMjgxNUIxNkY4MTc5OFwiLFwiNDgzQURBNzcyNkEzQzQ2NTVEQTRGQkZDMEUxMTA4QThGRDE3QjQ0OEE2ODU1NDE5OUM0N0QwOEZGQjEwRDRCOFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AyNTZyMVwiLDI1NixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIjVBQzYzNUQ4QUEzQTkzRTdCM0VCQkQ1NTc2OTg4NkJDNjUxRDA2QjBDQzUzQjBGNjNCQ0UzQzNFMjdEMjYwNEJcIixcIkZGRkZGRkZGMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGQkNFNkZBQURBNzE3OUU4NEYzQjlDQUMyRkM2MzI1NTFcIixcIjFcIixcIjZCMTdEMUYyRTEyQzQyNDdGOEJDRTZFNTYzQTQ0MEYyNzcwMzdEODEyREVCMzNBMEY0QTEzOTQ1RDg5OEMyOTZcIixcIjRGRTM0MkUyRkUxQTdGOUI4RUU3RUI0QTdDMEY5RTE2MkJDRTMzNTc2QjMxNUVDRUNCQjY0MDY4MzdCRjUxRjVcIixbXCJOSVNUIFAtMjU2XCIsXCJQLTI1NlwiLFwicHJpbWUyNTZ2MVwiXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMzg0cjFcIiwzODQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGQ1wiLFwiQjMzMTJGQTdFMjNFRTdFNDk4OEUwNTZCRTNGODJEMTkxODFEOUM2RUZFODE0MTEyMDMxNDA4OEY1MDEzODc1QUM2NTYzOThEOEEyRUQxOUQyQTg1QzhFREQzRUMyQUVGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDNzYzNEQ4MUY0MzcyRERGNTgxQTBEQjI0OEIwQTc3QUVDRUMxOTZBQ0NDNTI5NzNcIixcIjFcIixcIkFBODdDQTIyQkU4QjA1Mzc4RUIxQzcxRUYzMjBBRDc0NkUxRDNCNjI4QkE3OUI5ODU5Rjc0MUUwODI1NDJBMzg1NTAyRjI1REJGNTUyOTZDM0E1NDVFMzg3Mjc2MEFCN1wiLFwiMzYxN2RlNGE5NjI2MmM2ZjVkOWU5OGJmOTI5MmRjMjlmOGY0MWRiZDI4OWExNDdjZTlkYTMxMTNiNWYwYjhjMDBhNjBiMWNlMWQ3ZTgxOWQ3YTQzMWQ3YzkwZWEwZTVmXCIsW1wiTklTVCBQLTM4NFwiLFwiUC0zODRcIl0pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDUyMXIxXCIsNTIxLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIjFGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCIwNTE5NTNFQjk2MThFMUM5QTFGOTI5QTIxQTBCNjg1NDBFRUEyREE3MjVCOTlCMzE1RjNCOEI0ODk5MThFRjEwOUUxNTYxOTM5NTFFQzdFOTM3QjE2NTJDMEJEM0JCMUJGMDczNTczREY4ODNEMkMzNEYxRUY0NTFGRDQ2QjUwM0YwMFwiLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQTUxODY4NzgzQkYyRjk2NkI3RkNDMDE0OEY3MDlBNUQwM0JCNUM5Qjg4OTlDNDdBRUJCNkZCNzFFOTEzODY0MDlcIixcIjFcIixcIkM2ODU4RTA2QjcwNDA0RTlDRDlFM0VDQjY2MjM5NUI0NDI5QzY0ODEzOTA1M0ZCNTIxRjgyOEFGNjA2QjREM0RCQUExNEI1RTc3RUZFNzU5MjhGRTFEQzEyN0EyRkZBOERFMzM0OEIzQzE4NTZBNDI5QkY5N0U3RTMxQzJFNUJENjZcIixcIjAxMTgzOTI5NmE3ODlhM2JjMDA0NWM4YTVmYjQyYzdkMWJkOTk4ZjU0NDQ5NTc5YjQ0NjgxN2FmYmQxNzI3M2U2NjJjOTdlZTcyOTk1ZWY0MjY0MGM1NTBiOTAxM2ZhZDA3NjEzNTNjNzA4NmEyNzJjMjQwODhiZTk0NzY5ZmQxNjY1MFwiLFtcIk5JU1QgUC01MjFcIixcIlAtNTIxXCJdKTtcbi8qISBkc2EtbW9kaWZpZWQtMS4wLjEuanMgKGMpIFJlY3VyaXR5IExhYnMgR21iSCwgS2VuamkgVXJ1c2hpbW1hIHwgZ2l0aHViLmNvbS9vcGVucGdwanMvb3BlbnBncGpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5EU0E9ZnVuY3Rpb24oKXt0aGlzLnA9bnVsbDt0aGlzLnE9bnVsbDt0aGlzLmc9bnVsbDt0aGlzLnk9bnVsbDt0aGlzLng9bnVsbDt0aGlzLnR5cGU9XCJEU0FcIjt0aGlzLnNldFByaXZhdGU9ZnVuY3Rpb24oeix3LHYsQSx1KXt0aGlzLmlzUHJpdmF0ZT10cnVlO3RoaXMucD16O3RoaXMucT13O3RoaXMuZz12O3RoaXMueT1BO3RoaXMueD11fTt0aGlzLnNldFB1YmxpYz1mdW5jdGlvbih3LHYsdSx6KXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5wPXc7dGhpcy5xPXY7dGhpcy5nPXU7dGhpcy55PXo7dGhpcy54PW51bGx9O3RoaXMuc2lnbldpdGhNZXNzYWdlSGFzaD1mdW5jdGlvbih6KXt2YXIgdj10aGlzLnA7dmFyIHU9dGhpcy5xO3ZhciBDPXRoaXMuZzt2YXIgRD10aGlzLnk7dmFyIEU9dGhpcy54O3ZhciBBPXouc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgQj1uZXcgQmlnSW50ZWdlcih6LDE2KTt2YXIgdz1uKEJpZ0ludGVnZXIuT05FLmFkZChCaWdJbnRlZ2VyLk9ORSksdS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpO3ZhciBHPShDLm1vZFBvdyh3LHYpKS5tb2QodSk7dmFyIEY9KHcubW9kSW52ZXJzZSh1KS5tdWx0aXBseShCLmFkZChFLm11bHRpcGx5KEcpKSkpLm1vZCh1KTt2YXIgSD1LSlVSLmFzbjEuQVNOMVV0aWwuanNvblRvQVNOMUhFWCh7c2VxOlt7XCJpbnRcIjp7YmlnaW50Okd9fSx7XCJpbnRcIjp7YmlnaW50OkZ9fV19KTtyZXR1cm4gSH07dGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oQyxCKXt2YXIgej10aGlzLnA7dmFyIHU9dGhpcy5xO3ZhciBHPXRoaXMuZzt2YXIgSD10aGlzLnk7dmFyIEU9dGhpcy5wYXJzZUFTTjFTaWduYXR1cmUoQik7dmFyIEs9RVswXTt2YXIgSj1FWzFdO3ZhciBDPUMuc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgRD1uZXcgQmlnSW50ZWdlcihDLDE2KTtpZihCaWdJbnRlZ2VyLlpFUk8uY29tcGFyZVRvKEspPjB8fEsuY29tcGFyZVRvKHUpPjB8fEJpZ0ludGVnZXIuWkVSTy5jb21wYXJlVG8oSik+MHx8Si5jb21wYXJlVG8odSk+MCl7dGhyb3dcImludmFsaWQgRFNBIHNpZ25hdHVyZVwifXZhciBJPUoubW9kSW52ZXJzZSh1KTt2YXIgQT1ELm11bHRpcGx5KEkpLm1vZCh1KTt2YXIgdj1LLm11bHRpcGx5KEkpLm1vZCh1KTt2YXIgRj1HLm1vZFBvdyhBLHopLm11bHRpcGx5KEgubW9kUG93KHYseikpLm1vZCh6KS5tb2QodSk7cmV0dXJuIEYuY29tcGFyZVRvKEspPT0wfTt0aGlzLnBhcnNlQVNOMVNpZ25hdHVyZT1mdW5jdGlvbih1KXt0cnl7dmFyIHk9bmV3IEJpZ0ludGVnZXIoQVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMF0sXCIwMlwiKSwxNik7dmFyIHY9bmV3IEJpZ0ludGVnZXIoQVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMV0sXCIwMlwiKSwxNik7cmV0dXJuW3ksdl19Y2F0Y2godyl7dGhyb3dcIm1hbGZvcm1lZCBEU0Egc2lnbmF0dXJlXCJ9fTtmdW5jdGlvbiBkKEUsdyxCLHYsdSxDKXt2YXIgej1LSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcodyxFLnRvTG93ZXJDYXNlKCkpO3ZhciB6PXouc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgQT1uZXcgQmlnSW50ZWdlcih6LDE2KTt2YXIgeT1uKEJpZ0ludGVnZXIuT05FLmFkZChCaWdJbnRlZ2VyLk9ORSksdS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpO3ZhciBGPShCLm1vZFBvdyh5LHYpKS5tb2QodSk7dmFyIEQ9KHkubW9kSW52ZXJzZSh1KS5tdWx0aXBseShBLmFkZChDLm11bHRpcGx5KEYpKSkpLm1vZCh1KTt2YXIgRz1uZXcgQXJyYXkoKTtHWzBdPUY7R1sxXT1EO3JldHVybiBHfWZ1bmN0aW9uIHIodil7dmFyIHU9b3BlbnBncC5jb25maWcuY29uZmlnLnByZWZlcl9oYXNoX2FsZ29yaXRobTtzd2l0Y2goTWF0aC5yb3VuZCh2LmJpdExlbmd0aCgpLzgpKXtjYXNlIDIwOmlmKHUhPTImJnU+MTEmJnUhPTEwJiZ1PDgpe3JldHVybiAyfXJldHVybiB1O2Nhc2UgMjg6aWYodT4xMSYmdTw4KXtyZXR1cm4gMTF9cmV0dXJuIHU7Y2FzZSAzMjppZih1PjEwJiZ1PDgpe3JldHVybiA4fXJldHVybiB1O2RlZmF1bHQ6dXRpbC5wcmludF9kZWJ1ZyhcIkRTQSBzZWxlY3QgaGFzaCBhbGdvcml0aG06IHJldHVybmluZyBudWxsIGZvciBhbiB1bmtub3duIGxlbmd0aCBvZiBxXCIpO3JldHVybiBudWxsfX10aGlzLnNlbGVjdF9oYXNoX2FsZ29yaXRobT1yO2Z1bmN0aW9uIG0oSSxLLEosQix6LHUsRixHKXt2YXIgQz1LSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcoQixJLnRvTG93ZXJDYXNlKCkpO3ZhciBDPUMuc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgRD1uZXcgQmlnSW50ZWdlcihDLDE2KTtpZihCaWdJbnRlZ2VyLlpFUk8uY29tcGFyZVRvKEspPjB8fEsuY29tcGFyZVRvKHUpPjB8fEJpZ0ludGVnZXIuWkVSTy5jb21wYXJlVG8oSik+MHx8Si5jb21wYXJlVG8odSk+MCl7dXRpbC5wcmludF9lcnJvcihcImludmFsaWQgRFNBIFNpZ25hdHVyZVwiKTtyZXR1cm4gbnVsbH12YXIgSD1KLm1vZEludmVyc2UodSk7dmFyIEE9RC5tdWx0aXBseShIKS5tb2QodSk7dmFyIHY9Sy5tdWx0aXBseShIKS5tb2QodSk7dmFyIEU9Ri5tb2RQb3coQSx6KS5tdWx0aXBseShHLm1vZFBvdyh2LHopKS5tb2QoeikubW9kKHUpO3JldHVybiBFLmNvbXBhcmVUbyhLKT09MH1mdW5jdGlvbiBhKHope3ZhciBBPW5ldyBCaWdJbnRlZ2VyKHoscHJpbWVDZW50ZXJpZSk7dmFyIHk9aihxLDUxMik7dmFyIHU9dChwLHEseik7dmFyIHY7ZG97dj1uZXcgQmlnSW50ZWdlcihxLmJpdENvdW50KCkscmFuZCl9d2hpbGUoeC5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSE9MSYmeC5jb21wYXJlVG8ocSkhPS0xKTt2YXIgdz1nLm1vZFBvdyh4LHApO3JldHVybnt4OnYscTpBLHA6eSxnOnUseTp3fX1mdW5jdGlvbiBqKHkseix3KXtpZih6JTY0IT0wKXtyZXR1cm4gZmFsc2V9dmFyIHU7dmFyIHY7ZG97dT13KGJpdGNvdW50LHRydWUpO3Y9dS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7dT11LnN1YnRyYWN0KHYucmVtYWluZGVyKHkpKX13aGlsZSghdS5pc1Byb2JhYmxlUHJpbWUocHJpbWVDZW50ZXJpZSl8fHUuYml0TGVuZ3RoKCkhPWwpO3JldHVybiB1fWZ1bmN0aW9uIHQoQix6LEEsdyl7dmFyIHU9Qi5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7dmFyIHk9dS5kaXZpZGUoeik7dmFyIHY7ZG97dj13KEEpfXdoaWxlKHYuY29tcGFyZVRvKHUpIT0tMSYmdi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpIT0xKTtyZXR1cm4gdi5tb2RQb3coeSxCKX1mdW5jdGlvbiBvKHcseSx1KXt2YXIgdjtkb3t2PXUoeSxmYWxzZSl9d2hpbGUodi5jb21wYXJlVG8odykhPS0xJiZ2LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pIT0xKTtyZXR1cm4gdn1mdW5jdGlvbiBpKHYsdyl7az1vKHYpO3ZhciB1PWcubW9kUG93KGssdykubW9kKHYpO3JldHVybiB1fWZ1bmN0aW9uIGgoQix3LHksdix6LHUpe3ZhciBBPUIodik7cz0ody5tb2RJbnZlcnNlKHopLm11bHRpcGx5KEEuYWRkKHUubXVsdGlwbHkoeSkpKSkubW9kKHopO3JldHVybiBzfXRoaXMuc2lnbj1kO3RoaXMudmVyaWZ5PW07ZnVuY3Rpb24gbih3LHUpe2lmKHUuY29tcGFyZVRvKHcpPD0wKXtyZXR1cm59dmFyIHY9dS5zdWJ0cmFjdCh3KTt2YXIgeT1lKHYuYml0TGVuZ3RoKCkpO3doaWxlKHk+dil7eT1lKHYuYml0TGVuZ3RoKCkpfXJldHVybiB3LmFkZCh5KX1mdW5jdGlvbiBlKHcpe2lmKHc8MCl7cmV0dXJuIG51bGx9dmFyIHU9TWF0aC5mbG9vcigodys3KS84KTt2YXIgdj1jKHUpO2lmKHclOD4wKXt2PVN0cmluZy5mcm9tQ2hhckNvZGUoKE1hdGgucG93KDIsdyU4KS0xKSZ2LmNoYXJDb2RlQXQoMCkpK3Yuc3Vic3RyaW5nKDEpfXJldHVybiBuZXcgQmlnSW50ZWdlcihmKHYpLDE2KX1mdW5jdGlvbiBjKHcpe3ZhciB1PVwiXCI7Zm9yKHZhciB2PTA7djx3O3YrKyl7dSs9U3RyaW5nLmZyb21DaGFyQ29kZShiKCkpfXJldHVybiB1fWZ1bmN0aW9uIGIoKXt2YXIgdT1uZXcgVWludDMyQXJyYXkoMSk7d2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXModSk7cmV0dXJuIHVbMF0mMjU1fWZ1bmN0aW9uIGYoeSl7aWYoeT09bnVsbCl7cmV0dXJuXCJcIn12YXIgdj1bXTt2YXIgdz15Lmxlbmd0aDt2YXIgej0wO3ZhciB1O3doaWxlKHo8dyl7dT15W3orK10uY2hhckNvZGVBdCgpLnRvU3RyaW5nKDE2KTt3aGlsZSh1Lmxlbmd0aDwyKXt1PVwiMFwiK3V9di5wdXNoKFwiXCIrdSl9cmV0dXJuIHYuam9pbihcIlwiKX10aGlzLmdldFJhbmRvbUJpZ0ludGVnZXJJblJhbmdlPW47dGhpcy5nZXRSYW5kb21CaWdJbnRlZ2VyPWU7dGhpcy5nZXRSYW5kb21CeXRlcz1jfTtcbi8qISBwa2NzNXBrZXktMS4wLjcuanMgKGMpIDIwMTMtMjAxNiBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuICovXG52YXIgUEtDUzVQS0VZPWZ1bmN0aW9uKCl7dmFyIGM9ZnVuY3Rpb24obixwLG8pe3JldHVybiBpKENyeXB0b0pTLkFFUyxuLHAsbyl9O3ZhciBkPWZ1bmN0aW9uKG4scCxvKXtyZXR1cm4gaShDcnlwdG9KUy5UcmlwbGVERVMsbixwLG8pfTt2YXIgaT1mdW5jdGlvbihxLHYscyxvKXt2YXIgcD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHYpO3ZhciB1PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uocyk7dmFyIG49Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShvKTt2YXIgcj17fTtyLmtleT11O3IuaXY9bjtyLmNpcGhlcnRleHQ9cDt2YXIgdD1xLmRlY3J5cHQocix1LHtpdjpufSk7cmV0dXJuIENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHQpfTt2YXIgaj1mdW5jdGlvbihuLHAsbyl7cmV0dXJuIGUoQ3J5cHRvSlMuQUVTLG4scCxvKX07dmFyIG09ZnVuY3Rpb24obixwLG8pe3JldHVybiBlKENyeXB0b0pTLlRyaXBsZURFUyxuLHAsbyl9O3ZhciBlPWZ1bmN0aW9uKHMseCx2LHApe3ZhciByPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoeCk7dmFyIHc9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh2KTt2YXIgbz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHApO3ZhciBuPXt9O3ZhciB1PXMuZW5jcnlwdChyLHcse2l2Om99KTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHUudG9TdHJpbmcoKSk7dmFyIHQ9Q3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkocSk7cmV0dXJuIHR9O3ZhciBnPXtcIkFFUy0yNTYtQ0JDXCI6e3Byb2M6YyxlcHJvYzpqLGtleWxlbjozMixpdmxlbjoxNn0sXCJBRVMtMTkyLUNCQ1wiOntwcm9jOmMsZXByb2M6aixrZXlsZW46MjQsaXZsZW46MTZ9LFwiQUVTLTEyOC1DQkNcIjp7cHJvYzpjLGVwcm9jOmosa2V5bGVuOjE2LGl2bGVuOjE2fSxcIkRFUy1FREUzLUNCQ1wiOntwcm9jOmQsZXByb2M6bSxrZXlsZW46MjQsaXZsZW46OH19O3ZhciBiPWZ1bmN0aW9uKG4pe3JldHVybiBnW25dW1wicHJvY1wiXX07dmFyIGs9ZnVuY3Rpb24obil7dmFyIHA9Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20obik7dmFyIG89Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocCk7cmV0dXJuIG99O3ZhciBsPWZ1bmN0aW9uKHQpe3ZhciB1PXt9O3ZhciBvPXQubWF0Y2gobmV3IFJlZ0V4cChcIkRFSy1JbmZvOiAoW14sXSspLChbMC05QS1GYS1mXSspXCIsXCJtXCIpKTtpZihvKXt1LmNpcGhlcj1vWzFdO3UuaXZzYWx0PW9bMl19dmFyIG49dC5tYXRjaChuZXcgUmVnRXhwKFwiLS0tLS1CRUdJTiAoW0EtWl0rKSBQUklWQVRFIEtFWS0tLS0tXCIpKTtpZihuKXt1LnR5cGU9blsxXX12YXIgcj0tMTt2YXIgdj0wO2lmKHQuaW5kZXhPZihcIlxcclxcblxcclxcblwiKSE9LTEpe3I9dC5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpO3Y9Mn1pZih0LmluZGV4T2YoXCJcXG5cXG5cIikhPS0xKXtyPXQuaW5kZXhPZihcIlxcblxcblwiKTt2PTF9dmFyIHE9dC5pbmRleE9mKFwiLS0tLS1FTkRcIik7aWYociE9LTEmJnEhPS0xKXt2YXIgcD10LnN1YnN0cmluZyhyK3YqMixxLXYpO3A9cC5yZXBsYWNlKC9cXHMrL2csXCJcIik7dS5kYXRhPXB9cmV0dXJuIHV9O3ZhciBoPWZ1bmN0aW9uKG8sdyxuKXt2YXIgdD1uLnN1YnN0cmluZygwLDE2KTt2YXIgcj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHQpO3ZhciBwPUNyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHcpO3ZhciBzPWdbb11bXCJrZXlsZW5cIl0rZ1tvXVtcIml2bGVuXCJdO3ZhciB2PVwiXCI7dmFyIHU9bnVsbDtmb3IoOzspe3ZhciBxPUNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpO2lmKHUhPW51bGwpe3EudXBkYXRlKHUpfXEudXBkYXRlKHApO3EudXBkYXRlKHIpO3U9cS5maW5hbGl6ZSgpO3Y9ditDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh1KTtpZih2Lmxlbmd0aD49cyoyKXticmVha319dmFyIHg9e307eC5rZXloZXg9di5zdWJzdHIoMCxnW29dW1wia2V5bGVuXCJdKjIpO3guaXZoZXg9di5zdWJzdHIoZ1tvXVtcImtleWxlblwiXSoyLGdbb11bXCJpdmxlblwiXSoyKTtyZXR1cm4geH07dmFyIGE9ZnVuY3Rpb24obix0LHAsdSl7dmFyIHE9Q3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShuKTt2YXIgbz1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShxKTt2YXIgcz1nW3RdW1wicHJvY1wiXTt2YXIgcj1zKG8scCx1KTtyZXR1cm4gcn07dmFyIGY9ZnVuY3Rpb24obixxLG8scyl7dmFyIHA9Z1txXVtcImVwcm9jXCJdO3ZhciByPXAobixvLHMpO3JldHVybiByfTtyZXR1cm57dmVyc2lvbjpcIjEuMC41XCIsZ2V0SGV4RnJvbVBFTTpmdW5jdGlvbihvLHIpe3ZhciBwPW87aWYocC5pbmRleE9mKFwiQkVHSU4gXCIrcik9PS0xKXt0aHJvd1wiY2FuJ3QgZmluZCBQRU0gaGVhZGVyOiBcIityfXA9cC5yZXBsYWNlKFwiLS0tLS1CRUdJTiBcIityK1wiLS0tLS1cIixcIlwiKTtwPXAucmVwbGFjZShcIi0tLS0tRU5EIFwiK3IrXCItLS0tLVwiLFwiXCIpO3ZhciBxPXAucmVwbGFjZSgvXFxzKy9nLFwiXCIpO3ZhciBuPWI2NHRvaGV4KHEpO3JldHVybiBufSxnZXREZWNyeXB0ZWRLZXlIZXhCeUtleUlWOmZ1bmN0aW9uKG8scixxLHApe3ZhciBuPWIocik7cmV0dXJuIG4obyxxLHApfSxwYXJzZVBLQ1M1UEVNOmZ1bmN0aW9uKG4pe3JldHVybiBsKG4pfSxnZXRLZXlBbmRVbnVzZWRJdkJ5UGFzc2NvZGVBbmRJdnNhbHQ6ZnVuY3Rpb24obyxuLHApe3JldHVybiBoKG8sbixwKX0sZGVjcnlwdEtleUI2NDpmdW5jdGlvbihuLHAsbyxxKXtyZXR1cm4gYShuLHAsbyxxKX0sZ2V0RGVjcnlwdGVkS2V5SGV4OmZ1bmN0aW9uKHcsdil7dmFyIG89bCh3KTt2YXIgcj1vLnR5cGU7dmFyIHA9by5jaXBoZXI7dmFyIG49by5pdnNhbHQ7dmFyIHE9by5kYXRhO3ZhciB1PWgocCx2LG4pO3ZhciB0PXUua2V5aGV4O3ZhciBzPWEocSxwLHQsbik7cmV0dXJuIHN9LGdldFJTQUtleUZyb21FbmNyeXB0ZWRQS0NTNVBFTTpmdW5jdGlvbihwLG8pe3ZhciBxPXRoaXMuZ2V0RGVjcnlwdGVkS2V5SGV4KHAsbyk7dmFyIG49bmV3IFJTQUtleSgpO24ucmVhZFByaXZhdGVLZXlGcm9tQVNOMUhleFN0cmluZyhxKTtyZXR1cm4gbn0sZ2V0RXJ5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleDpmdW5jdGlvbihxLHgscixwKXt2YXIgbj1cIlwiO2lmKHR5cGVvZiByPT1cInVuZGVmaW5lZFwifHxyPT1udWxsKXtyPVwiQUVTLTI1Ni1DQkNcIn1pZih0eXBlb2YgZ1tyXT09XCJ1bmRlZmluZWRcIil7dGhyb3dcIlBLQ1M1UEtFWSB1bnN1cHBvcnRlZCBhbGdvcml0aG06IFwiK3J9aWYodHlwZW9mIHA9PVwidW5kZWZpbmVkXCJ8fHA9PW51bGwpe3ZhciB0PWdbcl1bXCJpdmxlblwiXTt2YXIgcz1rKHQpO3A9cy50b1VwcGVyQ2FzZSgpfXZhciB3PWgocix4LHApO3ZhciB2PXcua2V5aGV4O3ZhciB1PWYocSxyLHYscCk7dmFyIG89dS5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTt2YXIgbj1cIi0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cXHJcXG5cIjtuKz1cIlByb2MtVHlwZTogNCxFTkNSWVBURURcXHJcXG5cIjtuKz1cIkRFSy1JbmZvOiBcIityK1wiLFwiK3ArXCJcXHJcXG5cIjtuKz1cIlxcclxcblwiO24rPW87bis9XCJcXHJcXG4tLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLVxcclxcblwiO3JldHVybiBufSxnZXRFcnlwdGVkUEtDUzVQRU1Gcm9tUlNBS2V5OmZ1bmN0aW9uKEMsRCxvLHMpe3ZhciBBPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7XCJpbnRcIjowfSk7dmFyIHY9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6Qy5ufSk7dmFyIHo9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtcImludFwiOkMuZX0pO3ZhciBCPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkMuZH0pO3ZhciB0PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkMucH0pO3ZhciByPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkMucX0pO3ZhciB5PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkMuZG1wMX0pO3ZhciB1PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkMuZG1xMX0pO3ZhciB4PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkMuY29lZmZ9KTt2YXIgRT1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbQSx2LHosQix0LHIseSx1LHhdfSk7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuZ2V0RXJ5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleCh3LEQsbyxzKX0sbmV3RW5jcnlwdGVkUEtDUzVQRU06ZnVuY3Rpb24obixvLHIscyl7aWYodHlwZW9mIG89PVwidW5kZWZpbmVkXCJ8fG89PW51bGwpe289MTAyNH1pZih0eXBlb2Ygcj09XCJ1bmRlZmluZWRcInx8cj09bnVsbCl7cj1cIjEwMDAxXCJ9dmFyIHA9bmV3IFJTQUtleSgpO3AuZ2VuZXJhdGUobyxyKTt2YXIgcT1udWxsO2lmKHR5cGVvZiBzPT1cInVuZGVmaW5lZFwifHxzPT1udWxsKXtxPXRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUlNBS2V5KHBrZXksbil9ZWxzZXtxPXRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUlNBS2V5KHBrZXksbixzKX1yZXR1cm4gcX0sZ2V0UlNBS2V5RnJvbVBsYWluUEtDUzhQRU06ZnVuY3Rpb24ocCl7aWYocC5tYXRjaCgvRU5DUllQVEVELykpe3Rocm93XCJwZW0gc2hhbGwgYmUgbm90IEVOQ1JZUFRFRFwifXZhciBvPXRoaXMuZ2V0SGV4RnJvbVBFTShwLFwiUFJJVkFURSBLRVlcIik7dmFyIG49dGhpcy5nZXRSU0FLZXlGcm9tUGxhaW5QS0NTOEhleChvKTtyZXR1cm4gbn0sZ2V0UlNBS2V5RnJvbVBsYWluUEtDUzhIZXg6ZnVuY3Rpb24ocSl7dmFyIHA9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocSwwKTtpZihwLmxlbmd0aCE9Myl7dGhyb3dcIm91dGVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMyBlbGVtZW50czogXCIrcC5sZW5ndGh9dmFyIG89QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihxLHBbMV0pO2lmKG8hPVwiMzAwZDA2MDkyYTg2NDg4NmY3MGQwMTAxMDEwNTAwXCIpe3Rocm93XCJQS0NTOCBBbGdvcml0aG1JZGVudGlmaWVyIGlzIG5vdCByc2FFbmM6IFwiK299dmFyIG89QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihxLHBbMV0pO3ZhciByPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmoocSxwWzJdKTt2YXIgcz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihyLDApO3ZhciBuPW5ldyBSU0FLZXkoKTtuLnJlYWRQcml2YXRlS2V5RnJvbUFTTjFIZXhTdHJpbmcocyk7cmV0dXJuIG59LHBhcnNlSGV4T2ZFbmNyeXB0ZWRQS0NTODpmdW5jdGlvbih1KXt2YXIgcT17fTt2YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih1LDApO2lmKHAubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMCkuaXRlbXMgIT0gMjogXCIrcC5sZW5ndGh9cS5jaXBoZXJ0ZXh0PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHUscFsxXSk7dmFyIHc9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodSxwWzBdKTtpZih3Lmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMCkuaXRlbXMgIT0gMjogXCIrdy5sZW5ndGh9aWYoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodSx3WzBdKSE9XCIyYTg2NDg4NmY3MGQwMTA1MGRcIil7dGhyb3dcInRoaXMgb25seSBzdXBwb3J0cyBwa2NzNVBCRVMyXCJ9dmFyIG49QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodSx3WzFdKTtpZih3Lmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xKS5pdGVtcyAhPSAyOiBcIituLmxlbmd0aH12YXIgbz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih1LG5bMV0pO2lmKG8ubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMSkuaXRlbXMgIT0gMjogXCIrby5sZW5ndGh9aWYoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodSxvWzBdKSE9XCIyYTg2NDg4NmY3MGQwMzA3XCIpe3Rocm93XCJ0aGlzIG9ubHkgc3VwcG9ydHMgVHJpcGxlREVTXCJ9cS5lbmNyeXB0aW9uU2NoZW1lQWxnPVwiVHJpcGxlREVTXCI7cS5lbmNyeXB0aW9uU2NoZW1lSVY9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodSxvWzFdKTt2YXIgcj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih1LG5bMF0pO2lmKHIubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMCkuaXRlbXMgIT0gMjogXCIrci5sZW5ndGh9aWYoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodSxyWzBdKSE9XCIyYTg2NDg4NmY3MGQwMTA1MGNcIil7dGhyb3dcInRoaXMgb25seSBzdXBwb3J0cyBwa2NzNVBCS0RGMlwifXZhciB2PUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHUsclsxXSk7aWYodi5sZW5ndGg8Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjAuMSkuaXRlbXMgPCAyOiBcIit2Lmxlbmd0aH1xLnBia2RmMlNhbHQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodSx2WzBdKTt2YXIgcz1BU04xSEVYLmdldEhleE9mVl9BdE9iaih1LHZbMV0pO3RyeXtxLnBia2RmMkl0ZXI9cGFyc2VJbnQocywxNil9Y2F0Y2godCl7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQgcGJrZGYySXRlcjogXCIrc31yZXR1cm4gcX0sZ2V0UEJLREYyS2V5SGV4RnJvbVBhcmFtOmZ1bmN0aW9uKHMsbil7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShzLnBia2RmMlNhbHQpO3ZhciBvPXMucGJrZGYySXRlcjt2YXIgcT1DcnlwdG9KUy5QQktERjIobixyLHtrZXlTaXplOjE5Mi8zMixpdGVyYXRpb25zOm99KTt2YXIgcD1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShxKTtyZXR1cm4gcH0sZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbih2LHcpe3ZhciBwPXRoaXMuZ2V0SGV4RnJvbVBFTSh2LFwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIpO3ZhciBuPXRoaXMucGFyc2VIZXhPZkVuY3J5cHRlZFBLQ1M4KHApO3ZhciBzPVBLQ1M1UEtFWS5nZXRQQktERjJLZXlIZXhGcm9tUGFyYW0obix3KTt2YXIgdD17fTt0LmNpcGhlcnRleHQ9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShuLmNpcGhlcnRleHQpO3ZhciByPUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uocyk7dmFyIHE9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShuLmVuY3J5cHRpb25TY2hlbWVJVik7dmFyIHU9Q3J5cHRvSlMuVHJpcGxlREVTLmRlY3J5cHQodCxyLHtpdjpxfSk7dmFyIG89Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkodSk7cmV0dXJuIG99LGdldFJTQUtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbihxLHApe3ZhciBvPXRoaXMuZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTShxLHApO3ZhciBuPXRoaXMuZ2V0UlNBS2V5RnJvbVBsYWluUEtDUzhIZXgobyk7cmV0dXJuIG59LGdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbihxLG8pe3ZhciBuPXRoaXMuZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTShxLG8pO3ZhciBwPXRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KG4pO3JldHVybiBwfSxwYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKHEpe3ZhciBvPXt9O28uYWxncGFyYW09bnVsbDtpZihxLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgcGxhaW4gUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDEpXCJ9dmFyIHA9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocSwwKTtpZihwLmxlbmd0aCE9Myl7dGhyb3dcIm1hbGZvcm1lZCBwbGFpbiBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMilcIn1pZihxLnN1YnN0cihwWzFdLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDMpXCJ9dmFyIG49QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocSxwWzFdKTtpZihuLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNClcIn1pZihxLnN1YnN0cihuWzBdLDIpIT1cIjA2XCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDUpXCJ9by5hbGdvaWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxuWzBdKTtpZihxLnN1YnN0cihuWzFdLDIpPT1cIjA2XCIpe28uYWxncGFyYW09QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxuWzFdKX1pZihxLnN1YnN0cihwWzJdLDIpIT1cIjA0XCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDYpXCJ9by5rZXlpZHg9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihxLHBbMl0pO3JldHVybiBvfSxnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhQRU06ZnVuY3Rpb24obyl7dmFyIG49dGhpcy5nZXRIZXhGcm9tUEVNKG8sXCJQUklWQVRFIEtFWVwiKTt2YXIgcD10aGlzLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChuKTtyZXR1cm4gcH0sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKG4pe3ZhciBwPXRoaXMucGFyc2VQbGFpblByaXZhdGVQS0NTOEhleChuKTtpZihwLmFsZ29pZD09XCIyYTg2NDg4NmY3MGQwMTAxMDFcIil7dGhpcy5wYXJzZVByaXZhdGVSYXdSU0FLZXlIZXhBdE9iaihuLHApO3ZhciBvPXAua2V5O3ZhciBxPW5ldyBSU0FLZXkoKTtxLnNldFByaXZhdGVFeChvLm4sby5lLG8uZCxvLnAsby5xLG8uZHAsby5kcSxvLmNvKTtyZXR1cm4gcX1lbHNle2lmKHAuYWxnb2lkPT1cIjJhODY0OGNlM2QwMjAxXCIpe3RoaXMucGFyc2VQcml2YXRlUmF3RUNLZXlIZXhBdE9iaihuLHApO2lmKEtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtwLmFsZ3BhcmFtXT09PXVuZGVmaW5lZCl7dGhyb3dcIktKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZSB1bmRlZmluZWQ6IFwiK3AuYWxncGFyYW19dmFyIHI9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW3AuYWxncGFyYW1dO3ZhciBxPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6cixwcnY6cC5rZXl9KTtyZXR1cm4gcX1lbHNle3Rocm93XCJ1bnN1cHBvcnRlZCBwcml2YXRlIGtleSBhbGdvcml0aG1cIn19fSxnZXRSU0FLZXlGcm9tUHVibGljUEtDUzhQRU06ZnVuY3Rpb24obyl7dmFyIHA9dGhpcy5nZXRIZXhGcm9tUEVNKG8sXCJQVUJMSUMgS0VZXCIpO3ZhciBuPXRoaXMuZ2V0UlNBS2V5RnJvbVB1YmxpY1BLQ1M4SGV4KHApO3JldHVybiBufSxnZXRLZXlGcm9tUHVibGljUEtDUzhQRU06ZnVuY3Rpb24obyl7dmFyIHA9dGhpcy5nZXRIZXhGcm9tUEVNKG8sXCJQVUJMSUMgS0VZXCIpO3ZhciBuPXRoaXMuZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4KHApO3JldHVybiBufSxnZXRLZXlGcm9tUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24obyl7dmFyIG49dGhpcy5wYXJzZVB1YmxpY1BLQ1M4SGV4KG8pO2lmKG4uYWxnb2lkPT1cIjJhODY0ODg2ZjcwZDAxMDEwMVwiKXt2YXIgcj10aGlzLnBhcnNlUHVibGljUmF3UlNBS2V5SGV4KG4ua2V5KTt2YXIgcD1uZXcgUlNBS2V5KCk7cC5zZXRQdWJsaWMoci5uLHIuZSk7cmV0dXJuIHB9ZWxzZXtpZihuLmFsZ29pZD09XCIyYTg2NDhjZTNkMDIwMVwiKXtpZihLSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWVbbi5hbGdwYXJhbV09PT11bmRlZmluZWQpe3Rocm93XCJLSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWUgdW5kZWZpbmVkOiBcIituLmFsZ3BhcmFtfXZhciBxPUtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtuLmFsZ3BhcmFtXTt2YXIgcD1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOnEscHViOm4ua2V5fSk7cmV0dXJuIHB9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgcHVibGljIGtleSBhbGdvcml0aG1cIn19fSxwYXJzZVB1YmxpY1Jhd1JTQUtleUhleDpmdW5jdGlvbihwKXt2YXIgbj17fTtpZihwLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMSlcIn12YXIgbz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihwLDApO2lmKG8ubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDIpXCJ9aWYocC5zdWJzdHIob1swXSwyKSE9XCIwMlwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDMpXCJ9bi5uPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHAsb1swXSk7aWYocC5zdWJzdHIob1sxXSwyKSE9XCIwMlwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDQpXCJ9bi5lPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHAsb1sxXSk7cmV0dXJuIG59LHBhcnNlUHJpdmF0ZVJhd1JTQUtleUhleEF0T2JqOmZ1bmN0aW9uKG8scSl7dmFyIHA9cS5rZXlpZHg7aWYoby5zdWJzdHIocCwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBwcml2YXRlIGtleShjb2RlOjAwMSlcIn12YXIgbj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihvLHApO2lmKG4ubGVuZ3RoIT05KXt0aHJvd1wibWFsZm9ybWVkIFJTQSBwcml2YXRlIGtleShjb2RlOjAwMilcIn1xLmtleT17fTtxLmtleS5uPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKG8sblsxXSk7cS5rZXkuZT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihvLG5bMl0pO3Eua2V5LmQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoobyxuWzNdKTtxLmtleS5wPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKG8sbls0XSk7cS5rZXkucT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihvLG5bNV0pO3Eua2V5LmRwPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKG8sbls2XSk7cS5rZXkuZHE9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoobyxuWzddKTtxLmtleS5jbz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihvLG5bOF0pfSxwYXJzZVByaXZhdGVSYXdFQ0tleUhleEF0T2JqOmZ1bmN0aW9uKG8scSl7dmFyIHA9cS5rZXlpZHg7aWYoby5zdWJzdHIocCwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIEVDQyBwcml2YXRlIGtleShjb2RlOjAwMSlcIn12YXIgbj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihvLHApO2lmKG4ubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIEVDQyBwcml2YXRlIGtleShjb2RlOjAwMilcIn1pZihvLnN1YnN0cihuWzFdLDIpIT1cIjA0XCIpe3Rocm93XCJtYWxmb3JtZWQgRUNDIHByaXZhdGUga2V5KGNvZGU6MDAzKVwifXEua2V5PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKG8sblsxXSl9LHBhcnNlUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24ocSl7dmFyIG89e307by5hbGdwYXJhbT1udWxsO3ZhciBwPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHEsMCk7aWYocC5sZW5ndGghPTIpe3Rocm93XCJvdXRlciBERVJTZXF1ZW5jZSBzaGFsbCBoYXZlIDIgZWxlbWVudHM6IFwiK3AubGVuZ3RofXZhciByPXBbMF07aWYocS5zdWJzdHIociwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDEpXCJ9dmFyIG49QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocSxyKTtpZihuLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAyKVwifWlmKHEuc3Vic3RyKG5bMF0sMikhPVwiMDZcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAzKVwifW8uYWxnb2lkPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHEsblswXSk7aWYocS5zdWJzdHIoblsxXSwyKT09XCIwNlwiKXtvLmFsZ3BhcmFtPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHEsblsxXSl9aWYocS5zdWJzdHIocFsxXSwyKSE9XCIwM1wiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDQpXCJ9by5rZXk9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxwWzFdKS5zdWJzdHIoMik7cmV0dXJuIG99LGdldFJTQUtleUZyb21QdWJsaWNQS0NTOEhleDpmdW5jdGlvbihyKXt2YXIgcT1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihyLDApO2lmKHEubGVuZ3RoIT0yKXt0aHJvd1wib3V0ZXIgREVSU2VxdWVuY2Ugc2hhbGwgaGF2ZSAyIGVsZW1lbnRzOiBcIitxLmxlbmd0aH12YXIgcD1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHIscVswXSk7aWYocCE9XCIzMDBkMDYwOTJhODY0ODg2ZjcwZDAxMDEwMTA1MDBcIil7dGhyb3dcIlBLQ1M4IEFsZ29yaXRobUlkIGlzIG5vdCByc2FFbmNyeXB0aW9uXCJ9aWYoci5zdWJzdHIocVsxXSwyKSE9XCIwM1wiKXt0aHJvd1wiUEtDUzggUHVibGljIEtleSBpcyBub3QgQklUU1RSSU5HIGVuY2Fwc2xhdGVkLlwifXZhciB0PUFTTjFIRVguZ2V0U3RhcnRQb3NPZlZfQXRPYmoocixxWzFdKSsyO2lmKHIuc3Vic3RyKHQsMikhPVwiMzBcIil7dGhyb3dcIlBLQ1M4IFB1YmxpYyBLZXkgaXMgbm90IFNFUVVFTkNFLlwifXZhciBuPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHIsdCk7aWYobi5sZW5ndGghPTIpe3Rocm93XCJpbm5lciBERVJTZXF1ZW5jZSBzaGFsbCBoYXZlIDIgZWxlbWVudHM6IFwiK24ubGVuZ3RofWlmKHIuc3Vic3RyKG5bMF0sMikhPVwiMDJcIil7dGhyb3dcIk4gaXMgbm90IEFTTi4xIElOVEVHRVJcIn1pZihyLnN1YnN0cihuWzFdLDIpIT1cIjAyXCIpe3Rocm93XCJFIGlzIG5vdCBBU04uMSBJTlRFR0VSXCJ9dmFyIHU9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocixuWzBdKTt2YXIgcz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihyLG5bMV0pO3ZhciBvPW5ldyBSU0FLZXkoKTtvLnNldFB1YmxpYyh1LHMpO3JldHVybiBvfSx9fSgpO1xuLyohIGtleXV0aWwtMS4wLjE0LmpzIChjKSAyMDEzLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xudmFyIEtFWVVUSUw9ZnVuY3Rpb24oKXt2YXIgZD1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGsoQ3J5cHRvSlMuQUVTLHAscixxKX07dmFyIGU9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBrKENyeXB0b0pTLlRyaXBsZURFUyxwLHIscSl9O3ZhciBhPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gayhDcnlwdG9KUy5ERVMscCxyLHEpfTt2YXIgaz1mdW5jdGlvbihzLHgsdSxxKXt2YXIgcj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHgpO3ZhciB3PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodSk7dmFyIHA9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShxKTt2YXIgdD17fTt0LmtleT13O3QuaXY9cDt0LmNpcGhlcnRleHQ9cjt2YXIgdj1zLmRlY3J5cHQodCx3LHtpdjpwfSk7cmV0dXJuIENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHYpfTt2YXIgbD1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGcoQ3J5cHRvSlMuQUVTLHAscixxKX07dmFyIG89ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBnKENyeXB0b0pTLlRyaXBsZURFUyxwLHIscSl9O3ZhciBmPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gZyhDcnlwdG9KUy5ERVMscCxyLHEpfTt2YXIgZz1mdW5jdGlvbih0LHksdixxKXt2YXIgcz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHkpO3ZhciB4PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uodik7dmFyIHA9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShxKTt2YXIgdz10LmVuY3J5cHQocyx4LHtpdjpwfSk7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh3LnRvU3RyaW5nKCkpO3ZhciB1PUNyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KHIpO3JldHVybiB1fTt2YXIgaT17XCJBRVMtMjU2LUNCQ1wiOntwcm9jOmQsZXByb2M6bCxrZXlsZW46MzIsaXZsZW46MTZ9LFwiQUVTLTE5Mi1DQkNcIjp7cHJvYzpkLGVwcm9jOmwsa2V5bGVuOjI0LGl2bGVuOjE2fSxcIkFFUy0xMjgtQ0JDXCI6e3Byb2M6ZCxlcHJvYzpsLGtleWxlbjoxNixpdmxlbjoxNn0sXCJERVMtRURFMy1DQkNcIjp7cHJvYzplLGVwcm9jOm8sa2V5bGVuOjI0LGl2bGVuOjh9LFwiREVTLUNCQ1wiOntwcm9jOmEsZXByb2M6ZixrZXlsZW46OCxpdmxlbjo4fX07dmFyIGM9ZnVuY3Rpb24ocCl7cmV0dXJuIGlbcF1bXCJwcm9jXCJdfTt2YXIgbT1mdW5jdGlvbihwKXt2YXIgcj1DcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbShwKTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShyKTtyZXR1cm4gcX07dmFyIG49ZnVuY3Rpb24odil7dmFyIHc9e307dmFyIHE9di5tYXRjaChuZXcgUmVnRXhwKFwiREVLLUluZm86IChbXixdKyksKFswLTlBLUZhLWZdKylcIixcIm1cIikpO2lmKHEpe3cuY2lwaGVyPXFbMV07dy5pdnNhbHQ9cVsyXX12YXIgcD12Lm1hdGNoKG5ldyBSZWdFeHAoXCItLS0tLUJFR0lOIChbQS1aXSspIFBSSVZBVEUgS0VZLS0tLS1cIikpO2lmKHApe3cudHlwZT1wWzFdfXZhciB1PS0xO3ZhciB4PTA7aWYodi5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpIT0tMSl7dT12LmluZGV4T2YoXCJcXHJcXG5cXHJcXG5cIik7eD0yfWlmKHYuaW5kZXhPZihcIlxcblxcblwiKSE9LTEpe3U9di5pbmRleE9mKFwiXFxuXFxuXCIpO3g9MX12YXIgdD12LmluZGV4T2YoXCItLS0tLUVORFwiKTtpZih1IT0tMSYmdCE9LTEpe3ZhciByPXYuc3Vic3RyaW5nKHUreCoyLHQteCk7cj1yLnJlcGxhY2UoL1xccysvZyxcIlwiKTt3LmRhdGE9cn1yZXR1cm4gd307dmFyIGo9ZnVuY3Rpb24ocSx5LHApe3ZhciB2PXAuc3Vic3RyaW5nKDAsMTYpO3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uodik7dmFyIHI9Q3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoeSk7dmFyIHU9aVtxXVtcImtleWxlblwiXStpW3FdW1wiaXZsZW5cIl07dmFyIHg9XCJcIjt2YXIgdz1udWxsO2Zvcig7Oyl7dmFyIHM9Q3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7aWYodyE9bnVsbCl7cy51cGRhdGUodyl9cy51cGRhdGUocik7cy51cGRhdGUodCk7dz1zLmZpbmFsaXplKCk7eD14K0NyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHcpO2lmKHgubGVuZ3RoPj11KjIpe2JyZWFrfX12YXIgej17fTt6LmtleWhleD14LnN1YnN0cigwLGlbcV1bXCJrZXlsZW5cIl0qMik7ei5pdmhleD14LnN1YnN0cihpW3FdW1wia2V5bGVuXCJdKjIsaVtxXVtcIml2bGVuXCJdKjIpO3JldHVybiB6fTt2YXIgYj1mdW5jdGlvbihwLHYscix3KXt2YXIgcz1DcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKHApO3ZhciBxPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3ZhciB1PWlbdl1bXCJwcm9jXCJdO3ZhciB0PXUocSxyLHcpO3JldHVybiB0fTt2YXIgaD1mdW5jdGlvbihwLHMscSx1KXt2YXIgcj1pW3NdW1wiZXByb2NcIl07dmFyIHQ9cihwLHEsdSk7cmV0dXJuIHR9O3JldHVybnt2ZXJzaW9uOlwiMS4wLjBcIixnZXRIZXhGcm9tUEVNOmZ1bmN0aW9uKHEsdSl7dmFyIHI9cTtpZihyLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKT09LTEpe3Rocm93XCJjYW4ndCBmaW5kIFBFTSBoZWFkZXI6IFwiK3V9aWYodHlwZW9mIHU9PVwic3RyaW5nXCImJnUhPVwiXCIpe3I9ci5yZXBsYWNlKFwiLS0tLS1CRUdJTiBcIit1K1wiLS0tLS1cIixcIlwiKTtyPXIucmVwbGFjZShcIi0tLS0tRU5EIFwiK3UrXCItLS0tLVwiLFwiXCIpfWVsc2V7cj1yLnJlcGxhY2UoLy0tLS0tQkVHSU4gW14tXSstLS0tLS8sXCJcIik7cj1yLnJlcGxhY2UoLy0tLS0tRU5EIFteLV0rLS0tLS0vLFwiXCIpfXZhciB0PXIucmVwbGFjZSgvXFxzKy9nLFwiXCIpO3ZhciBwPWI2NHRvaGV4KHQpO3JldHVybiBwfSxnZXREZWNyeXB0ZWRLZXlIZXhCeUtleUlWOmZ1bmN0aW9uKHEsdCxzLHIpe3ZhciBwPWModCk7cmV0dXJuIHAocSxzLHIpfSxwYXJzZVBLQ1M1UEVNOmZ1bmN0aW9uKHApe3JldHVybiBuKHApfSxnZXRLZXlBbmRVbnVzZWRJdkJ5UGFzc2NvZGVBbmRJdnNhbHQ6ZnVuY3Rpb24ocSxwLHIpe3JldHVybiBqKHEscCxyKX0sZGVjcnlwdEtleUI2NDpmdW5jdGlvbihwLHIscSxzKXtyZXR1cm4gYihwLHIscSxzKX0sZ2V0RGVjcnlwdGVkS2V5SGV4OmZ1bmN0aW9uKHkseCl7dmFyIHE9bih5KTt2YXIgdD1xLnR5cGU7dmFyIHI9cS5jaXBoZXI7dmFyIHA9cS5pdnNhbHQ7dmFyIHM9cS5kYXRhO3ZhciB3PWoocix4LHApO3ZhciB2PXcua2V5aGV4O3ZhciB1PWIocyxyLHYscCk7cmV0dXJuIHV9LGdldFJTQUtleUZyb21FbmNyeXB0ZWRQS0NTNVBFTTpmdW5jdGlvbihyLHEpe3ZhciBzPXRoaXMuZ2V0RGVjcnlwdGVkS2V5SGV4KHIscSk7dmFyIHA9bmV3IFJTQUtleSgpO3AucmVhZFByaXZhdGVLZXlGcm9tQVNOMUhleFN0cmluZyhzKTtyZXR1cm4gcH0sZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4OmZ1bmN0aW9uKHgscyxBLHQscil7dmFyIHA9XCJcIjtpZih0eXBlb2YgdD09XCJ1bmRlZmluZWRcInx8dD09bnVsbCl7dD1cIkFFUy0yNTYtQ0JDXCJ9aWYodHlwZW9mIGlbdF09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJLRVlVVElMIHVuc3VwcG9ydGVkIGFsZ29yaXRobTogXCIrdH1pZih0eXBlb2Ygcj09XCJ1bmRlZmluZWRcInx8cj09bnVsbCl7dmFyIHY9aVt0XVtcIml2bGVuXCJdO3ZhciB1PW0odik7cj11LnRvVXBwZXJDYXNlKCl9dmFyIHo9aih0LEEscik7dmFyIHk9ei5rZXloZXg7dmFyIHc9aChzLHQseSxyKTt2YXIgcT13LnJlcGxhY2UoLyguezY0fSkvZyxcIiQxXFxyXFxuXCIpO3ZhciBwPVwiLS0tLS1CRUdJTiBcIit4K1wiIFBSSVZBVEUgS0VZLS0tLS1cXHJcXG5cIjtwKz1cIlByb2MtVHlwZTogNCxFTkNSWVBURURcXHJcXG5cIjtwKz1cIkRFSy1JbmZvOiBcIit0K1wiLFwiK3IrXCJcXHJcXG5cIjtwKz1cIlxcclxcblwiO3ArPXE7cCs9XCJcXHJcXG4tLS0tLUVORCBcIit4K1wiIFBSSVZBVEUgS0VZLS0tLS1cXHJcXG5cIjtyZXR1cm4gcH0sZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUlNBS2V5OmZ1bmN0aW9uKEQsRSxyLHQpe3ZhciBCPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7XCJpbnRcIjowfSk7dmFyIHc9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6RC5ufSk7dmFyIEE9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtcImludFwiOkQuZX0pO3ZhciBDPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkQuZH0pO3ZhciB1PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkQucH0pO3ZhciBzPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkQucX0pO3ZhciB6PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkQuZG1wMX0pO3ZhciB2PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkQuZG1xMX0pO3ZhciB5PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkQuY29lZmZ9KTt2YXIgRj1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbQix3LEEsQyx1LHMseix2LHldfSk7dmFyIHg9Ri5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiUlNBXCIseCxFLHIsdCl9LG5ld0VuY3J5cHRlZFBLQ1M1UEVNOmZ1bmN0aW9uKHAscSx0LHUpe2lmKHR5cGVvZiBxPT1cInVuZGVmaW5lZFwifHxxPT1udWxsKXtxPTEwMjR9aWYodHlwZW9mIHQ9PVwidW5kZWZpbmVkXCJ8fHQ9PW51bGwpe3Q9XCIxMDAwMVwifXZhciByPW5ldyBSU0FLZXkoKTtyLmdlbmVyYXRlKHEsdCk7dmFyIHM9bnVsbDtpZih0eXBlb2YgdT09XCJ1bmRlZmluZWRcInx8dT09bnVsbCl7cz10aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVJTQUtleShyLHApfWVsc2V7cz10aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVJTQUtleShyLHAsdSl9cmV0dXJuIHN9LGdldFJTQUtleUZyb21QbGFpblBLQ1M4UEVNOmZ1bmN0aW9uKHIpe2lmKHIubWF0Y2goL0VOQ1JZUFRFRC8pKXt0aHJvd1wicGVtIHNoYWxsIGJlIG5vdCBFTkNSWVBURURcIn12YXIgcT10aGlzLmdldEhleEZyb21QRU0ocixcIlBSSVZBVEUgS0VZXCIpO3ZhciBwPXRoaXMuZ2V0UlNBS2V5RnJvbVBsYWluUEtDUzhIZXgocSk7cmV0dXJuIHB9LGdldFJTQUtleUZyb21QbGFpblBLQ1M4SGV4OmZ1bmN0aW9uKHMpe3ZhciByPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHMsMCk7aWYoci5sZW5ndGghPTMpe3Rocm93XCJvdXRlciBERVJTZXF1ZW5jZSBzaGFsbCBoYXZlIDMgZWxlbWVudHM6IFwiK3IubGVuZ3RofXZhciBxPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmoocyxyWzFdKTtpZihxIT1cIjMwMGQwNjA5MmE4NjQ4ODZmNzBkMDEwMTAxMDUwMFwiKXt0aHJvd1wiUEtDUzggQWxnb3JpdGhtSWRlbnRpZmllciBpcyBub3QgcnNhRW5jOiBcIitxfXZhciBxPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmoocyxyWzFdKTt2YXIgdD1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHMsclsyXSk7dmFyIHU9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodCwwKTt2YXIgcD1uZXcgUlNBS2V5KCk7cC5yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKHUpO3JldHVybiBwfSxwYXJzZUhleE9mRW5jcnlwdGVkUEtDUzg6ZnVuY3Rpb24odyl7dmFyIHM9e307dmFyIHI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodywwKTtpZihyLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDApLml0ZW1zICE9IDI6IFwiK3IubGVuZ3RofXMuY2lwaGVydGV4dD1BU04xSEVYLmdldEhleE9mVl9BdE9iaih3LHJbMV0pO3ZhciB5PUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHcsclswXSk7aWYoeS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjApLml0ZW1zICE9IDI6IFwiK3kubGVuZ3RofWlmKEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHcseVswXSkhPVwiMmE4NjQ4ODZmNzBkMDEwNTBkXCIpe3Rocm93XCJ0aGlzIG9ubHkgc3VwcG9ydHMgcGtjczVQQkVTMlwifXZhciBwPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHcseVsxXSk7aWYoeS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMSkuaXRlbXMgIT0gMjogXCIrcC5sZW5ndGh9dmFyIHE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodyxwWzFdKTtpZihxLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjEpLml0ZW1zICE9IDI6IFwiK3EubGVuZ3RofWlmKEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHcscVswXSkhPVwiMmE4NjQ4ODZmNzBkMDMwN1wiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIFRyaXBsZURFU1wifXMuZW5jcnlwdGlvblNjaGVtZUFsZz1cIlRyaXBsZURFU1wiO3MuZW5jcnlwdGlvblNjaGVtZUlWPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHcscVsxXSk7dmFyIHQ9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodyxwWzBdKTtpZih0Lmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjApLml0ZW1zICE9IDI6IFwiK3QubGVuZ3RofWlmKEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHcsdFswXSkhPVwiMmE4NjQ4ODZmNzBkMDEwNTBjXCIpe3Rocm93XCJ0aGlzIG9ubHkgc3VwcG9ydHMgcGtjczVQQktERjJcIn12YXIgeD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih3LHRbMV0pO2lmKHgubGVuZ3RoPDIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4wLjEpLml0ZW1zIDwgMjogXCIreC5sZW5ndGh9cy5wYmtkZjJTYWx0PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHcseFswXSk7dmFyIHU9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodyx4WzFdKTt0cnl7cy5wYmtkZjJJdGVyPXBhcnNlSW50KHUsMTYpfWNhdGNoKHYpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0IHBia2RmMkl0ZXI6IFwiK3V9cmV0dXJuIHN9LGdldFBCS0RGMktleUhleEZyb21QYXJhbTpmdW5jdGlvbih1LHApe3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodS5wYmtkZjJTYWx0KTt2YXIgcT11LnBia2RmMkl0ZXI7dmFyIHM9Q3J5cHRvSlMuUEJLREYyKHAsdCx7a2V5U2l6ZToxOTIvMzIsaXRlcmF0aW9uczpxfSk7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocyk7cmV0dXJuIHJ9LGdldFBsYWluUEtDUzhIZXhGcm9tRW5jcnlwdGVkUEtDUzhQRU06ZnVuY3Rpb24oeCx5KXt2YXIgcj10aGlzLmdldEhleEZyb21QRU0oeCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKTt2YXIgcD10aGlzLnBhcnNlSGV4T2ZFbmNyeXB0ZWRQS0NTOChyKTt2YXIgdT1LRVlVVElMLmdldFBCS0RGMktleUhleEZyb21QYXJhbShwLHkpO3ZhciB2PXt9O3YuY2lwaGVydGV4dD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAuY2lwaGVydGV4dCk7dmFyIHQ9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh1KTt2YXIgcz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAuZW5jcnlwdGlvblNjaGVtZUlWKTt2YXIgdz1DcnlwdG9KUy5UcmlwbGVERVMuZGVjcnlwdCh2LHQse2l2OnN9KTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3KTtyZXR1cm4gcX0sZ2V0UlNBS2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHMscil7dmFyIHE9dGhpcy5nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNKHMscik7dmFyIHA9dGhpcy5nZXRSU0FLZXlGcm9tUGxhaW5QS0NTOEhleChxKTtyZXR1cm4gcH0sZ2V0S2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHMscSl7dmFyIHA9dGhpcy5nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNKHMscSk7dmFyIHI9dGhpcy5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXgocCk7cmV0dXJuIHJ9LHBhcnNlUGxhaW5Qcml2YXRlUEtDUzhIZXg6ZnVuY3Rpb24ocyl7dmFyIHE9e307cS5hbGdwYXJhbT1udWxsO2lmKHMuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBwbGFpbiBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMSlcIn12YXIgcj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihzLDApO2lmKHIubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIHBsYWluIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDAyKVwifWlmKHMuc3Vic3RyKHJbMV0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMylcIn12YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihzLHJbMV0pO2lmKHAubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDA0KVwifWlmKHMuc3Vic3RyKHBbMF0sMikhPVwiMDZcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNSlcIn1xLmFsZ29pZD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihzLHBbMF0pO2lmKHMuc3Vic3RyKHBbMV0sMik9PVwiMDZcIil7cS5hbGdwYXJhbT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihzLHBbMV0pfWlmKHMuc3Vic3RyKHJbMl0sMikhPVwiMDRcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNilcIn1xLmtleWlkeD1BU04xSEVYLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKHMsclsyXSk7cmV0dXJuIHF9LGdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTTpmdW5jdGlvbihxKXt2YXIgcD10aGlzLmdldEhleEZyb21QRU0ocSxcIlBSSVZBVEUgS0VZXCIpO3ZhciByPXRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHApO3JldHVybiByfSxnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXg6ZnVuY3Rpb24ocCl7dmFyIHc9dGhpcy5wYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHApO2lmKHcuYWxnb2lkPT1cIjJhODY0ODg2ZjcwZDAxMDEwMVwiKXt0aGlzLnBhcnNlUHJpdmF0ZVJhd1JTQUtleUhleEF0T2JqKHAsdyk7dmFyIHU9dy5rZXk7dmFyIHo9bmV3IFJTQUtleSgpO3ouc2V0UHJpdmF0ZUV4KHUubix1LmUsdS5kLHUucCx1LnEsdS5kcCx1LmRxLHUuY28pO3JldHVybiB6fWVsc2V7aWYody5hbGdvaWQ9PVwiMmE4NjQ4Y2UzZDAyMDFcIil7dGhpcy5wYXJzZVByaXZhdGVSYXdFQ0tleUhleEF0T2JqKHAsdyk7aWYoS0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW3cuYWxncGFyYW1dPT09dW5kZWZpbmVkKXt0aHJvd1wiS0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lIHVuZGVmaW5lZDogXCIrdy5hbGdwYXJhbX12YXIgdj1LSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWVbdy5hbGdwYXJhbV07dmFyIHo9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTp2fSk7ei5zZXRQdWJsaWNLZXlIZXgody5wdWJrZXkpO3ouc2V0UHJpdmF0ZUtleUhleCh3LmtleSk7ei5pc1B1YmxpYz1mYWxzZTtyZXR1cm4gen1lbHNle2lmKHcuYWxnb2lkPT1cIjJhODY0OGNlMzgwNDAxXCIpe3ZhciB0PUFTTjFIRVguZ2V0VmJ5TGlzdChwLDAsWzEsMSwwXSxcIjAyXCIpO3ZhciBzPUFTTjFIRVguZ2V0VmJ5TGlzdChwLDAsWzEsMSwxXSxcIjAyXCIpO3ZhciB5PUFTTjFIRVguZ2V0VmJ5TGlzdChwLDAsWzEsMSwyXSxcIjAyXCIpO3ZhciBCPUFTTjFIRVguZ2V0VmJ5TGlzdChwLDAsWzIsMF0sXCIwMlwiKTt2YXIgcj1uZXcgQmlnSW50ZWdlcih0LDE2KTt2YXIgcT1uZXcgQmlnSW50ZWdlcihzLDE2KTt2YXIgeD1uZXcgQmlnSW50ZWdlcih5LDE2KTt2YXIgQT1uZXcgQmlnSW50ZWdlcihCLDE2KTt2YXIgej1uZXcgS0pVUi5jcnlwdG8uRFNBKCk7ei5zZXRQcml2YXRlKHIscSx4LG51bGwsQSk7cmV0dXJuIHp9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgcHJpdmF0ZSBrZXkgYWxnb3JpdGhtXCJ9fX19LGdldFJTQUtleUZyb21QdWJsaWNQS0NTOFBFTTpmdW5jdGlvbihxKXt2YXIgcj10aGlzLmdldEhleEZyb21QRU0ocSxcIlBVQkxJQyBLRVlcIik7dmFyIHA9dGhpcy5nZXRSU0FLZXlGcm9tUHVibGljUEtDUzhIZXgocik7cmV0dXJuIHB9LGdldEtleUZyb21QdWJsaWNQS0NTOFBFTTpmdW5jdGlvbihxKXt2YXIgcj10aGlzLmdldEhleEZyb21QRU0ocSxcIlBVQkxJQyBLRVlcIik7dmFyIHA9dGhpcy5nZXRLZXlGcm9tUHVibGljUEtDUzhIZXgocik7cmV0dXJuIHB9LGdldEtleUZyb21QdWJsaWNQS0NTOEhleDpmdW5jdGlvbihxKXt2YXIgcD10aGlzLnBhcnNlUHVibGljUEtDUzhIZXgocSk7aWYocC5hbGdvaWQ9PVwiMmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3ZhciB1PXRoaXMucGFyc2VQdWJsaWNSYXdSU0FLZXlIZXgocC5rZXkpO3ZhciByPW5ldyBSU0FLZXkoKTtyLnNldFB1YmxpYyh1Lm4sdS5lKTtyZXR1cm4gcn1lbHNle2lmKHAuYWxnb2lkPT1cIjJhODY0OGNlM2QwMjAxXCIpe2lmKEtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtwLmFsZ3BhcmFtXT09PXVuZGVmaW5lZCl7dGhyb3dcIktKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZSB1bmRlZmluZWQ6IFwiK3AuYWxncGFyYW19dmFyIHM9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW3AuYWxncGFyYW1dO3ZhciByPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6cyxwdWI6cC5rZXl9KTtyZXR1cm4gcn1lbHNle2lmKHAuYWxnb2lkPT1cIjJhODY0OGNlMzgwNDAxXCIpe3ZhciB0PXAuYWxncGFyYW07dmFyIHY9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocC5rZXksMCk7dmFyIHI9bmV3IEtKVVIuY3J5cHRvLkRTQSgpO3Iuc2V0UHVibGljKG5ldyBCaWdJbnRlZ2VyKHQucCwxNiksbmV3IEJpZ0ludGVnZXIodC5xLDE2KSxuZXcgQmlnSW50ZWdlcih0LmcsMTYpLG5ldyBCaWdJbnRlZ2VyKHYsMTYpKTtyZXR1cm4gcn1lbHNle3Rocm93XCJ1bnN1cHBvcnRlZCBwdWJsaWMga2V5IGFsZ29yaXRobVwifX19fSxwYXJzZVB1YmxpY1Jhd1JTQUtleUhleDpmdW5jdGlvbihyKXt2YXIgcD17fTtpZihyLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMSlcIn12YXIgcT1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihyLDApO2lmKHEubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDIpXCJ9aWYoci5zdWJzdHIocVswXSwyKSE9XCIwMlwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDMpXCJ9cC5uPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHIscVswXSk7aWYoci5zdWJzdHIocVsxXSwyKSE9XCIwMlwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDQpXCJ9cC5lPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHIscVsxXSk7cmV0dXJuIHB9LHBhcnNlUHJpdmF0ZVJhd1JTQUtleUhleEF0T2JqOmZ1bmN0aW9uKHEscyl7dmFyIHI9cy5rZXlpZHg7aWYocS5zdWJzdHIociwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBwcml2YXRlIGtleShjb2RlOjAwMSlcIn12YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihxLHIpO2lmKHAubGVuZ3RoIT05KXt0aHJvd1wibWFsZm9ybWVkIFJTQSBwcml2YXRlIGtleShjb2RlOjAwMilcIn1zLmtleT17fTtzLmtleS5uPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHEscFsxXSk7cy5rZXkuZT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLHBbMl0pO3Mua2V5LmQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxwWzNdKTtzLmtleS5wPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHEscFs0XSk7cy5rZXkucT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLHBbNV0pO3Mua2V5LmRwPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHEscFs2XSk7cy5rZXkuZHE9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxwWzddKTtzLmtleS5jbz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLHBbOF0pfSxwYXJzZVByaXZhdGVSYXdFQ0tleUhleEF0T2JqOmZ1bmN0aW9uKHAsdCl7dmFyIHE9dC5rZXlpZHg7dmFyIHI9QVNOMUhFWC5nZXRWYnlMaXN0KHAscSxbMV0sXCIwNFwiKTt2YXIgcz1BU04xSEVYLmdldFZieUxpc3QocCxxLFsyLDBdLFwiMDNcIikuc3Vic3RyKDIpO3Qua2V5PXI7dC5wdWJrZXk9c30scGFyc2VQdWJsaWNQS0NTOEhleDpmdW5jdGlvbihzKXt2YXIgcT17fTtxLmFsZ3BhcmFtPW51bGw7dmFyIHI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocywwKTtpZihyLmxlbmd0aCE9Mil7dGhyb3dcIm91dGVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMiBlbGVtZW50czogXCIrci5sZW5ndGh9dmFyIHQ9clswXTtpZihzLnN1YnN0cih0LDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMSlcIn12YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihzLHQpO2lmKHAubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDIpXCJ9aWYocy5zdWJzdHIocFswXSwyKSE9XCIwNlwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDMpXCJ9cS5hbGdvaWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocyxwWzBdKTtpZihzLnN1YnN0cihwWzFdLDIpPT1cIjA2XCIpe3EuYWxncGFyYW09QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocyxwWzFdKX1lbHNle2lmKHMuc3Vic3RyKHBbMV0sMik9PVwiMzBcIil7cS5hbGdwYXJhbT17fTtxLmFsZ3BhcmFtLnA9QVNOMUhFWC5nZXRWYnlMaXN0KHMscFsxXSxbMF0sXCIwMlwiKTtxLmFsZ3BhcmFtLnE9QVNOMUhFWC5nZXRWYnlMaXN0KHMscFsxXSxbMV0sXCIwMlwiKTtxLmFsZ3BhcmFtLmc9QVNOMUhFWC5nZXRWYnlMaXN0KHMscFsxXSxbMl0sXCIwMlwiKX19aWYocy5zdWJzdHIoclsxXSwyKSE9XCIwM1wiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDQpXCJ9cS5rZXk9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocyxyWzFdKS5zdWJzdHIoMik7cmV0dXJuIHF9LGdldFJTQUtleUZyb21QdWJsaWNQS0NTOEhleDpmdW5jdGlvbih0KXt2YXIgcz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih0LDApO2lmKHMubGVuZ3RoIT0yKXt0aHJvd1wib3V0ZXIgREVSU2VxdWVuY2Ugc2hhbGwgaGF2ZSAyIGVsZW1lbnRzOiBcIitzLmxlbmd0aH12YXIgcj1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHQsc1swXSk7aWYociE9XCIzMDBkMDYwOTJhODY0ODg2ZjcwZDAxMDEwMTA1MDBcIil7dGhyb3dcIlBLQ1M4IEFsZ29yaXRobUlkIGlzIG5vdCByc2FFbmNyeXB0aW9uXCJ9aWYodC5zdWJzdHIoc1sxXSwyKSE9XCIwM1wiKXt0aHJvd1wiUEtDUzggUHVibGljIEtleSBpcyBub3QgQklUU1RSSU5HIGVuY2Fwc2xhdGVkLlwifXZhciB2PUFTTjFIRVguZ2V0U3RhcnRQb3NPZlZfQXRPYmoodCxzWzFdKSsyO2lmKHQuc3Vic3RyKHYsMikhPVwiMzBcIil7dGhyb3dcIlBLQ1M4IFB1YmxpYyBLZXkgaXMgbm90IFNFUVVFTkNFLlwifXZhciBwPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHQsdik7aWYocC5sZW5ndGghPTIpe3Rocm93XCJpbm5lciBERVJTZXF1ZW5jZSBzaGFsbCBoYXZlIDIgZWxlbWVudHM6IFwiK3AubGVuZ3RofWlmKHQuc3Vic3RyKHBbMF0sMikhPVwiMDJcIil7dGhyb3dcIk4gaXMgbm90IEFTTi4xIElOVEVHRVJcIn1pZih0LnN1YnN0cihwWzFdLDIpIT1cIjAyXCIpe3Rocm93XCJFIGlzIG5vdCBBU04uMSBJTlRFR0VSXCJ9dmFyIHc9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodCxwWzBdKTt2YXIgdT1BU04xSEVYLmdldEhleE9mVl9BdE9iaih0LHBbMV0pO3ZhciBxPW5ldyBSU0FLZXkoKTtxLnNldFB1YmxpYyh3LHUpO3JldHVybiBxfSx9fSgpO0tFWVVUSUwuZ2V0S2V5PWZ1bmN0aW9uKGYsZSxoKXtpZih0eXBlb2YgUlNBS2V5IT1cInVuZGVmaW5lZFwiJiZmIGluc3RhbmNlb2YgUlNBS2V5KXtyZXR1cm4gZn1pZih0eXBlb2YgS0pVUi5jcnlwdG8uRUNEU0EhPVwidW5kZWZpbmVkXCImJmYgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSl7cmV0dXJuIGZ9aWYodHlwZW9mIEtKVVIuY3J5cHRvLkRTQSE9XCJ1bmRlZmluZWRcIiYmZiBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSl7cmV0dXJuIGZ9aWYoZi5jdXJ2ZSE9PXVuZGVmaW5lZCYmZi54eSE9PXVuZGVmaW5lZCYmZi5kPT09dW5kZWZpbmVkKXtyZXR1cm4gbmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtwdWI6Zi54eSxjdXJ2ZTpmLmN1cnZlfSl9aWYoZi5jdXJ2ZSE9PXVuZGVmaW5lZCYmZi5kIT09dW5kZWZpbmVkKXtyZXR1cm4gbmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtwcnY6Zi5kLGN1cnZlOmYuY3VydmV9KX1pZihmLmt0eT09PXVuZGVmaW5lZCYmZi5uIT09dW5kZWZpbmVkJiZmLmUhPT11bmRlZmluZWQmJmYuZD09PXVuZGVmaW5lZCl7dmFyIHc9bmV3IFJTQUtleSgpO3cuc2V0UHVibGljKGYubixmLmUpO3JldHVybiB3fWlmKGYua3R5PT09dW5kZWZpbmVkJiZmLm4hPT11bmRlZmluZWQmJmYuZSE9PXVuZGVmaW5lZCYmZi5kIT09dW5kZWZpbmVkJiZmLnAhPT11bmRlZmluZWQmJmYucSE9PXVuZGVmaW5lZCYmZi5kcCE9PXVuZGVmaW5lZCYmZi5kcSE9PXVuZGVmaW5lZCYmZi5jbyE9PXVuZGVmaW5lZCYmZi5xaT09PXVuZGVmaW5lZCl7dmFyIHc9bmV3IFJTQUtleSgpO3cuc2V0UHJpdmF0ZUV4KGYubixmLmUsZi5kLGYucCxmLnEsZi5kcCxmLmRxLGYuY28pO3JldHVybiB3fWlmKGYua3R5PT09dW5kZWZpbmVkJiZmLm4hPT11bmRlZmluZWQmJmYuZSE9PXVuZGVmaW5lZCYmZi5kIT09dW5kZWZpbmVkJiZmLnA9PT11bmRlZmluZWQpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnNldFByaXZhdGUoZi5uLGYuZSxmLmQpO3JldHVybiB3fWlmKGYucCE9PXVuZGVmaW5lZCYmZi5xIT09dW5kZWZpbmVkJiZmLmchPT11bmRlZmluZWQmJmYueSE9PXVuZGVmaW5lZCYmZi54PT09dW5kZWZpbmVkKXt2YXIgdz1uZXcgS0pVUi5jcnlwdG8uRFNBKCk7dy5zZXRQdWJsaWMoZi5wLGYucSxmLmcsZi55KTtyZXR1cm4gd31pZihmLnAhPT11bmRlZmluZWQmJmYucSE9PXVuZGVmaW5lZCYmZi5nIT09dW5kZWZpbmVkJiZmLnkhPT11bmRlZmluZWQmJmYueCE9PXVuZGVmaW5lZCl7dmFyIHc9bmV3IEtKVVIuY3J5cHRvLkRTQSgpO3cuc2V0UHJpdmF0ZShmLnAsZi5xLGYuZyxmLnksZi54KTtyZXR1cm4gd31pZihmLmt0eT09PVwiUlNBXCImJmYubiE9PXVuZGVmaW5lZCYmZi5lIT09dW5kZWZpbmVkJiZmLmQ9PT11bmRlZmluZWQpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnNldFB1YmxpYyhiNjR1dG9oZXgoZi5uKSxiNjR1dG9oZXgoZi5lKSk7cmV0dXJuIHd9aWYoZi5rdHk9PT1cIlJTQVwiJiZmLm4hPT11bmRlZmluZWQmJmYuZSE9PXVuZGVmaW5lZCYmZi5kIT09dW5kZWZpbmVkJiZmLnAhPT11bmRlZmluZWQmJmYucSE9PXVuZGVmaW5lZCYmZi5kcCE9PXVuZGVmaW5lZCYmZi5kcSE9PXVuZGVmaW5lZCYmZi5xaSE9PXVuZGVmaW5lZCl7dmFyIHc9bmV3IFJTQUtleSgpO3cuc2V0UHJpdmF0ZUV4KGI2NHV0b2hleChmLm4pLGI2NHV0b2hleChmLmUpLGI2NHV0b2hleChmLmQpLGI2NHV0b2hleChmLnApLGI2NHV0b2hleChmLnEpLGI2NHV0b2hleChmLmRwKSxiNjR1dG9oZXgoZi5kcSksYjY0dXRvaGV4KGYucWkpKTtyZXR1cm4gd31pZihmLmt0eT09PVwiUlNBXCImJmYubiE9PXVuZGVmaW5lZCYmZi5lIT09dW5kZWZpbmVkJiZmLmQhPT11bmRlZmluZWQpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnNldFByaXZhdGUoYjY0dXRvaGV4KGYubiksYjY0dXRvaGV4KGYuZSksYjY0dXRvaGV4KGYuZCkpO3JldHVybiB3fWlmKGYua3R5PT09XCJFQ1wiJiZmLmNydiE9PXVuZGVmaW5lZCYmZi54IT09dW5kZWZpbmVkJiZmLnkhPT11bmRlZmluZWQmJmYuZD09PXVuZGVmaW5lZCl7dmFyIGQ9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpmLmNydn0pO3ZhciBsPWQuZWNwYXJhbXMua2V5bGVuLzQ7dmFyIHI9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChmLngpKS5zbGljZSgtbCk7dmFyIG49KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChmLnkpKS5zbGljZSgtbCk7dmFyIG09XCIwNFwiK3IrbjtkLnNldFB1YmxpY0tleUhleChtKTtyZXR1cm4gZH1pZihmLmt0eT09PVwiRUNcIiYmZi5jcnYhPT11bmRlZmluZWQmJmYueCE9PXVuZGVmaW5lZCYmZi55IT09dW5kZWZpbmVkJiZmLmQhPT11bmRlZmluZWQpe3ZhciBkPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6Zi5jcnZ9KTt2YXIgbD1kLmVjcGFyYW1zLmtleWxlbi80O3ZhciByPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgoZi54KSkuc2xpY2UoLWwpO3ZhciBuPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgoZi55KSkuc2xpY2UoLWwpO3ZhciBtPVwiMDRcIityK247dmFyIGE9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChmLmQpKS5zbGljZSgtbCk7ZC5zZXRQdWJsaWNLZXlIZXgobSk7ZC5zZXRQcml2YXRlS2V5SGV4KGEpO3JldHVybiBkfWlmKGYuaW5kZXhPZihcIi1FTkQgQ0VSVElGSUNBVEUtXCIsMCkhPS0xfHxmLmluZGV4T2YoXCItRU5EIFg1MDkgQ0VSVElGSUNBVEUtXCIsMCkhPS0xfHxmLmluZGV4T2YoXCItRU5EIFRSVVNURUQgQ0VSVElGSUNBVEUtXCIsMCkhPS0xKXtyZXR1cm4gWDUwOS5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTShmKX1pZihoPT09XCJwa2NzOHB1YlwiKXtyZXR1cm4gS0VZVVRJTC5nZXRLZXlGcm9tUHVibGljUEtDUzhIZXgoZil9aWYoZi5pbmRleE9mKFwiLUVORCBQVUJMSUMgS0VZLVwiKSE9LTEpe3JldHVybiBLRVlVVElMLmdldEtleUZyb21QdWJsaWNQS0NTOFBFTShmKX1pZihoPT09XCJwa2NzNXBydlwiKXt2YXIgdz1uZXcgUlNBS2V5KCk7dy5yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKGYpO3JldHVybiB3fWlmKGg9PT1cInBrY3M1cHJ2XCIpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnJlYWRQcml2YXRlS2V5RnJvbUFTTjFIZXhTdHJpbmcoZik7cmV0dXJuIHd9aWYoZi5pbmRleE9mKFwiLUVORCBSU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmZi5pbmRleE9mKFwiNCxFTkNSWVBURURcIik9PS0xKXt2YXIgaT1LRVlVVElMLmdldEhleEZyb21QRU0oZixcIlJTQSBQUklWQVRFIEtFWVwiKTtyZXR1cm4gS0VZVVRJTC5nZXRLZXkoaSxudWxsLFwicGtjczVwcnZcIil9aWYoZi5pbmRleE9mKFwiLUVORCBEU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmZi5pbmRleE9mKFwiNCxFTkNSWVBURURcIik9PS0xKXt2YXIgdT10aGlzLmdldEhleEZyb21QRU0oZixcIkRTQSBQUklWQVRFIEtFWVwiKTt2YXIgdD1BU04xSEVYLmdldFZieUxpc3QodSwwLFsxXSxcIjAyXCIpO3ZhciBzPUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzJdLFwiMDJcIik7dmFyIHY9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbM10sXCIwMlwiKTt2YXIgaj1BU04xSEVYLmdldFZieUxpc3QodSwwLFs0XSxcIjAyXCIpO3ZhciBrPUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzVdLFwiMDJcIik7dmFyIHc9bmV3IEtKVVIuY3J5cHRvLkRTQSgpO3cuc2V0UHJpdmF0ZShuZXcgQmlnSW50ZWdlcih0LDE2KSxuZXcgQmlnSW50ZWdlcihzLDE2KSxuZXcgQmlnSW50ZWdlcih2LDE2KSxuZXcgQmlnSW50ZWdlcihqLDE2KSxuZXcgQmlnSW50ZWdlcihrLDE2KSk7cmV0dXJuIHd9aWYoZi5pbmRleE9mKFwiLUVORCBQUklWQVRFIEtFWS1cIikhPS0xKXtyZXR1cm4gS0VZVVRJTC5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhQRU0oZil9aWYoZi5pbmRleE9mKFwiLUVORCBSU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmZi5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXtyZXR1cm4gS0VZVVRJTC5nZXRSU0FLZXlGcm9tRW5jcnlwdGVkUEtDUzVQRU0oZixlKX1pZihmLmluZGV4T2YoXCItRU5EIEVDIFBSSVZBVEUgS0VZLVwiKSE9LTEmJmYuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpIT0tMSl7dmFyIHU9S0VZVVRJTC5nZXREZWNyeXB0ZWRLZXlIZXgoZixlKTt2YXIgdz1BU04xSEVYLmdldFZieUxpc3QodSwwLFsxXSxcIjA0XCIpO3ZhciBjPUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzIsMF0sXCIwNlwiKTt2YXIgbz1BU04xSEVYLmdldFZieUxpc3QodSwwLFszLDBdLFwiMDNcIikuc3Vic3RyKDIpO3ZhciBiPVwiXCI7aWYoS0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW2NdIT09dW5kZWZpbmVkKXtiPUtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtjXX1lbHNle3Rocm93XCJ1bmRlZmluZWQgT0lEKGhleCkgaW4gS0pVUi5jcnlwdG8uT0lEOiBcIitjfXZhciBkPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7bmFtZTpifSk7ZC5zZXRQdWJsaWNLZXlIZXgobyk7ZC5zZXRQcml2YXRlS2V5SGV4KHcpO2QuaXNQdWJsaWM9ZmFsc2U7cmV0dXJuIGR9aWYoZi5pbmRleE9mKFwiLUVORCBEU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmZi5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXt2YXIgdT1LRVlVVElMLmdldERlY3J5cHRlZEtleUhleChmLGUpO3ZhciB0PUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzFdLFwiMDJcIik7dmFyIHM9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMl0sXCIwMlwiKTt2YXIgdj1BU04xSEVYLmdldFZieUxpc3QodSwwLFszXSxcIjAyXCIpO3ZhciBqPUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzRdLFwiMDJcIik7dmFyIGs9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbNV0sXCIwMlwiKTt2YXIgdz1uZXcgS0pVUi5jcnlwdG8uRFNBKCk7dy5zZXRQcml2YXRlKG5ldyBCaWdJbnRlZ2VyKHQsMTYpLG5ldyBCaWdJbnRlZ2VyKHMsMTYpLG5ldyBCaWdJbnRlZ2VyKHYsMTYpLG5ldyBCaWdJbnRlZ2VyKGosMTYpLG5ldyBCaWdJbnRlZ2VyKGssMTYpKTtyZXR1cm4gd31pZihmLmluZGV4T2YoXCItRU5EIEVOQ1JZUFRFRCBQUklWQVRFIEtFWS1cIikhPS0xKXtyZXR1cm4gS0VZVVRJTC5nZXRLZXlGcm9tRW5jcnlwdGVkUEtDUzhQRU0oZixlKX10aHJvd1wibm90IHN1cHBvcnRlZCBhcmd1bWVudFwifTtLRVlVVElMLmdlbmVyYXRlS2V5cGFpcj1mdW5jdGlvbihhLGMpe2lmKGE9PVwiUlNBXCIpe3ZhciBiPWM7dmFyIGg9bmV3IFJTQUtleSgpO2guZ2VuZXJhdGUoYixcIjEwMDAxXCIpO2guaXNQcml2YXRlPXRydWU7aC5pc1B1YmxpYz10cnVlO3ZhciBmPW5ldyBSU0FLZXkoKTt2YXIgZT1oLm4udG9TdHJpbmcoMTYpO3ZhciBpPWguZS50b1N0cmluZygxNik7Zi5zZXRQdWJsaWMoZSxpKTtmLmlzUHJpdmF0ZT1mYWxzZTtmLmlzUHVibGljPXRydWU7dmFyIGs9e307ay5wcnZLZXlPYmo9aDtrLnB1YktleU9iaj1mO3JldHVybiBrfWVsc2V7aWYoYT09XCJFQ1wiKXt2YXIgZD1jO3ZhciBnPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZH0pO3ZhciBqPWcuZ2VuZXJhdGVLZXlQYWlySGV4KCk7dmFyIGg9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpkfSk7aC5zZXRQdWJsaWNLZXlIZXgoai5lY3B1YmhleCk7aC5zZXRQcml2YXRlS2V5SGV4KGouZWNwcnZoZXgpO2guaXNQcml2YXRlPXRydWU7aC5pc1B1YmxpYz1mYWxzZTt2YXIgZj1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOmR9KTtmLnNldFB1YmxpY0tleUhleChqLmVjcHViaGV4KTtmLmlzUHJpdmF0ZT1mYWxzZTtmLmlzUHVibGljPXRydWU7dmFyIGs9e307ay5wcnZLZXlPYmo9aDtrLnB1YktleU9iaj1mO3JldHVybiBrfWVsc2V7dGhyb3dcInVua25vd24gYWxnb3JpdGhtOiBcIithfX19O0tFWVVUSUwuZ2V0UEVNPWZ1bmN0aW9uKGEscixvLGcsail7dmFyIHY9S0pVUi5hc24xO3ZhciB1PUtKVVIuY3J5cHRvO2Z1bmN0aW9uIHAocyl7dmFyIHc9S0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh7c2VxOlt7XCJpbnRcIjowfSx7XCJpbnRcIjp7YmlnaW50OnMubn19LHtcImludFwiOnMuZX0se1wiaW50XCI6e2JpZ2ludDpzLmR9fSx7XCJpbnRcIjp7YmlnaW50OnMucH19LHtcImludFwiOntiaWdpbnQ6cy5xfX0se1wiaW50XCI6e2JpZ2ludDpzLmRtcDF9fSx7XCJpbnRcIjp7YmlnaW50OnMuZG1xMX19LHtcImludFwiOntiaWdpbnQ6cy5jb2VmZn19XX0pO3JldHVybiB3fWZ1bmN0aW9uIHEodyl7dmFyIHM9S0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh7c2VxOlt7XCJpbnRcIjoxfSx7b2N0c3RyOntoZXg6dy5wcnZLZXlIZXh9fSx7dGFnOltcImEwXCIsdHJ1ZSx7b2lkOntuYW1lOncuY3VydmVOYW1lfX1dfSx7dGFnOltcImExXCIsdHJ1ZSx7Yml0c3RyOntoZXg6XCIwMFwiK3cucHViS2V5SGV4fX1dfV19KTtyZXR1cm4gc31mdW5jdGlvbiBuKHMpe3ZhciB3PUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3Qoe3NlcTpbe1wiaW50XCI6MH0se1wiaW50XCI6e2JpZ2ludDpzLnB9fSx7XCJpbnRcIjp7YmlnaW50OnMucX19LHtcImludFwiOntiaWdpbnQ6cy5nfX0se1wiaW50XCI6e2JpZ2ludDpzLnl9fSx7XCJpbnRcIjp7YmlnaW50OnMueH19XX0pO3JldHVybiB3fWlmKCgodHlwZW9mIFJTQUtleSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIFJTQUtleSl8fCh0eXBlb2YgdS5EU0EhPVwidW5kZWZpbmVkXCImJmEgaW5zdGFuY2VvZiB1LkRTQSl8fCh0eXBlb2YgdS5FQ0RTQSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIHUuRUNEU0EpKSYmYS5pc1B1YmxpYz09dHJ1ZSYmKHI9PT11bmRlZmluZWR8fHI9PVwiUEtDUzhQVUJcIikpe3ZhciB0PW5ldyBLSlVSLmFzbjEueDUwOS5TdWJqZWN0UHVibGljS2V5SW5mbyhhKTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KG0sXCJQVUJMSUMgS0VZXCIpfWlmKHI9PVwiUEtDUzFQUlZcIiYmdHlwZW9mIFJTQUtleSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIFJTQUtleSYmKG89PT11bmRlZmluZWR8fG89PW51bGwpJiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIHQ9cChhKTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KG0sXCJSU0EgUFJJVkFURSBLRVlcIil9aWYocj09XCJQS0NTMVBSVlwiJiZ0eXBlb2YgUlNBS2V5IT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0EmJihvPT09dW5kZWZpbmVkfHxvPT1udWxsKSYmYS5pc1ByaXZhdGU9PXRydWUpe3ZhciBmPW5ldyBLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcih7bmFtZTphLmN1cnZlTmFtZX0pO3ZhciBsPWYuZ2V0RW5jb2RlZEhleCgpO3ZhciBlPXEoYSk7dmFyIGs9ZS5nZXRFbmNvZGVkSGV4KCk7dmFyIGk9XCJcIjtpKz12LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgobCxcIkVDIFBBUkFNRVRFUlNcIik7aSs9di5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KGssXCJFQyBQUklWQVRFIEtFWVwiKTtyZXR1cm4gaX1pZihyPT1cIlBLQ1MxUFJWXCImJnR5cGVvZiBLSlVSLmNyeXB0by5EU0EhPVwidW5kZWZpbmVkXCImJmEgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5EU0EmJihvPT09dW5kZWZpbmVkfHxvPT1udWxsKSYmYS5pc1ByaXZhdGU9PXRydWUpe3ZhciB0PW4oYSk7dmFyIG09dC5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHYuQVNOMVV0aWwuZ2V0UEVNU3RyaW5nRnJvbUhleChtLFwiRFNBIFBSSVZBVEUgS0VZXCIpfWlmKHI9PVwiUEtDUzVQUlZcIiYmdHlwZW9mIFJTQUtleSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIFJTQUtleSYmKG8hPT11bmRlZmluZWQmJm8hPW51bGwpJiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIHQ9cChhKTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtpZihnPT09dW5kZWZpbmVkKXtnPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiUlNBXCIsbSxvLGcpfWlmKHI9PVwiUEtDUzVQUlZcIiYmdHlwZW9mIEtKVVIuY3J5cHRvLkVDRFNBIT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0EmJihvIT09dW5kZWZpbmVkJiZvIT1udWxsKSYmYS5pc1ByaXZhdGU9PXRydWUpe3ZhciB0PXEoYSk7dmFyIG09dC5nZXRFbmNvZGVkSGV4KCk7aWYoZz09PXVuZGVmaW5lZCl7Zz1cIkRFUy1FREUzLUNCQ1wifXJldHVybiB0aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleChcIkVDXCIsbSxvLGcpfWlmKHI9PVwiUEtDUzVQUlZcIiYmdHlwZW9mIEtKVVIuY3J5cHRvLkRTQSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSYmKG8hPT11bmRlZmluZWQmJm8hPW51bGwpJiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIHQ9bihhKTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtpZihnPT09dW5kZWZpbmVkKXtnPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiRFNBXCIsbSxvLGcpfXZhciBoPWZ1bmN0aW9uKHcscyl7dmFyIHk9Yih3LHMpO3ZhciB4PW5ldyBLSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHtzZXE6W3tzZXE6W3tvaWQ6e25hbWU6XCJwa2NzNVBCRVMyXCJ9fSx7c2VxOlt7c2VxOlt7b2lkOntuYW1lOlwicGtjczVQQktERjJcIn19LHtzZXE6W3tvY3RzdHI6e2hleDp5LnBia2RmMlNhbHR9fSx7XCJpbnRcIjp5LnBia2RmMkl0ZXJ9XX1dfSx7c2VxOlt7b2lkOntuYW1lOlwiZGVzLUVERTMtQ0JDXCJ9fSx7b2N0c3RyOntoZXg6eS5lbmNyeXB0aW9uU2NoZW1lSVZ9fV19XX1dfSx7b2N0c3RyOntoZXg6eS5jaXBoZXJ0ZXh0fX1dfSk7cmV0dXJuIHguZ2V0RW5jb2RlZEhleCgpfTt2YXIgYj1mdW5jdGlvbihELEUpe3ZhciB4PTEwMDt2YXIgQz1DcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSg4KTt2YXIgQj1cIkRFUy1FREUzLUNCQ1wiO3ZhciBzPUNyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDgpO3ZhciB5PUNyeXB0b0pTLlBCS0RGMihFLEMse2tleVNpemU6MTkyLzMyLGl0ZXJhdGlvbnM6eH0pO3ZhciB6PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoRCk7dmFyIEE9Q3J5cHRvSlMuVHJpcGxlREVTLmVuY3J5cHQoeix5LHtpdjpzfSkrXCJcIjt2YXIgdz17fTt3LmNpcGhlcnRleHQ9QTt3LnBia2RmMlNhbHQ9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkoQyk7dy5wYmtkZjJJdGVyPXg7dy5lbmNyeXB0aW9uU2NoZW1lQWxnPUI7dy5lbmNyeXB0aW9uU2NoZW1lSVY9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocyk7cmV0dXJuIHd9O2lmKHI9PVwiUEtDUzhQUlZcIiYmdHlwZW9mIFJTQUtleSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIFJTQUtleSYmYS5pc1ByaXZhdGU9PXRydWUpe3ZhciBkPXAoYSk7dmFyIGM9ZC5nZXRFbmNvZGVkSGV4KCk7dmFyIHQ9S0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh7c2VxOlt7XCJpbnRcIjowfSx7c2VxOlt7b2lkOntuYW1lOlwicnNhRW5jcnlwdGlvblwifX0se1wibnVsbFwiOnRydWV9XX0se29jdHN0cjp7aGV4OmN9fV19KTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtpZihvPT09dW5kZWZpbmVkfHxvPT1udWxsKXtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KG0sXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciBrPWgobSxvKTtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KGssXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9fWlmKHI9PVwiUEtDUzhQUlZcIiYmdHlwZW9mIEtKVVIuY3J5cHRvLkVDRFNBIT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0EmJmEuaXNQcml2YXRlPT10cnVlKXt2YXIgZD1uZXcgS0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh7c2VxOlt7XCJpbnRcIjoxfSx7b2N0c3RyOntoZXg6YS5wcnZLZXlIZXh9fSx7dGFnOltcImExXCIsdHJ1ZSx7Yml0c3RyOntoZXg6XCIwMFwiK2EucHViS2V5SGV4fX1dfV19KTt2YXIgYz1kLmdldEVuY29kZWRIZXgoKTt2YXIgdD1LSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHtzZXE6W3tcImludFwiOjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJlY1B1YmxpY0tleVwifX0se29pZDp7bmFtZTphLmN1cnZlTmFtZX19XX0se29jdHN0cjp7aGV4OmN9fV19KTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtpZihvPT09dW5kZWZpbmVkfHxvPT1udWxsKXtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KG0sXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciBrPWgobSxvKTtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KGssXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9fWlmKHI9PVwiUEtDUzhQUlZcIiYmdHlwZW9mIEtKVVIuY3J5cHRvLkRTQSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSYmYS5pc1ByaXZhdGU9PXRydWUpe3ZhciBkPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OmEueH0pO3ZhciBjPWQuZ2V0RW5jb2RlZEhleCgpO3ZhciB0PUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3Qoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcImRzYVwifX0se3NlcTpbe1wiaW50XCI6e2JpZ2ludDphLnB9fSx7XCJpbnRcIjp7YmlnaW50OmEucX19LHtcImludFwiOntiaWdpbnQ6YS5nfX1dfV19LHtvY3RzdHI6e2hleDpjfX1dfSk7dmFyIG09dC5nZXRFbmNvZGVkSGV4KCk7aWYobz09PXVuZGVmaW5lZHx8bz09bnVsbCl7cmV0dXJuIHYuQVNOMVV0aWwuZ2V0UEVNU3RyaW5nRnJvbUhleChtLFwiUFJJVkFURSBLRVlcIil9ZWxzZXt2YXIgaz1oKG0sbyk7cmV0dXJuIHYuQVNOMVV0aWwuZ2V0UEVNU3RyaW5nRnJvbUhleChrLFwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIpfX10aHJvd1widW5zdXBwb3J0ZWQgb2JqZWN0IG5vciBmb3JtYXRcIn07S0VZVVRJTC5nZXRLZXlGcm9tQ1NSUEVNPWZ1bmN0aW9uKGIpe3ZhciBhPUtFWVVUSUwuZ2V0SGV4RnJvbVBFTShiLFwiQ0VSVElGSUNBVEUgUkVRVUVTVFwiKTt2YXIgYz1LRVlVVElMLmdldEtleUZyb21DU1JIZXgoYSk7cmV0dXJuIGN9O0tFWVVUSUwuZ2V0S2V5RnJvbUNTUkhleD1mdW5jdGlvbihhKXt2YXIgYz1LRVlVVElMLnBhcnNlQ1NSSGV4KGEpO3ZhciBiPUtFWVVUSUwuZ2V0S2V5KGMucDhwdWJrZXloZXgsbnVsbCxcInBrY3M4cHViXCIpO3JldHVybiBifTtLRVlVVElMLnBhcnNlQ1NSSGV4PWZ1bmN0aW9uKGMpe3ZhciBiPXt9O3ZhciBlPWM7aWYoZS5zdWJzdHIoMCwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIENTUihjb2RlOjAwMSlcIn12YXIgZD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihlLDApO2lmKGQubGVuZ3RoPDEpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAyKVwifWlmKGUuc3Vic3RyKGRbMF0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBDU1IoY29kZTowMDMpXCJ9dmFyIGE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZSxkWzBdKTtpZihhLmxlbmd0aDwzKXt0aHJvd1wibWFsZm9ybWVkIENTUihjb2RlOjAwNClcIn1iLnA4cHVia2V5aGV4PUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZSxhWzJdKTtyZXR1cm4gYn07S0VZVVRJTC5nZXRKV0tGcm9tS2V5PWZ1bmN0aW9uKGQpe3ZhciBiPXt9O2lmKGQgaW5zdGFuY2VvZiBSU0FLZXkmJmQuaXNQcml2YXRlKXtiLmt0eT1cIlJTQVwiO2Iubj1oZXh0b2I2NHUoZC5uLnRvU3RyaW5nKDE2KSk7Yi5lPWhleHRvYjY0dShkLmUudG9TdHJpbmcoMTYpKTtiLmQ9aGV4dG9iNjR1KGQuZC50b1N0cmluZygxNikpO2IucD1oZXh0b2I2NHUoZC5wLnRvU3RyaW5nKDE2KSk7Yi5xPWhleHRvYjY0dShkLnEudG9TdHJpbmcoMTYpKTtiLmRwPWhleHRvYjY0dShkLmRtcDEudG9TdHJpbmcoMTYpKTtiLmRxPWhleHRvYjY0dShkLmRtcTEudG9TdHJpbmcoMTYpKTtiLnFpPWhleHRvYjY0dShkLmNvZWZmLnRvU3RyaW5nKDE2KSk7cmV0dXJuIGJ9ZWxzZXtpZihkIGluc3RhbmNlb2YgUlNBS2V5JiZkLmlzUHVibGljKXtiLmt0eT1cIlJTQVwiO2Iubj1oZXh0b2I2NHUoZC5uLnRvU3RyaW5nKDE2KSk7Yi5lPWhleHRvYjY0dShkLmUudG9TdHJpbmcoMTYpKTtyZXR1cm4gYn1lbHNle2lmKGQgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmZC5pc1ByaXZhdGUpe3ZhciBhPWQuZ2V0U2hvcnROSVNUUEN1cnZlTmFtZSgpO2lmKGEhPT1cIlAtMjU2XCImJmEhPT1cIlAtMzg0XCIpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lIGZvciBKV1Q6IFwiK2F9dmFyIGM9ZC5nZXRQdWJsaWNLZXlYWUhleCgpO2Iua3R5PVwiRUNcIjtiLmNydj1hO2IueD1oZXh0b2I2NHUoYy54KTtiLnk9aGV4dG9iNjR1KGMueSk7Yi5kPWhleHRvYjY0dShkLnBydktleUhleCk7cmV0dXJuIGJ9ZWxzZXtpZihkIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0EmJmQuaXNQdWJsaWMpe3ZhciBhPWQuZ2V0U2hvcnROSVNUUEN1cnZlTmFtZSgpO2lmKGEhPT1cIlAtMjU2XCImJmEhPT1cIlAtMzg0XCIpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lIGZvciBKV1Q6IFwiK2F9dmFyIGM9ZC5nZXRQdWJsaWNLZXlYWUhleCgpO2Iua3R5PVwiRUNcIjtiLmNydj1hO2IueD1oZXh0b2I2NHUoYy54KTtiLnk9aGV4dG9iNjR1KGMueSk7cmV0dXJuIGJ9fX19dGhyb3dcIm5vdCBzdXBwb3J0ZWQga2V5IG9iamVjdFwifTtcbi8qISByc2FwZW0tMS4xLmpzIChjKSAyMDEyIEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIF9yc2FwZW1fcGVtVG9CYXNlNjQoYil7dmFyIGE9YjthPWEucmVwbGFjZShcIi0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cIixcIlwiKTthPWEucmVwbGFjZShcIi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tXCIsXCJcIik7YT1hLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTtyZXR1cm4gYX1mdW5jdGlvbiBfcnNhcGVtX2dldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXgoZCl7dmFyIGo9bmV3IEFycmF5KCk7dmFyIGs9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihkLDApO3ZhciBmPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGspO3ZhciBoPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGYpO3ZhciBiPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGgpO3ZhciBsPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGIpO3ZhciBlPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGwpO3ZhciBnPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGUpO3ZhciBjPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGcpO3ZhciBpPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGMpO2oucHVzaChrLGYsaCxiLGwsZSxnLGMsaSk7cmV0dXJuIGp9ZnVuY3Rpb24gX3JzYXBlbV9nZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXgoaSl7dmFyIG89X3JzYXBlbV9nZXRQb3NBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGkpO3ZhciByPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGksb1swXSk7dmFyIGY9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooaSxvWzFdKTt2YXIgaj1BU04xSEVYLmdldEhleE9mVl9BdE9iaihpLG9bMl0pO3ZhciBrPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGksb1szXSk7dmFyIGM9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooaSxvWzRdKTt2YXIgYj1BU04xSEVYLmdldEhleE9mVl9BdE9iaihpLG9bNV0pO3ZhciBoPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGksb1s2XSk7dmFyIGc9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooaSxvWzddKTt2YXIgbD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihpLG9bOF0pO3ZhciBtPW5ldyBBcnJheSgpO20ucHVzaChyLGYsaixrLGMsYixoLGcsbCk7cmV0dXJuIG19ZnVuY3Rpb24gX3JzYXBlbV9yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKGMpe3ZhciBiPV9yc2FwZW1fZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGMpO3RoaXMuc2V0UHJpdmF0ZUV4KGJbMV0sYlsyXSxiWzNdLGJbNF0sYls1XSxiWzZdLGJbN10sYls4XSl9ZnVuY3Rpb24gX3JzYXBlbV9yZWFkUHJpdmF0ZUtleUZyb21QRU1TdHJpbmcoZSl7dmFyIGM9X3JzYXBlbV9wZW1Ub0Jhc2U2NChlKTt2YXIgZD1iNjR0b2hleChjKTt2YXIgYj1fcnNhcGVtX2dldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleChkKTt0aGlzLnNldFByaXZhdGVFeChiWzFdLGJbMl0sYlszXSxiWzRdLGJbNV0sYls2XSxiWzddLGJbOF0pfVJTQUtleS5wcm90b3R5cGUucmVhZFByaXZhdGVLZXlGcm9tUEVNU3RyaW5nPV9yc2FwZW1fcmVhZFByaXZhdGVLZXlGcm9tUEVNU3RyaW5nO1JTQUtleS5wcm90b3R5cGUucmVhZFByaXZhdGVLZXlGcm9tQVNOMUhleFN0cmluZz1fcnNhcGVtX3JlYWRQcml2YXRlS2V5RnJvbUFTTjFIZXhTdHJpbmc7XG4vKiEgcnNhc2lnbi0xLjIuNy5qcyAoYykgMjAxMiBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuICovXG52YXIgX1JFX0hFWERFQ09OTFk9bmV3IFJlZ0V4cChcIlwiKTtfUkVfSEVYREVDT05MWS5jb21waWxlKFwiW14wLTlhLWZdXCIsXCJnaVwiKTtmdW5jdGlvbiBfcnNhc2lnbl9nZXRIZXhQYWRkZWREaWdlc3RJbmZvRm9yU3RyaW5nKGQsZSxhKXt2YXIgYj1mdW5jdGlvbihmKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoU3RyaW5nKGYsYSl9O3ZhciBjPWIoZCk7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleChjLGEsZSl9ZnVuY3Rpb24gX3plcm9QYWRkaW5nT2ZTaWduYXR1cmUoZSxkKXt2YXIgYz1cIlwiO3ZhciBhPWQvNC1lLmxlbmd0aDtmb3IodmFyIGI9MDtiPGE7YisrKXtjPWMrXCIwXCJ9cmV0dXJuIGMrZX1mdW5jdGlvbiBfcnNhc2lnbl9zaWduU3RyaW5nKGQsYSl7dmFyIGI9ZnVuY3Rpb24oZSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhlLGEpfTt2YXIgYz1iKGQpO3JldHVybiB0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2goYyxhKX1mdW5jdGlvbiBfcnNhc2lnbl9zaWduV2l0aE1lc3NhZ2VIYXNoKGUsYyl7dmFyIGY9S0pVUi5jcnlwdG8uVXRpbC5nZXRQYWRkZWREaWdlc3RJbmZvSGV4KGUsYyx0aGlzLm4uYml0TGVuZ3RoKCkpO3ZhciBiPXBhcnNlQmlnSW50KGYsMTYpO3ZhciBkPXRoaXMuZG9Qcml2YXRlKGIpO3ZhciBhPWQudG9TdHJpbmcoMTYpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZShhLHRoaXMubi5iaXRMZW5ndGgoKSl9ZnVuY3Rpb24gX3JzYXNpZ25fc2lnblN0cmluZ1dpdGhTSEExKGEpe3JldHVybiBfcnNhc2lnbl9zaWduU3RyaW5nLmNhbGwodGhpcyxhLFwic2hhMVwiKX1mdW5jdGlvbiBfcnNhc2lnbl9zaWduU3RyaW5nV2l0aFNIQTI1NihhKXtyZXR1cm4gX3JzYXNpZ25fc2lnblN0cmluZy5jYWxsKHRoaXMsYSxcInNoYTI1NlwiKX1mdW5jdGlvbiBwc3NfbWdmMV9zdHIoYyxhLGUpe3ZhciBiPVwiXCIsZD0wO3doaWxlKGIubGVuZ3RoPGEpe2IrPWhleHRvcnN0cihlKHJzdHJ0b2hleChjK1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLFsoZCY0Mjc4MTkwMDgwKT4+MjQsKGQmMTY3MTE2ODApPj4xNiwoZCY2NTI4MCk+PjgsZCYyNTVdKSkpKTtkKz0xfXJldHVybiBifWZ1bmN0aW9uIF9yc2FzaWduX3NpZ25TdHJpbmdQU1MoZSxhLGQpe3ZhciBjPWZ1bmN0aW9uKGYpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoZixhKX07dmFyIGI9Yyhyc3RydG9oZXgoZSkpO2lmKGQ9PT11bmRlZmluZWQpe2Q9LTF9cmV0dXJuIHRoaXMuc2lnbldpdGhNZXNzYWdlSGFzaFBTUyhiLGEsZCl9ZnVuY3Rpb24gX3JzYXNpZ25fc2lnbldpdGhNZXNzYWdlSGFzaFBTUyhsLGEsayl7dmFyIGI9aGV4dG9yc3RyKGwpO3ZhciBnPWIubGVuZ3RoO3ZhciBtPXRoaXMubi5iaXRMZW5ndGgoKS0xO3ZhciBjPU1hdGguY2VpbChtLzgpO3ZhciBkO3ZhciBvPWZ1bmN0aW9uKGkpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoaSxhKX07aWYoaz09PS0xfHxrPT09dW5kZWZpbmVkKXtrPWd9ZWxzZXtpZihrPT09LTIpe2s9Yy1nLTJ9ZWxzZXtpZihrPC0yKXt0aHJvd1wiaW52YWxpZCBzYWx0IGxlbmd0aFwifX19aWYoYzwoZytrKzIpKXt0aHJvd1wiZGF0YSB0b28gbG9uZ1wifXZhciBmPVwiXCI7aWYoaz4wKXtmPW5ldyBBcnJheShrKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGYpO2Y9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZil9dmFyIG49aGV4dG9yc3RyKG8ocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2IrZikpKTt2YXIgaj1bXTtmb3IoZD0wO2Q8Yy1rLWctMjtkKz0xKXtqW2RdPTB9dmFyIGU9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsaikrXCJcXHgwMVwiK2Y7dmFyIGg9cHNzX21nZjFfc3RyKG4sZS5sZW5ndGgsbyk7dmFyIHE9W107Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrPTEpe3FbZF09ZS5jaGFyQ29kZUF0KGQpXmguY2hhckNvZGVBdChkKX12YXIgcD0oNjUyODA+Pig4KmMtbSkpJjI1NTtxWzBdJj1+cDtmb3IoZD0wO2Q8ZztkKyspe3EucHVzaChuLmNoYXJDb2RlQXQoZCkpfXEucHVzaCgxODgpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZSh0aGlzLmRvUHJpdmF0ZShuZXcgQmlnSW50ZWdlcihxKSkudG9TdHJpbmcoMTYpLHRoaXMubi5iaXRMZW5ndGgoKSl9ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0RGVjcnlwdFNpZ25hdHVyZUJJKGEsZCxjKXt2YXIgYj1uZXcgUlNBS2V5KCk7Yi5zZXRQdWJsaWMoZCxjKTt2YXIgZT1iLmRvUHVibGljKGEpO3JldHVybiBlfWZ1bmN0aW9uIF9yc2FzaWduX2dldEhleERpZ2VzdEluZm9Gcm9tU2lnKGEsYyxiKXt2YXIgZT1fcnNhc2lnbl9nZXREZWNyeXB0U2lnbmF0dXJlQkkoYSxjLGIpO3ZhciBkPWUudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14xZiswMC8sXCJcIik7cmV0dXJuIGR9ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8oZil7Zm9yKHZhciBlIGluIEtKVVIuY3J5cHRvLlV0aWwuRElHRVNUSU5GT0hFQUQpe3ZhciBkPUtKVVIuY3J5cHRvLlV0aWwuRElHRVNUSU5GT0hFQURbZV07dmFyIGI9ZC5sZW5ndGg7aWYoZi5zdWJzdHJpbmcoMCxiKT09ZCl7dmFyIGM9W2UsZi5zdWJzdHJpbmcoYildO3JldHVybiBjfX1yZXR1cm5bXX1mdW5jdGlvbiBfcnNhc2lnbl92ZXJpZnlTaWduYXR1cmVXaXRoQXJncyhmLGIsZyxqKXt2YXIgZT1fcnNhc2lnbl9nZXRIZXhEaWdlc3RJbmZvRnJvbVNpZyhiLGcsaik7dmFyIGg9X3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8oZSk7aWYoaC5sZW5ndGg9PTApe3JldHVybiBmYWxzZX12YXIgZD1oWzBdO3ZhciBpPWhbMV07dmFyIGE9ZnVuY3Rpb24oayl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhrLGQpfTt2YXIgYz1hKGYpO3JldHVybihpPT1jKX1mdW5jdGlvbiBfcnNhc2lnbl92ZXJpZnlIZXhTaWduYXR1cmVGb3JNZXNzYWdlKGMsYil7dmFyIGQ9cGFyc2VCaWdJbnQoYywxNik7dmFyIGE9X3JzYXNpZ25fdmVyaWZ5U2lnbmF0dXJlV2l0aEFyZ3MoYixkLHRoaXMubi50b1N0cmluZygxNiksdGhpcy5lLnRvU3RyaW5nKDE2KSk7cmV0dXJuIGF9ZnVuY3Rpb24gX3JzYXNpZ25fdmVyaWZ5U3RyaW5nKGYsail7aj1qLnJlcGxhY2UoX1JFX0hFWERFQ09OTFksXCJcIik7aj1qLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTt2YXIgYj1wYXJzZUJpZ0ludChqLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGk9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZT1pLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBnPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGUpO2lmKGcubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Z1swXTt2YXIgaD1nWzFdO3ZhciBhPWZ1bmN0aW9uKGspe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcoayxkKX07dmFyIGM9YShmKTtyZXR1cm4oaD09Yyl9ZnVuY3Rpb24gX3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKGUsYSl7YT1hLnJlcGxhY2UoX1JFX0hFWERFQ09OTFksXCJcIik7YT1hLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTt2YXIgYj1wYXJzZUJpZ0ludChhLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGg9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZz1oLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBjPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGcpO2lmKGMubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Y1swXTt2YXIgZj1jWzFdO3JldHVybihmPT1lKX1mdW5jdGlvbiBfcnNhc2lnbl92ZXJpZnlTdHJpbmdQU1MoYyxiLGEsZil7dmFyIGU9ZnVuY3Rpb24oZyl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChnLGEpfTt2YXIgZD1lKHJzdHJ0b2hleChjKSk7aWYoZj09PXVuZGVmaW5lZCl7Zj0tMX1yZXR1cm4gdGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1MoZCxiLGEsZil9ZnVuY3Rpb24gX3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTKGYscyxsLGMpe3ZhciBrPW5ldyBCaWdJbnRlZ2VyKHMsMTYpO2lmKGsuYml0TGVuZ3RoKCk+dGhpcy5uLmJpdExlbmd0aCgpKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZnVuY3Rpb24oaSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChpLGwpfTt2YXIgaj1oZXh0b3JzdHIoZik7dmFyIGg9ai5sZW5ndGg7dmFyIGc9dGhpcy5uLmJpdExlbmd0aCgpLTE7dmFyIG09TWF0aC5jZWlsKGcvOCk7dmFyIHE7aWYoYz09PS0xfHxjPT09dW5kZWZpbmVkKXtjPWh9ZWxzZXtpZihjPT09LTIpe2M9bS1oLTJ9ZWxzZXtpZihjPC0yKXt0aHJvd1wiaW52YWxpZCBzYWx0IGxlbmd0aFwifX19aWYobTwoaCtjKzIpKXt0aHJvd1wiZGF0YSB0b28gbG9uZ1wifXZhciBhPXRoaXMuZG9QdWJsaWMoaykudG9CeXRlQXJyYXkoKTtmb3IocT0wO3E8YS5sZW5ndGg7cSs9MSl7YVtxXSY9MjU1fXdoaWxlKGEubGVuZ3RoPG0pe2EudW5zaGlmdCgwKX1pZihhW20tMV0hPT0xODgpe3Rocm93XCJlbmNvZGVkIG1lc3NhZ2UgZG9lcyBub3QgZW5kIGluIDB4YmNcIn1hPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGEpO3ZhciBkPWEuc3Vic3RyKDAsbS1oLTEpO3ZhciBlPWEuc3Vic3RyKGQubGVuZ3RoLGgpO3ZhciBwPSg2NTI4MD4+KDgqbS1nKSkmMjU1O2lmKChkLmNoYXJDb2RlQXQoMCkmcCkhPT0wKXt0aHJvd1wiYml0cyBiZXlvbmQga2V5c2l6ZSBub3QgemVyb1wifXZhciBuPXBzc19tZ2YxX3N0cihlLGQubGVuZ3RoLHIpO3ZhciBvPVtdO2ZvcihxPTA7cTxkLmxlbmd0aDtxKz0xKXtvW3FdPWQuY2hhckNvZGVBdChxKV5uLmNoYXJDb2RlQXQocSl9b1swXSY9fnA7dmFyIGI9bS1oLWMtMjtmb3IocT0wO3E8YjtxKz0xKXtpZihvW3FdIT09MCl7dGhyb3dcImxlZnRtb3N0IG9jdGV0cyBub3QgemVyb1wifX1pZihvW2JdIT09MSl7dGhyb3dcIjB4MDEgbWFya2VyIG5vdCBmb3VuZFwifXJldHVybiBlPT09aGV4dG9yc3RyKHIocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2orU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsby5zbGljZSgtYykpKSkpfVJTQUtleS5wcm90b3R5cGUuc2lnbldpdGhNZXNzYWdlSGFzaD1fcnNhc2lnbl9zaWduV2l0aE1lc3NhZ2VIYXNoO1JTQUtleS5wcm90b3R5cGUuc2lnblN0cmluZz1fcnNhc2lnbl9zaWduU3RyaW5nO1JTQUtleS5wcm90b3R5cGUuc2lnblN0cmluZ1dpdGhTSEExPV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMTtSU0FLZXkucHJvdG90eXBlLnNpZ25TdHJpbmdXaXRoU0hBMjU2PV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMjU2O1JTQUtleS5wcm90b3R5cGUuc2lnbj1fcnNhc2lnbl9zaWduU3RyaW5nO1JTQUtleS5wcm90b3R5cGUuc2lnbldpdGhTSEExPV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMTtSU0FLZXkucHJvdG90eXBlLnNpZ25XaXRoU0hBMjU2PV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMjU2O1JTQUtleS5wcm90b3R5cGUuc2lnbldpdGhNZXNzYWdlSGFzaFBTUz1fcnNhc2lnbl9zaWduV2l0aE1lc3NhZ2VIYXNoUFNTO1JTQUtleS5wcm90b3R5cGUuc2lnblN0cmluZ1BTUz1fcnNhc2lnbl9zaWduU3RyaW5nUFNTO1JTQUtleS5wcm90b3R5cGUuc2lnblBTUz1fcnNhc2lnbl9zaWduU3RyaW5nUFNTO1JTQUtleS5TQUxUX0xFTl9ITEVOPS0xO1JTQUtleS5TQUxUX0xFTl9NQVg9LTI7UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9X3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoO1JTQUtleS5wcm90b3R5cGUudmVyaWZ5U3RyaW5nPV9yc2FzaWduX3ZlcmlmeVN0cmluZztSU0FLZXkucHJvdG90eXBlLnZlcmlmeUhleFNpZ25hdHVyZUZvck1lc3NhZ2U9X3JzYXNpZ25fdmVyaWZ5SGV4U2lnbmF0dXJlRm9yTWVzc2FnZTtSU0FLZXkucHJvdG90eXBlLnZlcmlmeT1fcnNhc2lnbl92ZXJpZnlTdHJpbmc7UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlIZXhTaWduYXR1cmVGb3JCeXRlQXJyYXlNZXNzYWdlPV9yc2FzaWduX3ZlcmlmeUhleFNpZ25hdHVyZUZvck1lc3NhZ2U7UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1M9X3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTO1JTQUtleS5wcm90b3R5cGUudmVyaWZ5U3RyaW5nUFNTPV9yc2FzaWduX3ZlcmlmeVN0cmluZ1BTUztSU0FLZXkucHJvdG90eXBlLnZlcmlmeVBTUz1fcnNhc2lnbl92ZXJpZnlTdHJpbmdQU1M7UlNBS2V5LlNBTFRfTEVOX1JFQ09WRVI9LTI7XG4vKiEgeDUwOS0xLjEuOS5qcyAoYykgMjAxMi0yMDE2IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIFg1MDkoKXt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0E9bnVsbDt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaE49bnVsbDt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaEU9bnVsbDt0aGlzLmhleD1udWxsO3RoaXMuZ2V0U2VyaWFsTnVtYmVySGV4PWZ1bmN0aW9uKCl7cmV0dXJuIEFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDFdKX07dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZD1mdW5jdGlvbigpe3ZhciBiPUFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDIsMF0pO3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChiKTt2YXIgYz1LSlVSLmFzbjEueDUwOS5PSUQub2lkMm5hbWUoYSk7cmV0dXJuIGN9O3RoaXMuZ2V0SXNzdWVySGV4PWZ1bmN0aW9uKCl7cmV0dXJuIEFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VExWQnlOdGhMaXN0KHRoaXMuaGV4LDAsWzAsM10pfTt0aGlzLmdldElzc3VlclN0cmluZz1mdW5jdGlvbigpe3JldHVybiBYNTA5LmhleDJkbihBU04xSEVYLmdldERlY2VuZGFudEhleFRMVkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDNdKSl9O3RoaXMuZ2V0U3ViamVjdEhleD1mdW5jdGlvbigpe3JldHVybiBBU04xSEVYLmdldERlY2VuZGFudEhleFRMVkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDVdKX07dGhpcy5nZXRTdWJqZWN0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIFg1MDkuaGV4MmRuKEFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VExWQnlOdGhMaXN0KHRoaXMuaGV4LDAsWzAsNV0pKX07dGhpcy5nZXROb3RCZWZvcmU9ZnVuY3Rpb24oKXt2YXIgYT1BU04xSEVYLmdldERlY2VuZGFudEhleFZCeU50aExpc3QodGhpcy5oZXgsMCxbMCw0LDBdKTthPWEucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO2E9ZGVjb2RlVVJJQ29tcG9uZW50KGEpO3JldHVybiBhfTt0aGlzLmdldE5vdEFmdGVyPWZ1bmN0aW9uKCl7dmFyIGE9QVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KHRoaXMuaGV4LDAsWzAsNCwxXSk7YT1hLnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKTthPWRlY29kZVVSSUNvbXBvbmVudChhKTtyZXR1cm4gYX07dGhpcy5yZWFkQ2VydFBFTT1mdW5jdGlvbihjKXt2YXIgZT1YNTA5LnBlbVRvSGV4KGMpO3ZhciBiPVg1MDkuZ2V0UHVibGljS2V5SGV4QXJyYXlGcm9tQ2VydEhleChlKTt2YXIgZD1uZXcgUlNBS2V5KCk7ZC5zZXRQdWJsaWMoYlswXSxiWzFdKTt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0E9ZDt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaE49YlswXTt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaEU9YlsxXTt0aGlzLmhleD1lfTt0aGlzLnJlYWRDZXJ0UEVNV2l0aG91dFJTQUluaXQ9ZnVuY3Rpb24oYyl7dmFyIGQ9WDUwOS5wZW1Ub0hleChjKTt2YXIgYj1YNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRIZXgoZCk7dGhpcy5zdWJqZWN0UHVibGljS2V5UlNBLnNldFB1YmxpYyhiWzBdLGJbMV0pO3RoaXMuc3ViamVjdFB1YmxpY0tleVJTQV9oTj1iWzBdO3RoaXMuc3ViamVjdFB1YmxpY0tleVJTQV9oRT1iWzFdO3RoaXMuaGV4PWR9O3RoaXMuZ2V0SW5mbz1mdW5jdGlvbigpe3ZhciBwPVwiQmFzaWMgRmllbGRzXFxuXCI7cCs9XCIgIHNlcmlhbCBudW1iZXI6IFwiK3RoaXMuZ2V0U2VyaWFsTnVtYmVySGV4KCkrXCJcXG5cIjtwKz1cIiAgc2lnbmF0dXJlIGFsZ29yaXRobTogXCIrdGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZCgpK1wiXFxuXCI7cCs9XCIgIGlzc3VlcjogXCIrdGhpcy5nZXRJc3N1ZXJTdHJpbmcoKStcIlxcblwiO3ArPVwiICBub3RCZWZvcmU6IFwiK3RoaXMuZ2V0Tm90QmVmb3JlKCkrXCJcXG5cIjtwKz1cIiAgbm90QWZ0ZXI6IFwiK3RoaXMuZ2V0Tm90QWZ0ZXIoKStcIlxcblwiO3ArPVwiICBzdWJqZWN0OiBcIit0aGlzLmdldFN1YmplY3RTdHJpbmcoKStcIlxcblwiO3ArPVwiICBzdWJqZWN0IHB1YmxpYyBrZXkgaW5mbzogXFxuXCI7dmFyIGo9WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5SW5mb1Bvc0Zyb21DZXJ0SGV4KHRoaXMuaGV4KTt2YXIgZD1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHRoaXMuaGV4LGopO3ZhciBuPUtFWVVUSUwuZ2V0S2V5KGQsbnVsbCxcInBrY3M4cHViXCIpO2lmKG4gaW5zdGFuY2VvZiBSU0FLZXkpe3ArPVwiICAgIGtleSBhbGdvcml0aG06IFJTQVxcblwiO3ArPVwiICAgIG49XCIrbi5uLnRvU3RyaW5nKDE2KS5zdWJzdHIoMCwxNikrXCIuLi5cXG5cIjtwKz1cIiAgICBlPVwiK24uZS50b1N0cmluZygxNikrXCJcXG5cIn1wKz1cIlg1MDl2MyBFeHRlbnNpb25zOlxcblwiO3ZhciBtPVg1MDkuZ2V0VjNFeHRJbmZvTGlzdE9mQ2VydEhleCh0aGlzLmhleCk7Zm9yKHZhciBlPTA7ZTxtLmxlbmd0aDtlKyspe3ZhciBiPW1bZV07dmFyIG89S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKGIub2lkKTtpZihvPT09XCJcIil7bz1iLm9pZH12YXIgaz1cIlwiO2lmKGIuY3JpdGljYWw9PT10cnVlKXtrPVwiQ1JJVElDQUxcIn1wKz1cIiAgXCIrbytcIiBcIitrK1wiOlxcblwiO2lmKG89PT1cImJhc2ljQ29uc3RyYWludHNcIil7dmFyIGc9WDUwOS5nZXRFeHRCYXNpY0NvbnN0cmFpbnRzKHRoaXMuaGV4KTtpZihnLmNBPT09dW5kZWZpbmVkKXtwKz1cIiAgICB7fVxcblwifWVsc2V7cCs9XCIgICAgY0E9dHJ1ZVwiO2lmKGcucGF0aExlbiE9PXVuZGVmaW5lZCl7cCs9XCIsIHBhdGhMZW49XCIrZy5wYXRoTGVufXArPVwiXFxuXCJ9fWVsc2V7aWYobz09PVwia2V5VXNhZ2VcIil7cCs9XCIgICAgXCIrWDUwOS5nZXRFeHRLZXlVc2FnZVN0cmluZyh0aGlzLmhleCkrXCJcXG5cIn1lbHNle2lmKG89PT1cInN1YmplY3RLZXlJZGVudGlmaWVyXCIpe3ArPVwiICAgIFwiK1g1MDkuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXIodGhpcy5oZXgpK1wiXFxuXCJ9ZWxzZXtpZihvPT09XCJhdXRob3JpdHlLZXlJZGVudGlmaWVyXCIpe3ZhciBhPVg1MDkuZ2V0RXh0QXV0aG9yaXR5S2V5SWRlbnRpZmllcih0aGlzLmhleCk7aWYoYS5raWQhPT11bmRlZmluZWQpe3ArPVwiICAgIGtpZD1cIithLmtpZCtcIlxcblwifX1lbHNle2lmKG89PT1cImV4dEtleVVzYWdlXCIpe3ZhciBoPVg1MDkuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lKHRoaXMuaGV4KTtwKz1cIiAgICBcIitoLmpvaW4oXCIsIFwiKStcIlxcblwifWVsc2V7aWYobz09PVwic3ViamVjdEFsdE5hbWVcIil7dmFyIGY9WDUwOS5nZXRFeHRTdWJqZWN0QWx0TmFtZSh0aGlzLmhleCk7cCs9XCIgICAgXCIrZi5qb2luKFwiLCBcIikrXCJcXG5cIn1lbHNle2lmKG89PT1cImNSTERpc3RyaWJ1dGlvblBvaW50c1wiKXt2YXIgbD1YNTA5LmdldEV4dENSTERpc3RyaWJ1dGlvblBvaW50c1VSSSh0aGlzLmhleCk7cCs9XCIgICAgXCIrbCtcIlxcblwifWVsc2V7aWYobz09PVwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKXt2YXIgYz1YNTA5LmdldEV4dEFJQUluZm8odGhpcy5oZXgpO2lmKGMub2NzcCE9PXVuZGVmaW5lZCl7cCs9XCIgICAgb2NzcDogXCIrYy5vY3NwLmpvaW4oXCIsXCIpK1wiXFxuXCJ9aWYoYy5jYWlzc3VlciE9PXVuZGVmaW5lZCl7cCs9XCIgICAgY2Fpc3N1ZXI6IFwiK2MuY2Fpc3N1ZXIuam9pbihcIixcIikrXCJcXG5cIn19fX19fX19fX1wKz1cInNpZ25hdHVyZSBhbGdvcml0aG06IFwiK1g1MDkuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZSh0aGlzLmhleCkrXCJcXG5cIjtwKz1cInNpZ25hdHVyZTogXCIrWDUwOS5nZXRTaWduYXR1cmVWYWx1ZUhleCh0aGlzLmhleCkuc3Vic3RyKDAsMTYpK1wiLi4uXFxuXCI7cmV0dXJuIHB9fVg1MDkucGVtVG9CYXNlNjQ9ZnVuY3Rpb24oYSl7dmFyIGI9YTtiPWIucmVwbGFjZShcIi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLVwiLFwiXCIpO2I9Yi5yZXBsYWNlKFwiLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLVwiLFwiXCIpO2I9Yi5yZXBsYWNlKC9bIFxcbl0rL2csXCJcIik7cmV0dXJuIGJ9O1g1MDkucGVtVG9IZXg9ZnVuY3Rpb24oYSl7dmFyIGM9WDUwOS5wZW1Ub0Jhc2U2NChhKTt2YXIgYj1iNjR0b2hleChjKTtyZXR1cm4gYn07WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5UG9zRnJvbUNlcnRIZXg9ZnVuY3Rpb24oZil7dmFyIGU9WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5SW5mb1Bvc0Zyb21DZXJ0SGV4KGYpO2lmKGU9PS0xKXtyZXR1cm4gLTF9dmFyIGI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZixlKTtpZihiLmxlbmd0aCE9Mil7cmV0dXJuIC0xfXZhciBkPWJbMV07aWYoZi5zdWJzdHJpbmcoZCxkKzIpIT1cIjAzXCIpe3JldHVybiAtMX12YXIgYz1BU04xSEVYLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKGYsZCk7aWYoZi5zdWJzdHJpbmcoYyxjKzIpIT1cIjAwXCIpe3JldHVybiAtMX1yZXR1cm4gYysyfTtYNTA5LmdldFN1YmplY3RQdWJsaWNLZXlJbmZvUG9zRnJvbUNlcnRIZXg9ZnVuY3Rpb24oZCl7dmFyIGM9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihkLDApO3ZhciBiPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGQsYyk7aWYoYi5sZW5ndGg8MSl7cmV0dXJuIC0xfWlmKGQuc3Vic3RyaW5nKGJbMF0sYlswXSsxMCk9PVwiYTAwMzAyMDEwMlwiKXtpZihiLmxlbmd0aDw2KXtyZXR1cm4gLTF9cmV0dXJuIGJbNl19ZWxzZXtpZihiLmxlbmd0aDw1KXtyZXR1cm4gLTF9cmV0dXJuIGJbNV19fTtYNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRIZXg9ZnVuY3Rpb24oZil7dmFyIGU9WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5UG9zRnJvbUNlcnRIZXgoZik7dmFyIGI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZixlKTtpZihiLmxlbmd0aCE9Mil7cmV0dXJuW119dmFyIGQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixiWzBdKTt2YXIgYz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihmLGJbMV0pO2lmKGQhPW51bGwmJmMhPW51bGwpe3JldHVybltkLGNdfWVsc2V7cmV0dXJuW119fTtYNTA5LmdldEhleFRic0NlcnRpZmljYXRlRnJvbUNlcnQ9ZnVuY3Rpb24oYil7dmFyIGE9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihiLDApO3JldHVybiBhfTtYNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRQRU09ZnVuY3Rpb24oYyl7dmFyIGQ9WDUwOS5wZW1Ub0hleChjKTt2YXIgYj1YNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRIZXgoZCk7cmV0dXJuIGJ9O1g1MDkuaGV4MmRuPWZ1bmN0aW9uKGUpe3ZhciBmPVwiXCI7dmFyIGM9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZSwwKTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGI9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihlLGNbZF0pO2Y9ZitcIi9cIitYNTA5LmhleDJyZG4oYil9cmV0dXJuIGZ9O1g1MDkuaGV4MnJkbj1mdW5jdGlvbihhKXt2YXIgZj1BU04xSEVYLmdldERlY2VuZGFudEhleFRMVkJ5TnRoTGlzdChhLDAsWzAsMF0pO3ZhciBlPUFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdChhLDAsWzAsMV0pO3ZhciBjPVwiXCI7dHJ5e2M9WDUwOS5ETl9BVFRSSEVYW2ZdfWNhdGNoKGIpe2M9Zn1lPWUucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO3ZhciBkPWRlY29kZVVSSUNvbXBvbmVudChlKTtyZXR1cm4gYytcIj1cIitkfTtYNTA5LkROX0FUVFJIRVg9e1wiMDYwMzU1MDQwNlwiOlwiQ1wiLFwiMDYwMzU1MDQwYVwiOlwiT1wiLFwiMDYwMzU1MDQwYlwiOlwiT1VcIixcIjA2MDM1NTA0MDNcIjpcIkNOXCIsXCIwNjAzNTUwNDA1XCI6XCJTTlwiLFwiMDYwMzU1MDQwOFwiOlwiU1RcIixcIjA2MDM1NTA0MDdcIjpcIkxcIixcIjA2MDM1NTA0MDlcIjpcInN0cmVldEFkZHJlc3NcIixcIjA2MDM1NTA0MGZcIjpcImJ1c2luZXNzQ2F0ZWdvcnlcIixcIjA2MDM1NTA0MTFcIjpcInBvc3RhbENvZGVcIixcIjA2MGIyYjA2MDEwNDAxODIzNzNjMDIwMTAyXCI6XCJqdXJpc2RpY3Rpb25PZkluY29ycG9yYXRpb25TUFwiLFwiMDYwYjJiMDYwMTA0MDE4MjM3M2MwMjAxMDNcIjpcImp1cmlzZGljdGlvbk9mSW5jb3Jwb3JhdGlvbkNcIix9O1g1MDkuZ2V0UHVibGljS2V5RnJvbUNlcnRQRU09ZnVuY3Rpb24oZil7dmFyIGM9WDUwOS5nZXRQdWJsaWNLZXlJbmZvUHJvcE9mQ2VydFBFTShmKTtpZihjLmFsZ29pZD09XCIyYTg2NDg4NmY3MGQwMTAxMDFcIil7dmFyIGk9S0VZVVRJTC5wYXJzZVB1YmxpY1Jhd1JTQUtleUhleChjLmtleWhleCk7dmFyIGo9bmV3IFJTQUtleSgpO2ouc2V0UHVibGljKGkubixpLmUpO3JldHVybiBqfWVsc2V7aWYoYy5hbGdvaWQ9PVwiMmE4NjQ4Y2UzZDAyMDFcIil7dmFyIGU9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW2MuYWxncGFyYW1dO3ZhciBqPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZSxpbmZvOmMua2V5aGV4fSk7ai5zZXRQdWJsaWNLZXlIZXgoYy5rZXloZXgpO3JldHVybiBqfWVsc2V7aWYoYy5hbGdvaWQ9PVwiMmE4NjQ4Y2UzODA0MDFcIil7dmFyIGI9QVNOMUhFWC5nZXRWYnlMaXN0KGMuYWxncGFyYW0sMCxbMF0sXCIwMlwiKTt2YXIgYT1BU04xSEVYLmdldFZieUxpc3QoYy5hbGdwYXJhbSwwLFsxXSxcIjAyXCIpO3ZhciBkPUFTTjFIRVguZ2V0VmJ5TGlzdChjLmFsZ3BhcmFtLDAsWzJdLFwiMDJcIik7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooYy5rZXloZXgsMCk7aD1oLnN1YnN0cigyKTt2YXIgaj1uZXcgS0pVUi5jcnlwdG8uRFNBKCk7ai5zZXRQdWJsaWMobmV3IEJpZ0ludGVnZXIoYiwxNiksbmV3IEJpZ0ludGVnZXIoYSwxNiksbmV3IEJpZ0ludGVnZXIoZCwxNiksbmV3IEJpZ0ludGVnZXIoaCwxNikpO3JldHVybiBqfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIGtleVwifX19fTtYNTA5LmdldFB1YmxpY0tleUluZm9Qcm9wT2ZDZXJ0UEVNPWZ1bmN0aW9uKGUpe3ZhciBpPXt9O2kuYWxncGFyYW09bnVsbDt2YXIgZj1YNTA5LnBlbVRvSGV4KGUpO3ZhciBkPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGYsMCk7aWYoZC5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgWC41MDkgY2VydGlmaWNhdGUgUEVNIChjb2RlOjAwMSlcIn1pZihmLnN1YnN0cihkWzBdLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgWC41MDkgY2VydGlmaWNhdGUgUEVNIChjb2RlOjAwMilcIn12YXIgYz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihmLGRbMF0pO3ZhciBnPTY7aWYoZi5zdWJzdHIoY1swXSwyKSE9PVwiYTBcIil7Zz01fWlmKGMubGVuZ3RoPGcrMSl7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDAzKVwifXZhciBhPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGYsY1tnXSk7aWYoYS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgWC41MDkgY2VydGlmaWNhdGUgUEVNIChjb2RlOjAwNClcIn12YXIgaD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihmLGFbMF0pO2lmKGgubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDUpXCJ9aS5hbGdvaWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixoWzBdKTtpZihmLnN1YnN0cihoWzFdLDIpPT1cIjA2XCIpe2kuYWxncGFyYW09QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixoWzFdKX1lbHNle2lmKGYuc3Vic3RyKGhbMV0sMik9PVwiMzBcIil7aS5hbGdwYXJhbT1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGYsaFsxXSl9fWlmKGYuc3Vic3RyKGFbMV0sMikhPVwiMDNcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDA2KVwifXZhciBiPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGYsYVsxXSk7aS5rZXloZXg9Yi5zdWJzdHIoMik7cmV0dXJuIGl9O1g1MDkuZ2V0UHVibGljS2V5SW5mb1Bvc09mQ2VydEhFWD1mdW5jdGlvbihjKXt2YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihjLDApO2lmKGIubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDEpXCJ9aWYoYy5zdWJzdHIoYlswXSwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDIpXCJ9dmFyIGE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooYyxiWzBdKTtpZihhLmxlbmd0aDw3KXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDMpXCJ9cmV0dXJuIGFbNl19O1g1MDkuZ2V0VjNFeHRJbmZvTGlzdE9mQ2VydEhleD1mdW5jdGlvbihnKXt2YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihnLDApO2lmKGIubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDEpXCJ9aWYoZy5zdWJzdHIoYlswXSwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDIpXCJ9dmFyIGE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZyxiWzBdKTtpZihhLmxlbmd0aDw4KXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDMpXCJ9aWYoZy5zdWJzdHIoYVs3XSwyKSE9XCJhM1wiKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDQpXCJ9dmFyIGg9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZyxhWzddKTtpZihoLmxlbmd0aCE9MSl7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDA1KVwifWlmKGcuc3Vic3RyKGhbMF0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDA2KVwifXZhciBmPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGcsaFswXSk7dmFyIGU9Zi5sZW5ndGg7dmFyIGQ9bmV3IEFycmF5KGUpO2Zvcih2YXIgYz0wO2M8ZTtjKyspe2RbY109WDUwOS5nZXRWM0V4dEl0ZW1JbmZvX0F0T2JqKGcsZltjXSl9cmV0dXJuIGR9O1g1MDkuZ2V0VjNFeHRJdGVtSW5mb19BdE9iaj1mdW5jdGlvbihmLGcpe3ZhciBlPXt9O2UucG9zVExWPWc7dmFyIGI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZixnKTtpZihiLmxlbmd0aCE9MiYmYi5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgWC41MDl2MyBFeHQgKGNvZGU6MDAxKVwifWlmKGYuc3Vic3RyKGJbMF0sMikhPVwiMDZcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOXYzIEV4dCAoY29kZTowMDIpXCJ9dmFyIGQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixiWzBdKTtlLm9pZD1BU04xSEVYLmhleHRvb2lkc3RyKGQpO2UuY3JpdGljYWw9ZmFsc2U7aWYoYi5sZW5ndGg9PTMpe2UuY3JpdGljYWw9dHJ1ZX12YXIgYz1iW2IubGVuZ3RoLTFdO2lmKGYuc3Vic3RyKGMsMikhPVwiMDRcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOXYzIEV4dCAoY29kZTowMDMpXCJ9ZS5wb3NWPUFTTjFIRVguZ2V0U3RhcnRQb3NPZlZfQXRPYmooZixjKTtyZXR1cm4gZX07WDUwOS5nZXRIZXhPZlRMVl9WM0V4dFZhbHVlPWZ1bmN0aW9uKGIsYSl7dmFyIGM9WDUwOS5nZXRQb3NPZlRMVl9WM0V4dFZhbHVlKGIsYSk7aWYoYz09LTEpe3JldHVybiBudWxsfXJldHVybiBBU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGIsYyl9O1g1MDkuZ2V0SGV4T2ZWX1YzRXh0VmFsdWU9ZnVuY3Rpb24oYixhKXt2YXIgYz1YNTA5LmdldFBvc09mVExWX1YzRXh0VmFsdWUoYixhKTtpZihjPT0tMSl7cmV0dXJuIG51bGx9cmV0dXJuIEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGIsYyl9O1g1MDkuZ2V0UG9zT2ZUTFZfVjNFeHRWYWx1ZT1mdW5jdGlvbihmLGIpe3ZhciBkPWI7aWYoIWIubWF0Y2goL15bMC05Ll0rJC8pKXtkPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZChiKX1pZihkPT1cIlwiKXtyZXR1cm4gLTF9dmFyIGM9WDUwOS5nZXRWM0V4dEluZm9MaXN0T2ZDZXJ0SGV4KGYpO2Zvcih2YXIgYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZT1jW2FdO2lmKGUub2lkPT1kKXtyZXR1cm4gZS5wb3NWfX1yZXR1cm4gLTF9O1g1MDkuZ2V0RXh0QmFzaWNDb25zdHJhaW50cz1mdW5jdGlvbihkKXt2YXIgYT1YNTA5LmdldEhleE9mVl9WM0V4dFZhbHVlKGQsXCJiYXNpY0NvbnN0cmFpbnRzXCIpO2lmKGE9PT1udWxsKXtyZXR1cm4gbnVsbH1pZihhPT09XCJcIil7cmV0dXJue319aWYoYT09PVwiMDEwMWZmXCIpe3JldHVybntjQTp0cnVlfX1pZihhLnN1YnN0cigwLDgpPT09XCIwMTAxZmYwMlwiKXt2YXIgYz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihhLDYpO3ZhciBiPXBhcnNlSW50KGMsMTYpO3JldHVybntjQTp0cnVlLHBhdGhMZW46Yn19dGhyb3dcInVua25vd24gZXJyb3JcIn07WDUwOS5LRVlVU0FHRV9OQU1FPVtcImRpZ2l0YWxTaWduYXR1cmVcIixcIm5vblJlcHVkaWF0aW9uXCIsXCJrZXlFbmNpcGhlcm1lbnRcIixcImRhdGFFbmNpcGhlcm1lbnRcIixcImtleUFncmVlbWVudFwiLFwia2V5Q2VydFNpZ25cIixcImNSTFNpZ25cIixcImVuY2lwaGVyT25seVwiLFwiZGVjaXBoZXJPbmx5XCJdO1g1MDkuZ2V0RXh0S2V5VXNhZ2VCaW49ZnVuY3Rpb24oZCl7dmFyIGI9WDUwOS5nZXRIZXhPZlZfVjNFeHRWYWx1ZShkLFwia2V5VXNhZ2VcIik7aWYoYj09XCJcIil7cmV0dXJuXCJcIn1pZihiLmxlbmd0aCUyIT0wfHxiLmxlbmd0aDw9Mil7dGhyb3dcIm1hbGZvcm1lZCBrZXkgdXNhZ2UgdmFsdWVcIn12YXIgYT1wYXJzZUludChiLnN1YnN0cigwLDIpKTt2YXIgYz1wYXJzZUludChiLnN1YnN0cigyKSwxNikudG9TdHJpbmcoMik7cmV0dXJuIGMuc3Vic3RyKDAsYy5sZW5ndGgtYSl9O1g1MDkuZ2V0RXh0S2V5VXNhZ2VTdHJpbmc9ZnVuY3Rpb24oZSl7dmFyIGQ9WDUwOS5nZXRFeHRLZXlVc2FnZUJpbihlKTt2YXIgYj1uZXcgQXJyYXkoKTtmb3IodmFyIGM9MDtjPGQubGVuZ3RoO2MrKyl7aWYoZC5zdWJzdHIoYywxKT09XCIxXCIpe2IucHVzaChYNTA5LktFWVVTQUdFX05BTUVbY10pfX1yZXR1cm4gYi5qb2luKFwiLFwiKX07WDUwOS5nZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllcj1mdW5jdGlvbihiKXt2YXIgYT1YNTA5LmdldEhleE9mVl9WM0V4dFZhbHVlKGIsXCJzdWJqZWN0S2V5SWRlbnRpZmllclwiKTtyZXR1cm4gYX07WDUwOS5nZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyPWZ1bmN0aW9uKGYpe3ZhciBiPXt9O3ZhciBlPVg1MDkuZ2V0SGV4T2ZUTFZfVjNFeHRWYWx1ZShmLFwiYXV0aG9yaXR5S2V5SWRlbnRpZmllclwiKTtpZihlPT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGM9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZSwwKTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7aWYoZS5zdWJzdHIoY1tkXSwyKT09PVwiODBcIil7Yi5raWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxjW2RdKX19cmV0dXJuIGJ9O1g1MDkuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lPWZ1bmN0aW9uKGspe3ZhciBiPW5ldyBBcnJheSgpO3ZhciBmPVg1MDkuZ2V0SGV4T2ZUTFZfVjNFeHRWYWx1ZShrLFwiZXh0S2V5VXNhZ2VcIik7aWYoZj09PW51bGwpe3JldHVybiBudWxsfXZhciBjPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGYsMCk7Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspe3ZhciBqPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGYsY1tlXSk7dmFyIGc9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KGopO3ZhciBkPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShnKTtiLnB1c2goZCl9cmV0dXJuIGJ9O1g1MDkuZ2V0RXh0U3ViamVjdEFsdE5hbWU9ZnVuY3Rpb24oZyl7dmFyIGI9bmV3IEFycmF5KCk7dmFyIGY9WDUwOS5nZXRIZXhPZlRMVl9WM0V4dFZhbHVlKGcsXCJzdWJqZWN0QWx0TmFtZVwiKTt2YXIgYz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihmLDApO2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXtpZihmLnN1YnN0cihjW2VdLDIpPT09XCI4MlwiKXt2YXIgZD1oZXh0b3V0ZjgoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixjW2VdKSk7Yi5wdXNoKGQpfX1yZXR1cm4gYn07WDUwOS5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHNVUkk9ZnVuY3Rpb24obil7dmFyIHA9bmV3IEFycmF5KCk7dmFyIGs9WDUwOS5nZXRIZXhPZlRMVl9WM0V4dFZhbHVlKG4sXCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIik7dmFyIG89QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooaywwKTtmb3IodmFyIGc9MDtnPG8ubGVuZ3RoO2crKyl7dmFyIGw9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihrLG9bZ10pO3ZhciBiPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGwsMCk7Zm9yKHZhciBlPTA7ZTxiLmxlbmd0aDtlKyspe2lmKGwuc3Vic3RyKGJbZV0sMik9PT1cImEwXCIpe3ZhciBmPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGwsYltlXSk7aWYoZi5zdWJzdHIoMCwyKT09PVwiYTBcIil7dmFyIGM9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZiwwKTtpZihjLnN1YnN0cigwLDIpPT09XCI4NlwiKXt2YXIgbT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihjLDApO3ZhciBkPWhleHRvdXRmOChtKTtwLnB1c2goZCl9fX19fXJldHVybiBwfTtYNTA5LmdldEV4dEFJQUluZm89ZnVuY3Rpb24oZyl7dmFyIGo9e307ai5vY3NwPVtdO2ouY2Fpc3N1ZXI9W107dmFyIGg9WDUwOS5nZXRQb3NPZlRMVl9WM0V4dFZhbHVlKGcsXCJhdXRob3JpdHlJbmZvQWNjZXNzXCIpO2lmKGg9PS0xKXtyZXR1cm4gbnVsbH1pZihnLnN1YnN0cihoLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgQUlBIEV4dG4gVmFsdWVcIn12YXIgZD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihnLGgpO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGg7YysrKXt2YXIgYT1kW2NdO3ZhciBiPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGcsYSk7aWYoYi5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgQWNjZXNzRGVzY3JpcHRpb24gb2YgQUlBIEV4dG5cIn12YXIgZT1iWzBdO3ZhciBmPWJbMV07aWYoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZyxlKT09XCIyYjA2MDEwNTA1MDczMDAxXCIpe2lmKGcuc3Vic3RyKGYsMik9PVwiODZcIil7ai5vY3NwLnB1c2goaGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGcsZikpKX19aWYoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZyxlKT09XCIyYjA2MDEwNTA1MDczMDAyXCIpe2lmKGcuc3Vic3RyKGYsMik9PVwiODZcIil7ai5jYWlzc3Vlci5wdXNoKGhleHRvdXRmOChBU04xSEVYLmdldEhleE9mVl9BdE9iaihnLGYpKSl9fX1yZXR1cm4gan07WDUwOS5nZXRTaWduYXR1cmVBbGdvcml0aG1OYW1lPWZ1bmN0aW9uKGQpe3ZhciBiPUFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdChkLDAsWzEsMF0pO3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChiKTt2YXIgYz1LSlVSLmFzbjEueDUwOS5PSUQub2lkMm5hbWUoYSk7cmV0dXJuIGN9O1g1MDkuZ2V0U2lnbmF0dXJlVmFsdWVIZXg9ZnVuY3Rpb24oYil7dmFyIGE9QVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KGIsMCxbMl0pO2lmKGEuc3Vic3RyKDAsMikhPT1cIjAwXCIpe3Rocm93XCJjYW4ndCBnZXQgc2lnbmF0dXJlIHZhbHVlXCJ9cmV0dXJuIGEuc3Vic3RyKDIpfTtYNTA5LmdldFNlcmlhbE51bWJlckhleD1mdW5jdGlvbihhKXtyZXR1cm4gQVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KGEsMCxbMCwxXSl9O1xuLyohIGp3cy0zLjMuNSAoYykgMjAxMy0yMDE2IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG4gKi9cbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5qd3M9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmp3cyl7S0pVUi5qd3M9e319S0pVUi5qd3MuSldTPWZ1bmN0aW9uKCl7dmFyIGE9S0pVUi5qd3MuSldTO3RoaXMucGFyc2VKV1M9ZnVuY3Rpb24oZSxoKXtpZigodGhpcy5wYXJzZWRKV1MhPT11bmRlZmluZWQpJiYoaHx8KHRoaXMucGFyc2VkSldTLnNpZ3ZhbEghPT11bmRlZmluZWQpKSl7cmV0dXJufXZhciBnPWUubWF0Y2goL14oW14uXSspXFwuKFteLl0rKVxcLihbXi5dKykkLyk7aWYoZz09bnVsbCl7dGhyb3dcIkpXUyBzaWduYXR1cmUgaXMgbm90IGEgZm9ybSBvZiAnSGVhZC5QYXlsb2FkLlNpZ1ZhbHVlJy5cIn12YXIgaT1nWzFdO3ZhciBjPWdbMl07dmFyIGo9Z1szXTt2YXIgbD1pK1wiLlwiK2M7dGhpcy5wYXJzZWRKV1M9e307dGhpcy5wYXJzZWRKV1MuaGVhZEI2NFU9aTt0aGlzLnBhcnNlZEpXUy5wYXlsb2FkQjY0VT1jO3RoaXMucGFyc2VkSldTLnNpZ3ZhbEI2NFU9ajt0aGlzLnBhcnNlZEpXUy5zaT1sO2lmKCFoKXt2YXIgZj1iNjR1dG9oZXgoaik7dmFyIGQ9cGFyc2VCaWdJbnQoZiwxNik7dGhpcy5wYXJzZWRKV1Muc2lndmFsSD1mO3RoaXMucGFyc2VkSldTLnNpZ3ZhbEJJPWR9dmFyIGI9YjY0dXRvdXRmOChpKTt2YXIgaz1iNjR1dG91dGY4KGMpO3RoaXMucGFyc2VkSldTLmhlYWRTPWI7dGhpcy5wYXJzZWRKV1MucGF5bG9hZFM9aztpZighYS5pc1NhZmVKU09OU3RyaW5nKGIsdGhpcy5wYXJzZWRKV1MsXCJoZWFkUFwiKSl7dGhyb3dcIm1hbGZvcm1lZCBKU09OIHN0cmluZyBmb3IgSldTIEhlYWQ6IFwiK2J9fX07S0pVUi5qd3MuSldTLnNpZ249ZnVuY3Rpb24oYSxpLGMsbSxsKXt2YXIgaz1LSlVSLmp3cy5KV1M7dmFyIHEsZSxqO2lmKHR5cGVvZiBpIT1cInN0cmluZ1wiJiZ0eXBlb2YgaSE9XCJvYmplY3RcIil7dGhyb3dcInNwSGVhZGVyIG11c3QgYmUgSlNPTiBzdHJpbmcgb3Igb2JqZWN0OiBcIitpfWlmKHR5cGVvZiBpPT1cIm9iamVjdFwiKXtlPWk7cT1KU09OLnN0cmluZ2lmeShlKX1pZih0eXBlb2YgaT09XCJzdHJpbmdcIil7cT1pO2lmKCFrLmlzU2FmZUpTT05TdHJpbmcocSkpe3Rocm93XCJKV1MgSGVhZCBpcyBub3Qgc2FmZSBKU09OIHN0cmluZzogXCIrcX1lPWsucmVhZFNhZmVKU09OU3RyaW5nKHEpfWo9YztpZih0eXBlb2YgYz09XCJvYmplY3RcIil7aj1KU09OLnN0cmluZ2lmeShjKX1pZigoYT09XCJcInx8YT09bnVsbCkmJmUuYWxnIT09dW5kZWZpbmVkKXthPWUuYWxnfWlmKChhIT1cIlwiJiZhIT1udWxsKSYmZS5hbGc9PT11bmRlZmluZWQpe2UuYWxnPWE7cT1KU09OLnN0cmluZ2lmeShlKX1pZihhIT09ZS5hbGcpe3Rocm93XCJhbGcgYW5kIHNIZWFkZXIuYWxnIGRvZXNuJ3QgbWF0Y2g6IFwiK2ErXCIhPVwiK2UuYWxnfXZhciBkPW51bGw7aWYoay5qd3NhbGcyc2lnYWxnW2FdPT09dW5kZWZpbmVkKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnIG5hbWU6IFwiK2F9ZWxzZXtkPWsuandzYWxnMnNpZ2FsZ1thXX12YXIgYj11dGY4dG9iNjR1KHEpO3ZhciBnPXV0Zjh0b2I2NHUoaik7dmFyIG89YitcIi5cIitnO3ZhciBuPVwiXCI7aWYoZC5zdWJzdHIoMCw0KT09XCJIbWFjXCIpe2lmKG09PT11bmRlZmluZWQpe3Rocm93XCJtYWMga2V5IHNoYWxsIGJlIHNwZWNpZmllZCBmb3IgSFMqIGFsZ1wifXZhciBoPW5ldyBLSlVSLmNyeXB0by5NYWMoe2FsZzpkLHByb3Y6XCJjcnlwdG9qc1wiLHBhc3M6bX0pO2gudXBkYXRlU3RyaW5nKG8pO249aC5kb0ZpbmFsKCl9ZWxzZXtpZihkLmluZGV4T2YoXCJ3aXRoRUNEU0FcIikhPS0xKXt2YXIgcD1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6ZH0pO3AuaW5pdChtLGwpO3AudXBkYXRlU3RyaW5nKG8pO2hBU04xU2lnPXAuc2lnbigpO249S0pVUi5jcnlwdG8uRUNEU0EuYXNuMVNpZ1RvQ29uY2F0U2lnKGhBU04xU2lnKX1lbHNle2lmKGQhPVwibm9uZVwiKXt2YXIgcD1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6ZH0pO3AuaW5pdChtLGwpO3AudXBkYXRlU3RyaW5nKG8pO249cC5zaWduKCl9fX12YXIgZj1oZXh0b2I2NHUobik7cmV0dXJuIG8rXCIuXCIrZn07S0pVUi5qd3MuSldTLnZlcmlmeT1mdW5jdGlvbihwLHQsail7dmFyIG09S0pVUi5qd3MuSldTO3ZhciBxPXAuc3BsaXQoXCIuXCIpO3ZhciBkPXFbMF07dmFyIGw9cVsxXTt2YXIgYj1kK1wiLlwiK2w7dmFyIHI9YjY0dXRvaGV4KHFbMl0pO3ZhciBpPW0ucmVhZFNhZmVKU09OU3RyaW5nKGI2NHV0b3V0ZjgocVswXSkpO3ZhciBoPW51bGw7dmFyIHM9bnVsbDtpZihpLmFsZz09PXVuZGVmaW5lZCl7dGhyb3dcImFsZ29yaXRobSBub3Qgc3BlY2lmaWVkIGluIGhlYWRlclwifWVsc2V7aD1pLmFsZztzPWguc3Vic3RyKDAsMil9aWYoaiE9bnVsbCYmT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGopPT09XCJbb2JqZWN0IEFycmF5XVwiJiZqLmxlbmd0aD4wKXt2YXIgYz1cIjpcIitqLmpvaW4oXCI6XCIpK1wiOlwiO2lmKGMuaW5kZXhPZihcIjpcIitoK1wiOlwiKT09LTEpe3Rocm93XCJhbGdvcml0aG0gJ1wiK2grXCInIG5vdCBhY2NlcHRlZCBpbiB0aGUgbGlzdFwifX1pZihoIT1cIm5vbmVcIiYmdD09PW51bGwpe3Rocm93XCJrZXkgc2hhbGwgYmUgc3BlY2lmaWVkIHRvIHZlcmlmeS5cIn1pZih0eXBlb2YgdD09XCJzdHJpbmdcIiYmdC5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIikhPS0xKXt0PUtFWVVUSUwuZ2V0S2V5KHQpfWlmKHM9PVwiUlNcInx8cz09XCJQU1wiKXtpZighKHQgaW5zdGFuY2VvZiBSU0FLZXkpKXt0aHJvd1wia2V5IHNoYWxsIGJlIGEgUlNBS2V5IG9iaiBmb3IgUlMqIGFuZCBQUyogYWxnc1wifX1pZihzPT1cIkVTXCIpe2lmKCEodCBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBKSl7dGhyb3dcImtleSBzaGFsbCBiZSBhIEVDRFNBIG9iaiBmb3IgRVMqIGFsZ3NcIn19aWYoaD09XCJub25lXCIpe312YXIgbj1udWxsO2lmKG0uandzYWxnMnNpZ2FsZ1tpLmFsZ109PT11bmRlZmluZWQpe3Rocm93XCJ1bnN1cHBvcnRlZCBhbGcgbmFtZTogXCIraH1lbHNle249bS5qd3NhbGcyc2lnYWxnW2hdfWlmKG49PVwibm9uZVwiKXt0aHJvd1wibm90IHN1cHBvcnRlZFwifWVsc2V7aWYobi5zdWJzdHIoMCw0KT09XCJIbWFjXCIpe3ZhciBrPW51bGw7aWYodD09PXVuZGVmaW5lZCl7dGhyb3dcImhleGFkZWNpbWFsIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhNQUNcIn12YXIgZz1uZXcgS0pVUi5jcnlwdG8uTWFjKHthbGc6bixwYXNzOnR9KTtnLnVwZGF0ZVN0cmluZyhiKTtrPWcuZG9GaW5hbCgpO3JldHVybiByPT1rfWVsc2V7aWYobi5pbmRleE9mKFwid2l0aEVDRFNBXCIpIT0tMSl7dmFyIGY9bnVsbDt0cnl7Zj1LSlVSLmNyeXB0by5FQ0RTQS5jb25jYXRTaWdUb0FTTjFTaWcocil9Y2F0Y2gobyl7cmV0dXJuIGZhbHNlfXZhciBlPW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzpufSk7ZS5pbml0KHQpO2UudXBkYXRlU3RyaW5nKGIpO3JldHVybiBlLnZlcmlmeShmKX1lbHNle3ZhciBlPW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzpufSk7ZS5pbml0KHQpO2UudXBkYXRlU3RyaW5nKGIpO3JldHVybiBlLnZlcmlmeShyKX19fX07S0pVUi5qd3MuSldTLnBhcnNlPWZ1bmN0aW9uKGcpe3ZhciBjPWcuc3BsaXQoXCIuXCIpO3ZhciBiPXt9O3ZhciBmLGUsZDtpZihjLmxlbmd0aCE9MiYmYy5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgc0pXUzogd3JvbmcgbnVtYmVyIG9mICcuJyBzcGxpdHRlZCBlbGVtZW50c1wifWY9Y1swXTtlPWNbMV07aWYoYy5sZW5ndGg9PTMpe2Q9Y1syXX1iLmhlYWRlck9iaj1LSlVSLmp3cy5KV1MucmVhZFNhZmVKU09OU3RyaW5nKGI2NHV0b3V0ZjgoZikpO2IucGF5bG9hZE9iaj1LSlVSLmp3cy5KV1MucmVhZFNhZmVKU09OU3RyaW5nKGI2NHV0b3V0ZjgoZSkpO2IuaGVhZGVyUFA9SlNPTi5zdHJpbmdpZnkoYi5oZWFkZXJPYmosbnVsbCxcIiAgXCIpO2lmKGIucGF5bG9hZE9iaj09bnVsbCl7Yi5wYXlsb2FkUFA9YjY0dXRvdXRmOChlKX1lbHNle2IucGF5bG9hZFBQPUpTT04uc3RyaW5naWZ5KGIucGF5bG9hZE9iaixudWxsLFwiICBcIil9aWYoZCE9PXVuZGVmaW5lZCl7Yi5zaWdIZXg9YjY0dXRvaGV4KGQpfXJldHVybiBifTtLSlVSLmp3cy5KV1MudmVyaWZ5SldUPWZ1bmN0aW9uKGQsaixsKXt2YXIgaD1LSlVSLmp3cy5KV1M7dmFyIGk9ZC5zcGxpdChcIi5cIik7dmFyIGM9aVswXTt2YXIgZz1pWzFdO3ZhciBtPWMrXCIuXCIrZzt2YXIgaz1iNjR1dG9oZXgoaVsyXSk7dmFyIGY9aC5yZWFkU2FmZUpTT05TdHJpbmcoYjY0dXRvdXRmOChjKSk7dmFyIGU9aC5yZWFkU2FmZUpTT05TdHJpbmcoYjY0dXRvdXRmOChnKSk7aWYoZi5hbGc9PT11bmRlZmluZWQpe3JldHVybiBmYWxzZX1pZihsLmFsZz09PXVuZGVmaW5lZCl7dGhyb3dcImFjY2VwdEZpZWxkLmFsZyBzaGFsbCBiZSBzcGVjaWZpZWRcIn1pZighaC5pbkFycmF5KGYuYWxnLGwuYWxnKSl7cmV0dXJuIGZhbHNlfWlmKGUuaXNzIT09dW5kZWZpbmVkJiZ0eXBlb2YgbC5pc3M9PT1cIm9iamVjdFwiKXtpZighaC5pbkFycmF5KGUuaXNzLGwuaXNzKSl7cmV0dXJuIGZhbHNlfX1pZihlLnN1YiE9PXVuZGVmaW5lZCYmdHlwZW9mIGwuc3ViPT09XCJvYmplY3RcIil7aWYoIWguaW5BcnJheShlLnN1YixsLnN1Yikpe3JldHVybiBmYWxzZX19aWYoZS5hdWQhPT11bmRlZmluZWQmJnR5cGVvZiBsLmF1ZD09PVwib2JqZWN0XCIpe2lmKHR5cGVvZiBlLmF1ZD09XCJzdHJpbmdcIil7aWYoIWguaW5BcnJheShlLmF1ZCxsLmF1ZCkpe3JldHVybiBmYWxzZX19ZWxzZXtpZih0eXBlb2YgZS5hdWQ9PVwib2JqZWN0XCIpe2lmKCFoLmluY2x1ZGVkQXJyYXkoZS5hdWQsbC5hdWQpKXtyZXR1cm4gZmFsc2V9fX19dmFyIGI9S0pVUi5qd3MuSW50RGF0ZS5nZXROb3coKTtpZihsLnZlcmlmeUF0IT09dW5kZWZpbmVkJiZ0eXBlb2YgbC52ZXJpZnlBdD09PVwibnVtYmVyXCIpe2I9bC52ZXJpZnlBdH1pZihsLmdyYWNlUGVyaW9kPT09dW5kZWZpbmVkfHx0eXBlb2YgbC5ncmFjZVBlcmlvZCE9PVwibnVtYmVyXCIpe2wuZ3JhY2VQZXJpb2Q9MH1pZihlLmV4cCE9PXVuZGVmaW5lZCYmdHlwZW9mIGUuZXhwPT1cIm51bWJlclwiKXtpZihlLmV4cCtsLmdyYWNlUGVyaW9kPGIpe3JldHVybiBmYWxzZX19aWYoZS5uYmYhPT11bmRlZmluZWQmJnR5cGVvZiBlLm5iZj09XCJudW1iZXJcIil7aWYoYjxlLm5iZi1sLmdyYWNlUGVyaW9kKXtyZXR1cm4gZmFsc2V9fWlmKGUuaWF0IT09dW5kZWZpbmVkJiZ0eXBlb2YgZS5pYXQ9PVwibnVtYmVyXCIpe2lmKGI8ZS5pYXQtbC5ncmFjZVBlcmlvZCl7cmV0dXJuIGZhbHNlfX1pZihlLmp0aSE9PXVuZGVmaW5lZCYmbC5qdGkhPT11bmRlZmluZWQpe2lmKGUuanRpIT09bC5qdGkpe3JldHVybiBmYWxzZX19aWYoIUtKVVIuandzLkpXUy52ZXJpZnkoZCxqLGwuYWxnKSl7cmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfTtLSlVSLmp3cy5KV1MuaW5jbHVkZWRBcnJheT1mdW5jdGlvbihiLGEpe3ZhciBkPUtKVVIuandzLkpXUy5pbkFycmF5O2lmKGI9PT1udWxsKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIhPT1cIm9iamVjdFwiKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIubGVuZ3RoIT09XCJudW1iZXJcIil7cmV0dXJuIGZhbHNlfWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtpZighZChiW2NdLGEpKXtyZXR1cm4gZmFsc2V9fXJldHVybiB0cnVlfTtLSlVSLmp3cy5KV1MuaW5BcnJheT1mdW5jdGlvbihkLGIpe2lmKGI9PT1udWxsKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIhPT1cIm9iamVjdFwiKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIubGVuZ3RoIT09XCJudW1iZXJcIil7cmV0dXJuIGZhbHNlfWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtpZihiW2NdPT1kKXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfTtLSlVSLmp3cy5KV1MuandzYWxnMnNpZ2FsZz17SFMyNTY6XCJIbWFjU0hBMjU2XCIsSFMzODQ6XCJIbWFjU0hBMzg0XCIsSFM1MTI6XCJIbWFjU0hBNTEyXCIsUlMyNTY6XCJTSEEyNTZ3aXRoUlNBXCIsUlMzODQ6XCJTSEEzODR3aXRoUlNBXCIsUlM1MTI6XCJTSEE1MTJ3aXRoUlNBXCIsRVMyNTY6XCJTSEEyNTZ3aXRoRUNEU0FcIixFUzM4NDpcIlNIQTM4NHdpdGhFQ0RTQVwiLFBTMjU2OlwiU0hBMjU2d2l0aFJTQWFuZE1HRjFcIixQUzM4NDpcIlNIQTM4NHdpdGhSU0FhbmRNR0YxXCIsUFM1MTI6XCJTSEE1MTJ3aXRoUlNBYW5kTUdGMVwiLG5vbmU6XCJub25lXCIsfTtLSlVSLmp3cy5KV1MuaXNTYWZlSlNPTlN0cmluZz1mdW5jdGlvbihjLGIsZCl7dmFyIGU9bnVsbDt0cnl7ZT1qc29uUGFyc2UoYyk7aWYodHlwZW9mIGUhPVwib2JqZWN0XCIpe3JldHVybiAwfWlmKGUuY29uc3RydWN0b3I9PT1BcnJheSl7cmV0dXJuIDB9aWYoYil7YltkXT1lfXJldHVybiAxfWNhdGNoKGEpe3JldHVybiAwfX07S0pVUi5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZz1mdW5jdGlvbihiKXt2YXIgYz1udWxsO3RyeXtjPWpzb25QYXJzZShiKTtpZih0eXBlb2YgYyE9XCJvYmplY3RcIil7cmV0dXJuIG51bGx9aWYoYy5jb25zdHJ1Y3Rvcj09PUFycmF5KXtyZXR1cm4gbnVsbH1yZXR1cm4gY31jYXRjaChhKXtyZXR1cm4gbnVsbH19O0tKVVIuandzLkpXUy5nZXRFbmNvZGVkU2lnbmF0dXJlVmFsdWVGcm9tSldTPWZ1bmN0aW9uKGIpe3ZhciBhPWIubWF0Y2goL15bXi5dK1xcLlteLl0rXFwuKFteLl0rKSQvKTtpZihhPT1udWxsKXt0aHJvd1wiSldTIHNpZ25hdHVyZSBpcyBub3QgYSBmb3JtIG9mICdIZWFkLlBheWxvYWQuU2lnVmFsdWUnLlwifXJldHVybiBhWzFdfTtLSlVSLmp3cy5KV1MuZ2V0SldLdGh1bWJwcmludD1mdW5jdGlvbihkKXtpZihkLmt0eSE9PVwiUlNBXCImJmQua3R5IT09XCJFQ1wiJiZkLmt0eSE9PVwib2N0XCIpe3Rocm93XCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gZm9yIEpXSyBUaHVtcHJpbnRcIn12YXIgYT1cIntcIjtpZihkLmt0eT09PVwiUlNBXCIpe2lmKHR5cGVvZiBkLm4hPVwic3RyaW5nXCJ8fHR5cGVvZiBkLmUhPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBuIGFuZCBlIHZhbHVlIGZvciBSU0Ega2V5XCJ9YSs9J1wiZVwiOlwiJytkLmUrJ1wiLCc7YSs9J1wia3R5XCI6XCInK2Qua3R5KydcIiwnO2ErPSdcIm5cIjpcIicrZC5uKydcIn0nfWVsc2V7aWYoZC5rdHk9PT1cIkVDXCIpe2lmKHR5cGVvZiBkLmNydiE9XCJzdHJpbmdcInx8dHlwZW9mIGQueCE9XCJzdHJpbmdcInx8dHlwZW9mIGQueSE9XCJzdHJpbmdcIil7dGhyb3dcIndyb25nIGNydiwgeCBhbmQgeSB2YWx1ZSBmb3IgRUMga2V5XCJ9YSs9J1wiY3J2XCI6XCInK2QuY3J2KydcIiwnO2ErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJ4XCI6XCInK2QueCsnXCIsJzthKz0nXCJ5XCI6XCInK2QueSsnXCJ9J31lbHNle2lmKGQua3R5PT09XCJvY3RcIil7aWYodHlwZW9mIGQuayE9XCJzdHJpbmdcIil7dGhyb3dcIndyb25nIGsgdmFsdWUgZm9yIG9jdChzeW1tZXRyaWMpIGtleVwifWErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJrXCI6XCInK2QuaysnXCJ9J319fXZhciBiPXJzdHJ0b2hleChhKTt2YXIgYz1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoYixcInNoYTI1NlwiKTt2YXIgZT1oZXh0b2I2NHUoYyk7cmV0dXJuIGV9O0tKVVIuandzLkludERhdGU9e307S0pVUi5qd3MuSW50RGF0ZS5nZXQ9ZnVuY3Rpb24oYSl7aWYoYT09XCJub3dcIil7cmV0dXJuIEtKVVIuandzLkludERhdGUuZ2V0Tm93KCl9ZWxzZXtpZihhPT1cIm5vdyArIDFob3VyXCIpe3JldHVybiBLSlVSLmp3cy5JbnREYXRlLmdldE5vdygpKzYwKjYwfWVsc2V7aWYoYT09XCJub3cgKyAxZGF5XCIpe3JldHVybiBLSlVSLmp3cy5JbnREYXRlLmdldE5vdygpKzYwKjYwKjI0fWVsc2V7aWYoYT09XCJub3cgKyAxbW9udGhcIil7cmV0dXJuIEtKVVIuandzLkludERhdGUuZ2V0Tm93KCkrNjAqNjAqMjQqMzB9ZWxzZXtpZihhPT1cIm5vdyArIDF5ZWFyXCIpe3JldHVybiBLSlVSLmp3cy5JbnREYXRlLmdldE5vdygpKzYwKjYwKjI0KjM2NX1lbHNle2lmKGEubWF0Y2goL1okLykpe3JldHVybiBLSlVSLmp3cy5JbnREYXRlLmdldFp1bHUoYSl9ZWxzZXtpZihhLm1hdGNoKC9eWzAtOV0rJC8pKXtyZXR1cm4gcGFyc2VJbnQoYSl9fX19fX19dGhyb3dcInVuc3VwcG9ydGVkIGZvcm1hdDogXCIrYX07S0pVUi5qd3MuSW50RGF0ZS5nZXRadWx1PWZ1bmN0aW9uKGspe3ZhciBiPWsubWF0Y2goLyhcXGQrKShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZClaLyk7aWYoYil7dmFyIGE9YlsxXTt2YXIgaT1wYXJzZUludChhKTtpZihhLmxlbmd0aD09NCl7fWVsc2V7aWYoYS5sZW5ndGg9PTIpe2lmKDUwPD1pJiZpPDEwMCl7aT0xOTAwK2l9ZWxzZXtpZigwPD1pJiZpPDUwKXtpPTIwMDAraX1lbHNle3Rocm93XCJtYWxmb3JtZWQgeWVhciBzdHJpbmcgZm9yIFVUQ1RpbWVcIn19fWVsc2V7dGhyb3dcIm1hbGZvcm1lZCB5ZWFyIHN0cmluZ1wifX12YXIgZz1wYXJzZUludChiWzJdKS0xO3ZhciBqPXBhcnNlSW50KGJbM10pO3ZhciBjPXBhcnNlSW50KGJbNF0pO3ZhciBlPXBhcnNlSW50KGJbNV0pO3ZhciBmPXBhcnNlSW50KGJbNl0pO3ZhciBoPW5ldyBEYXRlKERhdGUuVVRDKGksZyxqLGMsZSxmKSk7cmV0dXJuIH5+KGgvMTAwMCl9dGhyb3dcInVuc3VwcG9ydGVkIGZvcm1hdDogXCIra307S0pVUi5qd3MuSW50RGF0ZS5nZXROb3c9ZnVuY3Rpb24oKXt2YXIgYT1+fihuZXcgRGF0ZSgpLzEwMDApO3JldHVybiBhfTtLSlVSLmp3cy5JbnREYXRlLmludERhdGUyVVRDU3RyaW5nPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBEYXRlKGEqMTAwMCk7cmV0dXJuIGIudG9VVENTdHJpbmcoKX07S0pVUi5qd3MuSW50RGF0ZS5pbnREYXRlMlp1bHU9ZnVuY3Rpb24oZSl7dmFyIGk9bmV3IERhdGUoZSoxMDAwKTt2YXIgaD0oXCIwMDAwXCIraS5nZXRVVENGdWxsWWVhcigpKS5zbGljZSgtNCk7dmFyIGc9KFwiMDBcIisoaS5nZXRVVENNb250aCgpKzEpKS5zbGljZSgtMik7dmFyIGI9KFwiMDBcIitpLmdldFVUQ0RhdGUoKSkuc2xpY2UoLTIpO3ZhciBhPShcIjAwXCIraS5nZXRVVENIb3VycygpKS5zbGljZSgtMik7dmFyIGM9KFwiMDBcIitpLmdldFVUQ01pbnV0ZXMoKSkuc2xpY2UoLTIpO3ZhciBmPShcIjAwXCIraS5nZXRVVENTZWNvbmRzKCkpLnNsaWNlKC0yKTtyZXR1cm4gaCtnK2IrYStjK2YrXCJaXCJ9O1xuLyohIGp3c2pzLTIuMS4wIChjKSAyMDEwLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmp3cz09XCJ1bmRlZmluZWRcInx8IUtKVVIuandzKXtLSlVSLmp3cz17fX1LSlVSLmp3cy5KV1NKUz1mdW5jdGlvbigpe3ZhciBiPUtKVVIuandzLkpXUzt2YXIgYT1LSlVSLmp3cy5KV1M7dGhpcy5hSGVhZGVyPVtdO3RoaXMuc1BheWxvYWQ9XCJcIjt0aGlzLmFTaWduYXR1cmU9W107dGhpcy5pbml0PWZ1bmN0aW9uKCl7dGhpcy5hSGVhZGVyPVtdO3RoaXMuc1BheWxvYWQ9dW5kZWZpbmVkO3RoaXMuYVNpZ25hdHVyZT1bXX07dGhpcy5pbml0V2l0aEpXUz1mdW5jdGlvbihkKXt0aGlzLmluaXQoKTt2YXIgYz1kLnNwbGl0KFwiLlwiKTtpZihjLmxlbmd0aCE9Myl7dGhyb3dcIm1hbGZvcm1lZCBpbnB1dCBKV1NcIn10aGlzLmFIZWFkZXIucHVzaChjWzBdKTt0aGlzLnNQYXlsb2FkPWNbMV07dGhpcy5hU2lnbmF0dXJlLnB1c2goY1syXSl9O3RoaXMuYWRkU2lnbmF0dXJlPWZ1bmN0aW9uKGMsZixrLGkpe2lmKHRoaXMuc1BheWxvYWQ9PT11bmRlZmluZWR8fHRoaXMuc1BheWxvYWQ9PT1udWxsKXt0aHJvd1widGhlcmUncyBubyBKU09OLUpTIHNpZ25hdHVyZSB0byBhZGQuXCJ9dmFyIGo9dGhpcy5hSGVhZGVyLmxlbmd0aDtpZih0aGlzLmFIZWFkZXIubGVuZ3RoIT10aGlzLmFTaWduYXR1cmUubGVuZ3RoKXt0aHJvd1wiYUhlYWRlci5sZW5ndGggIT0gYVNpZ25hdHVyZS5sZW5ndGhcIn10cnl7dmFyIGQ9S0pVUi5qd3MuSldTLnNpZ24oYyxmLHRoaXMuc1BheWxvYWQsayxpKTt2YXIgaD1kLnNwbGl0KFwiLlwiKTt2YXIgbD1oWzBdO3ZhciBlPWhbMl07dGhpcy5hSGVhZGVyLnB1c2goaFswXSk7dGhpcy5hU2lnbmF0dXJlLnB1c2goaFsyXSl9Y2F0Y2goZyl7aWYodGhpcy5hSGVhZGVyLmxlbmd0aD5qKXt0aGlzLmFIZWFkZXIucG9wKCl9aWYodGhpcy5hU2lnbmF0dXJlLmxlbmd0aD5qKXt0aGlzLmFTaWduYXR1cmUucG9wKCl9dGhyb3dcImFkZFNpZ25hdHVyZSBmYWlsZWQ6IFwiK2d9fTt0aGlzLmFkZFNpZ25hdHVyZUJ5SGVhZGVyS2V5PWZ1bmN0aW9uKGYsYyl7dmFyIGU9YjY0dXRvdXRmOCh0aGlzLnNQYXlsb2FkKTt2YXIgZD1uZXcgS0pVUi5qd3MuSldTKCk7dmFyIGc9ZC5nZW5lcmF0ZUpXU0J5UDFQcnZLZXkoZixlLGMpO3RoaXMuYUhlYWRlci5wdXNoKGQucGFyc2VkSldTLmhlYWRCNjRVKTt0aGlzLmFTaWduYXR1cmUucHVzaChkLnBhcnNlZEpXUy5zaWd2YWxCNjRVKX07dGhpcy5hZGRTaWduYXR1cmVCeUhlYWRlclBheWxvYWRLZXk9ZnVuY3Rpb24oZixlLGMpe3ZhciBkPW5ldyBLSlVSLmp3cy5KV1MoKTt2YXIgZz1kLmdlbmVyYXRlSldTQnlQMVBydktleShmLGUsYyk7dGhpcy5hSGVhZGVyLnB1c2goZC5wYXJzZWRKV1MuaGVhZEI2NFUpO3RoaXMuc1BheWxvYWQ9ZC5wYXJzZWRKV1MucGF5bG9hZEI2NFU7dGhpcy5hU2lnbmF0dXJlLnB1c2goZC5wYXJzZWRKV1Muc2lndmFsQjY0VSl9O3RoaXMudmVyaWZ5QWxsPWZ1bmN0aW9uKGYpe2lmKHRoaXMuYUhlYWRlci5sZW5ndGghPT1mLmxlbmd0aHx8dGhpcy5hU2lnbmF0dXJlLmxlbmd0aCE9PWYubGVuZ3RoKXtyZXR1cm4gZmFsc2V9Zm9yKHZhciBlPTA7ZTxmLmxlbmd0aDtlKyspe3ZhciBkPWZbZV07aWYoZC5sZW5ndGghPT0yKXtyZXR1cm4gZmFsc2V9dmFyIGM9dGhpcy52ZXJpZnlOdGgoZSxkWzBdLGRbMV0pO2lmKGM9PT1mYWxzZSl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX07dGhpcy52ZXJpZnlOdGg9ZnVuY3Rpb24oZCxoLGUpe2lmKHRoaXMuYUhlYWRlci5sZW5ndGg8PWR8fHRoaXMuYVNpZ25hdHVyZS5sZW5ndGg8PWQpe3JldHVybiBmYWxzZX12YXIgZj10aGlzLmFIZWFkZXJbZF07dmFyIGk9dGhpcy5hU2lnbmF0dXJlW2RdO3ZhciBqPWYrXCIuXCIrdGhpcy5zUGF5bG9hZCtcIi5cIitpO3ZhciBjPWZhbHNlO3RyeXtjPWEudmVyaWZ5KGosaCxlKX1jYXRjaChnKXtyZXR1cm4gZmFsc2V9cmV0dXJuIGN9O3RoaXMudmVyaWZ5V2l0aENlcnRzPWZ1bmN0aW9uKGQpe2lmKHRoaXMuYUhlYWRlci5sZW5ndGghPWQubGVuZ3RoKXt0aHJvd1wibnVtIGhlYWRlcnMgZG9lcyBub3QgbWF0Y2ggd2l0aCBudW0gY2VydHNcIn1pZih0aGlzLmFTaWduYXR1cmUubGVuZ3RoIT1kLmxlbmd0aCl7dGhyb3dcIm51bSBzaWduYXR1cmVzIGRvZXMgbm90IG1hdGNoIHdpdGggbnVtIGNlcnRzXCJ9dmFyIGw9dGhpcy5zUGF5bG9hZDt2YXIgaD1cIlwiO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1kW2VdO3ZhciBnPXRoaXMuYUhlYWRlcltlXTt2YXIgbj10aGlzLmFTaWduYXR1cmVbZV07dmFyIGM9ZytcIi5cIitsK1wiLlwiK247dmFyIGs9bmV3IEtKVVIuandzLkpXUygpO3RyeXt2YXIgbT1rLnZlcmlmeUpXU0J5UGVtWDUwOUNlcnQoYyxmKTtpZihtIT0xKXtoKz0oZSsxKStcInRoIHNpZ25hdHVyZSB1bm1hdGNoLiBcIn19Y2F0Y2goail7aCs9KGUrMSkrXCJ0aCBzaWduYXR1cmUgZmFpbChcIitqK1wiKS4gXCJ9fWlmKGg9PVwiXCIpe3JldHVybiAxfWVsc2V7dGhyb3cgaH19O3RoaXMucmVhZEpXU0pTPWZ1bmN0aW9uKGUpe2lmKHR5cGVvZiBlPT09XCJzdHJpbmdcIil7dmFyIGQ9Yi5yZWFkU2FmZUpTT05TdHJpbmcoZSk7aWYoZD09bnVsbCl7dGhyb3dcImFyZ3VtZW50IGlzIG5vdCBzYWZlIEpTT04gb2JqZWN0IHN0cmluZ1wifXRoaXMuYUhlYWRlcj1kLmhlYWRlcnM7dGhpcy5zUGF5bG9hZD1kLnBheWxvYWQ7dGhpcy5hU2lnbmF0dXJlPWQuc2lnbmF0dXJlc31lbHNle3RyeXtpZihlLmhlYWRlcnMubGVuZ3RoPjApe3RoaXMuYUhlYWRlcj1lLmhlYWRlcnN9ZWxzZXt0aHJvd1wibWFsZm9ybWVkIGhlYWRlclwifWlmKHR5cGVvZiBlLnBheWxvYWQ9PT1cInN0cmluZ1wiKXt0aGlzLnNQYXlsb2FkPWUucGF5bG9hZH1lbHNle3Rocm93XCJtYWxmb3JtZWQgc2lnbmF0dXJlc1wifWlmKGUuc2lnbmF0dXJlcy5sZW5ndGg+MCl7dGhpcy5zaWduYXR1cmVzPWUuc2lnbmF0dXJlc31lbHNle3Rocm93XCJtYWxmb3JtZWQgc2lnbmF0dXJlc1wifX1jYXRjaChjKXt0aHJvd1wibWFsZm9ybWVkIEpXUy1KUyBKU09OIG9iamVjdDogXCIrY319fTt0aGlzLmdldEpTT049ZnVuY3Rpb24oKXtyZXR1cm57aGVhZGVyczp0aGlzLmFIZWFkZXIscGF5bG9hZDp0aGlzLnNQYXlsb2FkLHNpZ25hdHVyZXM6dGhpcy5hU2lnbmF0dXJlfX07dGhpcy5pc0VtcHR5PWZ1bmN0aW9uKCl7aWYodGhpcy5hSGVhZGVyLmxlbmd0aD09MCl7cmV0dXJuIDF9cmV0dXJuIDB9fTtcbmV4cG9ydHMuU2VjdXJlUmFuZG9tID0gU2VjdXJlUmFuZG9tO1xuZXhwb3J0cy5ybmdfc2VlZF90aW1lID0gcm5nX3NlZWRfdGltZTtcblxuZXhwb3J0cy5CaWdJbnRlZ2VyID0gQmlnSW50ZWdlcjtcbmV4cG9ydHMuUlNBS2V5ID0gUlNBS2V5O1xuZXhwb3J0cy5FQ0RTQSA9IEtKVVIuY3J5cHRvLkVDRFNBO1xuZXhwb3J0cy5EU0EgPSBLSlVSLmNyeXB0by5EU0E7XG5leHBvcnRzLlNpZ25hdHVyZSA9IEtKVVIuY3J5cHRvLlNpZ25hdHVyZTtcbmV4cG9ydHMuTWVzc2FnZURpZ2VzdCA9IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q7XG5leHBvcnRzLk1hYyA9IEtKVVIuY3J5cHRvLk1hYztcbmV4cG9ydHMuS0VZVVRJTCA9IEtFWVVUSUw7XG5leHBvcnRzLkFTTjFIRVggPSBBU04xSEVYO1xuZXhwb3J0cy5YNTA5ID0gWDUwOTtcbmV4cG9ydHMuQ3J5cHRvSlMgPSBDcnlwdG9KUztcblxuLy8gZXh0L2Jhc2U2NC5qc1xuZXhwb3J0cy5iNjR0b2hleCA9IGI2NHRvaGV4O1xuZXhwb3J0cy5iNjR0b0JBID0gYjY0dG9CQTtcblxuLy8gYmFzZTY0eC5qc1xuZXhwb3J0cy5zdG9CQSA9IHN0b0JBO1xuZXhwb3J0cy5CQXRvcyA9IEJBdG9zO1xuZXhwb3J0cy5CQXRvaGV4ID0gQkF0b2hleDtcbmV4cG9ydHMuc3RvaGV4ID0gc3RvaGV4O1xuZXhwb3J0cy5zdG9iNjQgPSBzdG9iNjQ7XG5leHBvcnRzLnN0b2I2NHUgPSBzdG9iNjR1O1xuZXhwb3J0cy5iNjR1dG9zID0gYjY0dXRvcztcbmV4cG9ydHMuYjY0dG9iNjR1ID0gYjY0dG9iNjR1O1xuZXhwb3J0cy5iNjR1dG9iNjQgPSBiNjR1dG9iNjQ7XG5leHBvcnRzLmhleDJiNjQgPSBoZXgyYjY0O1xuZXhwb3J0cy5oZXh0b2I2NHUgPSBoZXh0b2I2NHU7XG5leHBvcnRzLmI2NHV0b2hleCA9IGI2NHV0b2hleDtcbmV4cG9ydHMuYjY0dG9oZXggPSBiNjR0b2hleDtcbmV4cG9ydHMudXRmOHRvYjY0dSA9IHV0Zjh0b2I2NHU7XG5leHBvcnRzLmI2NHV0b3V0ZjggPSBiNjR1dG91dGY4O1xuZXhwb3J0cy51dGY4dG9iNjQgPSB1dGY4dG9iNjQ7XG5leHBvcnRzLmI2NHRvdXRmOCA9IGI2NHRvdXRmODtcbmV4cG9ydHMudXRmOHRvaGV4ID0gdXRmOHRvaGV4O1xuZXhwb3J0cy5oZXh0b3V0ZjggPSBoZXh0b3V0Zjg7XG5leHBvcnRzLmhleHRvcnN0ciA9IGhleHRvcnN0cjtcbmV4cG9ydHMucnN0cnRvaGV4ID0gcnN0cnRvaGV4O1xuZXhwb3J0cy5uZXdsaW5lX3RvVW5peCA9IG5ld2xpbmVfdG9Vbml4O1xuZXhwb3J0cy5uZXdsaW5lX3RvRG9zID0gbmV3bGluZV90b0RvcztcbmV4cG9ydHMuaW50YXJ5c3RydG9oZXggPSBpbnRhcnlzdHJ0b2hleDtcbmV4cG9ydHMuc3RyZGlmZmlkeCA9IHN0cmRpZmZpZHg7XG5cbmV4cG9ydHMuS0pVUiA9IEtKVVI7XG5leHBvcnRzLmNyeXB0byA9IEtKVVIuY3J5cHRvO1xuZXhwb3J0cy5hc24xID0gS0pVUi5hc24xO1xuZXhwb3J0cy5qd3MgPSBLSlVSLmp3cztcbmV4cG9ydHMubGFuZyA9IEtKVVIubGFuZztcblxuXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9qc3JzYXNpZ24vbGliL2pzcnNhc2lnbi5qc1xuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuaW1wb3J0IFVybFV0aWxpdHkgZnJvbSAnLi9VcmxVdGlsaXR5JztcclxuaW1wb3J0IFNpZ25pblN0YXRlIGZyb20gJy4vU2lnbmluU3RhdGUnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lnbmluUmVxdWVzdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgLy8gbWFuZGF0b3J5XHJcbiAgICAgICAgdXJsLCBjbGllbnRfaWQsIHJlZGlyZWN0X3VyaSwgcmVzcG9uc2VfdHlwZSwgc2NvcGUsIGF1dGhvcml0eSxcclxuICAgICAgICAvLyBvcHRpb25hbFxyXG4gICAgICAgIGRhdGEsIHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcywgcmVzb3VyY2VcclxuICAgIH0pIHtcclxuICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyB1cmwgcGFzc2VkIHRvIFNpZ25pblJlcXVlc3RcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFjbGllbnRfaWQpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gY2xpZW50X2lkIHBhc3NlZCB0byBTaWduaW5SZXF1ZXN0XCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjbGllbnRfaWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmVkaXJlY3RfdXJpKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIHJlZGlyZWN0X3VyaSBwYXNzZWQgdG8gU2lnbmluUmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVkaXJlY3RfdXJpXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlc3BvbnNlX3R5cGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gcmVzcG9uc2VfdHlwZSBwYXNzZWQgdG8gU2lnbmluUmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVzcG9uc2VfdHlwZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzY29wZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBzY29wZSBwYXNzZWQgdG8gU2lnbmluUmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2NvcGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIGF1dGhvcml0eSBwYXNzZWQgdG8gU2lnbmluUmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXV0aG9yaXR5XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG9pZGMgPSBTaWduaW5SZXF1ZXN0LmlzT2lkYyhyZXNwb25zZV90eXBlKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFNpZ25pblN0YXRlKHsgbm9uY2U6IG9pZGMsIGRhdGEsIGNsaWVudF9pZCwgYXV0aG9yaXR5IH0pO1xyXG5cclxuICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcImNsaWVudF9pZFwiLCBjbGllbnRfaWQpO1xyXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVkaXJlY3RfdXJpXCIsIHJlZGlyZWN0X3VyaSk7XHJcbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJyZXNwb25zZV90eXBlXCIsIHJlc3BvbnNlX3R5cGUpO1xyXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwic2NvcGVcIiwgc2NvcGUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwic3RhdGVcIiwgdGhpcy5zdGF0ZS5pZCk7XHJcbiAgICAgICAgaWYgKG9pZGMpIHtcclxuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJub25jZVwiLCB0aGlzLnN0YXRlLm5vbmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25hbCA9IHsgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBpZF90b2tlbl9oaW50LCBsb2dpbl9oaW50LCBhY3JfdmFsdWVzLCByZXNvdXJjZSB9O1xyXG4gICAgICAgIGZvcihsZXQga2V5IGluIG9wdGlvbmFsKXtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIGtleSwgb3B0aW9uYWxba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc09pZGMocmVzcG9uc2VfdHlwZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSByZXNwb25zZV90eXBlLnNwbGl0KC9cXHMrL2cpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtID09PSBcImlkX3Rva2VuXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICEhKHJlc3VsdFswXSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBpc09BdXRoKHJlc3BvbnNlX3R5cGUpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVzcG9uc2VfdHlwZS5zcGxpdCgvXFxzKy9nKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbSA9PT0gXCJ0b2tlblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAhIShyZXN1bHRbMF0pO1xyXG4gICAgfVxyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvU2lnbmluUmVxdWVzdC5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgR2xvYmFsIGZyb20gJy4vR2xvYmFsJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVybFV0aWxpdHkge1xyXG4gICAgc3RhdGljIGFkZFF1ZXJ5UGFyYW0odXJsLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh1cmwuaW5kZXhPZignPycpIDwgMCkge1xyXG4gICAgICAgICAgICB1cmwgKz0gXCI/XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodXJsW3VybC5sZW5ndGggLSAxXSAhPT0gXCI/XCIpIHtcclxuICAgICAgICAgICAgdXJsICs9IFwiJlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXJsICs9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcclxuICAgICAgICB1cmwgKz0gXCI9XCI7XHJcbiAgICAgICAgdXJsICs9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBhcnNlVXJsRnJhZ21lbnQodmFsdWUsIGRlbGltaXRlciA9IFwiI1wiLCBnbG9iYWwgPSBHbG9iYWwpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudFwiKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpe1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGdsb2JhbC5sb2NhdGlvbi5ocmVmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGlkeCA9IHZhbHVlLmxhc3RJbmRleE9mKGRlbGltaXRlcik7XHJcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKGlkeCArIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IHt9LFxyXG4gICAgICAgICAgICByZWdleCA9IC8oW14mPV0rKT0oW14mXSopL2csXHJcbiAgICAgICAgICAgIG07XHJcblxyXG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcclxuICAgICAgICB3aGlsZSAobSA9IHJlZ2V4LmV4ZWModmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHBhcmFtc1tkZWNvZGVVUklDb21wb25lbnQobVsxXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KG1bMl0pO1xyXG4gICAgICAgICAgICBpZiAoY291bnRlcisrID4gNTApIHtcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcInJlc3BvbnNlIGV4Y2VlZGVkIGV4cGVjdGVkIG51bWJlciBvZiBwYXJhbWV0ZXJzXCIsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiUmVzcG9uc2UgZXhjZWVkZWQgZXhwZWN0ZWQgbnVtYmVyIG9mIHBhcmFtZXRlcnNcIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBwYXJhbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVXJsVXRpbGl0eS5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgU3RhdGUgZnJvbSAnLi9TdGF0ZSc7XHJcbmltcG9ydCByYW5kb20gZnJvbSAnLi9yYW5kb20nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lnbmluU3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7bm9uY2UsIGF1dGhvcml0eSwgY2xpZW50X2lkfSA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoYXJndW1lbnRzWzBdKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAobm9uY2UgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9uY2UgPSByYW5kb20oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobm9uY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9uY2UgPSBub25jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xyXG4gICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IGNsaWVudF9pZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbm9uY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vbmNlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF1dGhvcml0eSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXV0aG9yaXR5O1xyXG4gICAgfVxyXG4gICAgZ2V0IGNsaWVudF9pZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50X2lkO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0b1N0b3JhZ2VTdHJpbmcoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJTaWduaW5TdGF0ZS50b1N0b3JhZ2VTdHJpbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgY3JlYXRlZDogdGhpcy5jcmVhdGVkLFxyXG4gICAgICAgICAgICBub25jZTogdGhpcy5ub25jZSxcclxuICAgICAgICAgICAgYXV0aG9yaXR5OiB0aGlzLmF1dGhvcml0eSxcclxuICAgICAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudF9pZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJTaWduaW5TdGF0ZS5mcm9tU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2Uoc3RvcmFnZVN0cmluZyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTaWduaW5TdGF0ZShkYXRhKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9TaWduaW5TdGF0ZS5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgcmFuZG9tIGZyb20gJy4vcmFuZG9tJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKHtpZCwgZGF0YSwgY3JlYXRlZH0gPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQgfHwgcmFuZG9tKCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY3JlYXRlZCA9PT0gJ251bWJlcicgJiYgY3JlYXRlZCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlZCA9IGNyZWF0ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVkID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XHJcbiAgICB9XHJcbiAgICBnZXQgY3JlYXRlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlZDtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0b3JhZ2VTdHJpbmcoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJTdGF0ZS50b1N0b3JhZ2VTdHJpbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgY3JlYXRlZDogdGhpcy5jcmVhdGVkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBmcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJTdGF0ZS5mcm9tU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICByZXR1cm4gbmV3IFN0YXRlKEpTT04ucGFyc2Uoc3RvcmFnZVN0cmluZykpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjbGVhclN0YWxlU3RhdGUoc3RvcmFnZSwgYWdlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGVcIik7XHJcblxyXG4gICAgICAgIHZhciBjdXRvZmYgPSBEYXRlLm5vdygpIC8gMTAwMCAtIGFnZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UuZ2V0QWxsS2V5cygpLnRoZW4oa2V5cyA9PiB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiZ290IGtleXNcIiwga2V5cyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwID0gc3RvcmFnZS5nZXQoa2V5KS50aGVuKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IFN0YXRlLmZyb21TdG9yYWdlU3RyaW5nKGl0ZW0pXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJnb3QgaXRlbSBmcm9tIGtleTogXCIsIGtleSwgc3RhdGUuY3JlYXRlZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNyZWF0ZWQgPD0gY3V0b2ZmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiRXJyb3IgcGFyc2luZyBzdGF0ZSBmb3Iga2V5XCIsIGtleSwgZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwibm8gaXRlbSBpbiBzdG9yYWdlIGZvciBrZXk6IFwiLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInJlbW92ZWQgaXRlbSBmb3Iga2V5OiBcIiwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JhZ2UucmVtb3ZlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTG9nLmluZm8oXCJ3YWl0aW5nIG9uIHByb21pc2UgY291bnQ6XCIsIHByb21pc2VzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvU3RhdGUuanNcbiAqKi8iLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQWRhbEpTIHYxLjAuOFxyXG4vLyBAcHJlc2VydmUgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgT3BlbiBUZWNobm9sb2dpZXMsIEluYy5cclxuLy8gQWxsIFJpZ2h0cyBSZXNlcnZlZFxyXG4vLyBBcGFjaGUgTGljZW5zZSAyLjBcclxuLy9cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuLy9cclxuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbi8vXHJcbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIE5PVElDRTogdGhlIGNvZGUgaW4gdGhpcyBmaWxlIG9yaWdpbmFsbHkgZGV2ZWxvcGVkIGJ5IE1pY3Jvc29mdFxyXG4vLyBvcmlnaW5hbCBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZUFEL2F6dXJlLWFjdGl2ZWRpcmVjdG9yeS1saWJyYXJ5LWZvci1qcy9ibG9iL21hc3Rlci9saWIvYWRhbC5qcyNMMTAyOVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tKCkge1xyXG4gICAgdmFyIGd1aWRIb2xkZXIgPSAneHh4eHh4eHh4eHh4NHh4eHl4eHh4eHh4eHh4eHh4eHgnO1xyXG4gICAgdmFyIGhleCA9ICcwMTIzNDU2Nzg5YWJjZGVmJztcclxuICAgIHZhciByID0gMDtcclxuICAgIHZhciBndWlkUmVzcG9uc2UgPSBcIlwiO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBndWlkSG9sZGVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGd1aWRIb2xkZXJbaV0gIT09ICctJyAmJiBndWlkSG9sZGVyW2ldICE9PSAnNCcpIHtcclxuICAgICAgICAgICAgLy8gZWFjaCB4IGFuZCB5IG5lZWRzIHRvIGJlIHJhbmRvbVxyXG4gICAgICAgICAgICByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChndWlkSG9sZGVyW2ldID09PSAneCcpIHtcclxuICAgICAgICAgICAgZ3VpZFJlc3BvbnNlICs9IGhleFtyXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGd1aWRIb2xkZXJbaV0gPT09ICd5Jykge1xyXG4gICAgICAgICAgICAvLyBjbG9jay1zZXEtYW5kLXJlc2VydmVkIGZpcnN0IGhleCBpcyBmaWx0ZXJlZCBhbmQgcmVtYWluaW5nIGhleCB2YWx1ZXMgYXJlIHJhbmRvbVxyXG4gICAgICAgICAgICByICY9IDB4MzsgLy8gYml0IGFuZCB3aXRoIDAwMTEgdG8gc2V0IHBvcyAyIHRvIHplcm8gPzA/P1xyXG4gICAgICAgICAgICByIHw9IDB4ODsgLy8gc2V0IHBvcyAzIHRvIDEgYXMgMT8/P1xyXG4gICAgICAgICAgICBndWlkUmVzcG9uc2UgKz0gaGV4W3JdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGd1aWRSZXNwb25zZSArPSBndWlkSG9sZGVyW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBndWlkUmVzcG9uc2U7XHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9yYW5kb20uanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgVXJsVXRpbGl0eSBmcm9tICcuL1VybFV0aWxpdHknO1xyXG5cclxuY29uc3QgT2lkY1Njb3BlID0gXCJvcGVuaWRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZ25pblJlc3BvbnNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHVybCkge1xyXG5cclxuICAgICAgICB2YXIgdmFsdWVzID0gVXJsVXRpbGl0eS5wYXJzZVVybEZyYWdtZW50KHVybCwgXCIjXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmVycm9yID0gdmFsdWVzLmVycm9yO1xyXG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSB2YWx1ZXMuZXJyb3JfZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5lcnJvcl91cmkgPSB2YWx1ZXMuZXJyb3JfdXJpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB2YWx1ZXMuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5pZF90b2tlbiA9IHZhbHVlcy5pZF90b2tlbjtcclxuICAgICAgICB0aGlzLnNlc3Npb25fc3RhdGUgPSB2YWx1ZXMuc2Vzc2lvbl9zdGF0ZTtcclxuICAgICAgICB0aGlzLmFjY2Vzc190b2tlbiA9IHZhbHVlcy5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgdGhpcy50b2tlbl90eXBlID0gdmFsdWVzLnRva2VuX3R5cGU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHZhbHVlcy5zY29wZTtcclxuICAgICAgICB0aGlzLnByb2ZpbGUgPSB1bmRlZmluZWQ7IC8vIHdpbGwgYmUgc2V0IGZyb20gUmVzcG9uc2VWYWxpZGF0b3JcclxuXHJcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSBwYXJzZUludCh2YWx1ZXMuZXhwaXJlc19pbik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBleHBpcmVzX2luID09PSAnbnVtYmVyJyAmJiBleHBpcmVzX2luID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgICAgICB0aGlzLmV4cGlyZXNfYXQgPSBub3cgKyBleHBpcmVzX2luO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXhwaXJlc19pbigpIHtcclxuICAgICAgICBpZiAodGhpcy5leHBpcmVzX2F0KSB7XHJcbiAgICAgICAgICAgIGxldCBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGlyZXNfYXQgLSBub3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGV4cGlyZWQoKSB7XHJcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSB0aGlzLmV4cGlyZXNfaW47XHJcbiAgICAgICAgaWYgKGV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwaXJlc19pbiA8PSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzY29wZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjb3BlIHx8IFwiXCIpLnNwbGl0KFwiIFwiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IGlzT3BlbklkQ29ubmVjdCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNjb3Blcy5pbmRleE9mKE9pZGNTY29wZSkgPj0gMDtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9TaWduaW5SZXNwb25zZS5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgVXJsVXRpbGl0eSBmcm9tICcuL1VybFV0aWxpdHknO1xyXG5pbXBvcnQgU3RhdGUgZnJvbSAnLi9TdGF0ZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWdub3V0UmVxdWVzdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7dXJsLCBpZF90b2tlbl9oaW50LCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksIGRhdGF9KSB7XHJcbiAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gdXJsIHBhc3NlZCB0byBTaWdub3V0UmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlkX3Rva2VuX2hpbnQpIHtcclxuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJpZF90b2tlbl9oaW50XCIsIGlkX3Rva2VuX2hpbnQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSkge1xyXG4gICAgICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJwb3N0X2xvZ291dF9yZWRpcmVjdF91cmlcIiwgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFN0YXRlKHsgZGF0YSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcInN0YXRlXCIsIHRoaXMuc3RhdGUuaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1NpZ25vdXRSZXF1ZXN0LmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IFVybFV0aWxpdHkgZnJvbSAnLi9VcmxVdGlsaXR5JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZ25vdXRSZXNwb25zZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1cmwpIHtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlcyA9IFVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudCh1cmwsIFwiP1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5lcnJvciA9IHZhbHVlcy5lcnJvcjtcclxuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gdmFsdWVzLmVycm9yX2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuZXJyb3JfdXJpID0gdmFsdWVzLmVycm9yX3VyaTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHZhbHVlcy5zdGF0ZTtcclxuICAgIH1cclxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1NpZ25vdXRSZXNwb25zZS5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5NZW1vcnlXZWJTdG9yYWdle1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLl9kYXRhID0ge307XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJJbk1lbW9yeVdlYlN0b3JhZ2UuZ2V0SXRlbVwiLCBrZXkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhW2tleV07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSl7XHJcbiAgICAgICAgTG9nLmluZm8oXCJJbk1lbW9yeVdlYlN0b3JhZ2Uuc2V0SXRlbVwiLCBrZXkpO1xyXG4gICAgICAgIHRoaXMuX2RhdGFba2V5XSA9IHZhbHVlO1xyXG4gICAgfSAgIFxyXG4gICAgXHJcbiAgICByZW1vdmVJdGVtKGtleSl7XHJcbiAgICAgICAgTG9nLmluZm8oXCJJbk1lbW9yeVdlYlN0b3JhZ2UucmVtb3ZlSXRlbVwiLCBrZXkpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9kYXRhW2tleV07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2RhdGEpLmxlbmd0aDtcclxuICAgIH1cclxuICAgIFxyXG4gICAga2V5KGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2RhdGEpW2luZGV4XTtcclxuICAgIH1cclxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0luTWVtb3J5V2ViU3RvcmFnZS5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgT2lkY0NsaWVudCBmcm9tICcuL09pZGNDbGllbnQnO1xyXG5pbXBvcnQgVXNlck1hbmFnZXJTZXR0aW5ncyBmcm9tICcuL1VzZXJNYW5hZ2VyU2V0dGluZ3MnO1xyXG5pbXBvcnQgVXNlciBmcm9tICcuL1VzZXInO1xyXG5pbXBvcnQgVXNlck1hbmFnZXJFdmVudHMgZnJvbSAnLi9Vc2VyTWFuYWdlckV2ZW50cyc7XHJcbmltcG9ydCBTaWxlbnRSZW5ld1NlcnZpY2UgZnJvbSAnLi9TaWxlbnRSZW5ld1NlcnZpY2UnO1xyXG5pbXBvcnQgU2Vzc2lvbk1vbml0b3IgZnJvbSAnLi9TZXNzaW9uTW9uaXRvcic7XHJcbmltcG9ydCBUb2tlblJldm9jYXRpb25DbGllbnQgZnJvbSAnLi9Ub2tlblJldm9jYXRpb25DbGllbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlck1hbmFnZXIgZXh0ZW5kcyBPaWRjQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzID0ge30sXHJcbiAgICAgICAgU2lsZW50UmVuZXdTZXJ2aWNlQ3RvciA9IFNpbGVudFJlbmV3U2VydmljZSxcclxuICAgICAgICBTZXNzaW9uTW9uaXRvckN0b3IgPSBTZXNzaW9uTW9uaXRvcixcclxuICAgICAgICBUb2tlblJldm9jYXRpb25DbGllbnRDdG9yID0gVG9rZW5SZXZvY2F0aW9uQ2xpZW50XHJcbiAgICApIHtcclxuXHJcbiAgICAgICAgaWYgKCEoc2V0dGluZ3MgaW5zdGFuY2VvZiBVc2VyTWFuYWdlclNldHRpbmdzKSkge1xyXG4gICAgICAgICAgICBzZXR0aW5ncyA9IG5ldyBVc2VyTWFuYWdlclNldHRpbmdzKHNldHRpbmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIoc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgVXNlck1hbmFnZXJFdmVudHMoc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICAvLyBvcmRlciBpcyBpbXBvcnRhbnQgZm9yIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczsgdGhlc2Ugc2VydmljZXMgZGVwZW5kIHVwb24gdGhlIGV2ZW50cy5cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvbWF0aWNTaWxlbnRSZW5ldykge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcImF1dG9tYXRpY1NpbGVudFJlbmV3IGlzIGNvbmZpZ3VyZWQsIHNldHRpbmcgdXAgc2lsZW50IHJlbmV3XCIpXHJcbiAgICAgICAgICAgIHRoaXMuX3NpbGVudFJlbmV3U2VydmljZSA9IG5ldyBTaWxlbnRSZW5ld1NlcnZpY2VDdG9yKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb25pdG9yU2Vzc2lvbikge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIm1vbml0b3JTZXNzaW9uIGlzIGNvbmZpZ3VyZWQsIHNldHRpbmcgdXAgc2Vzc2lvbiBtb25pdG9yXCIpXHJcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb25Nb25pdG9yID0gbmV3IFNlc3Npb25Nb25pdG9yQ3Rvcih0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3Rva2VuUmV2b2NhdGlvbkNsaWVudCA9IG5ldyBUb2tlblJldm9jYXRpb25DbGllbnRDdG9yKHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX3JlZGlyZWN0TmF2aWdhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnJlZGlyZWN0TmF2aWdhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9wb3B1cE5hdmlnYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wb3B1cE5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIGdldCBfaWZyYW1lTmF2aWdhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmlmcmFtZU5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIGdldCBfdXNlclN0b3JlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXZlbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlcigpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLmdldFVzZXJcIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkVXNlcigpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInVzZXIgbG9hZGVkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5sb2FkKHVzZXIsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwidXNlciBub3QgZm91bmQgaW4gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlVXNlcigpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnJlbW92ZVVzZXJcIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yZVVzZXIobnVsbCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwidXNlciByZW1vdmVkIGZyb20gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLnVubG9hZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNpZ25pblBvcHVwKGFyZ3MgPSB7fSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXBcIik7XHJcblxyXG4gICAgICAgIGxldCB1cmwgPSBhcmdzLnJlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvcHVwX3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtcclxuICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBwb3B1cF9yZWRpcmVjdF91cmkgb3IgcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBwb3B1cF9yZWRpcmVjdF91cmkgb3IgcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJncy5yZWRpcmVjdF91cmkgPSB1cmw7XHJcbiAgICAgICAgYXJncy5kaXNwbGF5ID0gXCJwb3B1cFwiO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluKGFyZ3MsIHRoaXMuX3BvcHVwTmF2aWdhdG9yLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93RmVhdHVyZXM6IGFyZ3MucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCB0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93RmVhdHVyZXMsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93VGFyZ2V0OiBhcmdzLnBvcHVwV2luZG93VGFyZ2V0IHx8IHRoaXMuc2V0dGluZ3MucG9wdXBXaW5kb3dUYXJnZXRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNpZ25pblBvcHVwQ2FsbGJhY2sodXJsKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5DYWxsYmFjayh1cmwsIHRoaXMuX3BvcHVwTmF2aWdhdG9yKTtcclxuICAgIH1cclxuICAgIHNpZ25pblNpbGVudChhcmdzID0ge30pIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudFwiKTtcclxuXHJcbiAgICAgICAgbGV0IHVybCA9IGFyZ3MucmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3Muc2lsZW50X3JlZGlyZWN0X3VyaTtcclxuICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJncy5yZWRpcmVjdF91cmkgPSB1cmw7XHJcbiAgICAgICAgYXJncy5wcm9tcHQgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAgICAgbGV0IHNldElkVG9rZW47XHJcbiAgICAgICAgaWYgKGFyZ3MuaWRfdG9rZW5faGludCkge1xyXG4gICAgICAgICAgICBzZXRJZFRva2VuID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRJZFRva2VuID0gdGhpcy5nZXRVc2VyKCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgICAgIGFyZ3MuaWRfdG9rZW5faGludCA9IHVzZXIgJiYgdXNlci5pZF90b2tlbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2V0SWRUb2tlbi50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbihhcmdzLCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IsIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgICAgICBzaWxlbnRSZXF1ZXN0VGltZW91dDogYXJncy5zaWxlbnRSZXF1ZXN0VGltZW91dCB8fCB0aGlzLnNldHRpbmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc2lnbmluU2lsZW50Q2FsbGJhY2sodXJsKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnRDYWxsYmFja1wiKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluQ2FsbGJhY2sodXJsLCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXJ5U2Vzc2lvblN0YXR1cyhhcmdzID0ge30pIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1c1wiKTtcclxuXHJcbiAgICAgICAgbGV0IHVybCA9IGFyZ3MucmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3Muc2lsZW50X3JlZGlyZWN0X3VyaTtcclxuICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJncy5yZWRpcmVjdF91cmkgPSB1cmw7XHJcbiAgICAgICAgYXJncy5wcm9tcHQgPSBcIm5vbmVcIjtcclxuICAgICAgICBhcmdzLnJlc3BvbnNlX3R5cGUgPSBcImlkX3Rva2VuXCI7XHJcbiAgICAgICAgYXJncy5zY29wZSA9IFwib3BlbmlkXCI7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5TdGFydChhcmdzLCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IsIHtcclxuICAgICAgICAgICAgc3RhcnRVcmw6IHVybCxcclxuICAgICAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQ6IGFyZ3Muc2lsZW50UmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRSZXF1ZXN0VGltZW91dFxyXG4gICAgICAgIH0pLnRoZW4obmF2UmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzU2lnbmluUmVzcG9uc2UobmF2UmVzcG9uc2UudXJsKS50aGVuKHNpZ25pblJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiZ290IHNpZ25pbiByZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2lnbmluUmVzcG9uc2Uuc2Vzc2lvbl9zdGF0ZSAmJiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnN1YiAmJiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnNpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fc3RhdGU6IHNpZ25pblJlc3BvbnNlLnNlc3Npb25fc3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yjogc2lnbmluUmVzcG9uc2UucHJvZmlsZS5zdWIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZDogc2lnbmluUmVzcG9uc2UucHJvZmlsZS5zaWRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXZva2VBY2Nlc3NUb2tlbigpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnJldm9rZUFjY2Vzc1Rva2VuXCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRVc2VyKCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZUludGVybmFsKHVzZXIsIHRydWUpLnRoZW4oc3VjY2VzcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwicmVtb3ZpbmcgdG9rZW4gcHJvcGVydGllcyBmcm9tIHVzZXIgYW5kIHJlLXN0b3JpbmdcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXIuYWNjZXNzX3Rva2VuID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyLmV4cGlyZXNfYXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXIudG9rZW5fdHlwZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdG9yZVVzZXIodXNlcikudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwidXNlciBzdG9yZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5sb2FkKHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfcmV2b2tlSW50ZXJuYWwodXNlciwgcmVxdWlyZWQpIHtcclxuICAgICAgICBMb2cuaW5mbyhcImNoZWNraW5nIGlmIHRva2VuIHJldm9jYXRpb24gaXMgbmVjZXNzYXJ5XCIpO1xyXG5cclxuICAgICAgICB2YXIgYWNjZXNzX3Rva2VuID0gdXNlciAmJiB1c2VyLmFjY2Vzc190b2tlbjtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIEpXVCB2cy4gcmVmZXJlbmNlIHRva2VuXHJcbiAgICAgICAgaWYgKCFhY2Nlc3NfdG9rZW4gfHwgYWNjZXNzX3Rva2VuLmluZGV4T2YoJy4nKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwibm8gbmVlZCB0byByZXZva2UgZHVlIHRvIG5vIHVzZXIsIHRva2VuLCBvciBKV1QgZm9ybWF0XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlKGFjY2Vzc190b2tlbiwgcmVxdWlyZWQpLnRoZW4oKCkgPT4gdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3NpZ25pbihhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJfc2lnbmluXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5TdGFydChhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcykudGhlbihuYXZSZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5FbmQobmF2UmVzcG9uc2UudXJsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9zaWduaW5DYWxsYmFjayh1cmwsIG5hdmlnYXRvcikge1xyXG4gICAgICAgIExvZy5pbmZvKFwiX3NpZ25pbkNhbGxiYWNrXCIpO1xyXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuY2FsbGJhY2sodXJsKTtcclxuICAgIH1cclxuICAgIF9zaWdub3V0KGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zID0ge30pIHtcclxuICAgICAgICBMb2cuaW5mbyhcIl9zaWdub3V0XCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0U3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMpLnRoZW4obmF2UmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lnbm91dEVuZChuYXZSZXNwb25zZS51cmwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25vdXRDYWxsYmFjayh1cmwsIG5hdmlnYXRvcikge1xyXG4gICAgICAgIExvZy5pbmZvKFwiX3NpZ25vdXRDYWxsYmFja1wiKTtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmNhbGxiYWNrKHVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2lnbmluUmVkaXJlY3QoYXJncykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3RcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pblN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yKTtcclxuICAgIH1cclxuICAgIHNpZ25pblJlZGlyZWN0Q2FsbGJhY2sodXJsKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5SZWRpcmVjdENhbGxiYWNrXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5FbmQodXJsIHx8IHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLnVybCk7XHJcbiAgICB9XHJcbiAgICBzaWdub3V0UmVkaXJlY3QoYXJncykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0XCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0U3RhcnQoYXJncywgdGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3IpO1xyXG4gICAgfVxyXG4gICAgc2lnbm91dFBvcHVwKGFyZ3MgPSB7fSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFBvcHVwXCIpO1xyXG5cclxuICAgICAgICBsZXQgdXJsID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0KGFyZ3MsIHRoaXMuX3BvcHVwTmF2aWdhdG9yLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93RmVhdHVyZXM6IGFyZ3MucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCB0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93RmVhdHVyZXMsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93VGFyZ2V0OiBhcmdzLnBvcHVwV2luZG93VGFyZ2V0IHx8IHRoaXMuc2V0dGluZ3MucG9wdXBXaW5kb3dUYXJnZXRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNpZ25vdXRSZWRpcmVjdENhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2tcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXRFbmQodXJsIHx8IHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLnVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3NpZ25pblN0YXJ0KGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zID0ge30pIHtcclxuICAgICAgICBMb2cuaW5mbyhcIl9zaWduaW5TdGFydFwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5wcmVwYXJlKG5hdmlnYXRvclBhcmFtcykudGhlbihoYW5kbGUgPT4ge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcImdvdCBuYXZpZ2F0b3Igd2luZG93IGhhbmRsZVwiKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNpZ25pblJlcXVlc3QoYXJncykudGhlbihzaWduaW5SZXF1ZXN0ID0+IHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiZ290IHNpZ25pbiByZXF1ZXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvclBhcmFtcy51cmwgPSBzaWduaW5SZXF1ZXN0LnVybDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUubmF2aWdhdGUobmF2aWdhdG9yUGFyYW1zKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfc2lnbmluRW5kKHVybCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiX3NpZ25pbkVuZFwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25pblJlc3BvbnNlKHVybCkudGhlbihzaWduaW5SZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiZ290IHNpZ25pbiByZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB1c2VyID0gbmV3IFVzZXIoc2lnbmluUmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0b3JlVXNlcih1c2VyKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwidXNlciBzdG9yZWRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9zaWdub3V0U3RhcnQoYXJncyA9IHt9LCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJfc2lnbm91dFN0YXJ0XCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnByZXBhcmUobmF2aWdhdG9yUGFyYW1zKS50aGVuKGhhbmRsZSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiZ290IG5hdmlnYXRvciB3aW5kb3cgaGFuZGxlXCIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlcigpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcImxvYWRlZCBjdXJyZW50IHVzZXIgZnJvbSBzdG9yYWdlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXZva2VJbnRlcm5hbCh1c2VyKS50aGVuKCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkX3Rva2VuID0gYXJncy5pZF90b2tlbl9oaW50IHx8IHVzZXIgJiYgdXNlci5pZF90b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJTZXR0aW5nIGlkX3Rva2VuIGludG8gc2lnbm91dCByZXF1ZXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLmlkX3Rva2VuX2hpbnQgPSBpZF90b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZVVzZXIoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJ1c2VyIHJlbW92ZWQsIGNyZWF0aW5nIHNpZ25vdXQgcmVxdWVzdFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNpZ25vdXRSZXF1ZXN0KGFyZ3MpLnRoZW4oc2lnbm91dFJlcXVlc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJnb3Qgc2lnbm91dCByZXF1ZXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvclBhcmFtcy51cmwgPSBzaWdub3V0UmVxdWVzdC51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlLm5hdmlnYXRlKG5hdmlnYXRvclBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25vdXRFbmQodXJsKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJfc2lnbm91dEVuZFwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25vdXRSZXNwb25zZSh1cmwpLnRoZW4oc2lnbm91dFJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJnb3Qgc2lnbm91dCByZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzaWdub3V0UmVzcG9uc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF91c2VyU3RvcmVLZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIGB1c2VyOiR7dGhpcy5zZXR0aW5ncy5hdXRob3JpdHl9OiR7dGhpcy5zZXR0aW5ncy5jbGllbnRfaWR9YDtcclxuICAgIH1cclxuXHJcbiAgICBfbG9hZFVzZXIoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJfbG9hZFVzZXJcIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyU3RvcmUuZ2V0KHRoaXMuX3VzZXJTdG9yZUtleSkudGhlbihzdG9yYWdlU3RyaW5nID0+IHtcclxuICAgICAgICAgICAgaWYgKHN0b3JhZ2VTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwidXNlciBzdG9yYWdlU3RyaW5nIGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVc2VyLmZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIm5vIHVzZXIgc3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3N0b3JlVXNlcih1c2VyKSB7XHJcbiAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJfc3RvcmVVc2VyIHN0b3JpbmcgdXNlclwiKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdG9yYWdlU3RyaW5nID0gdXNlci50b1N0b3JhZ2VTdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5zZXQodGhpcy5fdXNlclN0b3JlS2V5LCBzdG9yYWdlU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiX3N0b3JlVXNlciByZW1vdmluZyB1c2VyIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyU3RvcmUucmVtb3ZlKHRoaXMuX3VzZXJTdG9yZUtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1VzZXJNYW5hZ2VyLmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCBPaWRjQ2xpZW50U2V0dGluZ3MgZnJvbSAnLi9PaWRjQ2xpZW50U2V0dGluZ3MnO1xyXG5pbXBvcnQgUmVkaXJlY3ROYXZpZ2F0b3IgZnJvbSAnLi9SZWRpcmVjdE5hdmlnYXRvcic7XHJcbmltcG9ydCBQb3B1cE5hdmlnYXRvciBmcm9tICcuL1BvcHVwTmF2aWdhdG9yJztcclxuaW1wb3J0IElGcmFtZU5hdmlnYXRvciBmcm9tICcuL0lGcmFtZU5hdmlnYXRvcic7XHJcbmltcG9ydCBXZWJTdG9yYWdlU3RhdGVTdG9yZSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlJztcclxuaW1wb3J0IEdsb2JhbCBmcm9tICcuL0dsb2JhbCc7XHJcblxyXG5jb25zdCBEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSA2MDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJNYW5hZ2VyU2V0dGluZ3MgZXh0ZW5kcyBPaWRjQ2xpZW50U2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3Ioe1xyXG4gICAgICAgIHBvcHVwX3JlZGlyZWN0X3VyaSxcclxuICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzLFxyXG4gICAgICAgIHBvcHVwV2luZG93VGFyZ2V0LFxyXG4gICAgICAgIHNpbGVudF9yZWRpcmVjdF91cmksXHJcbiAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQsXHJcbiAgICAgICAgYXV0b21hdGljU2lsZW50UmVuZXcgPSBmYWxzZSxcclxuICAgICAgICBtb25pdG9yU2Vzc2lvbiA9IHRydWUsXHJcbiAgICAgICAgYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSBEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUsXHJcbiAgICAgICAgcmVkaXJlY3ROYXZpZ2F0b3IgPSBuZXcgUmVkaXJlY3ROYXZpZ2F0b3IoKSxcclxuICAgICAgICBwb3B1cE5hdmlnYXRvciA9IG5ldyBQb3B1cE5hdmlnYXRvcigpLFxyXG4gICAgICAgIGlmcmFtZU5hdmlnYXRvciA9IG5ldyBJRnJhbWVOYXZpZ2F0b3IoKSxcclxuICAgICAgICB1c2VyU3RvcmUgPSBuZXcgV2ViU3RvcmFnZVN0YXRlU3RvcmUoeyBzdG9yZTogR2xvYmFsLnNlc3Npb25TdG9yYWdlIH0pXHJcbiAgICB9ID0ge30pIHtcclxuICAgICAgICBzdXBlcihhcmd1bWVudHNbMF0pO1xyXG5cclxuICAgICAgICB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmkgPSBwb3B1cF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcyA9IHBvcHVwV2luZG93RmVhdHVyZXM7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQgPSBwb3B1cFdpbmRvd1RhcmdldDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9zaWxlbnRfcmVkaXJlY3RfdXJpID0gc2lsZW50X3JlZGlyZWN0X3VyaTtcclxuICAgICAgICB0aGlzLl9zaWxlbnRSZXF1ZXN0VGltZW91dCA9IHNpbGVudFJlcXVlc3RUaW1lb3V0O1xyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3ID0gISFhdXRvbWF0aWNTaWxlbnRSZW5ldztcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xyXG5cclxuICAgICAgICB0aGlzLl9tb25pdG9yU2Vzc2lvbiA9IG1vbml0b3JTZXNzaW9uO1xyXG5cclxuICAgICAgICB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvciA9IHJlZGlyZWN0TmF2aWdhdG9yO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwTmF2aWdhdG9yID0gcG9wdXBOYXZpZ2F0b3I7XHJcbiAgICAgICAgdGhpcy5faWZyYW1lTmF2aWdhdG9yID0gaWZyYW1lTmF2aWdhdG9yO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3VzZXJTdG9yZSA9IHVzZXJTdG9yZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcG9wdXBfcmVkaXJlY3RfdXJpKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICBnZXQgcG9wdXBXaW5kb3dGZWF0dXJlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcztcclxuICAgIH1cclxuICAgIGdldCBwb3B1cFdpbmRvd1RhcmdldCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNpbGVudF9yZWRpcmVjdF91cmkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpbGVudF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICAgZ2V0IHNpbGVudFJlcXVlc3RUaW1lb3V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWxlbnRSZXF1ZXN0VGltZW91dDtcclxuICAgIH1cclxuICAgIGdldCBhdXRvbWF0aWNTaWxlbnRSZW5ldygpIHtcclxuICAgICAgICByZXR1cm4gISEodGhpcy5zaWxlbnRfcmVkaXJlY3RfdXJpICYmIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3KTtcclxuICAgIH1cclxuICAgIGdldCBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vbml0b3JTZXNzaW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb25pdG9yU2Vzc2lvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVkaXJlY3ROYXZpZ2F0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBvcHVwTmF2aWdhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cE5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIGdldCBpZnJhbWVOYXZpZ2F0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lmcmFtZU5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHVzZXJTdG9yZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlclN0b3JlO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1VzZXJNYW5hZ2VyU2V0dGluZ3MuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZGlyZWN0TmF2aWdhdG9yIHtcclxuICAgIFxyXG4gICAgcHJlcGFyZSgpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5hdmlnYXRlKHBhcmFtcykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUmVkaXJlY3ROYXZpZ2F0b3IubmF2aWdhdGVcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHBhcmFtcy51cmw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1cmwoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJSZWRpcmVjdE5hdmlnYXRvci51cmxcIik7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1JlZGlyZWN0TmF2aWdhdG9yLmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCBQb3B1cFdpbmRvdyBmcm9tICcuL1BvcHVwV2luZG93JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwTmF2aWdhdG9yIHtcclxuICAgIFxyXG4gICAgcHJlcGFyZShwYXJhbXMpIHtcclxuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgUG9wdXBXaW5kb3cocGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBvcHVwKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY2FsbGJhY2sodXJsKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJQb3B1cE5hdmlnYXRvci5jYWxsYmFja1wiKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyKHVybCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9Qb3B1cE5hdmlnYXRvci5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5cclxuY29uc3QgQ2hlY2tGb3JQb3B1cENsb3NlZEludGVydmFsID0gNTAwO1xyXG5jb25zdCBEZWZhdWx0UG9wdXBGZWF0dXJlcyA9ICdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHdpZHRoPTUwMCxoZWlnaHQ9NTAwLGxlZnQ9MTAwLHRvcD0xMDAnO1xyXG5jb25zdCBEZWZhdWx0UG9wdXBUYXJnZXQgPSBcIl9ibGFua1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaW5kb3cge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUG9wdXBXaW5kb3cuY3RvclwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gcGFyYW1zLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgRGVmYXVsdFBvcHVwRmVhdHVyZXM7XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHBhcmFtcy5wb3B1cFdpbmRvd1RhcmdldCB8fCBEZWZhdWx0UG9wdXBUYXJnZXQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcHVwID0gd2luZG93Lm9wZW4oJycsIHRhcmdldCwgZmVhdHVyZXMpO1xyXG4gICAgICAgIGlmICh0aGlzLl9wb3B1cCkge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcInBvcHVwIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZC5iaW5kKHRoaXMpLCBDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlBvcHVwV2luZG93Lm5hdmlnYXRlXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiRXJyb3Igb3BlbmluZyBwb3B1cCB3aW5kb3dcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlNldHRpbmcgVVJMIGluIHBvcHVwXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAuZm9jdXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAud2luZG93LmxvY2F0aW9uID0gcGFyYW1zLnVybDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgX3N1Y2Nlc3MoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmluZm8oXCJTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gcG9wdXAgd2luZG93XCIpO1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBfZXJyb3IobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuX3JlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhbnVwKCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUG9wdXBXaW5kb3cuX2NsZWFudXBcIik7XHJcblxyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2NoZWNrRm9yUG9wdXBDbG9zZWRUaW1lcik7XHJcblxyXG4gICAgICAgIHRoaXMuX2NoZWNrRm9yUG9wdXBDbG9zZWRUaW1lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnRzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwKXtcclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcG9wdXAgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIF9jaGVja0ZvclBvcHVwQ2xvc2VkKCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUG9wdXBXaW5kb3cuX2NoZWNrRm9yUG9wdXBDbG9zZWRcIik7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fcG9wdXAgfHwgdGhpcy5fcG9wdXAuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXAgd2luZG93IGNsb3NlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX21lc3NhZ2UoZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUG9wdXBXaW5kb3cuX21lc3NhZ2VcIik7XHJcblxyXG4gICAgICAgIGlmIChlLm9yaWdpbiA9PT0gdGhpcy5fb3JpZ2luICYmXHJcbiAgICAgICAgICAgIGUuc291cmNlID09PSB0aGlzLl9wb3B1cC53aW5kb3dcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJwcm9jZXNzaW5nIG1lc3NhZ2VcIik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgdXJsID0gZS5kYXRhIHx8IGUuc291cmNlLmxvY2F0aW9uLmhyZWY7IC8vIGZvciBJRTlcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIHBvcHVwXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBfb3JpZ2luKCkge1xyXG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG5vdGlmeU9wZW5lcih1cmwpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lclwiKTtcclxuXHJcbiAgICAgICAgaWYgKHdpbmRvdy5vcGVuZXIpIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgICAgICAgICBpZiAodXJsKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInBvc3RpbmcgdXJsIG1lc3NhZ2UgdG8gb3BlbmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW5lci5wb3N0TWVzc2FnZSh1cmwsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvUG9wdXBXaW5kb3cuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuaW1wb3J0IElGcmFtZVdpbmRvdyBmcm9tICcuL0lGcmFtZVdpbmRvdyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJRnJhbWVOYXZpZ2F0b3Ige1xyXG5cclxuICAgIHByZXBhcmUocGFyYW1zKSB7XHJcbiAgICAgICAgbGV0IGZyYW1lID0gbmV3IElGcmFtZVdpbmRvdyhwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZnJhbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiSUZyYW1lTmF2aWdhdG9yLmNhbGxiYWNrXCIpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50KHVybCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9JRnJhbWVOYXZpZ2F0b3IuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuXHJcbmNvbnN0IERlZmF1bHRUaW1lb3V0ID0gNTAwMDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElGcmFtZVdpbmRvdyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJJRnJhbWVXaW5kb3cuY3RvclwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fZnJhbWUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZnJhbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIG5hdmlnYXRlKHBhcmFtcykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiSUZyYW1lV2luZG93Lm5hdmlnYXRlXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLnVybCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0aW1lb3V0ID0gcGFyYW1zLnNpbGVudFJlcXVlc3RUaW1lb3V0IHx8IERlZmF1bHRUaW1lb3V0O1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzaW5nIHRpbWVvdXQgb2Y6XCIsIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuX3RpbWVvdXQuYmluZCh0aGlzKSwgdGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lLnNyYyA9IHBhcmFtcy51cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgX3N1Y2Nlc3MoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmluZm8oXCJTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gZnJhbWUgd2luZG93XCIpO1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBfZXJyb3IobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuX3JlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhbnVwKCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiSUZyYW1lV2luZG93Ll9jbGVhbnVwXCIpO1xyXG5cclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcclxuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLl9mcmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIF90aW1lb3V0KCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiSUZyYW1lV2luZG93Ll90aW1lb3V0XCIpO1xyXG4gICAgICAgIHRoaXMuX2Vycm9yKFwiRnJhbWUgd2luZG93IHRpbWVkIG91dFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBfbWVzc2FnZShlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJJRnJhbWVXaW5kb3cuX21lc3NhZ2VcIik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90aW1lciAmJlxyXG4gICAgICAgICAgICBlLm9yaWdpbiA9PT0gdGhpcy5fb3JpZ2luICYmXHJcbiAgICAgICAgICAgIGUuc291cmNlID09PSB0aGlzLl9mcmFtZS5jb250ZW50V2luZG93XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSBlLmRhdGE7XHJcbiAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIGZyYW1lXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBfb3JpZ2luKCkge1xyXG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG5vdGlmeVBhcmVudCh1cmwpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIklGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnRcIik7XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cucGFyZW50ICYmIHdpbmRvdyAhPT0gd2luZG93LnBhcmVudCkge1xyXG4gICAgICAgICAgICB1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwicG9zdGluZyB1cmwgbWVzc2FnZSB0byBwYXJlbnRcIik7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHVybCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9JRnJhbWVXaW5kb3cuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXIge1xyXG4gICAgY29uc3RydWN0b3Ioe2lkX3Rva2VuLCBzZXNzaW9uX3N0YXRlLCBhY2Nlc3NfdG9rZW4sIHRva2VuX3R5cGUsIHNjb3BlLCBwcm9maWxlLCBleHBpcmVzX2F0LCBzdGF0ZX0pIHtcclxuICAgICAgICB0aGlzLmlkX3Rva2VuID0gaWRfdG9rZW47XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uX3N0YXRlID0gc2Vzc2lvbl9zdGF0ZTtcclxuICAgICAgICB0aGlzLmFjY2Vzc190b2tlbiA9IGFjY2Vzc190b2tlbjtcclxuICAgICAgICB0aGlzLnRva2VuX3R5cGUgPSB0b2tlbl90eXBlO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcclxuICAgICAgICB0aGlzLnByb2ZpbGUgPSBwcm9maWxlO1xyXG4gICAgICAgIHRoaXMuZXhwaXJlc19hdCA9IGV4cGlyZXNfYXQ7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBleHBpcmVzX2luKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmV4cGlyZXNfYXQpIHtcclxuICAgICAgICAgICAgbGV0IG5vdyA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwaXJlc19hdCAtIG5vdztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXhwaXJlZCgpIHtcclxuICAgICAgICBsZXQgZXhwaXJlc19pbiA9IHRoaXMuZXhwaXJlc19pbjtcclxuICAgICAgICBpZiAoZXhwaXJlc19pbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBleHBpcmVzX2luIDw9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNjb3BlcygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc2NvcGUgfHwgXCJcIikuc3BsaXQoXCIgXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RvcmFnZVN0cmluZygpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXIudG9TdG9yYWdlU3RyaW5nXCIpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGlkX3Rva2VuOiB0aGlzLmlkX3Rva2VuLFxyXG4gICAgICAgICAgICBzZXNzaW9uX3N0YXRlOiB0aGlzLnNlc3Npb25fc3RhdGUsXHJcbiAgICAgICAgICAgIGFjY2Vzc190b2tlbjogdGhpcy5hY2Nlc3NfdG9rZW4sXHJcbiAgICAgICAgICAgIHRva2VuX3R5cGU6IHRoaXMudG9rZW5fdHlwZSxcclxuICAgICAgICAgICAgc2NvcGU6IHRoaXMuc2NvcGUsXHJcbiAgICAgICAgICAgIHByb2ZpbGU6IHRoaXMucHJvZmlsZSxcclxuICAgICAgICAgICAgZXhwaXJlc19hdDogdGhpcy5leHBpcmVzX2F0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXIuZnJvbVN0b3JhZ2VTdHJpbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVc2VyKEpTT04ucGFyc2Uoc3RvcmFnZVN0cmluZykpO1xyXG4gICAgfVxyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVXNlci5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgQWNjZXNzVG9rZW5FdmVudHMgZnJvbSAnLi9BY2Nlc3NUb2tlbkV2ZW50cyc7XHJcbmltcG9ydCBFdmVudCBmcm9tICcuL0V2ZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJNYW5hZ2VyRXZlbnRzIGV4dGVuZHMgQWNjZXNzVG9rZW5FdmVudHMge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzKSB7XHJcbiAgICAgICAgc3VwZXIoc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQgPSBuZXcgRXZlbnQoXCJVc2VyIGxvYWRlZFwiKTtcclxuICAgICAgICB0aGlzLl91c2VyVW5sb2FkZWQgPSBuZXcgRXZlbnQoXCJVc2VyIHVubG9hZGVkXCIpO1xyXG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3RXJyb3IgPSBuZXcgRXZlbnQoXCJTaWxlbnQgcmVuZXcgZXJyb3JcIik7XHJcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZE91dCA9IG5ldyBFdmVudChcIlVzZXIgc2lnbmVkIG91dFwiKTtcclxuICAgICAgICB0aGlzLl91c2VyU2Vzc2lvbkNoYW5nZWQgPSBuZXcgRXZlbnQoXCJVc2VyIHNlc3Npb24gY2hhbmdlZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkKHVzZXIsIHJhaXNlRXZlbnQ9dHJ1ZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXJFdmVudHMubG9hZFwiKTtcclxuICAgICAgICBzdXBlci5sb2FkKHVzZXIpO1xyXG4gICAgICAgIGlmIChyYWlzZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJMb2FkZWQucmFpc2UodXNlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdW5sb2FkKCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXJFdmVudHMudW5sb2FkXCIpO1xyXG4gICAgICAgIHN1cGVyLnVubG9hZCgpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5yYWlzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFVzZXJMb2FkZWQoY2IpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlVXNlckxvYWRlZChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQucmVtb3ZlSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFkZFVzZXJVbmxvYWRlZChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5hZGRIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIHJlbW92ZVVzZXJVbmxvYWRlZChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5yZW1vdmVIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRTaWxlbnRSZW5ld0Vycm9yKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5hZGRIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIHJlbW92ZVNpbGVudFJlbmV3RXJyb3IoY2IpIHtcclxuICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgX3JhaXNlU2lsZW50UmVuZXdFcnJvcihlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlckV2ZW50cy5fcmFpc2VTaWxlbnRSZW5ld0Vycm9yXCIsIGUubWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yYWlzZShlKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRVc2VyU2lnbmVkT3V0KGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZE91dC5hZGRIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIHJlbW92ZVVzZXJTaWduZWRPdXQoY2IpIHtcclxuICAgICAgICB0aGlzLl91c2VyU2lnbmVkT3V0LnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgX3JhaXNlVXNlclNpZ25lZE91dChlKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlckV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkT3V0XCIpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQucmFpc2UoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkVXNlclNlc3Npb25DaGFuZ2VkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlVXNlclNlc3Npb25DaGFuZ2VkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkKGUpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZFwiKTtcclxuICAgICAgICB0aGlzLl91c2VyU2Vzc2lvbkNoYW5nZWQucmFpc2UoZSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVXNlck1hbmFnZXJFdmVudHMuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuaW1wb3J0IFRpbWVyIGZyb20gJy4vVGltZXInO1xyXG5cclxuY29uc3QgRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gNjA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY2Nlc3NUb2tlbkV2ZW50cyB7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioe1xyXG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lLFxyXG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJpbmdUaW1lciA9IG5ldyBUaW1lcihcIkFjY2VzcyB0b2tlbiBleHBpcmluZ1wiKSxcclxuICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyZWRUaW1lciA9IG5ldyBUaW1lcihcIkFjY2VzcyB0b2tlbiBleHBpcmVkXCIpXHJcbiAgICB9ID0ge30pIHtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xyXG5cclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nID0gYWNjZXNzVG9rZW5FeHBpcmluZ1RpbWVyO1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZCA9IGFjY2Vzc1Rva2VuRXhwaXJlZFRpbWVyO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWQoY29udGFpbmVyKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX2NhbmNlbFRpbWVycygpO1xyXG5cclxuICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV2ZW50cyBpZiB0aGVyZSdzIGFuIGFjY2VzcyB0b2tlbiB3aGVyZSB3ZSBjYXJlIGFib3V0IGV4cGlyYXRpb25cclxuICAgICAgICBpZiAoY29udGFpbmVyLmFjY2Vzc190b2tlbikge1xyXG4gICAgICAgICAgICBsZXQgZHVyYXRpb24gPSBjb250YWluZXIuZXhwaXJlc19pbjtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJhY2Nlc3MgdG9rZW4gcHJlc2VudCwgcmVtYWluaW5nIGR1cmF0aW9uOlwiLCBkdXJhdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHVyYXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV4cGlyaW5nIGlmIHdlIHN0aWxsIGhhdmUgdGltZVxyXG4gICAgICAgICAgICAgICAgbGV0IGV4cGlyaW5nID0gZHVyYXRpb24gLSB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcclxuICAgICAgICAgICAgICAgIGlmIChleHBpcmluZyA8PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBleHBpcmluZyA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInJlZ2lzdGVyaW5nIGV4cGlyaW5nIHRpbWVyIGluOlwiLCBleHBpcmluZyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmluaXQoZXhwaXJpbmcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhbHdheXMgcmVnaXN0ZXIgZXhwaXJlZC4gaWYgaXQncyBuZWdhdGl2ZSwgaXQgd2lsbCBzdGlsbCBmaXJlXHJcbiAgICAgICAgICAgIGxldCBleHBpcmVkID0gZHVyYXRpb24gKyAxO1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcInJlZ2lzdGVyaW5nIGV4cGlyZWQgdGltZXIgaW46XCIsIGV4cGlyZWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuaW5pdChleHBpcmVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5sb2FkKCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiQWNjZXNzVG9rZW5FdmVudHMudW5sb2FkXCIpO1xyXG4gICAgICAgIHRoaXMuX2NhbmNlbFRpbWVycygpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBfY2FuY2VsVGltZXJzKCl7XHJcbiAgICAgICAgTG9nLmluZm8oXCJjYW5jZWxpbmcgZXhpc3RpbmcgYWNjZXNzIHRva2VuIHRpbWVyc1wiKTtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpO1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5jYW5jZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRBY2Nlc3NUb2tlbkV4cGlyaW5nKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5hZGRIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIHJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJpbmcoY2IpIHtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEFjY2Vzc1Rva2VuRXhwaXJlZChjYikge1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5hZGRIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIHJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJlZChjYikge1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5yZW1vdmVIYW5kbGVyKGNiKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9BY2Nlc3NUb2tlbkV2ZW50cy5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgR2xvYmFsIGZyb20gJy4vR2xvYmFsJztcclxuaW1wb3J0IEV2ZW50IGZyb20gJy4vRXZlbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIgZXh0ZW5kcyBFdmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSwgdGltZXIgPSBHbG9iYWwudGltZXIpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgICAgICB0aGlzLl90aW1lciA9IHRpbWVyO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoZHVyYXRpb24pIHtcclxuICAgICAgICB0aGlzLmNhbmNlbCgpO1xyXG5cclxuICAgICAgICBpZiAoZHVyYXRpb24gPD0gMCkge1xyXG4gICAgICAgICAgICBkdXJhdGlvbiA9IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90aW1lckhhbmRsZSA9IHRoaXMuX3RpbWVyLnNldFRpbWVvdXQodGhpcy5fY2FsbGJhY2suYmluZCh0aGlzKSwgZHVyYXRpb24gKiAxMDAwKTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVySGFuZGxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyLmNsZWFyVGltZW91dCh0aGlzLl90aW1lckhhbmRsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVySGFuZGxlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2NhbGxiYWNrKCkge1xyXG4gICAgICAgIHRoaXMuX3RpbWVySGFuZGxlID0gbnVsbDtcclxuICAgICAgICBzdXBlci5yYWlzZSgpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1RpbWVyLmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEhhbmRsZXIoY2IpIHtcclxuICAgICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlSGFuZGxlcihjYikge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLl9jYWxsYmFja3MuZmluZEluZGV4KGl0ZW0gPT4gaXRlbSA9PT0gY2IpO1xyXG4gICAgICAgIGlmIChpZHggPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3Muc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJhaXNlKC4uLnBhcmFtcykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUmFpc2luZyBldmVudDogXCIgKyB0aGlzLl9uYW1lKTtcclxuICAgICAgICBmb3IgKHZhciBjYiBvZiB0aGlzLl9jYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgY2IoLi4ucGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvRXZlbnQuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpbGVudFJlbmV3U2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IodXNlck1hbmFnZXIpIHtcclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlciA9IHVzZXJNYW5hZ2VyO1xyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRBY2Nlc3NUb2tlbkV4cGlyaW5nKHRoaXMuX3Rva2VuRXhwaXJpbmcuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMgd2lsbCB0cmlnZ2VyIGxvYWRpbmcgb2YgdGhlIHVzZXIgc28gdGhlIGV4cGlyaW5nIGV2ZW50cyBjYW4gYmUgaW5pdGlhbGl6ZWRcclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5nZXRVc2VyKCkudGhlbih1c2VyPT57XHJcbiAgICAgICAgICAgIC8vIGRlbGliZXJhdGUgbm9wXHJcbiAgICAgICAgfSkuY2F0Y2goZXJyPT57XHJcbiAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiRXJyb3IgZnJvbSBnZXRVc2VyOlwiLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF90b2tlbkV4cGlyaW5nKCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiU2lsZW50UmVuZXdTZXJ2aWNlIGF1dG9tYXRpY2FsbHkgcmVuZXdpbmcgYWNjZXNzIHRva2VuXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLnNpZ25pblNpbGVudCgpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiU2lsZW50IHRva2VuIHJlbmV3YWwgc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJFcnJvciBmcm9tIHNpZ25pblNpbGVudDpcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlU2lsZW50UmVuZXdFcnJvcihlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1NpbGVudFJlbmV3U2VydmljZS5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgQ2hlY2tTZXNzaW9uSUZyYW1lIGZyb20gJy4vQ2hlY2tTZXNzaW9uSUZyYW1lJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlc3Npb25Nb25pdG9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih1c2VyTWFuYWdlciwgQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciA9IENoZWNrU2Vzc2lvbklGcmFtZSkge1xyXG4gICAgICAgIGlmICghdXNlck1hbmFnZXIpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gdXNlciBtYW5hZ2VyIHBhc3NlZCB0byBTZXNzaW9uTW9uaXRvclwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXNlck1hbmFnZXJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlciA9IHVzZXJNYW5hZ2VyO1xyXG4gICAgICAgIHRoaXMuX0NoZWNrU2Vzc2lvbklGcmFtZUN0b3IgPSBDaGVja1Nlc3Npb25JRnJhbWVDdG9yO1xyXG5cclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuYWRkVXNlckxvYWRlZCh0aGlzLl9zdGFydC5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuYWRkVXNlclVubG9hZGVkKHRoaXMuX3N0b3AuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmdldFVzZXIoKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQodXNlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAvLyBjYXRjaCB0byBzdXBwcmVzcyBlcnJvcnMgc2luY2Ugd2UncmUgaW4gYSBjdG9yXHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yIGN0b3I7IGVycm9yIGZyb20gZ2V0VXNlcjpcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBfc2V0dGluZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLnNldHRpbmdzO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9tZXRhZGF0YVNlcnZpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLm1ldGFkYXRhU2VydmljZTtcclxuICAgIH1cclxuICAgIGdldCBfY2xpZW50X2lkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XHJcbiAgICB9XHJcbiAgICBnZXQgX2NoZWNrU2Vzc2lvbkludGVydmFsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jaGVja1Nlc3Npb25JbnRlcnZhbDtcclxuICAgIH1cclxuXHJcbiAgICBfc3RhcnQodXNlcikge1xyXG4gICAgICAgIGxldCBzZXNzaW9uX3N0YXRlID0gdXNlci5zZXNzaW9uX3N0YXRlO1xyXG5cclxuICAgICAgICBpZiAoc2Vzc2lvbl9zdGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWIgPSB1c2VyLnByb2ZpbGUuc3ViO1xyXG4gICAgICAgICAgICB0aGlzLl9zaWQgPSB1c2VyLnByb2ZpbGUuc2lkO1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlNlc3Npb25Nb25pdG9yLl9zdGFydDsgc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbl9zdGF0ZSwgXCIsIHN1YjpcIiwgdGhpcy5fc3ViKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0Q2hlY2tTZXNzaW9uSWZyYW1lKCkudGhlbih1cmwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJJbml0aWFsaXppbmcgY2hlY2sgc2Vzc2lvbiBpZnJhbWVcIilcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9jbGllbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9IHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lID0gbmV3IHRoaXMuX0NoZWNrU2Vzc2lvbklGcmFtZUN0b3IodGhpcy5fY2FsbGJhY2suYmluZCh0aGlzKSwgY2xpZW50X2lkLCB1cmwsIGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb25fc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLndhcm4oXCJObyBjaGVjayBzZXNzaW9uIGlmcmFtZSBmb3VuZCBpbiB0aGUgbWV0YWRhdGFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjYXRjaCB0byBzdXBwcmVzcyBlcnJvcnMgc2luY2Ugd2UncmUgaW4gbm9uLXByb21pc2UgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJFcnJvciBmcm9tIGdldENoZWNrU2Vzc2lvbklmcmFtZTpcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RhcnQoc2Vzc2lvbl9zdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX3N0b3AoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJTZXNzaW9uTW9uaXRvci5fc3RvcFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fc3ViID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9zaWQgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZS5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9jYWxsYmFjaygpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFja1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzKCkudGhlbihzZXNzaW9uID0+IHtcclxuICAgICAgICAgICAgdmFyIHJhaXNlVXNlclNpZ25lZE91dEV2ZW50ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdWIgPT09IHRoaXMuX3N1Yikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhaXNlVXNlclNpZ25lZE91dEV2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb24uc2Vzc2lvbl9zdGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLnNpZCA9PT0gdGhpcy5fc2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiU2FtZSBzdWIgc3RpbGwgbG9nZ2VkIGluIGF0IE9QLCByZXN0YXJ0aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lOyBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiU2FtZSBzdWIgc3RpbGwgbG9nZ2VkIGluIGF0IE9QLCBzZXNzaW9uIHN0YXRlIGhhcyBjaGFuZ2VkLCByZXN0YXJ0aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lOyBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJEaWZmZXJlbnQgc3ViamVjdCBzaWduZWQgaW50byBPUDpcIiwgc2Vzc2lvbi5zdWIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJTdWJqZWN0IG5vIGxvbmdlciBzaWduZWQgaW50byBPUFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJhaXNlVXNlclNpZ25lZE91dEV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazsgcmFpc2luZyBzaWduZWQgb3V0IGV2ZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiRXJyb3IgY2FsbGluZyBxdWVyeUN1cnJlbnRTaWduaW5TZXNzaW9uOyByYWlzaW5nIHNpZ25lZCBvdXQgZXZlbnRcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlVXNlclNpZ25lZE91dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1Nlc3Npb25Nb25pdG9yLmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcblxyXG5jb25zdCBEZWZhdWx0SW50ZXJ2YWwgPSAyMDAwO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlY2tTZXNzaW9uSUZyYW1lIHtcclxuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCBjbGllbnRfaWQsIHVybCwgaW50ZXJ2YWwpIHtcclxuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IGNsaWVudF9pZDtcclxuICAgICAgICB0aGlzLl91cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBpbnRlcnZhbCB8fCBEZWZhdWx0SW50ZXJ2YWw7XHJcblxyXG4gICAgICAgIHZhciBpZHggPSB1cmwuaW5kZXhPZihcIi9cIiwgdXJsLmluZGV4T2YoXCIvL1wiKSArIDIpO1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lX29yaWdpbiA9IHVybC5zdWJzdHIoMCwgaWR4KTtcclxuXHJcbiAgICAgICAgdGhpcy5fZnJhbWUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5fZnJhbWUuc3JjID0gdXJsO1xyXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX21lc3NhZ2UoZSkge1xyXG4gICAgICAgIGlmIChlLm9yaWdpbiA9PT0gdGhpcy5fZnJhbWVfb3JpZ2luICYmXHJcbiAgICAgICAgICAgIGUuc291cmNlID09PSB0aGlzLl9mcmFtZS5jb250ZW50V2luZG93XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmRhdGEgPT09IFwiZXJyb3JcIil7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJlcnJvciBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlLmRhdGEgPT09IFwiY2hhbmdlZFwiKXtcclxuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiY2hhbmdlZCBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhlLmRhdGEgKyBcIiBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoc2Vzc2lvbl9zdGF0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZXNzaW9uX3N0YXRlICE9PSBzZXNzaW9uX3N0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiQ2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0XCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uX3N0YXRlID0gc2Vzc2lvbl9zdGF0ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UodGhpcy5fY2xpZW50X2lkICsgXCIgXCIgKyB0aGlzLl9zZXNzaW9uX3N0YXRlLCB0aGlzLl9mcmFtZV9vcmlnaW4pO1xyXG4gICAgICAgICAgICB9LCB0aGlzLl9pbnRlcnZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJDaGVja1Nlc3Npb25JRnJhbWUuc3RvcFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fc2Vzc2lvbl9zdGF0ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90aW1lcikge1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lcik7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvQ2hlY2tTZXNzaW9uSUZyYW1lLmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCBNZXRhZGF0YVNlcnZpY2UgZnJvbSAnLi9NZXRhZGF0YVNlcnZpY2UnO1xyXG5pbXBvcnQgR2xvYmFsIGZyb20gJy4vR2xvYmFsJztcclxuXHJcbmNvbnN0IEFjY2Vzc1Rva2VuVHlwZUhpbnQgPSBcImFjY2Vzc190b2tlblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBYTUxIdHRwUmVxdWVzdEN0b3IgPSBHbG9iYWwuWE1MSHR0cFJlcXVlc3QsIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UpIHtcclxuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIHNldHRpbmdzIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzZXR0aW5ncyBwcm92aWRlZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fWE1MSHR0cFJlcXVlc3RDdG9yID0gWE1MSHR0cFJlcXVlc3RDdG9yO1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXZva2UoYWNjZXNzVG9rZW4sIHJlcXVpcmVkKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlXCIpO1xyXG5cclxuICAgICAgICBpZiAoIWFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIGFjY2Vzc1Rva2VuIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhY2Nlc3NUb2tlbiBwcm92aWRlZC5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFJldm9jYXRpb25FbmRwb2ludCgpLnRoZW4odXJsID0+IHtcclxuICAgICAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJldm9jYXRpb24gbm90IHN1cHBvcnRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXZvY2F0aW9uIG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbm90IHJlcXVpcmVkLCBzbyBkb24ndCBlcnJvciBhbmQganVzdCByZXR1cm5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGNsaWVudF9pZCA9IHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZSh1cmwsIGNsaWVudF9pZCwgYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9yZXZva2UodXJsLCBjbGllbnRfaWQsIGFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJDYWxsaW5nIHJldm9jYXRpb24gZW5kcG9pbnRcIik7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IHRoaXMuX1hNTEh0dHBSZXF1ZXN0Q3RvcigpO1xyXG4gICAgICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIkhUVFAgcmVzcG9uc2UgcmVjZWl2ZWQsIHN0YXR1c1wiLCB4aHIuc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcih4aHIuc3RhdHVzVGV4dCArIFwiIChcIiArIHhoci5zdGF0dXMgKyBcIilcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGJvZHkgPSBcImNsaWVudF9pZD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbGllbnRfaWQpOyBcclxuICAgICAgICAgICAgYm9keSArPSBcIiZ0b2tlbl90eXBlX2hpbnQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoQWNjZXNzVG9rZW5UeXBlSGludCk7XHJcbiAgICAgICAgICAgIGJvZHkgKz0gXCImdG9rZW49XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XHJcbiAgICAgICAgICAgIHhoci5zZW5kKGJvZHkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1Rva2VuUmV2b2NhdGlvbkNsaWVudC5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgQ29yZG92YVBvcHVwV2luZG93IGZyb20gJy4vQ29yZG92YVBvcHVwV2luZG93JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvcmRvdmFQb3B1cE5hdmlnYXRvciB7XHJcbiAgICBcclxuICAgIHByZXBhcmUocGFyYW1zKSB7XHJcbiAgICAgICAgbGV0IHBvcHVwID0gbmV3IENvcmRvdmFQb3B1cFdpbmRvdyhwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0NvcmRvdmFQb3B1cE5hdmlnYXRvci5qc1xuICoqLyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCBMb2cgZnJvbSAnLi9Mb2cnO1xyXG5cclxuY29uc3QgRGVmYXVsdFBvcHVwRmVhdHVyZXMgPSAnbG9jYXRpb249bm8sdG9vbGJhcj1ubyx6b29tPW5vJztcclxuY29uc3QgRGVmYXVsdFBvcHVwVGFyZ2V0ID0gXCJfYmxhbmtcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvcmRvdmFQb3B1cFdpbmRvdyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJDb3Jkb3ZhUG9wdXBXaW5kb3cuY3RvclwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHBhcmFtcy5wb3B1cFdpbmRvd0ZlYXR1cmVzIHx8IERlZmF1bHRQb3B1cEZlYXR1cmVzO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gcGFyYW1zLnBvcHVwV2luZG93VGFyZ2V0IHx8IERlZmF1bHRQb3B1cFRhcmdldDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnJlZGlyZWN0X3VyaSA9IHBhcmFtcy5zdGFydFVybDtcclxuICAgICAgICBMb2cuaW5mbyhcInJlZGlyZWN0X3VyaTogXCIgKyB0aGlzLnJlZGlyZWN0X3VyaSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2lzSW5BcHBCcm93c2VySW5zdGFsbGVkKGNvcmRvdmFNZXRhZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBbXCJjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXJcIiwgXCJjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIuaW5hcHBicm93c2VyXCIsIFwib3JnLmFwYWNoZS5jb3Jkb3ZhLmluYXBwYnJvd3NlclwiXS5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3Jkb3ZhTWV0YWRhdGEuaGFzT3duUHJvcGVydHkobmFtZSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIkNvcmRvdmFQb3B1cFdpbmRvdy5uYXZpZ2F0ZVwiKTtcclxuXHJcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuY29yZG92YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKFwiY29yZG92YSBpcyB1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGNvcmRvdmFNZXRhZGF0YSA9IHdpbmRvdy5jb3Jkb3ZhLnJlcXVpcmUoXCJjb3Jkb3ZhL3BsdWdpbl9saXN0XCIpLm1ldGFkYXRhO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNJbkFwcEJyb3dzZXJJbnN0YWxsZWQoY29yZG92YU1ldGFkYXRhKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcihcIkluQXBwQnJvd3NlciBwbHVnaW4gbm90IGZvdW5kXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAgPSBjb3Jkb3ZhLkluQXBwQnJvd3Nlci5vcGVuKHBhcmFtcy51cmwsIHRoaXMudGFyZ2V0LCB0aGlzLmZlYXR1cmVzKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInBvcHVwIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCA9IHRoaXMuX2V4aXRDYWxsYmFjay5iaW5kKHRoaXMpOyBcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRTdGFydENhbGxiYWNrRXZlbnQgPSB0aGlzLl9sb2FkU3RhcnRDYWxsYmFjay5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiZXhpdFwiLCB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRzdGFydFwiLCB0aGlzLl9sb2FkU3RhcnRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvcihcIkVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgX2xvYWRTdGFydENhbGxiYWNrKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnVybC5pbmRleE9mKHRoaXMucmVkaXJlY3RfdXJpKSA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWNjZXNzKHsgdXJsOiBldmVudC51cmwgfSk7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuICAgIF9leGl0Q2FsbGJhY2sobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuX2Vycm9yKG1lc3NhZ2UpOyAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgX3N1Y2Nlc3MoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmluZm8oXCJTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gY29yZG92YSBwb3B1cCB3aW5kb3dcIik7XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZShkYXRhKTtcclxuICAgIH1cclxuICAgIF9lcnJvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG5cclxuICAgICAgICBMb2cuZXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5fcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NsZWFudXAoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJDb3Jkb3ZhUG9wdXBXaW5kb3cuX2NsZWFudXBcIik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wb3B1cCl7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJleGl0XCIsIHRoaXMuX2V4aXRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIiwgdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wb3B1cCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvQ29yZG92YVBvcHVwV2luZG93LmpzXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IExvZyBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCBDb3Jkb3ZhUG9wdXBXaW5kb3cgZnJvbSAnLi9Db3Jkb3ZhUG9wdXBXaW5kb3cnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29yZG92YUlGcmFtZU5hdmlnYXRvciB7XHJcbiAgICBcclxuICAgIHByZXBhcmUocGFyYW1zKSB7XHJcbiAgICAgICAgcGFyYW1zLnBvcHVwV2luZG93RmVhdHVyZXMgPSAnaGlkZGVuPXllcyc7XHJcbiAgICAgICAgbGV0IHBvcHVwID0gbmV3IENvcmRvdmFQb3B1cFdpbmRvdyhwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0NvcmRvdmFJRnJhbWVOYXZpZ2F0b3IuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuaW1wb3J0IEVsZWN0cm9uUG9wdXBXaW5kb3cgZnJvbSAnLi9FbGVjdHJvblBvcHVwV2luZG93JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZWN0cm9uUG9wdXBOYXZpZ2F0b3Ige1xyXG4gICAgXHJcbiAgICBwcmVwYXJlKHBhcmFtcykge1xyXG4gICAgICAgIGxldCBwb3B1cCA9IG5ldyBFbGVjdHJvblBvcHVwV2luZG93KHBhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwb3B1cCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbGJhY2sodXJsKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJQb3B1cE5hdmlnYXRvci5jYWxsYmFja1wiKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgRWxlY3Ryb25Qb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXIodXJsKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0VsZWN0cm9uUG9wdXBOYXZpZ2F0b3IuanNcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuXHJcbmNvbnN0IENoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCA9IDUwMDtcclxuY29uc3QgRGVmYXVsdFBvcHVwRmVhdHVyZXMgPSAnbG9jYXRpb249bm8sdG9vbGJhcj1ubyx6b29tPW5vJztcclxuY29uc3QgRGVmYXVsdFBvcHVwVGFyZ2V0ID0gXCJfYmxhbmtcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZWN0cm9uUG9wdXBXaW5kb3cge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xyXG4gICAgICAgIExvZy5pbmZvKFwiRWxlY3Ryb25Qb3B1cFdpbmRvdy5jdG9yXCIpO1xyXG5cclxuICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmVsZWN0cm9uID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcclxuICAgICAgICB0aGlzLmVsZWN0cm9uQ29udGFpbmVyID0gdGhpcy5lbGVjdHJvbi5yZW1vdGU7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcHVwID0gbmV3IHRoaXMuZWxlY3Ryb25Db250YWluZXIuQnJvd3NlcldpbmRvdyhcclxuICAgICAgICAgICAgLy8ge1xyXG4gICAgICAgICAgICAvLyAgICAgXCJ3ZWItcHJlZmVyZW5jZXNcIjoge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIFwid2ViLXNlY3VyaXR5XCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgIFwic2FuZGJveFwiOiB0cnVlXHJcbiAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB2YXIgcG9wdXAgPSB0aGlzLl9wb3B1cDtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgLy8gd2luZG93Lm9uKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvL2NvbnN0IHtpcGNNYWlufSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XHJcbiAgICAgICAgdmFyIGlwY01haW4gPSB0aGlzLmVsZWN0cm9uQ29udGFpbmVyLmlwY01haW47XHJcbiAgICAgICAgaWYoaXBjTWFpbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiY29uZmlndXJpbmcgZWxlY3Ryb24gcmVjZWl2ZXJcIik7XHJcbiAgICAgICAgICAgIGlwY01haW4ub24oJ3N5bmNocm9ub3VzLW1lc3NhZ2UnLCAoZXZlbnQsIGFyZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJyZWNlaXZpbmcgdXJsXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VjY2Vzcyh7IHVybDogYXJnIH0pO1xyXG4gICAgICAgICAgICAgICAgcG9wdXAuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwicG9wdXAgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrRm9yUG9wdXBDbG9zZWRUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkLmJpbmQodGhpcyksIENoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlBvcHVwV2luZG93Lm5hdmlnYXRlXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiRXJyb3Igb3BlbmluZyBwb3B1cCB3aW5kb3dcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlNldHRpbmcgVVJMIGluIHBvcHVwXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgLy8gdGhpcy5fcG9wdXAud2ViQ29udGVudHMub24oJ2RpZC1maW5pc2gtbG9hZCcsICgpID0+IHtcclxuICAgICAgICAgICAgLy8gICAgIExvZy5pbmZvKCdkaWQtZmluaXNoLWxvYWQhJyk7XHJcbiAgICAgICAgICAgIC8vICAgICB2YXIgdXJsTG9jYXRpb24gPSB0aGlzLl9wb3B1cC5sb2NhdGlvbi5ocmVmO1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5fc3VjY2Vzcyh7IHVybDogdXJsTG9jYXRpb24gfSk7XHJcbiAgICAgICAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAubG9hZFVSTChwYXJhbXMudXJsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgX3N1Y2Nlc3MoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmluZm8oXCJTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gcG9wdXAgd2luZG93XCIpO1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBfZXJyb3IobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuX3JlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhbnVwKCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUG9wdXBXaW5kb3cuX2NsZWFudXBcIik7XHJcblxyXG4gICAgICAgIC8vd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudHNzYWdlID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5fcG9wdXAgJiYgIXRoaXMuX3BvcHVwLmlzRGVzdHJveWVkKCkpe1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wb3B1cCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrRm9yUG9wdXBDbG9zZWQoKSB7XHJcbiAgICAgICAgTG9nLmluZm8oXCJQb3B1cFdpbmRvdy5fY2hlY2tGb3JQb3B1cENsb3NlZFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9wb3B1cCB8fCB0aGlzLl9wb3B1cC5pc0Rlc3Ryb3llZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXAgd2luZG93IGNsb3NlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX21lc3NhZ2UoZSkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUG9wdXBXaW5kb3cuX21lc3NhZ2VcIik7XHJcblxyXG4gICAgICAgIGlmIChlLm9yaWdpbiA9PT0gdGhpcy5fb3JpZ2luICYmXHJcbiAgICAgICAgICAgIGUuc291cmNlID09PSB0aGlzLl9wb3B1cC53aW5kb3dcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJwcm9jZXNzaW5nIG1lc3NhZ2VcIik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgdXJsID0gZS5kYXRhIHx8IGUuc291cmNlLmxvY2F0aW9uLmhyZWY7IC8vIGZvciBJRTlcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIHBvcHVwXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBfb3JpZ2luKCkge1xyXG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG5vdGlmeU9wZW5lcih1cmwpIHtcclxuICAgICAgICBMb2cuaW5mbyhcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lclwiKTtcclxuXHJcbiAgICAgICAgdmFyIGVsZWN0cm9uID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcclxuICAgICAgICBjb25zdCBpcGNSZW5kZXJlciA9IGVsZWN0cm9uLmlwY1JlbmRlcmVyO1xyXG4gICAgICAgIGlmKGlwY1JlbmRlcmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcInBvc3RpbmcgdXJsIG1lc3NhZ2UgdG8gb3BlbmVyXCIpO1xyXG5cclxuICAgICAgICAgICAgaXBjUmVuZGVyZXIuc2VuZCgnc3luY2hyb25vdXMtbWVzc2FnZScsIHVybCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZW1vdGUgPSBlbGVjdHJvbi5yZW1vdGU7XHJcbiAgICAgICAgICAgIHZhciB3aW5kb3cgPSByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpO1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL0VsZWN0cm9uUG9wdXBXaW5kb3cuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJlbGVjdHJvblwiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwiZWxlY3Ryb25cIlxuICoqIG1vZHVsZSBpZCA9IDQzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgTG9nIGZyb20gJy4vTG9nJztcclxuaW1wb3J0IEVsZWN0cm9uUG9wdXBXaW5kb3cgZnJvbSAnLi9FbGVjdHJvblBvcHVwV2luZG93JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZWN0cm9uSUZyYW1lTmF2aWdhdG9yIHtcclxuICAgIFxyXG4gICAgcHJlcGFyZShwYXJhbXMpIHtcclxuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgRWxlY3Ryb25Qb3B1cFdpbmRvdyhwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIExvZy5pbmZvKFwiUG9wdXBOYXZpZ2F0b3IuY2FsbGJhY2tcIik7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIEVsZWN0cm9uUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyKHVybCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9FbGVjdHJvbklGcmFtZU5hdmlnYXRvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=